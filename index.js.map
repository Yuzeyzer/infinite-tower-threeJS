{"version":3,"sources":["../../../../../AppData/Roaming/npm/node_modules/canvas-sketch-cli/node_modules/browser-pack/_prelude.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/object-assign/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/right-now/browser.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-promise/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-dom/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/util.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/repeat-string/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/keys.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/is_arguments.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/dateformat/lib/dateformat.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/pad-left/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/save.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/accessibility.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/paper-sizes.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/defined/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/convert-length/convert-length.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/distances.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/resizeCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/get-canvas-context/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/createCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/SketchManager.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/keyboardShortcuts.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/canvas-sketch.js","node_modules/three/build/three.js","node_modules/three/examples/js/controls/OrbitControls.js","sketches/getBrick.js","sketches/index.js","canvas-sketch-cli/injected/storage-key.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","objectAssign","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","join","test3","split","forEach","letter","keys","err","shouldUseNative","target","source","from","symbols","to","val","TypeError","toObject","s","arguments","key","browser","commonjsGlobal","performance","now","Date","isPromise_1","obj","then","isDom","window","Node","nodeType","nodeName","getClientAPI","defined","arguments$1","isBrowser","document","cache","shim","push","supportsArgumentsClass","toString","supported","object","unsupported","pSlice","Array","slice","deepEqual","actual","expected","opts","getTime","strict","b","isUndefinedOrNull","is_arguments","isBuffer","ka","kb","sort","objEquiv","value","x","copy","global","token","timezone","timezoneClip","dateFormat","date","mask","utc","gmt","undefined","isArray","toLowerCase","test","isNaN","maskSlice","masks","_","d","D","m","y","H","M","L","getTimezoneOffset","W","targetThursday","getFullYear","getMonth","getDate","setDate","getDay","firstThursday","ds","setHours","getHours","Math","floor","getWeek","N","dow","getDayOfWeek","flags","dd","pad","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","round","timeNames","tt","T","TT","Z","match","pop","replace","abs","S","len","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","expiresHeaderFormat","res","repeatString","str","num","max","substr","link","padLeft","ch","noop","defaultExts","extension","prefix","suffix","supportedEncodings","stream","isStart","Promise","resolve","reject","filename","resolveFilename","frame","func","client","output","ev","saveDataURL","dataURL","splitIndex","indexOf","base64","byteString","atob","type","mimeMatch","exec","mime","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","createBlobFromDataURL","blob","saveBlob","createElement","style","visibility","download","href","URL","createObjectURL","body","appendChild","onclick","setTimeout","revokeObjectURL","parentElement","removeChild","removeAttribute","click","opt","file","totalFrames","layerStr","isFinite","totalLayers","layer","filter","Boolean","name","timeStamp","hash","commonTypos","dimension","animated","animating","unit","P5","pixellated","looping","pixelPerInch","allKeys","checkSettings","settings","console","warn","includes","paperSizes","reduce","dict","preset","item","units","dimensions","defined$1","conversions","system","factor","cm","pt","pc","in","ft","anchors","metric","ratio","imperial","convertLength","fromUnit","toUnit","pixelsPerInch","precision","roundPixel","toFactor","fromFactor","isToPixel","fromUnitData","toUnitData","anchor","result","decimals","Number","convertDistance$1","unitsFrom","unitsTo","resizeCanvas","props","width","height","styleWidth","styleHeight","canvasWidth","canvasHeight","hasDimensions","checkIfHasDimensions","exporting","scaleToFit","scaleToView","pixelRatio","exportPixelRatio","bleed","devicePixelRatio","basePixelRatio","maxPixelRatio","min","trimWidth","trimHeight","ref","element","parent","innerWidth","innerHeight","getBoundingClientRect","getParentSize","parentWidth","parentHeight","getDimensionsFromPreset","highest","lowest","orientation","landscape","realWidth","realHeight","aspect","windowAspect","scaleToFitPadding","maxWidth","maxHeight","getCanvasContext_1","canvas","gl","attribs","names","getContext","createCanvas","context","ownsCanvas","newCanvas","createCanvasElement","attributes","pixelated","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","SketchManager","_settings","_props","_sketch","_raf","_recordTimeout","_lastRedrawResult","_isP5Resizing","_keyboardShortcuts","handler","enabled","keyCode","altKey","metaKey","ctrlKey","togglePlay","preventDefault","commit","save","addEventListener","removeEventListener","keyboardShortcuts","this$1","hotkeys","shiftKey","recording","endRecord","run","record","exportFrame","playing","pause","play","_animateHandler","animate","_resizeHandler","resize","render","sketch","get","this","_computePlayhead","currentTime","duration","_computeFrame","playhead","time","fps","_computeCurrentFrame","_getSizeProps","viewportWidth","viewportHeight","dispose","started","_signalBegin","tick","_cancelTimeouts","cancelAnimationFrame","_lastTime","requestAnimationFrame","error","stop","deltaTime","exportOpts","_createExportOptions","frameInterval","log","_signalEnd","beginRecord","_wrapContextScale","catch","response","begin","end","wasRecording","sequence","encoding","encodingQuality","dateformat","all","preExport","commitOpts","_doExportFrame","drawResult","concat","hasDataObject","data","toDataURL","exportCanvas","layerList","curOpt","saveParam","k","savePromise","parts","saveFile","saveResult","savedEvents","eventWithOutput","find","outputName","isClient","some","isStreaming","ofSeq","postExport","cb","_preRender","_postRender","p5","scale","scaleX","scaleY","scaleContext","restore","flush","redraw","submitDrawCall","update","notYetSupported","oldCanvas","oldContext","timeOpts","timeProps","getTimeProps","_setupGLKey","_appendCanvasIfNeeded","draw","oldSizes","newProps","pixelDensity","styleCanvas","newSizes","changed","deepEqual_1","_sizeChanged","frameIntervalMS","deltaTimeMS","hasDuration","isNewFrame","playbackRate","newTime","timeScale","isFinished","isLoopStart","loop","lastFrame","dispatch","mount","unmount","detach","ctx","clear","clearColor","bufferData","hasTotalFrames","totalFramesFromDuration","durationFromTotalFrames","Infinity","startTime","startFrame","hasStartTime","hasStartFrame","setup","loadAndRun","canvasSketch","newSettings","load","unload","destroy","createSketch","preload","P5Constructor","p5Sketch","isGL","renderer","WEBGL","P2D","noLoop","setAttributes","_renderer","drawingContext","loader","attach","message","CACHE","runtimeCollisions","hotID","isHot","hot","id","isInjecting","previousData","cacheGet","next","oldManager","manager","PaperSizes","factory","EPSILON","pow","isInteger","sign","Function","defineProperty","index","nextKey","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","EventDispatcher","listener","_listeners","listeners","hasEventListener","listenerArray","splice","dispatchEvent","event","array","_lut","_canvas","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","Vector2","Matrix3","elements","defineProperties","isVector2","setScalar","scalar","setX","setY","setComponent","getComponent","clone","constructor","v","add","w","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","getInverse","matrix","throwOnDegenerate","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","rotate","theta","translate","ImageUtils","getDataURL","image","src","HTMLCanvasElement","createElementNS","ImageData","putImageData","drawImage","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","uuid","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","z","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","Quaternion","_x","_y","_z","_w","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","transformUv","uv","isVector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","zz","xy","xz","yz","getZ","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","tDir","multiplyQuaternionsFlat","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","isEuler","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","s$1","s$2","s$3","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","Vector3","_quaternion","isVector3","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","_v1","_m1","Matrix4","_zero","_one","isMatrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","makeBasis","extractRotation","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ce$1","cf$1","de$1","df$1","ae$1","af$1","be$1","bf$1","ac","ad","bc","bd","ac$1","ad$1","bc$1","bd$1","makeRotationFromQuaternion","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","DefaultOrder","_order","Layers","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Scene","background","environment","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","remove","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","JSON","stringify","isInstancedMesh","count","instanceMatrix","isMesh","isLine","isPoints","geometry","parameters","material","uuids","i$1","l$1","i$2","extractFromCache","shapes$1","values","recursive","parse","isScene","_points","_vector$1","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","union","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","getBoundingSphere","intersect","_box$1","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","handleAlpha","string","parseFloat","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","normalized","NAMES","il$1","materialId","Material","blending","side","flatShading","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","customProgramCacheKey","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","_vector2$1","BufferAttribute","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","vertexUvs$1","morphTarget","j$1","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","attribute$1","attribute$2","attribute$3","lineDistancesNeedUpdate","attribute$4","lineDistance","fromDirectGeometry","morphAttributesPosition","il$2","morphAttribute$1","jl","computeFaceNormals","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","vA","vB","vC","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","indices","array2","geometry2","newAttribute","name$1","morphArray","morphAttribute","newAttribute$1","key$1","attributeData","hasMorphAttributes","key$2","attributeArray","attributeData$1","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","isSkinnedMesh","boneTransform","intersection","morphTargetDictionary","ml","intersects","groupMaterial","faceIndex","a$1","b$1","c$1","group$1","groupMaterial$1","jl$1","i$3","il$3","isMultiMaterial","fl","faceMaterial","fvA","fvB","fvC","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","fromBufferGeometry","scope","addFace","areaWeighted","vl","f$1","fl$1","face$1","v$1","vl$1","f$2","fl$2","face$2","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","vertexNormals$1","f$3","fl$3","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","j$2","jl$2","uvsCopy","kl","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","uvs1","vertex","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","i$4","il$4","i$5","il$5","j$3","jl$3","srcVertexNormal","destVertexNormal","j$4","jl$4","i$6","il$6","i$7","il$7","i$8","il$8","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy$1","ix$1","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","PerspectiveCamera","fov","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","stencil","WebGLCubeRenderTarget","dummy","DataTexture","fromEquirectangularTexture","shader","tEquirect","isDataTexture","_sphere$1","_vector$5","Frustum","p4","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","UniformsLib","common","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","state","objects","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","reset","resetDefaultState","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","isInstancedBufferAttribute","buffer$1","type$1","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","buffergeometry","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphInfluencesSum","influence$1","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","subscript","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","generateExtensions","customDefines","chunks","generateDefines","createProgram","isRawShaderMaterial","shaderName","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","deleteShader","getActiveAttrib","getAttribLocation","fetchAttributeLocations","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","nClipPlanes","nClipIntersection","isMeshStandardMaterial","bones","skeleton","nVertexMatrices","allocateBones","shaderobject","getShaderObject","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","finish","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","onSceneDispose","list","cameras","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","uniforms$1","penumbra","shadow$1","shadowUniforms$1","isRectAreaLight","uniforms$2","isPointLight","uniforms$3","shadow$2","shadowUniforms$2","isHemisphereLight","uniforms$4","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","has","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","depthMaterial$1","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","activeTexture","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","onTextureDispose","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","mipmapImage","setTextureCubeDynamic","wrappingToGL","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","samples$1","glInternalFormat$1","samples$2","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","createFramebuffer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","Group","WebXRController","_targetRay","_grip","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","disconnect","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","updateInputSources","inputSources","removed","added","inputSource$1","controller$1","getController","getTargetRaySpace","getControllerGrip","getGripSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","getContextAttributes","xrCompatible","makeXRCompatible","baseLayer","XRWebGLLayer","antialias","updateRenderState","requestReferenceSpace","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","transform","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","sortObjects","toneMappingExposure","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clipping","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","initGLContext","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","material2","initMaterial","renderObjects","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","materialNeedsLights","progUniforms","uniformsList","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","ltc_1","LTC_1","ltc_2","LTC_2","projectObject","isGroup","isLOD","geometry$1","material$1","opaqueObjects","transparentObjects","_webglFramebuffer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","WebGL1Renderer","FogExp2","Fog","InterleavedBuffer","inputPose","gripPose","targetRay","grip","getPose","targetRaySpace","gripSpace","isInterleavedBuffer","arrayBuffers","_uuid","ib","_geometry","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","basePosition","skinIndex","skinWeight","_v1$4","_v2$2","LOD","_currentLevel","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getCurrentLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","weight","boneIndex","boneInverses","_offsetMatrix","_identityMatrix","Skeleton","Bone","bone","bone$1","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","lineDistances$1","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distance$1","nbVertices","distance$2","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","edge","edges","edge1","edge2","vertex$1","ol","edge1$1","edge2$1","key$3","e$1","position$1","l$2","ParametricGeometry","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","shape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","hl","ahole","h$1","hl$1","scalePt2","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","h$2","hl$2","ahole$2","k$1","bs$1","vert","h$3","hl$3","ahole$3","vert$1","bs","vert$2","vert$3","t$1","z$1","bs$2","vert$4","h$4","hl$4","ahole$4","vert$5","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","face$3","buildLidFaces","buildSideFaces","indexA","indexB","indexC","b_x","b_y","c_x","c_y","indexD","a_x","a_y","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","radiusStep","segment","thetaSegmentLevel","segment$1","LatheGeometry","segments","LatheBufferGeometry","inverseSegments","base","n1","n2","base$1","ShapeGeometry","ShapeBufferGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","l$3","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","x$1","cosTheta","sinTheta","x$2","slope","indexRow","y$1","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","endFrame","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","referenceValue","interpolant","createInterpolant","evaluate","resultBuffer","numTimes","valueStart","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","parseKeyframeTrack","json","trackType","typeName","getTrackTypeForValueTypeName","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","giveUpAt$1","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","readOffset$1","writeOffset$1","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","m$1","animationKey","boneName","Cache","files","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","DefaultLoadingManager","Loader","crossOrigin","resourcePath","requestHeader","loadAsync","setCrossOrigin","setPath","setResourcePath","setRequestHeader","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","cached","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","responseType","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","callback$1","withCredentials","overrideMimeType","send","setResponseType","setWithCredentials","setMimeType","loaded","loadTexture","texDatas","mipmapCount","isCubemap","texData","onImageLoad","onImageError","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","theta$1","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","SphericalHarmonics3","LightProbe","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","isSphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","TYPED_ARRAYS","typedArray","bufferAttribute","typedArray$1","bufferAttribute$1","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","geometryShapes","bufferGeometryLoader","details","loadImage","currentUrl","path$1","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","child","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","isImageBitmapLoader","setOptions","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sIdx$1","sLen$1","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","getElapsedTime","getDelta","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loopStart","loopEnd","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","filters","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","accumulateAdditive","weightAdditive","saveOriginalState","originalValueOffset","getValue","restoreOriginalState","startIndex","endIndex","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCachedIndex","firstActiveObject","uncache","lastObject","lastIndex$1","lastObject$1","bindingsForPath$1","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$7","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","_vector$8","SpotLightHelper","cone","coneLength","coneWidth","_vector$9","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","isSkeletonHelper","_vector$a","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","color$1","_v1$5","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$b","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","_flatCamera","_lodPlanes","_sizeLods","_sigmas","lod","sizeLod","sigma","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","_createPlanes","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","weights","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","_compileMaterial","_isLDR","_createRenderTarget","cubeUVRenderTarget","_setViewport","_getEquirectShader","_getCubemapShader","ClosedSplineCurve3","SplineCurve3","Spline","fromScene","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","cubemap","compileCubemapShader","compileEquirectangularShader","outputTarget","_textureToCubeUV","tmpMesh","cubeCamera","upSign","forwardSign","maxComponent","fExp","log2","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","revision","AdditiveAnimationBlendMode","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","FrontFaceDirectionCCW","FrontFaceDirectionCW","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","define","amd","self","THREE","OrbitControls","quat","quatInverse","lastPosition","lastQuaternion","twoPI","minDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","UP","BOTTOM","mouseButtons","touches","ONE","TWO","target0","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","saveState","changeEvent","STATE","NONE","rotateLeft","sphericalDelta","panOffset","zoomChanged","EPS","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","ownerDocument","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","targetDistance","clientHeight","clientWidth","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","handleTouchMoveRotate","handleTouchMovePan","handleTouchMoveDolly","mouseAction","button","handleMouseDownDolly","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","handleKeyDown","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","tabIndex","MapControls","number","odd","_getBrick","easeInQuart","controls","getBrick","duplicate","row","[object Object]","CANVAS_SKETCH_DEFAULT_STORAGE_KEY","location"],"mappings":"CAAA,WAAA,OAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,GAAA,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,gKCQA,IAAIK,EAAwBC,OAAOD,sBAC/BE,EAAiBD,OAAOE,UAAUD,eAClCE,EAAmBH,OAAOE,UAAUE,qBAsDxC,IAAAC,EA5CA,WACC,IACC,IAAKL,OAAOM,OACX,OAAO,EAMR,IAAIC,EAAQ,IAAIC,OAAO,OAEvB,GADAD,EAAM,GAAK,KACkC,MAAzCP,OAAOS,oBAAoBF,GAAO,GACrC,OAAO,EAKR,IADA,IAAIG,EAAQ,GACHzB,EAAI,EAAGA,EAAI,GAAIA,IACvByB,EAAM,IAAMF,OAAOG,aAAa1B,IAAMA,EAKvC,GAAwB,eAHXe,OAAOS,oBAAoBC,GAAOE,IAAI,SAAU9B,GAC5D,OAAO4B,EAAM5B,KAEH+B,KAAK,IACf,OAAO,EAIR,IAAIC,EAAQ,GAIZ,MAHA,uBAAuBC,MAAM,IAAIC,QAAQ,SAAUC,GAClDH,EAAMG,GAAUA,IAGf,yBADEjB,OAAOkB,KAAKlB,OAAOM,OAAO,GAAIQ,IAAQD,KAAK,IAM9C,MAAOM,GAER,OAAO,GAIQC,GAAoBpB,OAAOM,OAAS,SAAUe,EAAQC,GAKtE,IAJA,IAAIC,EAEAC,EADAC,EAtDL,SAAkBC,GACjB,GAAIA,MAAAA,EACH,MAAM,IAAIC,UAAU,yDAGrB,OAAO3B,OAAO0B,GAiDLE,CAASP,GAGTQ,EAAI,EAAGA,EAAIC,UAAUlC,OAAQiC,IAAK,CAG1C,IAAK,IAAIE,KAFTR,EAAOvB,OAAO8B,UAAUD,IAGnB5B,EAAeN,KAAK4B,EAAMQ,KAC7BN,EAAGM,GAAOR,EAAKQ,IAIjB,GAAIhC,EAAuB,CAC1ByB,EAAUzB,EAAsBwB,GAChC,IAAK,IAAItC,EAAI,EAAGA,EAAIuC,EAAQ5B,OAAQX,IAC/BkB,EAAiBR,KAAK4B,EAAMC,EAAQvC,MACvCwC,EAAGD,EAAQvC,IAAMsC,EAAKC,EAAQvC,MAMlC,OAAOwC,kJCxFR,IAAAO,EACEC,EAAOC,aACPD,EAAOC,YAAYC,IAAM,WACvB,OAAOD,YAAYC,OACjBC,KAAKD,KAAO,WACd,OAAQ,IAAIC,MCLhBC,EAEA,SAAmBC,GACjB,QAASA,IAAuB,iBAARA,GAAmC,mBAARA,IAA2C,mBAAbA,EAAIC,MCHvF,IAAAC,EAEA,SAAiBd,GACf,SAASA,GAAsB,iBAARA,KAEA,iBAAXe,QAA8C,iBAAhBA,OAAOC,KAC1ChB,aAAee,OAAOC,KACE,iBAAjBhB,EAAIiB,UACa,iBAAjBjB,EAAIkB,WCJb,SAASC,IACd,MAAyB,oBAAXJ,QAA0BA,OAAO,qBAG1C,SAASK,IACd,oBAAS7D,EAAI,EAAGA,EAAI6C,UAAUlC,OAAQX,IACpC,GAAoB,MAAhB8D,EAAU9D,GACZ,OAAO8D,EAAU9D,GAMhB,SAAS+D,IACd,MAA2B,oBAAbC,aCJZC,oBCVJ,SAASC,EAAMb,GACb,IAAIpB,EAAO,GACX,IAAK,IAAIa,KAAOO,EAAKpB,EAAKkC,KAAKrB,GAC/B,OAAOb,GAPCpB,EAAAJ,QAAwC,mBAAhBM,OAAOkB,KACrClB,OAAOkB,KAAOiC,GAElBA,KAAeA,sBCHf,IAAIE,EAEI,sBAFqB,WAC3B,OAAOrD,OAAOE,UAAUoD,SAAS3D,KAAKmC,WADX,GAO7B,SAASyB,EAAUC,GACjB,MAAiD,sBAA1CxD,OAAOE,UAAUoD,SAAS3D,KAAK6D,GAIxC,SAASC,EAAYD,GACnB,OAAOA,GACY,iBAAVA,GACiB,iBAAjBA,EAAO5D,QACdI,OAAOE,UAAUD,eAAeN,KAAK6D,EAAQ,YAC5CxD,OAAOE,UAAUE,qBAAqBT,KAAK6D,EAAQ,YACpD,GAdJ9D,EAAUI,EAAAJ,QAAiB2D,EAAyBE,EAAYE,GAEhEF,UAAoBA,EAKpB7D,EAAA+D,YAAsBA,oBCXtB,IAAIC,EAASC,MAAMzD,UAAU0D,MAIzBC,EAAY/D,EAAAJ,QAAiB,SAAUoE,EAAQC,EAAUC,GAG3D,OAFKA,IAAMA,EAAO,IAEdF,IAAWC,IAGJD,aAAkB1B,MAAQ2B,aAAoB3B,KAChD0B,EAAOG,YAAcF,EAASE,WAI3BH,IAAWC,GAA6B,iBAAVD,GAAyC,iBAAZC,EAC9DC,EAAKE,OAASJ,IAAWC,EAAWD,GAAUC,EA0BzD,SAAkBzE,EAAG6E,EAAGH,GACtB,IAAI/E,EAAG8C,EACP,GAAIqC,EAAkB9E,IAAM8E,EAAkBD,GAC5C,OAAO,EAET,GAAI7E,EAAEY,YAAciE,EAAEjE,UAAW,OAAO,EAGxC,GAAImE,EAAY/E,GACd,QAAK+E,EAAYF,KAGjB7E,EAAIoE,EAAO/D,KAAKL,GAChB6E,EAAIT,EAAO/D,KAAKwE,GACTN,EAAUvE,EAAG6E,EAAGH,IAEzB,GAAIM,EAAShF,GAAI,CACf,IAAKgF,EAASH,GACZ,OAAO,EAET,GAAI7E,EAAEM,SAAWuE,EAAEvE,OAAQ,OAAO,EAClC,IAAKX,EAAI,EAAGA,EAAIK,EAAEM,OAAQX,IACxB,GAAIK,EAAEL,KAAOkF,EAAElF,GAAI,OAAO,EAE5B,OAAO,EAET,IACE,IAAIsF,EAAKrD,EAAW5B,GAChBkF,EAAKtD,EAAWiD,GACpB,MAAOtF,GACP,OAAO,EAIT,GAAI0F,EAAG3E,QAAU4E,EAAG5E,OAClB,OAAO,EAKT,IAHA2E,EAAGE,OACHD,EAAGC,OAEExF,EAAIsF,EAAG3E,OAAS,EAAGX,GAAK,EAAGA,IAC9B,GAAIsF,EAAGtF,IAAMuF,EAAGvF,GACd,OAAO,EAIX,IAAKA,EAAIsF,EAAG3E,OAAS,EAAGX,GAAK,EAAGA,IAE9B,IAAK4E,EAAUvE,EADfyC,EAAMwC,EAAGtF,IACckF,EAAEpC,GAAMiC,GAAO,OAAO,EAE/C,cAAc1E,UAAa6E,EAnElBO,CAASZ,EAAQC,EAAUC,KAItC,SAASI,EAAkBO,GACzB,OAAOA,MAAAA,EAGT,SAASL,EAAUM,GACjB,SAAKA,GAAkB,iBAANA,GAAsC,iBAAbA,EAAEhF,UACtB,mBAAXgF,EAAEC,MAA0C,mBAAZD,EAAEhB,SAGzCgB,EAAEhF,OAAS,GAAqB,iBAATgF,EAAE,2BCxB/B,SAAUE,GAGR,IACQC,EACAC,EACAC,EAHJC,GACIH,EAAQ,mEACRC,EAAW,uIACXC,EAAe,cAGZ,SAAUE,EAAMC,EAAMC,EAAKC,GAchC,GAXyB,IAArBxD,UAAUlC,QAAiC,YA2KzC,QADE8B,EA1K6ByD,GA4KlC,YAGGI,IAAR7D,EACK,YAGU,iBAARA,SACKA,EAGZiC,MAAM6B,QAAQ9D,GACT,QAGF,GAAG4B,SAAS3D,KAAK+B,GACrBkC,MAAM,GAAI,GAAG6B,gBA5LkD,KAAKC,KAAKP,KACpEC,EAAOD,EACPA,OAAOI,IAGTJ,EAAOA,GAAQ,IAAI/C,gBAEEA,OACnB+C,EAAO,IAAI/C,KAAK+C,IAGdQ,MAAMR,GACR,MAAMxD,UAAU,gBA8J1B,IAAgBD,EAxJJkE,GAHJR,EAAO5E,OAAO0E,EAAWW,MAAMT,IAASA,GAAQF,EAAWW,MAAe,UAGrDjC,MAAM,EAAG,GACZ,SAAdgC,GAAsC,SAAdA,IAC1BR,EAAOA,EAAKxB,MAAM,GAClByB,GAAM,EACY,SAAdO,IACFN,GAAM,IAIV,IAAIQ,EAAIT,EAAM,SAAW,MACrBU,EAAIZ,EAAKW,EAAI,UACbE,EAAIb,EAAKW,EAAI,SACbG,EAAId,EAAKW,EAAI,WACbI,EAAIf,EAAKW,EAAI,cACbK,EAAIhB,EAAKW,EAAI,WACbM,EAAIjB,EAAKW,EAAI,aACbjE,EAAIsD,EAAKW,EAAI,aACbO,EAAIlB,EAAKW,EAAI,kBACb9G,EAAIqG,EAAM,EAAIF,EAAKmB,oBACnBC,EA2FZ,SAAiBpB,GAEf,IAAIqB,EAAiB,IAAIpE,KAAK+C,EAAKsB,cAAetB,EAAKuB,WAAYvB,EAAKwB,WAGxEH,EAAeI,QAAQJ,EAAeG,WAAcH,EAAeK,SAAW,GAAK,EAAK,GAGxF,IAAIC,EAAgB,IAAI1E,KAAKoE,EAAeC,cAAe,EAAG,GAG9DK,EAAcF,QAAQE,EAAcH,WAAcG,EAAcD,SAAW,GAAK,EAAK,GAGrF,IAAIE,EAAKP,EAAeF,oBAAsBQ,EAAcR,oBAK5D,OAJAE,EAAeQ,SAASR,EAAeS,WAAaF,GAI7C,EAAIG,KAAKC,OADAX,EAAiBM,GAAa,QA7GhCM,CAAQjC,GACZkC,EAuHZ,SAAsBlC,GACpB,IAAImC,EAAMnC,EAAK0B,SAIf,OAHW,IAARS,IACDA,EAAM,GAEDA,EA5HOC,CAAapC,GACjBqC,EAAQ,CACVzB,EAAMA,EACN0B,GAAMC,EAAI3B,GACV4B,IAAMzC,EAAW0C,KAAKC,SAAS7B,GAC/B8B,KAAM5C,EAAW0C,KAAKC,SAAS7B,EAAI,GACnCC,EAAMA,EAAI,EACV8B,GAAML,EAAIzB,EAAI,GACd+B,IAAM9C,EAAW0C,KAAKK,WAAWhC,GACjCiC,KAAMhD,EAAW0C,KAAKK,WAAWhC,EAAI,IACrCkC,GAAM3H,OAAO0F,GAAGtC,MAAM,GACtBwE,KAAMlC,EACNmC,EAAMlC,EAAI,IAAM,GAChBmC,GAAMZ,EAAIvB,EAAI,IAAM,IACpBA,EAAMA,EACNoC,GAAMb,EAAIvB,GACVC,EAAMA,EACNoC,GAAMd,EAAItB,GACVvE,EAAMA,EACN4G,GAAMf,EAAI7F,GACV6G,EAAMhB,EAAIrB,EAAG,GACbA,EAAMqB,EAAIR,KAAKyB,MAAMtC,EAAI,KACzBtH,EAAMoH,EAAI,GAAKjB,EAAW0C,KAAKgB,UAAU,GAAK1D,EAAW0C,KAAKgB,UAAU,GACxEC,GAAM1C,EAAI,GAAKjB,EAAW0C,KAAKgB,UAAU,GAAK1D,EAAW0C,KAAKgB,UAAU,GACxEE,EAAM3C,EAAI,GAAKjB,EAAW0C,KAAKgB,UAAU,GAAK1D,EAAW0C,KAAKgB,UAAU,GACxEG,GAAM5C,EAAI,GAAKjB,EAAW0C,KAAKgB,UAAU,GAAK1D,EAAW0C,KAAKgB,UAAU,GACxEI,EAAM1D,EAAM,MAAQD,EAAM,OAAS7E,OAAO2E,GAAM8D,MAAMjE,IAAa,CAAC,KAAKkE,MAAMC,QAAQlE,EAAc,IACrGjG,GAAOA,EAAI,EAAI,IAAM,KAAO0I,EAAmC,IAA/BR,KAAKC,MAAMD,KAAKkC,IAAIpK,GAAK,IAAYkI,KAAKkC,IAAIpK,GAAK,GAAI,GACvFqK,EAAM,CAAC,KAAM,KAAM,KAAM,MAAMtD,EAAI,GAAK,EAAI,GAAKA,EAAI,IAAMA,EAAI,IAAM,IAAMA,EAAI,IAC/EQ,EAAMA,EACNc,EAAMA,GAGR,OAAOjC,EAAK+D,QAAQpE,EAAO,SAAUkE,GACnC,OAAIA,KAASzB,EACJA,EAAMyB,GAERA,EAAMrF,MAAM,EAAGqF,EAAMrJ,OAAS,OAoC/C,SAAS8H,EAAIhG,EAAK4H,GAGhB,IAFA5H,EAAMlB,OAAOkB,GACb4H,EAAMA,GAAO,EACN5H,EAAI9B,OAAS0J,GAClB5H,EAAM,IAAMA,EAEd,OAAOA,EArCPwD,EAAWW,MAAQ,CACjB0D,QAAyB,2BACzBC,UAAyB,SACzBC,WAAyB,cACzBC,SAAyB,eACzBC,SAAyB,qBACzBC,UAAyB,UACzBC,WAAyB,aACzBC,SAAyB,eACzBC,QAAyB,aACzBC,QAAyB,WACzBC,YAAyB,yBACzBC,eAAyB,+BACzBC,oBAAyB,+BAI3BjF,EAAW0C,KAAO,CAChBC,SAAU,CACR,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC1C,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAEpEI,WAAY,CACV,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAEhHW,UAAW,CACT,IAAK,IAAK,KAAM,KAAM,IAAK,IAAK,KAAM,OA2FxC9I,EAAAJ,QAAiBwF,EAlNrB,KJDIkF,EAAM,GAOVC,EAoBA,SAAgBC,EAAKC,GACnB,GAAmB,iBAARD,EACT,MAAM,IAAI3I,UAAU,qBAItB,GAAY,IAAR4I,EAAW,OAAOD,EACtB,GAAY,IAARC,EAAW,OAAOD,EAAMA,EAE5B,IAAIE,EAAMF,EAAI1K,OAAS2K,EACvB,GAAIrH,IAAUoH,QAAwB,IAAVpH,EAC1BA,EAAQoH,EACRF,EAAM,QACD,GAAIA,EAAIxK,QAAU4K,EACvB,OAAOJ,EAAIK,OAAO,EAAGD,GAGvB,KAAOA,EAAMJ,EAAIxK,QAAU2K,EAAM,GACrB,EAANA,IACFH,GAAOE,GAGTC,IAAQ,EACRD,GAAOA,EAKT,OADAF,GADAA,GAAOE,GACGG,OAAO,EAAGD,IKxDtB,ICLIE,EDKJC,EAAiB,SAAiBL,EAAKC,EAAKK,GAG1C,OAFAN,EAAMA,EAAIhH,gBAES,IAARiH,EACFD,GAIPM,EADS,IAAPA,EACG,IACIA,EACJA,EAAGtH,WAEH,IAGA+G,EAAOO,EAAIL,EAAMD,EAAI1K,QAAU0K,ICrBlCO,EAAA,aAEFC,EAAc,CAAEC,UAAW,GAAIC,OAAQ,GAAIC,OAAQ,IAQjDC,EAAqB,CACzB,YACA,aACA,cAGF,SAASC,EAAQC,EAASpH,GACxB,sBAD+B,IACxB,IAAIqH,QAAJ,SAAaC,EAASC,GAC3BvH,EAAO3D,EAAO,GAAIyK,EAAa9G,GAC/B,IAAMwH,EAAWC,EAAgBzL,OAAOM,OAAO,GAAI0D,EAAM,CACvD+G,UAAW,GACXW,WAAOnG,KAEHoG,EAAOP,EAAU,cAAgB,YACjCQ,EAAS/I,IACf,OAAI+I,GAAUA,EAAOC,QAAkC,mBAAjBD,EAAOD,GACpCC,EAAOD,GAAMtL,EAAO,GAAI2D,EAAM,UAAEwH,KACpCjJ,KADI,SACCuJ,GAAA,OAAMR,EAAQQ,KAEfR,EAAQ,UAAEE,EAAUI,QAAQ,MA8ClC,SAASG,EAAaC,EAAShI,GACpC,sBAD2C,IArB7C,SAAgCgI,GAC9B,OAAO,IAAIX,QAAJ,SAAaC,GAClB,IAAMW,EAAaD,EAAQE,QAAQ,KACnC,IAAoB,IAAhBD,EAAJ,CAWA,IAPA,IAAME,EAASH,EAAQpI,MAAMqI,EAAa,GACpCG,EAAa3J,OAAO4J,KAAKF,GACzBG,EAAON,EAAQpI,MAAM,EAAGqI,GACxBM,EAAY,eAAeC,KAAKF,GAChCG,GAAQF,EAAYA,EAAU,GAAK,UAAOhH,EAC1CmH,EAAK,IAAIC,YAAYP,EAAWxM,QAChCgN,EAAK,IAAIC,WAAWH,GACjBzN,EAAI,EAAGA,EAAImN,EAAWxM,OAAQX,IACrC2N,EAAG3N,GAAKmN,EAAWU,WAAW7N,GAEhCqM,EAAQ,IAAI7I,OAAOsK,KAAK,CAAEL,GAAM,CAAEJ,KAAMG,UAbtCnB,EAAQ,IAAI7I,OAAOsK,QAkBhBC,CAAsBhB,GAC1BzJ,KADI,SACC0K,GAAA,OAAQC,EAASD,EAAMjJ,KAG1B,SAASkJ,EAAUD,EAAMjJ,GAC9B,sBADqC,IAC9B,IAAIqH,QAAJ,SAAYC,GAEjB,IAAME,GADNxH,EAAO3D,EAAO,GAAIyK,EAAa9G,IACTwH,SAEhBI,EAAS/I,IACf,GAAI+I,GAAqC,mBAApBA,EAAOsB,UAA2BtB,EAAOC,OAE5D,OAAOD,EAAOsB,SAASD,EAAM5M,EAAO,GAAI2D,EAAM,UAAEwH,KAC7CjJ,KADI,SACCuJ,GAAA,OAAMR,EAAQQ,KAGjBpB,KACHA,EAAOzH,SAASkK,cAAc,MACzBC,MAAMC,WAAa,SACxB3C,EAAKrJ,OAAS,UAEhBqJ,EAAK4C,SAAW9B,EAChBd,EAAK6C,KAAO9K,OAAO+K,IAAIC,gBAAgBR,GACvChK,SAASyK,KAAKC,YAAYjD,GAC1BA,EAAKkD,QAAL,WACElD,EAAKkD,QAAU/C,EACfgD,WAAA,WACEpL,OAAO+K,IAAIM,gBAAgBb,GACvBvC,EAAKqD,eAAerD,EAAKqD,cAAcC,YAAYtD,GACvDA,EAAKuD,gBAAgB,QACrB3C,EAAQ,UAAEE,EAAUI,QAAQ,OAGhClB,EAAKwD,UAsBJ,SAASzC,EAAiB0C,GAI/B,kBAJqC,IAIb,mBAHxBA,EAAM9N,EAAO,GAAI8N,IAGFC,KACb,OAAOD,EAAIC,KAAKD,GACX,GAAIA,EAAIC,KACb,OAAOD,EAAIC,KAGb,IAKMC,EALF3C,EAAQ,KACRX,EAAY,IACa,iBAAlBoD,EAAIpD,YAAwBA,EAAYoD,EAAIpD,WAE9B,iBAAdoD,EAAIzC,SAGX2C,EAD6B,iBAApBF,EAAIE,YACCF,EAAIE,YAEJnH,KAAKsD,IAAI,IAAM2D,EAAIzC,OAEnCA,EAAQf,EAAQnK,OAAO2N,EAAIzC,OAAQlL,OAAO6N,GAAazO,OAAQ,MAGjE,IAAM0O,EAAWC,SAASJ,EAAIK,cAAgBD,SAASJ,EAAIM,QAAUN,EAAIK,YAAc,EAAtE,GAA6EL,EAAI,MAAU,GAC5G,OAAa,MAATzC,EACK,CAAE4C,EAAU5C,GAAQgD,OAAOC,SAAS9N,KAAK,KAAOkK,EAGhD,CAAEoD,EAAInD,OAAQmD,EAAIS,MADDT,EAAIU,UACsBP,EAAUH,EAAIW,KAAMX,EAAIlD,QAASyD,OAAOC,SAAS9N,KAAK,KAAOkK,ECpKnH,IAAMgE,EAAc,CAClBC,UAAW,aACXC,SAAU,UACVC,UAAW,UACXC,KAAM,QACNC,GAAI,KACJC,WAAY,YACZC,QAAS,OACTC,aAAc,UAIVC,EAAU,CACd,aAAc,QAAS,gBAAiB,cACxC,aAAc,cAAe,QAAS,aACtC,mBAAoB,gBAAiB,eACrC,eAAgB,cAAe,SAAU,UAAW,aACpD,SAAU,OAAQ,OAAQ,SAAU,SAAU,UAAW,UACzD,OAAQ,WAAY,cAAe,MAAO,eAAgB,YAC1D,QAAS,OAAQ,QAAS,YAAa,UAAW,KAAM,KACxD,oBAAqB,OAAQ,SAAU,WAAY,mBAKxCC,EAAA,SAAiBC,GACf1P,OAAOkB,KAAKwO,GACpB1O,QAAL,SAAae,GACPA,KAAOgN,EAETY,QAAQC,KAAR,oDAAiE7N,EAAA,oBADlDgN,EAAYhN,GAC6D,MAC9EyN,EAAQK,SAAS9N,IAC3B4N,QAAQC,KAAR,oDAAiE7N,EAAA,QCjCvE,IAwFA+N,EAtFa,CAGX,CAAE,WAAY,MAAO,OACrB,CAAE,eAAgB,IAAK,KACvB,CAAE,SAAU,IAAK,KACjB,CAAE,eAAgB,IAAK,KACvB,CAAE,gBAAiB,KAAM,MAGzB,CAAE,KAAM,GAAI,IACZ,CAAE,KAAM,GAAI,KACZ,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,MAAO,IAAK,KACd,CAAE,MAAO,IAAK,KACd,CAAE,MAAO,IAAK,KAGd,CAAE,KAAM,IAAK,MACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,GAAI,KACZ,CAAE,KAAM,GAAI,IACZ,CAAE,KAAM,GAAI,IACZ,CAAE,MAAO,GAAI,IACb,CAAE,MAAO,KAAM,MACf,CAAE,MAAO,KAAM,MACf,CAAE,KAAM,IAAM,MACd,CAAE,KAAM,IAAK,KACb,CAAE,MAAO,IAAK,MACd,CAAE,KAAM,IAAK,KACb,CAAE,MAAO,IAAK,KACd,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,GAAI,KACZ,CAAE,KAAM,GAAI,IACZ,CAAE,KAAM,GAAI,IACZ,CAAE,MAAO,GAAI,IACb,CAAE,MAAO,GAAI,IACb,CAAE,MAAO,GAAI,IACb,CAAE,KAAM,IAAK,MACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,IAAK,KACb,CAAE,KAAM,GAAI,KACZ,CAAE,KAAM,GAAI,IACZ,CAAE,KAAM,GAAI,IACZ,CAAE,MAAO,GAAI,IACb,CAAE,MAAO,GAAI,IACb,CAAE,MAAO,GAAI,IAIb,CAAE,cAAe,IAAK,IAAK,MAC3B,CAAE,SAAU,IAAK,GAAI,MACrB,CAAE,QAAS,IAAK,GAAI,MACpB,CAAE,eAAgB,EAAG,EAAG,MACxB,CAAE,SAAU,GAAI,GAAI,MACpB,CAAE,UAAW,GAAI,GAAI,MACrB,CAAE,SAAU,IAAK,GAAM,MACvB,CAAE,SAAU,GAAM,GAAM,MACxB,CAAE,SAAU,GAAM,GAAM,MACxB,CAAE,SAAU,GAAM,GAAM,MACxB,CAAE,SAAU,GAAM,GAAM,MACxB,CAAE,SAAU,EAAG,GAAI,MACnB,CAAE,SAAU,GAAI,GAAI,MACpB,CAAE,SAAU,GAAI,GAAI,MACpB,CAAE,SAAU,GAAI,GAAI,MACpB,CAAE,SAAU,GAAI,GAAI,MACpB,CAAE,UAAW,GAAI,GAAI,MACrB,CAAE,UAAW,GAAI,GAAI,MACrB,CAAE,UAAW,GAAI,GAAI,OAGHC,OAAL,SAAaC,EAAMC,GAChC,IAAMC,EAAO,CACXC,MAAOF,EAAO,IA1FG,KA2FjBG,WAAY,CAAEH,EAAO,GAAIA,EAAO,KAIlC,OAFAD,EAAKC,EAAO,IAAMC,EAClBF,EAAKC,EAAO,GAAG9G,QAAQ,KAAM,MAAQ+G,EAC9BF,GACN,IChGHK,EAAiB,WACb,IAAK,IAAIpR,EAAI,EAAGA,EAAI6C,UAAUlC,OAAQX,IAClC,QAAqBsG,IAAjBzD,UAAU7C,GAAkB,OAAO6C,UAAU7C,ICDrDkR,EAAQ,CAAE,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,KAAM,MAEnDG,EAAc,CAEhBrK,EAAG,CACDsK,OAAQ,SACRC,OAAQ,GAEVC,GAAI,CACFF,OAAQ,SACRC,OAAQ,KAEVzI,GAAI,CACFwI,OAAQ,SACRC,OAAQ,MAGVE,GAAI,CACFH,OAAQ,WACRC,OAAQ,EAAI,IAEdG,GAAI,CACFJ,OAAQ,WACRC,OAAQ,EAAI,GAEdI,GAAI,CACFL,OAAQ,WACRC,OAAQ,GAEVK,GAAI,CACFN,OAAQ,WACRC,OAAQ,KAIZ,MAAMM,EAAU,CACdC,OAAQ,CACN5B,KAAM,IACN6B,MAAO,EAAI,OAEbC,SAAU,CACR9B,KAAM,KACN6B,MAAO,QA+DX,IAAAE,EAvDA,SAA0BvM,EAAOwM,EAAUC,EAAQpN,GACjD,GAAqB,iBAAVW,IAAuB4J,SAAS5J,GAAQ,MAAM,IAAIpF,MAAM,iCACnE,IAAK4R,IAAaC,EAAQ,MAAM,IAAI7R,MAAM,kCAG1C,IAAI8R,EAAgBhB,GADpBrM,EAAOA,GAAQ,IACkBqN,cAAe,IAC5CC,EAAYtN,EAAKsN,UACjBC,GAAiC,IAApBvN,EAAKuN,WAKtB,GAHAJ,EAAWA,EAAS1L,cACpB2L,EAASA,EAAO3L,eAEiB,IAA7B0K,EAAMjE,QAAQiF,GAAkB,MAAM,IAAI5R,MAAM,sBAAwB4R,EAAW,sBAAwBhB,EAAMtP,KAAK,OAC1H,IAA+B,IAA3BsP,EAAMjE,QAAQkF,GAAgB,MAAM,IAAI7R,MAAM,sBAAwB6R,EAAS,sBAAwBjB,EAAMtP,KAAK,OAEtH,GAAIsQ,IAAaC,EAEf,OAAOzM,EAGT,IAAI6M,EAAW,EACXC,EAAa,EACbC,GAAY,EAEC,OAAbP,IACFM,EAAa,EAAIJ,EACjBF,EAAW,MAEE,OAAXC,IACFM,GAAY,EACZF,EAAWH,EACXD,EAAS,MAGX,IAAIO,EAAerB,EAAYa,GAC3BS,EAAatB,EAAYc,GAGzBS,EAASlN,EAAQgN,EAAanB,OAASiB,EAGvCE,EAAapB,SAAWqB,EAAWrB,SAErCsB,GAAUf,EAAQa,EAAapB,QAAQS,OAGzC,IAAIc,EAASD,EAASD,EAAWpB,OAASgB,EAM1C,OALIE,GAAaH,EACfO,EAAS5K,KAAKyB,MAAMmJ,GACU,iBAAdR,GAA0B/C,SAAS+C,KACnDQ,EAtDJ,SAAgBnN,EAAOoN,GACrB,OAAOC,OAAO9K,KAAKyB,MAAMhE,EAAQ,IAAMoN,GAAY,KAAOA,GAqD/CpJ,CAAMmJ,EAAQR,IAElBQ,GCrFF,SAASG,EAAiBjD,EAAWkD,EAAkBC,EAAgBd,GAC5E,sBADsD,qBAAgB,qBAAsB,IACrFH,EAAclC,EAAWkD,EAAWC,EAAS,eAClDd,EACAC,UAAW,EACXC,YAAY,ICMD,SAASa,EAAcC,EAAO3C,GAC3C,IAAI4C,EAAOC,EACPC,EAAYC,EACZC,EAAaC,EAEX3Q,EAAUgB,IACVoN,EAAaV,EAASU,WACtBwC,EAhCR,SAA+BlD,GAC7B,SAAKA,EAASU,YACqB,iBAAxBV,EAASU,cAChBzM,MAAM6B,QAAQkK,EAASU,aAAeV,EAASU,WAAWxQ,QAAU,IA6BlDiT,CAAqBnD,GACrCoD,EAAYT,EAAMS,UACpBC,IAAaH,IAAwC,IAAxBlD,EAASqD,WACtCC,KAAgBF,GAAaF,IAAiBlD,EAASsD,YAEtDhR,IAAS+Q,EAAaC,GAAc,GACzC,IAOIC,EAAYC,EAPV/C,EAAQT,EAASS,MACjBkB,EAAmD,iBAA3B3B,EAAS2B,eAA8B9C,SAASmB,EAAS2B,eAAkB3B,EAAS2B,cAAgB,GAC5H8B,EAAQrQ,EAAQ4M,EAASyD,MAAO,GAEhCC,EAAmBpR,EAAUS,OAAO2Q,iBAAmB,EACvDC,EAAiBL,EAAcI,EAAmB,EAQrB,iBAAxB1D,EAASuD,YAA2B1E,SAASmB,EAASuD,YAG/DC,EAAmBpQ,EAAQ4M,EAASwD,iBADpCD,EAAavD,EAASuD,YAGlBL,GAEFK,EAAaI,EAGbH,EAAmBpQ,EAAQ4M,EAASwD,iBAAkB,IAKtDA,EAAmBpQ,EAAQ4M,EAASwD,iBAFpCD,EAAaG,GAOqB,iBAA3B1D,EAAS4D,eAA8B/E,SAASmB,EAAS4D,iBAClEL,EAAa/L,KAAKqM,IAAI7D,EAAS4D,cAAeL,IAI5CH,IACFG,EAAaC,GAMf,IACIM,EAAWC,EADfC,EA5EF,SAAwBrB,EAAO3C,GAE7B,IAAK1M,IACH,MAAO,CAAE,IAAK,KAGhB,IAAI2Q,EAAUjE,EAASkE,QAAUnR,OAEjC,GAAIkR,IAAYlR,QACZkR,IAAY1Q,UACZ0Q,IAAY1Q,SAASyK,KACvB,MAAO,CAAEjL,OAAOoR,WAAYpR,OAAOqR,aAEnC,IAAAJ,EAA0BC,EAAQI,wBAClC,MAAO,CADCL,EAAApB,MAAOoB,EAAAnB,QA+DmByB,CAAc3B,EAAO3C,GAAnDuE,EAAAP,EAAA,GAAaQ,EAAAR,EAAA,GAInB,GAAId,EAAe,CACjB,IAAMd,EDxFH,SAAkC1B,EAAY+B,EAAgBd,GACnE,kBAD6D,qBAAsB,IACzD,iBAAfjB,EAAyB,CAClC,IAAMrO,EAAMqO,EAAW3K,cACvB,KAAM1D,KAAO+N,GACX,MAAM,IAAIvQ,MAAJ,yBAAmC6Q,EAAA,sFAE3C,IAAMH,EAASH,EAAW/N,GAC1B,OAAOkO,EAAOG,WAAWxP,IAAlB,SAAsBmF,GAAA,OACpBkM,EAAgBlM,EAAGkK,EAAOE,MAAOgC,EAASd,KAGnD,OAAOjB,EC6EQ+D,CAAwB/D,EAAYD,EAAOkB,GACpD+C,EAAUlN,KAAKsD,IAAIsH,EAAO,GAAIA,EAAO,IACrCuC,EAASnN,KAAKqM,IAAIzB,EAAO,GAAIA,EAAO,IAC1C,GAAIpC,EAAS4E,YAAa,CACxB,IAAMC,EAAqC,cAAzB7E,EAAS4E,YAC3BhC,EAAQiC,EAAYH,EAAUC,EAC9B9B,EAASgC,EAAYF,EAASD,OAE9B9B,EAAQR,EAAO,GACfS,EAAST,EAAO,GAGlB0B,EAAYlB,EACZmB,EAAalB,EAGbD,GAAiB,EAARa,EACTZ,GAAkB,EAARY,OAIVK,EAFAlB,EAAQ2B,EAGRR,EAFAlB,EAAS2B,EAMX,IAAIM,EAAYlC,EACZmC,EAAalC,EAYjB,GAXIK,GAAiBzC,IAEnBqE,EAAYvC,EAAgBK,EAAOnC,EAAO,KAAMkB,GAChDoD,EAAaxC,EAAgBM,EAAQpC,EAAO,KAAMkB,IAIpDmB,EAAatL,KAAKyB,MAAM6L,GACxB/B,EAAcvL,KAAKyB,MAAM8L,GAGrB1B,IAAeD,GAAaF,EAAe,CAC7C,IAAM8B,EAASpC,EAAQC,EACjBoC,EAAeV,EAAcC,EAC7BU,EAAoB9R,EAAQ4M,EAASkF,kBAAmB,IACxDC,EAAW3N,KAAKyB,MAAMsL,EAAkC,EAApBW,GACpCE,EAAY5N,KAAKyB,MAAMuL,EAAmC,EAApBU,IACxCpC,EAAaqC,GAAYpC,EAAcqC,KACrCH,EAAeD,GACjBjC,EAAcqC,EACdtC,EAAatL,KAAKyB,MAAM8J,EAAciC,KAEtClC,EAAaqC,EACbpC,EAAcvL,KAAKyB,MAAM6J,EAAakC,KAe5C,MAAO,OACLvB,aACAF,QACAX,SACAC,EACAnC,WAAY,CAAEkC,EAAOC,GACrBpC,MAAOA,GAAS,aAhBlBuC,EAAcM,EAAc9L,KAAKyB,MAAMsK,EAAaT,GAActL,KAAKyB,MAAMsK,EAAauB,IAM7DlC,UAL7BK,EAAeK,EAAc9L,KAAKyB,MAAMsK,EAAaR,GAAevL,KAAKyB,MAAMsK,EAAawB,IAM9DlC,gBAY5BlB,gBAhBoB2B,EAAc9L,KAAKyB,MAAM6J,GAActL,KAAKyB,MAAM6L,kBACjDxB,EAAc9L,KAAKyB,MAAM8J,GAAevL,KAAKyB,MAAM8L,eAkBxE/B,eACAC,YACAa,aACAC,aACAjB,cACAC,WFnEmBtC,EG3GvB,IAAA4E,EACA,SAA2BzI,EAAMtI,GAC/B,GAAoB,iBAATsI,EACT,MAAM,IAAI3K,UAAU,4BAKtB,GAFAqC,EAAOA,GAAQ,GAES,oBAAbf,WAA6Be,EAAKgR,OAC3C,OAAO,KAGT,IAAIA,EAAShR,EAAKgR,QAAU/R,SAASkK,cAAc,UACzB,iBAAfnJ,EAAKsO,QACd0C,EAAO1C,MAAQtO,EAAKsO,OAEK,iBAAhBtO,EAAKuO,SACdyC,EAAOzC,OAASvO,EAAKuO,QAGvB,IACI0C,EADAC,EAAUlR,EAEd,IACE,IAAImR,EAAQ,CAAE7I,GAEgB,IAA1BA,EAAKJ,QAAQ,UACfiJ,EAAM/R,KAAK,gBAAkBkJ,GAG/B,IAAK,IAAIrN,EAAI,EAAGA,EAAIkW,EAAMvV,OAAQX,IAEhC,GADAgW,EAAKD,EAAOI,WAAWD,EAAMlW,GAAIiW,GACzB,OAAOD,EAEjB,MAAOpW,GACPoW,EAAK,KAEP,OAAQA,GAAM,MCzBD,SAASI,EAAc3F,GACpC,IAAI4F,EAASN,iBADkC,IAE/C,IAAIO,GAAa,EACjB,IAAwB,IAApB7F,EAASsF,OAAkB,CAG7B,KADAM,EAAU5F,EAAS4F,UACgB,iBAAZA,EAAsB,CAC3C,IAAIE,EAAY9F,EAASsF,OACpBQ,IACHA,EAhBR,WACE,IAAKxS,IACH,MAAM,IAAIzD,MAAM,iIAElB,OAAO0D,SAASkK,cAAc,UAYZsI,GACZF,GAAa,GAEf,IAAMjJ,EAAOgJ,GAAW,KACxB,GAAoC,mBAAzBE,EAAUJ,WACnB,MAAM,IAAI7V,MAAM,2GAGlB,KADA+V,EAAUP,EAAiBzI,EAAMjM,EAAO,GAAIqP,EAASgG,WAAY,CAAEV,OAAQQ,MAEzE,MAAM,IAAIjW,MAAJ,gCAA0C+M,EAAA,iHAMpD,GAFA0I,EAASM,EAAQN,OAEbtF,EAASsF,QAAUA,IAAWtF,EAASsF,OACzC,MAAM,IAAIzV,MAAM,4FAIdmQ,EAASiG,YACXL,EAAQM,uBAAwB,EAChCN,EAAQO,0BAA2B,EACnCP,EAAQQ,wBAAyB,EACjCR,EAAQS,6BAA8B,EACtCT,EAAQU,yBAA0B,EAClChB,EAAO5H,MAAM,mBAAqB,aAGtC,MAAO,QAAE4H,UAAQM,aAASC,GC7B5B,IAAMU,EACJ,2BACOC,UAAY,QACZC,OAAS,QACTC,aAAU7Q,OACV8Q,KAAO,UACPC,eAAiB,UAGjBC,uBAAoBhR,OACpBiR,eAAgB,OAEhBC,mBC9BM,SAAUtI,kBAAM,IAC7B,IAAMuI,EAAA,SAAU5K,GACd,GAAKqC,EAAIwI,UAAT,CAEA,IAAM/K,EAAS/I,IACI,KAAfiJ,EAAG8K,SAAmB9K,EAAG+K,SAAW/K,EAAGgL,UAAWhL,EAAGiL,QAI/B,KAAfjL,EAAG8K,QAGZzI,EAAI6I,WAAWlL,GACNF,IAAWE,EAAG+K,QAAyB,KAAf/K,EAAG8K,UAAmB9K,EAAGgL,SAAWhL,EAAGiL,WAExEjL,EAAGmL,iBACH9I,EAAI+I,OAAOpL,KATXA,EAAGmL,iBACH9I,EAAIgJ,KAAKrL,MAoBb,MAAO,QARD,WACJrJ,OAAO2U,iBAAiB,UAAWV,WAG/B,WACJjU,OAAO4U,oBAAoB,UAAWX,KDKZY,CAAkB,oBACjC,OAAgC,IAA1BC,EAAK7H,SAAS8H,uBACtB1L,GACDA,EAAG2L,SACDF,EAAKlF,MAAMqF,aACRC,cACAC,OACAL,EAAKM,SACFN,EAAKlF,MAAMqF,aAChBI,qCAIHP,EAAKlF,MAAM0F,QAASR,EAAKS,QACxBT,EAAKU,wBAEHnM,KACFgM,YAAY,SAAU,YAI1BI,gBAAL,WAAuB,OAAMX,EAAKY,gBAE7BC,eAAL,WACkBb,EAAKc,YAGdC,6FAKPC,OAAAC,IAAA,kBACKC,KAAKrC,WAGV1G,SAAA8I,IAAA,kBACKC,KAAKvC,aAGV7D,MAAAmG,IAAA,kBACKC,KAAKtC,oBAGduC,iBAAA,SAAkBC,EAAaC,SACW,iBAAbA,GAAyBrK,SAASqK,GACxCD,EAAcC,EAAW,eAGhDC,cAAA,SAAeC,EAAUC,EAAM1K,EAAa2K,UAClCzK,SAASF,IAAgBA,EAAc,EAC3CnH,KAAKC,MAAM2R,GAAYzK,EAAc,IACrCnH,KAAKC,MAAM6R,EAAMD,gBAGvBE,qBAAA,kBACSR,KAAKI,cACVJ,KAAKpG,MAAMyG,SAAUL,KAAKpG,MAAM0G,KAChCN,KAAKpG,MAAMhE,YAAaoK,KAAKpG,MAAM2G,kBAIvCE,cAAA,eACQ7G,EAAQoG,KAAKpG,YACZ,OACEA,EAAMC,aACLD,EAAME,kBACFF,EAAMY,uBACLZ,EAAMK,yBACLL,EAAMM,2BACLN,EAAM8G,6BACL9G,EAAM+G,6BAI1BxB,IAAA,eACOa,KAAKF,OAAQ,MAAM,IAAIhZ,MAAM,qEAGJ,IAA1BkZ,KAAK/I,SAASqI,cACXE,OAI4B,mBAAxBQ,KAAKF,OAAOc,iBACbzJ,KAAK,4EAIV6I,KAAKpG,MAAMiH,eACTC,oBACAlH,MAAMiH,SAAU,QAIlBE,YACAlB,SACEG,kBAGTgB,gBAAA,WACmB,MAAbhB,KAAKpC,MAAkC,oBAAX5T,QAAiE,mBAAhCA,OAAOiX,8BAC/DA,qBAAqBjB,KAAKpC,WAC5BA,KAAO,MAEa,MAAvBoC,KAAKnC,8BACMmC,KAAKnC,qBACbA,eAAiB,mBAI1B2B,KAAA,eACME,EAAUM,KAAK/I,SAASyI,QACxB,cAAeM,KAAK/I,cACZ,UACFE,KAAK,kEAEVuI,IACAnV,IAIDyV,KAAKpG,MAAM0F,UACVU,KAAKpG,MAAMiH,eACTC,oBACAlH,MAAMiH,SAAU,QAMlBjH,MAAM0F,SAAU,OAChB0B,uBACAE,UAAY3X,SACZqU,KAAO5T,OAAOmX,sBAAsBnB,KAAKP,0BAfpC2B,MAAM,yFAkBlB7B,MAAA,WACMS,KAAKpG,MAAMqF,WAAWe,KAAKd,iBAC1BtF,MAAM0F,SAAU,OAEhB0B,+BAGPzC,WAAA,WACMyB,KAAKpG,MAAM0F,QAASU,KAAKT,QACxBS,KAAKR,oBAIZ6B,KAAA,gBACO9B,aACA3F,MAAM3G,MAAQ,OACd2G,MAAMyG,SAAW,OACjBzG,MAAM0G,KAAO,OACb1G,MAAM0H,UAAY,OAClB1H,MAAMiH,SAAU,OAChBhB,sBAGPT,OAAA,0BACMY,KAAKpG,MAAMqF,aACV1U,UAKA8W,YACAzH,MAAM0F,SAAU,OAChB1F,MAAMqF,WAAY,MAEjBsC,EAAavB,KAAKwB,qBAAqB,WAAY,IAEnDC,EAAgB,EAAIzB,KAAKpG,MAAM2G,SAEhCS,sBTxKoBzV,ESyKnBwV,EAAA,kBACCjC,EAAKlF,MAAMqF,aACXrF,MAAM0H,UAAYG,IAClBV,OACEjC,EAAKO,YAAYkC,GACrBzX,KADI,WAEEgV,EAAKlF,MAAMqF,cACXrF,MAAM0H,UAAY,IAClB1H,MAAM3G,QACP6L,EAAKlF,MAAM3G,MAAQ6L,EAAKlF,MAAMhE,eAC3BgE,MAAM0G,MAAQmB,IACd7H,MAAMyG,SAAWvB,EAAKmB,iBAAiBnB,EAAKlF,MAAM0G,KAAMxB,EAAKlF,MAAMuG,YACnEtC,eAAiBzI,WAAW2L,EAAM,aAE/BW,IAAI,wBACPC,eACAzC,cACAmC,SACAlC,WAjBuBvM,QAAQC,WAuBvCmN,KAAKpG,MAAMiH,eACTC,oBACAlH,MAAMiH,SAAU,GAInBb,KAAKF,QAA6C,mBAA5BE,KAAKF,OAAO8B,kBAC/BC,kBAAL,SAAuBjI,GAAA,OAASkF,EAAKgB,OAAO8B,YAAYhI,MTxMjCrO,ES4MbgW,iBT5MoB,IAC3B7O,GAAO,EAAMnH,IS4MfuW,MADH,SACSpZ,WACG0Y,MAAM1Y,KAEfoB,KAJH,SAIQiY,KACCnE,KAAO5T,OAAOmX,sBAAsBJ,kBArDnCK,MAAM,kFAyDlBN,aAAA,sBACMd,KAAKF,QAAuC,mBAAtBE,KAAKF,OAAOkC,YAC/BH,kBAAL,SAAuBjI,GAAA,OAASkF,EAAKgB,OAAOkC,MAAMpI,kBAItD+H,WAAA,sBACM3B,KAAKF,QAAqC,mBAApBE,KAAKF,OAAOmC,UAC/BJ,kBAAL,SAAuBjI,GAAA,OAASkF,EAAKgB,OAAOmC,IAAIrI,kBAIpDsF,UAAA,eT7NyB3T,SS8NjB2W,EAAelC,KAAKpG,MAAMqF,sBAE3B+B,uBACApH,MAAMqF,WAAY,OAClBrF,MAAM0H,UAAY,OAClB1H,MAAM0F,SAAU,kBTnOS,IACzB5M,GAAO,EAAOnH,ISsOhBuW,MADI,SACEpZ,WACG0Y,MAAM1Y,KAEfoB,KAJI,WAMCoY,GAAgBpD,EAAKgB,QAA2C,mBAA1BhB,EAAKgB,OAAOZ,aAC/C2C,kBAAL,SAAuBjI,GAAA,OAASkF,EAAKgB,OAAOZ,UAAUtF,oBAK9D4H,qBAAA,SAAsB9L,yBAAM,IACnB,UACKA,EAAIyM,cACRzM,EAAIgJ,SACLsB,KAAKpG,MAAM2G,UACT7K,EAAIyM,SAAWnC,KAAKpG,MAAM3G,WAAQnG,OACnCkT,KAAK/I,SAAStB,UACdqK,KAAK/I,SAASd,YACZ6J,KAAK/I,SAAS1E,cACdyN,KAAK/I,SAASzE,gBACZwN,KAAK/I,SAASmL,yBACPpC,KAAK/I,SAASoL,0BACpB3M,EAAIU,WT1KZkM,EAAW,IAAI3Y,KADA,mCS4KLmM,SAASkK,KAAKpG,MAAMhE,aAAenH,KAAKsD,IAAI,EAAGiO,KAAKpG,MAAMhE,aAAe,kBAI1FyJ,YAAA,SAAa3J,gCAAM,KACZsK,KAAKF,OAAQ,OAAOlN,QAAQ2P,IAAI,IACA,mBAA1BvC,KAAKF,OAAO0C,gBAChB1C,OAAO0C,gBAIVjB,EAAavB,KAAKwB,qBAAqB9L,GAErCvC,EAAS/I,IACXpD,EAAI4L,QAAQC,aACZM,GAAUuC,EAAI+I,QAAmC,mBAAlBtL,EAAOsL,OAAuB,KACzDgE,EAAa7a,EAAO,GAAI2Z,GACxBlL,EAAOlD,EAAOsL,OAAOgE,GACNzb,EAAjB4C,EAAUyM,GAAWA,EAChBzD,QAAQC,QAAQwD,UAGpBrP,EAAE8C,KAAF,SAAOuM,GAAA,OACLyI,EAAK4D,eAAe9a,EAAO,GAAI2Z,EAAY,MAAQlL,GAAQ,QACjEvM,KAFI,SAECuP,UAGgB,IAAlBA,EAAOlS,OAAqBkS,EAAO,GAC3BA,iBAIhBqJ,eAAA,SAAgBnB,6BAAa,SACtB7D,OAAOrD,WAAY,OAGnBuF,aAGD+C,EAAa3C,KAAKH,qBAMI,IAAf8C,MACI,CAJA3C,KAAKpG,MAAM2C,cAMb,GAAGqG,OAAOD,GAAY1M,OAAOC,UAIlB/N,IAAX,SAAekR,OhBrUN6B,EgBsUd2H,EAAkC,iBAAXxJ,GAAuBA,IAAW,SAAUA,GAAU,YAAaA,GAC1FyJ,EAAOD,EAAgBxJ,EAAOyJ,KAAOzJ,EACrC9N,EAAOsX,EAAgBjb,EAAO,GAAIyR,EAAQ,MAAEyJ,IAAU,MAAEA,MhBvU3D/Y,EADiBmR,EgByUP4H,IhBxUQ,UAAU7V,KAAKiO,EAAQ/Q,WAA2C,mBAAvB+Q,EAAQyB,WgBwUpD,OTnTnB,SAAuBJ,EAAQ7G,kBAAM,IAC1C,IAAM0M,EAAW1M,EAAI0M,UAAY,YACjC,IAAK3P,EAAmB2E,SAASgL,GAAW,MAAM,IAAItb,MAAJ,2BAAqCsb,GACvF,IAAI9P,GAAa8P,EAAS9Z,MAAM,KAAK,IAAM,IAAIoI,QAAQ,QAAS,OAEhE,OADI4B,IAAWA,GAAY,IAAIA,GAAYtF,eACpC,WACLsF,EACAuB,KAAMuO,EACN7O,QAASgJ,EAAOwG,UAAUX,EAAU1M,EAAI2M,kBS8SCW,CAAaF,EAAM,UAFvCvX,EAAK6W,UAAYb,EAAWa,yBACrB/X,EAAQkB,EAAK8W,gBAAiBd,EAAWc,gBAAiB,cAE3E9a,OAAOM,OAAO0D,EAAM,SADnB0P,EAAA1H,kBAAS0H,EAAA3I,eAAW2I,EAAApH,cAGrBtI,SAKNmS,OAAOrD,WAAY,OACnBuF,cACAC,SAGEjN,QAAQ2P,IAAII,EAAWxa,IAAX,SAAgBkR,EAAQ7S,EAAGyc,OAEtCC,EAAStb,EAAO,WACT,UACH,UACA,IACP2Z,EAAYlI,EAAQ,OACd7S,cACMyc,EAAU9b,SAKnBgc,GAAgC,IAApB5B,EAAW7C,MAAyBrF,EAAOqF,SAWxD,IAAI0E,OAVF1E,MAAqB,IAAdyE,IAGPpQ,SAAWC,EAAgBkQ,UAG3BA,EAAOd,gBACPc,EAAOb,gBAGAa,OACa,IAAdA,EAAOE,WAA2BF,EAAOE,OAGlDC,EAAczQ,QAAQC,QAAQ,OAC9BqQ,EAAOxE,KAAM,KAEToE,EAAOI,EAAOJ,QAChBI,EAAO3P,UAEKD,EADE4P,EAAO3P,QACY2P,UT7RtC,SAAmBJ,EAAMvX,kBAAO,IACrC,IAAM+X,EAAQpY,MAAM6B,QAAQ+V,GAAQA,EAAO,CAAEA,GAE7C,OAAOrO,EADM,IAAIzK,OAAOsK,KAAKgP,EAAO,CAAEzP,KAAMtI,EAAKsI,MAAQ,KACnCtI,GS4RAgY,CAAST,EAAMI,UAG1BG,EAAYvZ,KAAZ,SAAiB0Z,GAAA,OACfjc,OAAOM,OAAO,GAAIqb,EAAQM,QAEjC1Z,KA1CG,SA0CEuJ,OACDoQ,EAAcpQ,EAAG4C,OAAH,SAAU7P,GAAA,OAAKA,EAAEsY,UACjC+E,EAAYtc,OAAS,EAAG,KAKtBsQ,EAHEiM,EAAkBD,EAAYE,KAAZ,SAAiBvd,GAAA,OAAKA,EAAEwd,aAC1CC,EAAWJ,EAAYK,KAAZ,SAAiB1d,GAAA,OAAKA,EAAE+M,SACnC4Q,EAAcN,EAAYK,KAAZ,SAAiB1d,GAAA,OAAKA,EAAEsM,SAGhB+E,EAAxBgM,EAAYtc,OAAS,EAAUsc,EAAYtc,OAEtCuc,EAA2BA,EAAgB,WAAA,IAAcD,EAAY,GAAG,SAErE,GAAGA,EAAY,GAAG,aAC1BO,EAAQ,MACRzC,EAAWY,WACUrM,SAASgJ,EAAKlF,MAAMhE,aACnC,YAA4B2L,EAAWtO,MAAQ,GAAA,MAAO6L,EAAKlF,MAAM,YAAA,IAAA,WAA4B2H,EAAW,MAAA,SACvGkC,EAAYtc,OAAS,MACtB,kBAIFua,IAAR,OAFemC,EAAW,oBAAsB,iBAE9B,QADHE,EAAc,iBAAmB,YACjB,MAAYtM,EAAA,KAASuM,EAAS,kBAAmB,kBAAmB,qBAAsB,+BAErF,mBAA3BlF,EAAKgB,OAAOmE,cAChBnE,OAAOmE,aAEP5Q,iBAIXwO,kBAAA,SAAmBqC,QACZC,eACFnE,KAAKpG,YACHwK,2BAGPD,WAAA,eACQvK,EAAQoG,KAAKpG,MAGdoG,KAAKpG,MAAM4C,KAAM5C,EAAMiD,SAAYjD,EAAMyK,GAKnCzK,EAAMyK,MACTA,GAAGC,MAAM1K,EAAM2K,OAAS3K,EAAMY,WAAYZ,EAAM4K,OAAS5K,EAAMY,eAL/DqC,QAAQ6B,QACqB,IAA/BsB,KAAK/I,SAASwN,gBACV5H,QAAQyH,MAAM1K,EAAM2K,OAAQ3K,EAAM4K,sBAO9CJ,YAAA,eACQxK,EAAQoG,KAAKpG,MAEdoG,KAAKpG,MAAM4C,KAAM5C,EAAMiD,SAAYjD,EAAMyK,MACtCxH,QAAQ6H,UAOZ9K,EAAM4C,KAA8B,IAAxBwD,KAAK/I,SAAS0N,QAAoB/K,EAAMyK,MAChD7H,GAAGmI,qBAIb5D,KAAA,WACMf,KAAKF,QAAsC,mBAArBE,KAAKF,OAAOiB,YAC/BoD,kBACArE,OAAOiB,KAAKf,KAAKpG,YACjBwK,4BAITvE,OAAA,kBACMG,KAAKpG,MAAMyK,SACRvG,uBAAoBhR,OACpB8M,MAAMyK,GAAGO,SACP5E,KAAKlC,mBAELkC,KAAK6E,8BAIhBA,eAAA,cACO7E,KAAKF,YAKN6C,EAHE/I,EAAQoG,KAAKpG,kBACduK,aAIsB,mBAAhBnE,KAAKF,SACDE,KAAKF,OAAOlG,GACc,mBAAvBoG,KAAKF,OAAOD,WACfG,KAAKF,OAAOD,OAAOjG,SAG7BwK,cAEEzB,gBAGTmC,OAAA,SAAQpP,6BAAM,QAINqP,EAAkB,CACtB,kBAGKtc,KAAKiN,GAAKnN,QAAjB,SAAyBe,MACnByb,EAAgBtR,QAAQnK,IAAQ,QAC5B,IAAIxC,MAAJ,gBAA0BwC,EAAA,uDAI9B0b,EAAYhF,KAAKvC,UAAUlB,OAC3B0I,EAAajF,KAAKvC,UAAUZ,YAG7B,IAAIvT,KAAOoM,EAAK,KACbxJ,EAAQwJ,EAAIpM,QACG,IAAV4C,MACJuR,UAAUnU,GAAO4C,OAKpBgZ,EAAW3d,OAAOM,OAAO,GAAImY,KAAKvC,UAAW/H,MAC/C,SAAUA,GAAO,UAAWA,EAAK,MAAM,IAAI5O,MAAM,4DAC5C,SAAU4O,SAAYwP,EAASjS,MAC/B,UAAWyC,UAAYwP,EAAS5E,KACrC,aAAc5K,GAAO,gBAAiBA,EAAK,MAAM,IAAI5O,MAAM,mEACtD,aAAc4O,SAAYwP,EAAStP,YACnC,gBAAiBF,UAAYwP,EAAS/E,SAG3C,SAAUzK,IAAKsK,KAAKtC,OAAOoF,KAAOpN,EAAIoN,UAEpCqC,EAAYnF,KAAKoF,aAAaF,aAC7Brd,OAAOmY,KAAKtC,OAAQyH,GAGvBH,IAAchF,KAAKvC,UAAUlB,QAAU0I,IAAejF,KAAKvC,UAAUZ,QAAS,OACpDD,EAAaoD,KAAKvC,WAA9BZ,EAAA5B,EAAA4B,aAEXjD,MAAM2C,OAFHtB,EAAAsB,YAGH3C,MAAMiD,QAAUA,OAGhBwI,mBAGAC,+BAIH5P,EAAI2O,IAAwB,mBAAX3O,EAAI2O,UAClBzK,MAAMyK,GAAK3O,EAAI2O,QACfzK,MAAMyK,GAAGkB,KAAd,WACMzG,EAAKf,kBACJD,kBAAoBgB,EAAK+F,oBAK9B,YAAanP,IACXA,EAAI4J,QAASU,KAAKR,OACjBQ,KAAKT,WAGES,KAAKvC,gBAGdmC,cACAC,SACEG,KAAKpG,mBAGdgG,OAAA,eACQ4F,EAAWxF,KAAKS,gBAEhBxJ,EAAW+I,KAAK/I,SAChB2C,EAAQoG,KAAKpG,MAGb6L,EAAW9L,EAAaC,EAAO3C,UAG9BpP,OAAOmY,KAAKtC,OAAQ+H,SASvBzF,KAAKpG,MALPY,EAAAS,EAAAT,WACAP,EAAAgB,EAAAhB,YACAC,EAAAe,EAAAf,aACAH,EAAAkB,EAAAlB,WACAC,EAAAiB,EAAAjB,YAIIuC,EAASyD,KAAKpG,MAAM2C,OACtBA,IAAoC,IAA1BtF,EAAS0C,eACjBC,EAAMyK,GAEJ9H,EAAO1C,QAAUI,GAAesC,EAAOzC,SAAWI,SAC/C6D,eAAgB,IAEfsG,GAAGqB,aAAalL,KAChB6J,GAAG1K,aAAaM,EAAcO,EAAYN,EAAeM,GAAY,QACtEuD,eAAgB,IAInBxB,EAAO1C,QAAUI,IAAasC,EAAO1C,MAAQI,GAC7CsC,EAAOzC,SAAWI,IAAcqC,EAAOzC,OAASI,IAGlD3P,MAAwC,IAAzB0M,EAAS0O,gBACnBhR,MAAMkF,MAAQE,EAAA,OACdpF,MAAMmF,OAASE,EAAA,WAIpB4L,EAAW5F,KAAKS,gBAClBoF,GAAWC,EAAUN,EAAUI,UAC/BC,QACGE,eAEAF,eAGTE,aAAA,WAEM/F,KAAKF,QAAwC,mBAAvBE,KAAKF,OAAOF,aAC/BE,OAAOF,OAAOI,KAAKpG,oBAI5B8F,QAAA,cACOM,KAAKpG,MAAM0F,WACX/U,UAIAqT,KAAO5T,OAAOmX,sBAAsBnB,KAAKP,qBAE1C/V,EAAMH,IAGJyc,EAAkB,IADZhG,KAAKpG,MAAM2G,IAEnB0F,EAAcvc,EAAMsW,KAAKkB,UAEvBf,EAAWH,KAAKpG,MAAMuG,SACtB+F,EAAkC,iBAAb/F,GAAyBrK,SAASqK,GAEzDgG,GAAa,EACXC,EAAepG,KAAK/I,SAASmP,aACd,UAAjBA,IACYJ,EACY,aAAjBI,EACLH,EAAcD,OAEX9E,aADQ+E,EAAcD,KAGd,OAGV9E,UAAYxX,MAGb4X,EAAY2E,EAAc,IAC5BI,EAAUrG,KAAKpG,MAAM0G,KAAOgB,EAAYtB,KAAKpG,MAAM0M,UAGnDD,EAAU,GAAKH,MACP/F,EAAWkG,OAInBE,GAAa,EACbC,GAAc,KAIdN,GAAeG,GAAWlG,KAFS,IAAvBH,KAAK/I,SAASwP,SAKb,KACOtG,KACN,OAED,IACHA,KACG,QAGVwB,cAGHwE,EAAY,MACTvM,MAAM0H,UAAYA,OAClB1H,MAAM0G,KAAO+F,OACbzM,MAAMyG,SAAWL,KAAKC,iBAAiBoG,EAASlG,OAC/CuG,EAAY1G,KAAKpG,MAAM3G,WACxB2G,MAAM3G,MAAQ+M,KAAKQ,uBACpBgG,GAAaxG,KAAKc,eAClB4F,IAAc1G,KAAKpG,MAAM3G,OAAO+M,KAAKe,YACpClB,cACAjG,MAAM0H,UAAY,EAGrBiF,QACGhH,qBAvEG6B,MAAM,gFA2ElBuF,SAAA,SAAUzC,MACU,mBAAPA,EAAmB,MAAM,IAAIpd,MAAM,wCAC3CkZ,KAAKpG,YACHiG,sBAGP+G,MAAA,gBACOtB,qCAGPuB,QAAA,WACMtc,aACKqU,oBAAoB,SAAUoB,KAAKL,qBACrC3B,mBAAmB8I,UAEtB9G,KAAKpG,MAAM2C,OAAOjH,oBACfsE,MAAM2C,OAAOjH,cAAcC,YAAYyK,KAAKpG,MAAM2C,qBAI3D+I,sBAAA,WACO/a,OACwB,IAAzByV,KAAK/I,SAASkE,QAAqB6E,KAAKpG,MAAM2C,SAAWyD,KAAKpG,MAAM2C,OAAOjH,gBACvD0K,KAAK/I,SAASkE,QAAU3Q,SAASyK,MACzCC,YAAY8K,KAAKpG,MAAM2C,sBAIzC8I,YAAA,WhBnuBK,IAAyB0B,EgBouBxB/G,KAAKpG,MAAMiD,UhBnuBW,mBADEkK,EgBquBP/G,KAAKpG,MAAMiD,ShBpuBhBmK,OAAkD,mBAAnBD,EAAIE,YAAuD,mBAAnBF,EAAIG,gBgBquBlFxJ,OAAOlB,GAAKwD,KAAKpG,MAAMiD,eAErBmD,KAAKtC,OAAOlB,iBAKzB4I,aAAA,SAAcnO,kBAAW,QAEnBkJ,EAAWlJ,EAASkJ,SACpBvK,EAAcqB,EAASrB,YACrB0Q,EAAYjc,EAAQ4M,EAASqP,UAAW,GACxC/F,EAAMlW,EAAQ4M,EAASsJ,IAAK,IAC5B2F,EAAkC,iBAAb/F,GAAyBrK,SAASqK,GACvDgH,EAAwC,iBAAhBvR,GAA4BE,SAASF,GAE7DwR,EAA0BlB,EAAczX,KAAKC,MAAM6R,EAAMJ,QAAYrT,EACrEua,EAA0BF,EAAkBvR,EAAc2K,OAAOzT,KACnEoZ,GAAeiB,GAAkBC,IAA4BxR,QACzD,IAAI9O,MAAM,sGAGiB,IAAxBmQ,EAASU,iBAAwD,IAAnBV,EAASS,eACxDP,KAAK,8FAGD9M,EAAQuL,EAAawR,EAAyBE,YACjDjd,EAAQ8V,EAAUkH,EAAyBC,cAEhDC,EAAYtQ,EAASqJ,KACrBkH,EAAavQ,EAAShE,MACtBwU,EAAoC,iBAAdF,GAA0BzR,SAASyR,GACzDG,EAAsC,iBAAfF,GAA2B1R,SAAS0R,GAG7DlH,EAAO,EACPrN,EAAQ,EACRoN,EAAW,KACXoH,GAAgBC,QACZ,IAAI5gB,MAAM,uEACP2gB,KAGEzH,KAAKC,mBADTsH,EACgCpH,KAC/BH,KAAKI,cACXC,EAAUC,EACV1K,EAAa2K,IAENmH,MAIE1H,KAAKC,sBAFRuH,GACOjH,EACwBJ,IAGlC,UACLE,OACAC,QACArN,WACAkN,cACAvK,MACA2K,YACA+F,gBAIJqB,MAAA,SAAO1Q,gCAAW,IACZ+I,KAAKF,OAAQ,MAAM,IAAIhZ,MAAM,kDAE5B2W,UAAYlW,OAAOM,OAAO,GAAIoP,EAAU+I,KAAKvC,aAEpCuC,KAAKvC,iBAGSb,EAAaoD,KAAKvC,WAAtCZ,EAAA5B,EAAA4B,QAASN,EAAAtB,EAAAsB,OAEX4I,EAAYnF,KAAKoF,aAAapF,KAAKvC,gBAGpCC,OAASnW,OAAAM,OAAA,GACTsd,UACH5I,UACAM,YACW,WACF,aACE,WACF,aACE,WACDmD,KAAK/I,cACT+I,KAAK/I,SAAS6L,uBAGZ,OAAMhE,EAAKe,gCACP,OAAMf,EAAKP,gCACZ2F,GAAA,OAAOpF,EAAK6H,SAASzC,oBAC1B,OAAMpF,EAAKiC,0BACT,OAAMjC,EAAKc,0BACVlK,GAAA,OAAQoJ,EAAKgG,OAAOpP,yBAChBA,GAAA,OAAOoJ,EAAKO,YAAY3J,sBAC7B,OAAMoJ,EAAKM,0BACb,OAAMN,EAAKU,yBACV,OAAMV,EAAKS,yBACZ,OAAMT,EAAKuC,eAIdgE,mBAIAzF,sBAGPgI,WAAA,SAAYC,EAAcC,qBACjB9H,KAAK+H,KAAKF,EAAcC,GAAahe,KAArC,oBACAqV,MACEL,iBAIXkJ,OAAA,2BACOzI,QACAS,KAAKF,SACwB,mBAAvBE,KAAKF,OAAOkI,aAChBnG,kBAAL,SAAuBjI,GAAA,OAASkF,EAAKgB,OAAOkI,OAAOpO,UAEhD+D,QAAU,mBAGjBsK,QAAA,gBACOD,cACAnB,uBAGPkB,KAAA,SAAMG,EAAcJ,iBAEU,mBAAjBI,QACH,IAAIphB,MAAM,oHAGdkZ,KAAKF,aACFkI,cAGoB,IAAhBF,QACJhD,OAAOgD,QAMT3D,iBAEDgE,EAAUvV,QAAQC,aAIlBmN,KAAK/I,SAASoN,GAAI,KACf9Z,UACG,IAAIzD,MAAM,oEAER,IAAI8L,QAAJ,SAAYC,OAEhBsV,EADAC,EAAgBtJ,EAAK7H,SAASoN,GAE9B+D,EAAc/D,OACN+D,EAAcD,UACRC,EAAc/D,QAI1BgE,EAAA,SAAWhE,GAEX8D,IAAS9D,EAAG8D,QAAH,WAAa,OAAMA,EAAQ9D,OACrCsD,MAAH,eACQ/N,EAAQkF,EAAKlF,MACb0O,EAAiC,UAA1BxJ,EAAK7H,SAAS4F,QACrB0L,EAAWD,EAAOjE,EAAGmE,MAAQnE,EAAGoE,MACnCC,WACAhD,aAAa9L,EAAMY,cACnBoC,aAAahD,EAAM8G,cAAe9G,EAAM+G,eAAgB4H,GACvDD,GAAQxJ,EAAK7H,SAASgG,cACrB0L,cAAc7J,EAAK7H,SAASgG,cAG5B6H,OAAO,IAAET,SAAYA,EAAG9H,eAAiB8H,EAAGuE,UAAUC,0BAMlC,mBAAlBT,MACLA,EAAcC,OACb,IAC8B,mBAAxBre,OAAO4S,mBACV,IAAI9V,MAAM,8JAETkD,kBAKRme,EAAQre,KAAR,eAEDgf,EAASZ,EAAapJ,EAAKlF,cAC1BhQ,EAAUkf,OACJlW,QAAQC,QAAQiW,IAEpBA,IACNhf,KAPI,SAOCgW,UACDA,IAAQA,EAAS,MACjBnC,QAAUmC,EAGXvV,QACGyT,mBAAmB+K,gBACjBpK,iBAAiB,SAAUG,EAAKa,mBAGpCyE,gBAMA2B,eACEjH,IACNgD,MAzBI,SAyBEpZ,iBACCyO,KAAK,0FAA4FzO,EAAIsgB,SACvGtgB,4CE39BZ,IAAMugB,EAAQ,eACRC,EAAoB,GA0B1B,SAASrB,EAAc/H,EAAQ7I,GAC7B,kBADwC,IACpCA,EAASoN,GAAI,CACf,GAAIpN,EAASsF,QAAWtF,EAAS4F,SAAuC,iBAArB5F,EAAS4F,QAC1D,MAAM,IAAI/V,MAAM,8GAKlBmQ,EAAW1P,OAAOM,OAAO,GAAIoP,EAAU,CAAEsF,QAAQ,UADL,iBAArBtF,EAAS4F,SAAuB5F,EAAS4F,UAIlE,IAlCM1J,EAmCFgW,EADEC,GAlCAjW,EAAS/I,MACE+I,EAAOkW,IAmCpBD,IAIFD,EAAQ9e,EAAQ4M,EAASqS,GAAI,mCAE/B,IAAIC,EAAcH,GAA0B,iBAAVD,EAE9BI,GAAeL,EAAkB9R,SAAS+R,KAC5CjS,QAAQC,KAAK,oKAAqKgS,GAClLI,GAAc,GAGhB,IAAIpB,EAAUvV,QAAQC,UAEtB,GAAI0W,EAAa,CAEfL,EAAkBve,KAAKwe,GAEvB,IAAMK,EAnDV,SAAmBF,GACjB,IAAMnW,EAAS/I,IACf,GAAK+I,EAEL,OADAA,EAAO8V,GAAS9V,EAAO8V,IAAU,GAC1B9V,EAAO8V,GAAOK,GA+CEG,CAASN,GAC9B,GAAIK,EAAc,CAChB,IAAME,EAAA,WAEJ,IAzCcC,EAyCRlE,GAzCQkE,EAyCeH,EAAaI,QAAS3S,EAvCtCyI,QAAU,CAAEY,KAAMqJ,EAAW/P,MAAM0G,WAASxT,GA2CzD,OAFA0c,EAAaI,QAAQ3B,UAEdxC,GAIT0C,EAAUqB,EAAazB,KAAKje,KAAK4f,GAAM5H,MAAM4H,IAIjD,OAAOvB,EAAQre,KAAR,SAAa2b,GAClB,IACIpM,EA9DWiQ,EAAIxG,EACf3P,EA4DEyW,EAAU,IAAIpM,EAoBpB,OAlBIsC,GAEF7I,EAAW1P,OAAOM,OAAO,GAAIoP,EAAUwO,GAGvCmE,EAAQjC,MAAM1Q,GAGd2S,EAAQhD,QAGRvN,EAASuQ,EAAQhC,WAAW9H,IAE5BzG,EAASzG,QAAQC,QAAQ+W,GAEvBL,IA9EWD,EA+EJH,EA/EQrG,EA+ED,CAAEiF,KAAM1O,UAAQuQ,IA9E9BzW,EAAS/I,OAEf+I,EAAO8V,GAAS9V,EAAO8V,IAAU,GACjC9V,EAAO8V,GAAOK,GAAMxG,IA6EXzJ,WAKXwO,EAAaA,aAAeA,EAC5BA,EAAagC,WAAaxS,gJC1G1B,IAAAhL,EAAAyd,EAAAzd,EAIA2T,KAJA8J,EAIA,SAAA7iB,GAAA,kBAIA6F,IAAAyM,OAAAwQ,UAEAxQ,OAAAwQ,QAAAtb,KAAAub,IAAA,GAAA,UAIAld,IAAAyM,OAAA0Q,YAKA1Q,OAAA0Q,UAAA,SAAA/d,GAEA,MAAA,iBAAAA,GAAA4J,SAAA5J,IAAAuC,KAAAC,MAAAxC,KAAAA,SAQAY,IAAA2B,KAAAyb,OAIAzb,KAAAyb,KAAA,SAAA/d,GAEA,OAAAA,EAAA,GAAA,EAAAA,EAAA,EAAA,GAAAA,IAMA,SAAAge,SAAA1iB,YAAA,GAKAF,OAAA6iB,eAAAD,SAAA1iB,UAAA,OAAA,CAEAsY,IAAA,WAEA,OAAAC,KAAAnV,WAAA2F,MAAA,6BAAA,WAQA1D,IAAAvF,OAAAM,SAKAN,OAAAM,OAAA,SAAAe,GAEA,GAAAA,MAAAA,EAEA,MAAA,IAAAM,UAAA,8CAMA,IAFA,IAAAkK,EAAA7L,OAAAqB,GAEAyhB,EAAA,EAAAA,EAAAhhB,UAAAlC,OAAAkjB,IAAA,CAEA,IAAAxhB,EAAAQ,UAAAghB,GAEA,GAAAxhB,MAAAA,EAEA,IAAA,IAAAyhB,KAAAzhB,EAEAtB,OAAAE,UAAAD,eAAAN,KAAA2B,EAAAyhB,KAEAlX,EAAAkX,GAAAzhB,EAAAyhB,IAUA,OAAAlX,IAMA,IAGAmX,EAAA,EACAC,EAAA,EACAC,EAAA,EAKAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAGAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAGAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,GAAA,IACAC,GAAA,IACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KAEAC,GAAA,KAEAC,GAAA,KACAC,GAAA,KAEAC,GAAA,KAEAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAAH,GACAI,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KAEAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MACAC,GAAA,MAEAC,GAAA,KAKAC,GAAA,KAGAC,GAAA,KAKAC,GAAA,IACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,EACAC,GAAA,EAGAC,GAAA,KAeAC,GAAA,IAEAC,GAAA,MACAC,GAAA,MAaA,SAAAC,MAEApsB,OAAAM,OAAA8rB,GAAAlsB,UAAA,CAEAkX,iBAAA,SAAA9K,EAAA+f,QAEA9mB,IAAAkT,KAAA6T,aAAA7T,KAAA6T,WAAA,IAEA,IAAAC,EAAA9T,KAAA6T,gBAEA/mB,IAAAgnB,EAAAjgB,KAEAigB,EAAAjgB,GAAA,KAIA,IAAAigB,EAAAjgB,GAAAJ,QAAAmgB,IAEAE,EAAAjgB,GAAAlJ,KAAAipB,IAMAG,iBAAA,SAAAlgB,EAAA+f,GAEA,QAAA9mB,IAAAkT,KAAA6T,WAAA,OAAA,EAEA,IAAAC,EAAA9T,KAAA6T,WAEA,YAAA/mB,IAAAgnB,EAAAjgB,KAAA,IAAAigB,EAAAjgB,GAAAJ,QAAAmgB,IAIAhV,oBAAA,SAAA/K,EAAA+f,GAEA,QAAA9mB,IAAAkT,KAAA6T,WAAA,CAEA,IACAG,EADAhU,KAAA6T,WACAhgB,GAEA,QAAA/G,IAAAknB,EAAA,CAEA,IAAA3J,EAAA2J,EAAAvgB,QAAAmgB,IAEA,IAAAvJ,GAEA2J,EAAAC,OAAA5J,EAAA,MAQA6J,cAAA,SAAAC,GAEA,QAAArnB,IAAAkT,KAAA6T,WAAA,CAEA,IACAG,EADAhU,KAAA6T,WACAM,EAAAtgB,MAEA,QAAA/G,IAAAknB,EAAA,CAEAG,EAAAvrB,OAAAoX,KAKA,IAFA,IAAAoU,EAAAJ,EAAA7oB,MAAA,GAEA3E,EAAA,EAAAyJ,EAAAmkB,EAAAjtB,OAAAX,EAAAyJ,EAAAzJ,IAEA4tB,EAAA5tB,GAAAU,KAAA8Y,KAAAmU,QAmBA,IAFA,IAAAE,GAAA,GAEA7tB,GAAA,EAAAA,GAAA,IAAAA,KAEA6tB,GAAA7tB,KAAAA,GAAA,GAAA,IAAA,IAAA,GAAAqE,SAAA,IAIA,IA8hCAypB,GA9hCAC,GAAA,CAEAC,QAAA/lB,KAAAgmB,GAAA,IACAC,QAAA,IAAAjmB,KAAAgmB,GAEAE,aAAA,WAIA,IAAAC,EAAA,WAAAnmB,KAAAomB,SAAA,EACAC,EAAA,WAAArmB,KAAAomB,SAAA,EACAE,EAAA,WAAAtmB,KAAAomB,SAAA,EACAG,EAAA,WAAAvmB,KAAAomB,SAAA,EAOA,OANAR,GAAA,IAAAO,GAAAP,GAAAO,GAAA,EAAA,KAAAP,GAAAO,GAAA,GAAA,KAAAP,GAAAO,GAAA,GAAA,KAAA,IACAP,GAAA,IAAAS,GAAAT,GAAAS,GAAA,EAAA,KAAA,IAAAT,GAAAS,GAAA,GAAA,GAAA,IAAAT,GAAAS,GAAA,GAAA,KAAA,IACAT,GAAA,GAAAU,EAAA,KAAAV,GAAAU,GAAA,EAAA,KAAA,IAAAV,GAAAU,GAAA,GAAA,KAAAV,GAAAU,GAAA,GAAA,KACAV,GAAA,IAAAW,GAAAX,GAAAW,GAAA,EAAA,KAAAX,GAAAW,GAAA,GAAA,KAAAX,GAAAW,GAAA,GAAA,MAGAC,eAIAC,MAAA,SAAAhpB,EAAA4O,EAAA/I,GAEA,OAAAtD,KAAAsD,IAAA+I,EAAArM,KAAAqM,IAAA/I,EAAA7F,KAOAipB,gBAAA,SAAA9uB,EAAAmH,GAEA,OAAAnH,EAAAmH,EAAAA,GAAAA,GAMA4nB,UAAA,SAAAjpB,EAAAkpB,EAAAC,EAAAC,EAAAC,GAEA,OAAAD,GAAAppB,EAAAkpB,IAAAG,EAAAD,IAAAD,EAAAD,IAMAI,KAAA,SAAAtpB,EAAAsB,EAAAnH,GAEA,OAAA,EAAAA,GAAA6F,EAAA7F,EAAAmH,GAMAioB,WAAA,SAAAvpB,EAAA2O,EAAA/I,GAEA,OAAA5F,GAAA2O,EAAA,EACA3O,GAAA4F,EAAA,GAEA5F,GAAAA,EAAA2O,IAAA/I,EAAA+I,IAEA3O,GAAA,EAAA,EAAAA,IAIAwpB,aAAA,SAAAxpB,EAAA2O,EAAA/I,GAEA,OAAA5F,GAAA2O,EAAA,EACA3O,GAAA4F,EAAA,GAEA5F,GAAAA,EAAA2O,IAAA/I,EAAA+I,IAEA3O,EAAAA,GAAAA,GAAA,EAAAA,EAAA,IAAA,KAMAypB,QAAA,SAAAC,EAAAC,GAEA,OAAAD,EAAApnB,KAAAC,MAAAD,KAAAomB,UAAAiB,EAAAD,EAAA,KAMAE,UAAA,SAAAF,EAAAC,GAEA,OAAAD,EAAApnB,KAAAomB,UAAAiB,EAAAD,IAMAG,gBAAA,SAAAC,GAEA,OAAAA,GAAA,GAAAxnB,KAAAomB,WAIAqB,SAAA,SAAAC,GAEA,OAAAA,EAAA5B,GAAAC,SAIA4B,SAAA,SAAAC,GAEA,OAAAA,EAAA9B,GAAAG,SAIA4B,aAAA,SAAApqB,GAEA,OAAA,IAAAA,EAAAA,EAAA,IAAA,IAAAA,GAIAqqB,eAAA,SAAArqB,GAEA,OAAAuC,KAAAub,IAAA,EAAAvb,KAAA+nB,KAAA/nB,KAAAiT,IAAAxV,GAAAuC,KAAAgoB,OAIAC,gBAAA,SAAAxqB,GAEA,OAAAuC,KAAAub,IAAA,EAAAvb,KAAAC,MAAAD,KAAAiT,IAAAxV,GAAAuC,KAAAgoB,OAIAE,6BAAA,SAAAC,EAAA/vB,EAAA6E,EAAAhF,EAAAmwB,GAQA,IAAAC,EAAAroB,KAAAqoB,IACAC,EAAAtoB,KAAAsoB,IAEAC,EAAAF,EAAAprB,EAAA,GACAurB,EAAAF,EAAArrB,EAAA,GAEAwrB,EAAAJ,GAAAjwB,EAAAH,GAAA,GACAywB,EAAAJ,GAAAlwB,EAAAH,GAAA,GAEA0wB,EAAAN,GAAAjwB,EAAAH,GAAA,GACA2wB,EAAAN,GAAAlwB,EAAAH,GAAA,GAEA4wB,EAAAR,GAAApwB,EAAAG,GAAA,GACA0wB,EAAAR,GAAArwB,EAAAG,GAAA,GAEA,OAAAgwB,GAEA,IAAA,MACAD,EAAAY,IAAAR,EAAAG,EAAAF,EAAAG,EAAAH,EAAAI,EAAAL,EAAAE,GACA,MAEA,IAAA,MACAN,EAAAY,IAAAP,EAAAI,EAAAL,EAAAG,EAAAF,EAAAG,EAAAJ,EAAAE,GACA,MAEA,IAAA,MACAN,EAAAY,IAAAP,EAAAG,EAAAH,EAAAI,EAAAL,EAAAG,EAAAH,EAAAE,GACA,MAEA,IAAA,MACAN,EAAAY,IAAAR,EAAAG,EAAAF,EAAAM,EAAAN,EAAAK,EAAAN,EAAAE,GACA,MAEA,IAAA,MACAN,EAAAY,IAAAP,EAAAK,EAAAN,EAAAG,EAAAF,EAAAM,EAAAP,EAAAE,GACA,MAEA,IAAA,MACAN,EAAAY,IAAAP,EAAAM,EAAAN,EAAAK,EAAAN,EAAAG,EAAAH,EAAAE,GACA,MAEA,QACAhgB,QAAAC,KAAA,kFAAA0f,MAeA,SAAAY,GAAAtrB,EAAAsB,QACA,IAAAtB,IAAAA,EAAA,QACA,IAAAsB,IAAAA,EAAA,GAGAuS,KAAA7T,EAAAA,EACA6T,KAAAvS,EAAAA,EAifA,SAAAiqB,KAEA1X,KAAA2X,SAAA,CAEA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GAIAtuB,UAAAlC,OAAA,GAEA+P,QAAAkK,MAAA,iFAzfA7Z,OAAAqwB,iBAAAH,GAAAhwB,UAAA,CAEAoS,MAAA,CAEAkG,IAAA,WAEA,OAAAC,KAAA7T,GAIAqrB,IAAA,SAAAtrB,GAEA8T,KAAA7T,EAAAD,IAMA4N,OAAA,CAEAiG,IAAA,WAEA,OAAAC,KAAAvS,GAIA+pB,IAAA,SAAAtrB,GAEA8T,KAAAvS,EAAAvB,MAQA3E,OAAAM,OAAA4vB,GAAAhwB,UAAA,CAEAowB,WAAA,EAEAL,IAAA,SAAArrB,EAAAsB,GAKA,OAHAuS,KAAA7T,EAAAA,EACA6T,KAAAvS,EAAAA,EAEAuS,MAIA8X,UAAA,SAAAC,GAKA,OAHA/X,KAAA7T,EAAA4rB,EACA/X,KAAAvS,EAAAsqB,EAEA/X,MAIAgY,KAAA,SAAA7rB,GAIA,OAFA6T,KAAA7T,EAAAA,EAEA6T,MAIAiY,KAAA,SAAAxqB,GAIA,OAFAuS,KAAAvS,EAAAA,EAEAuS,MAIAkY,aAAA,SAAA7N,EAAAne,GAEA,OAAAme,GAEA,KAAA,EAAArK,KAAA7T,EAAAD,EAAA,MACA,KAAA,EAAA8T,KAAAvS,EAAAvB,EAAA,MACA,QAAA,MAAA,IAAApF,MAAA,0BAAAujB,GAIA,OAAArK,MAIAmY,aAAA,SAAA9N,GAEA,OAAAA,GAEA,KAAA,EAAA,OAAArK,KAAA7T,EACA,KAAA,EAAA,OAAA6T,KAAAvS,EACA,QAAA,MAAA,IAAA3G,MAAA,0BAAAujB,KAMA+N,MAAA,WAEA,OAAA,IAAApY,KAAAqY,YAAArY,KAAA7T,EAAA6T,KAAAvS,IAIArB,KAAA,SAAAksB,GAKA,OAHAtY,KAAA7T,EAAAmsB,EAAAnsB,EACA6T,KAAAvS,EAAA6qB,EAAA7qB,EAEAuS,MAIAuY,IAAA,SAAAD,EAAAE,GAEA,YAAA1rB,IAAA0rB,GAEAthB,QAAAC,KAAA,yFACA6I,KAAAyY,WAAAH,EAAAE,KAIAxY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EAEAuS,OAIA0Y,UAAA,SAAAtvB,GAKA,OAHA4W,KAAA7T,GAAA/C,EACA4W,KAAAvS,GAAArE,EAEA4W,MAIAyY,WAAA,SAAA5xB,EAAA6E,GAKA,OAHAsU,KAAA7T,EAAAtF,EAAAsF,EAAAT,EAAAS,EACA6T,KAAAvS,EAAA5G,EAAA4G,EAAA/B,EAAA+B,EAEAuS,MAIA2Y,gBAAA,SAAAL,EAAAlvB,GAKA,OAHA4W,KAAA7T,GAAAmsB,EAAAnsB,EAAA/C,EACA4W,KAAAvS,GAAA6qB,EAAA7qB,EAAArE,EAEA4W,MAIA4Y,IAAA,SAAAN,EAAAE,GAEA,YAAA1rB,IAAA0rB,GAEAthB,QAAAC,KAAA,yFACA6I,KAAA6Y,WAAAP,EAAAE,KAIAxY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EAEAuS,OAIA8Y,UAAA,SAAA1vB,GAKA,OAHA4W,KAAA7T,GAAA/C,EACA4W,KAAAvS,GAAArE,EAEA4W,MAIA6Y,WAAA,SAAAhyB,EAAA6E,GAKA,OAHAsU,KAAA7T,EAAAtF,EAAAsF,EAAAT,EAAAS,EACA6T,KAAAvS,EAAA5G,EAAA4G,EAAA/B,EAAA+B,EAEAuS,MAIA+Y,SAAA,SAAAT,GAKA,OAHAtY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EAEAuS,MAIAgZ,eAAA,SAAAjB,GAKA,OAHA/X,KAAA7T,GAAA4rB,EACA/X,KAAAvS,GAAAsqB,EAEA/X,MAIAiZ,OAAA,SAAAX,GAKA,OAHAtY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EAEAuS,MAIAkZ,aAAA,SAAAnB,GAEA,OAAA/X,KAAAgZ,eAAA,EAAAjB,IAIAoB,aAAA,SAAA3rB,GAEA,IAAArB,EAAA6T,KAAA7T,EAAAsB,EAAAuS,KAAAvS,EACArH,EAAAoH,EAAAmqB,SAKA,OAHA3X,KAAA7T,EAAA/F,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GACA4Z,KAAAvS,EAAArH,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAEA4Z,MAIAlF,IAAA,SAAAwd,GAKA,OAHAtY,KAAA7T,EAAAsC,KAAAqM,IAAAkF,KAAA7T,EAAAmsB,EAAAnsB,GACA6T,KAAAvS,EAAAgB,KAAAqM,IAAAkF,KAAAvS,EAAA6qB,EAAA7qB,GAEAuS,MAIAjO,IAAA,SAAAumB,GAKA,OAHAtY,KAAA7T,EAAAsC,KAAAsD,IAAAiO,KAAA7T,EAAAmsB,EAAAnsB,GACA6T,KAAAvS,EAAAgB,KAAAsD,IAAAiO,KAAAvS,EAAA6qB,EAAA7qB,GAEAuS,MAIAkV,MAAA,SAAApa,EAAA/I,GAOA,OAHAiO,KAAA7T,EAAAsC,KAAAsD,IAAA+I,EAAA3O,EAAAsC,KAAAqM,IAAA/I,EAAA5F,EAAA6T,KAAA7T,IACA6T,KAAAvS,EAAAgB,KAAAsD,IAAA+I,EAAArN,EAAAgB,KAAAqM,IAAA/I,EAAAtE,EAAAuS,KAAAvS,IAEAuS,MAIAoZ,YAAA,SAAAC,EAAAC,GAKA,OAHAtZ,KAAA7T,EAAAsC,KAAAsD,IAAAsnB,EAAA5qB,KAAAqM,IAAAwe,EAAAtZ,KAAA7T,IACA6T,KAAAvS,EAAAgB,KAAAsD,IAAAsnB,EAAA5qB,KAAAqM,IAAAwe,EAAAtZ,KAAAvS,IAEAuS,MAIAuZ,YAAA,SAAAze,EAAA/I,GAEA,IAAA5K,EAAA6Y,KAAA7Y,SAEA,OAAA6Y,KAAAkZ,aAAA/xB,GAAA,GAAA6xB,eAAAvqB,KAAAsD,IAAA+I,EAAArM,KAAAqM,IAAA/I,EAAA5K,MAIAuH,MAAA,WAKA,OAHAsR,KAAA7T,EAAAsC,KAAAC,MAAAsR,KAAA7T,GACA6T,KAAAvS,EAAAgB,KAAAC,MAAAsR,KAAAvS,GAEAuS,MAIAwW,KAAA,WAKA,OAHAxW,KAAA7T,EAAAsC,KAAA+nB,KAAAxW,KAAA7T,GACA6T,KAAAvS,EAAAgB,KAAA+nB,KAAAxW,KAAAvS,GAEAuS,MAIA9P,MAAA,WAKA,OAHA8P,KAAA7T,EAAAsC,KAAAyB,MAAA8P,KAAA7T,GACA6T,KAAAvS,EAAAgB,KAAAyB,MAAA8P,KAAAvS,GAEAuS,MAIAwZ,YAAA,WAKA,OAHAxZ,KAAA7T,EAAA6T,KAAA7T,EAAA,EAAAsC,KAAA+nB,KAAAxW,KAAA7T,GAAAsC,KAAAC,MAAAsR,KAAA7T,GACA6T,KAAAvS,EAAAuS,KAAAvS,EAAA,EAAAgB,KAAA+nB,KAAAxW,KAAAvS,GAAAgB,KAAAC,MAAAsR,KAAAvS,GAEAuS,MAIAyZ,OAAA,WAKA,OAHAzZ,KAAA7T,GAAA6T,KAAA7T,EACA6T,KAAAvS,GAAAuS,KAAAvS,EAEAuS,MAIA0Z,IAAA,SAAApB,GAEA,OAAAtY,KAAA7T,EAAAmsB,EAAAnsB,EAAA6T,KAAAvS,EAAA6qB,EAAA7qB,GAIAksB,MAAA,SAAArB,GAEA,OAAAtY,KAAA7T,EAAAmsB,EAAA7qB,EAAAuS,KAAAvS,EAAA6qB,EAAAnsB,GAIAytB,SAAA,WAEA,OAAA5Z,KAAA7T,EAAA6T,KAAA7T,EAAA6T,KAAAvS,EAAAuS,KAAAvS,GAIAtG,OAAA,WAEA,OAAAsH,KAAAorB,KAAA7Z,KAAA7T,EAAA6T,KAAA7T,EAAA6T,KAAAvS,EAAAuS,KAAAvS,IAIAqsB,gBAAA,WAEA,OAAArrB,KAAAkC,IAAAqP,KAAA7T,GAAAsC,KAAAkC,IAAAqP,KAAAvS,IAIAssB,UAAA,WAEA,OAAA/Z,KAAAkZ,aAAAlZ,KAAA7Y,UAAA,IAIA6yB,MAAA,WAMA,OAFAvrB,KAAAwrB,OAAAja,KAAAvS,GAAAuS,KAAA7T,GAAAsC,KAAAgmB,IAMAyF,WAAA,SAAA5B,GAEA,OAAA7pB,KAAAorB,KAAA7Z,KAAAma,kBAAA7B,KAIA6B,kBAAA,SAAA7B,GAEA,IAAA8B,EAAApa,KAAA7T,EAAAmsB,EAAAnsB,EAAAkuB,EAAAra,KAAAvS,EAAA6qB,EAAA7qB,EACA,OAAA2sB,EAAAA,EAAAC,EAAAA,GAIAC,oBAAA,SAAAhC,GAEA,OAAA7pB,KAAAkC,IAAAqP,KAAA7T,EAAAmsB,EAAAnsB,GAAAsC,KAAAkC,IAAAqP,KAAAvS,EAAA6qB,EAAA7qB,IAIA8sB,UAAA,SAAApzB,GAEA,OAAA6Y,KAAA+Z,YAAAf,eAAA7xB,IAIAsuB,KAAA,SAAA6C,EAAAkC,GAKA,OAHAxa,KAAA7T,IAAAmsB,EAAAnsB,EAAA6T,KAAA7T,GAAAquB,EACAxa,KAAAvS,IAAA6qB,EAAA7qB,EAAAuS,KAAAvS,GAAA+sB,EAEAxa,MAIAya,YAAA,SAAAC,EAAAC,EAAAH,GAKA,OAHAxa,KAAA7T,EAAAuuB,EAAAvuB,GAAAwuB,EAAAxuB,EAAAuuB,EAAAvuB,GAAAquB,EACAxa,KAAAvS,EAAAitB,EAAAjtB,GAAAktB,EAAAltB,EAAAitB,EAAAjtB,GAAA+sB,EAEAxa,MAIA4a,OAAA,SAAAtC,GAEA,OAAAA,EAAAnsB,IAAA6T,KAAA7T,GAAAmsB,EAAA7qB,IAAAuS,KAAAvS,GAIAotB,UAAA,SAAAzG,EAAA0G,GAOA,YALAhuB,IAAAguB,IAAAA,EAAA,GAEA9a,KAAA7T,EAAAioB,EAAA0G,GACA9a,KAAAvS,EAAA2mB,EAAA0G,EAAA,GAEA9a,MAIA+a,QAAA,SAAA3G,EAAA0G,GAQA,YANAhuB,IAAAsnB,IAAAA,EAAA,SACAtnB,IAAAguB,IAAAA,EAAA,GAEA1G,EAAA0G,GAAA9a,KAAA7T,EACAioB,EAAA0G,EAAA,GAAA9a,KAAAvS,EAEA2mB,GAIA4G,oBAAA,SAAAC,EAAA5Q,EAAAyQ,GAWA,YATAhuB,IAAAguB,GAEA5jB,QAAAC,KAAA,uEAIA6I,KAAA7T,EAAA8uB,EAAAC,KAAA7Q,GACArK,KAAAvS,EAAAwtB,EAAAE,KAAA9Q,GAEArK,MAIAob,aAAA,SAAAC,EAAArB,GAEA,IAAAtzB,EAAA+H,KAAAqoB,IAAAkD,GAAA5wB,EAAAqF,KAAAsoB,IAAAiD,GAEA7tB,EAAA6T,KAAA7T,EAAAkvB,EAAAlvB,EACAsB,EAAAuS,KAAAvS,EAAA4tB,EAAA5tB,EAKA,OAHAuS,KAAA7T,EAAAA,EAAAzF,EAAA+G,EAAArE,EAAAiyB,EAAAlvB,EACA6T,KAAAvS,EAAAtB,EAAA/C,EAAAqE,EAAA/G,EAAA20B,EAAA5tB,EAEAuS,MAIA6U,OAAA,WAKA,OAHA7U,KAAA7T,EAAAsC,KAAAomB,SACA7U,KAAAvS,EAAAgB,KAAAomB,SAEA7U,QA+BAzY,OAAAM,OAAA6vB,GAAAjwB,UAAA,CAEA6zB,WAAA,EAEA9D,IAAA,SAAA+D,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAC,EAAAhc,KAAA2X,SAMA,OAJAqE,EAAA,GAAAT,EAAAS,EAAA,GAAAN,EAAAM,EAAA,GAAAH,EACAG,EAAA,GAAAR,EAAAQ,EAAA,GAAAL,EAAAK,EAAA,GAAAF,EACAE,EAAA,GAAAP,EAAAO,EAAA,GAAAJ,EAAAI,EAAA,GAAAD,EAEA/b,MAIAic,SAAA,WAUA,OARAjc,KAAAwX,IAEA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GAIAxX,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAwC,UAAA7a,KAAA2X,WAIAvrB,KAAA,SAAAoB,GAEA,IAAAwuB,EAAAhc,KAAA2X,SACAuE,EAAA1uB,EAAAmqB,SAMA,OAJAqE,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAEAlc,MAIAmc,aAAA,SAAAC,EAAAC,EAAAC,GAMA,OAJAF,EAAAG,qBAAAvc,KAAA,GACAqc,EAAAE,qBAAAvc,KAAA,GACAsc,EAAAC,qBAAAvc,KAAA,GAEAA,MAIAwc,eAAA,SAAAhvB,GAEA,IAAA0uB,EAAA1uB,EAAAmqB,SAUA,OARA3X,KAAAwX,IAEA0E,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAIAlc,MAIA+Y,SAAA,SAAAvrB,GAEA,OAAAwS,KAAAyc,iBAAAzc,KAAAxS,IAIAkvB,YAAA,SAAAlvB,GAEA,OAAAwS,KAAAyc,iBAAAjvB,EAAAwS,OAIAyc,iBAAA,SAAA51B,EAAA6E,GAEA,IAAAixB,EAAA91B,EAAA8wB,SACAiF,EAAAlxB,EAAAisB,SACAqE,EAAAhc,KAAA2X,SAEAkF,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,GAEAW,EAAAV,EAAA,GAAAW,EAAAX,EAAA,GAAAY,EAAAZ,EAAA,GACAa,EAAAb,EAAA,GAAAc,EAAAd,EAAA,GAAAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GAAAiB,EAAAjB,EAAA,GAAAkB,EAAAlB,EAAA,GAcA,OAZAZ,EAAA,GAAAa,EAAAS,EAAAR,EAAAW,EAAAV,EAAAa,EACA5B,EAAA,GAAAa,EAAAU,EAAAT,EAAAY,EAAAX,EAAAc,EACA7B,EAAA,GAAAa,EAAAW,EAAAV,EAAAa,EAAAZ,EAAAe,EAEA9B,EAAA,GAAAgB,EAAAM,EAAAL,EAAAQ,EAAAP,EAAAU,EACA5B,EAAA,GAAAgB,EAAAO,EAAAN,EAAAS,EAAAR,EAAAW,EACA7B,EAAA,GAAAgB,EAAAQ,EAAAP,EAAAU,EAAAT,EAAAY,EAEA9B,EAAA,GAAAmB,EAAAG,EAAAF,EAAAK,EAAAJ,EAAAO,EACA5B,EAAA,GAAAmB,EAAAI,EAAAH,EAAAM,EAAAL,EAAAQ,EACA7B,EAAA,GAAAmB,EAAAK,EAAAJ,EAAAO,EAAAN,EAAAS,EAEA9d,MAIAgZ,eAAA,SAAA5vB,GAEA,IAAA4yB,EAAAhc,KAAA2X,SAMA,OAJAqE,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EACA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EACA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAEA4W,MAIA+d,YAAA,WAEA,IAAA/B,EAAAhc,KAAA2X,SAEA9wB,EAAAm1B,EAAA,GAAAtwB,EAAAswB,EAAA,GAAAt1B,EAAAs1B,EAAA,GACA1uB,EAAA0uB,EAAA,GAAA51B,EAAA41B,EAAA,GAAAv1B,EAAAu1B,EAAA,GACAgC,EAAAhC,EAAA,GAAApsB,EAAAosB,EAAA,GAAAx1B,EAAAw1B,EAAA,GAEA,OAAAn1B,EAAAT,EAAAI,EAAAK,EAAAJ,EAAAmJ,EAAAlE,EAAA4B,EAAA9G,EAAAkF,EAAAjF,EAAAu3B,EAAAt3B,EAAA4G,EAAAsC,EAAAlJ,EAAAN,EAAA43B,GAIAC,WAAA,SAAAC,EAAAC,QAEArxB,IAAAqxB,GAEAjnB,QAAAC,KAAA,oFAIA,IAAA+kB,EAAAgC,EAAAvG,SACAqE,EAAAhc,KAAA2X,SAEA4D,EAAAW,EAAA,GAAAR,EAAAQ,EAAA,GAAAL,EAAAK,EAAA,GACAV,EAAAU,EAAA,GAAAP,EAAAO,EAAA,GAAAJ,EAAAI,EAAA,GACAT,EAAAS,EAAA,GAAAN,EAAAM,EAAA,GAAAH,EAAAG,EAAA,GAEAkC,EAAArC,EAAAJ,EAAAG,EAAAF,EACAyC,EAAAvC,EAAAL,EAAAM,EAAAP,EACA8C,EAAA1C,EAAAJ,EAAAG,EAAAF,EAEA8C,EAAAhD,EAAA6C,EAAA1C,EAAA2C,EAAAxC,EAAAyC,EAEA,GAAA,IAAAC,EAAA,OAAAve,KAAAwX,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IAAAgH,EAAA,EAAAD,EAcA,OAZAvC,EAAA,GAAAoC,EAAAI,EACAxC,EAAA,IAAAH,EAAAD,EAAAG,EAAAL,GAAA8C,EACAxC,EAAA,IAAAF,EAAAJ,EAAAG,EAAAF,GAAA6C,EAEAxC,EAAA,GAAAqC,EAAAG,EACAxC,EAAA,IAAAD,EAAAR,EAAAM,EAAAJ,GAAA+C,EACAxC,EAAA,IAAAH,EAAAL,EAAAM,EAAAP,GAAAiD,EAEAxC,EAAA,GAAAsC,EAAAE,EACAxC,EAAA,IAAAN,EAAAD,EAAAG,EAAAL,GAAAiD,EACAxC,EAAA,IAAAL,EAAAJ,EAAAG,EAAAF,GAAAgD,EAEAxe,MAIAye,UAAA,WAEA,IAAAC,EACAlxB,EAAAwS,KAAA2X,SAMA,OAJA+G,EAAAlxB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAkxB,EACAA,EAAAlxB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAkxB,EACAA,EAAAlxB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAkxB,EAEA1e,MAIA2e,gBAAA,SAAAC,GAEA,OAAA5e,KAAAwc,eAAAoC,GAAAX,WAAAje,MAAAye,aAIAI,mBAAA,SAAA14B,GAEA,IAAAqH,EAAAwS,KAAA2X,SAYA,OAVAxxB,EAAA,GAAAqH,EAAA,GACArH,EAAA,GAAAqH,EAAA,GACArH,EAAA,GAAAqH,EAAA,GACArH,EAAA,GAAAqH,EAAA,GACArH,EAAA,GAAAqH,EAAA,GACArH,EAAA,GAAAqH,EAAA,GACArH,EAAA,GAAAqH,EAAA,GACArH,EAAA,GAAAqH,EAAA,GACArH,EAAA,GAAAqH,EAAA,GAEAwS,MAIA8e,eAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAA34B,EAAA+H,KAAAqoB,IAAAqI,GACA/1B,EAAAqF,KAAAsoB,IAAAoI,GAEAnf,KAAAwX,IACAyH,EAAAv4B,EAAAu4B,EAAA71B,GAAA61B,GAAAv4B,EAAA04B,EAAAh2B,EAAAi2B,GAAAD,EAAAL,GACAG,EAAA91B,EAAA81B,EAAAx4B,GAAAw4B,IAAA91B,EAAAg2B,EAAA14B,EAAA24B,GAAAA,EAAAL,EACA,EAAA,EAAA,IAKA1a,MAAA,SAAA2a,EAAAC,GAEA,IAAAlD,EAAAhc,KAAA2X,SAKA,OAHAqE,EAAA,IAAAiD,EAAAjD,EAAA,IAAAiD,EAAAjD,EAAA,IAAAiD,EACAjD,EAAA,IAAAkD,EAAAlD,EAAA,IAAAkD,EAAAlD,EAAA,IAAAkD,EAEAlf,MAIAsf,OAAA,SAAAC,GAEA,IAAA74B,EAAA+H,KAAAqoB,IAAAyI,GACAn2B,EAAAqF,KAAAsoB,IAAAwI,GAEAvD,EAAAhc,KAAA2X,SAEAkF,EAAAb,EAAA,GAAAc,EAAAd,EAAA,GAAAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GAAAiB,EAAAjB,EAAA,GAAAkB,EAAAlB,EAAA,GAUA,OARAA,EAAA,GAAAt1B,EAAAm2B,EAAAzzB,EAAA4zB,EACAhB,EAAA,GAAAt1B,EAAAo2B,EAAA1zB,EAAA6zB,EACAjB,EAAA,GAAAt1B,EAAAq2B,EAAA3zB,EAAA8zB,EAEAlB,EAAA,IAAA5yB,EAAAyzB,EAAAn2B,EAAAs2B,EACAhB,EAAA,IAAA5yB,EAAA0zB,EAAAp2B,EAAAu2B,EACAjB,EAAA,IAAA5yB,EAAA2zB,EAAAr2B,EAAAw2B,EAEAld,MAIAwf,UAAA,SAAAT,EAAAC,GAEA,IAAAhD,EAAAhc,KAAA2X,SAKA,OAHAqE,EAAA,IAAA+C,EAAA/C,EAAA,GAAAA,EAAA,IAAA+C,EAAA/C,EAAA,GAAAA,EAAA,IAAA+C,EAAA/C,EAAA,GACAA,EAAA,IAAAgD,EAAAhD,EAAA,GAAAA,EAAA,IAAAgD,EAAAhD,EAAA,GAAAA,EAAA,IAAAgD,EAAAhD,EAAA,GAEAhc,MAIA4a,OAAA,SAAAsD,GAKA,IAHA,IAAAlC,EAAAhc,KAAA2X,SACAuE,EAAAgC,EAAAvG,SAEAnxB,EAAA,EAAAA,EAAA,EAAAA,IAEA,GAAAw1B,EAAAx1B,KAAA01B,EAAA11B,GAAA,OAAA,EAIA,OAAA,GAIAq0B,UAAA,SAAAzG,EAAA0G,QAEAhuB,IAAAguB,IAAAA,EAAA,GAEA,IAAA,IAAAt0B,EAAA,EAAAA,EAAA,EAAAA,IAEAwZ,KAAA2X,SAAAnxB,GAAA4tB,EAAA5tB,EAAAs0B,GAIA,OAAA9a,MAIA+a,QAAA,SAAA3G,EAAA0G,QAEAhuB,IAAAsnB,IAAAA,EAAA,SACAtnB,IAAAguB,IAAAA,EAAA,GAEA,IAAAkB,EAAAhc,KAAA2X,SAcA,OAZAvD,EAAA0G,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GAEA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GAEA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GAEA5H,KAcA,IAAAqL,GAAA,CAEAC,WAAA,SAAAC,GAEA,GAAA,UAAA1yB,KAAA0yB,EAAAC,KAEA,OAAAD,EAAAC,IAIA,GAAA,oBAAAC,kBAEA,OAAAF,EAAAC,IAIA,IAAArjB,EAEA,GAAAojB,aAAAE,kBAEAtjB,EAAAojB,MAEA,MAEA7yB,IAAAwnB,KAAAA,GAAA9pB,SAAAs1B,gBAAA,+BAAA,WAEAxL,GAAAza,MAAA8lB,EAAA9lB,MACAya,GAAAxa,OAAA6lB,EAAA7lB,OAEA,IAAA+C,EAAAyX,GAAA3X,WAAA,MAEAgjB,aAAAI,UAEAljB,EAAAmjB,aAAAL,EAAA,EAAA,GAIA9iB,EAAAojB,UAAAN,EAAA,EAAA,EAAAA,EAAA9lB,MAAA8lB,EAAA7lB,QAIAyC,EAAA+X,GAIA,OAAA/X,EAAA1C,MAAA,MAAA0C,EAAAzC,OAAA,KAEAyC,EAAAwG,UAAA,aAAA,IAIAxG,EAAAwG,UAAA,eAcAmd,GAAA,EAEA,SAAAC,GAAAR,EAAAS,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5sB,EAAA6sB,EAAAte,GAEA7a,OAAA6iB,eAAApK,KAAA,KAAA,CAAA9T,MAAAg0B,OAEAlgB,KAAA2gB,KAAApM,GAAAI,eAEA3U,KAAA7J,KAAA,GAEA6J,KAAA2f,WAAA7yB,IAAA6yB,EAAAA,EAAAQ,GAAAS,cACA5gB,KAAA6gB,QAAA,GAEA7gB,KAAAogB,aAAAtzB,IAAAszB,EAAAA,EAAAD,GAAAW,gBAEA9gB,KAAAqgB,WAAAvzB,IAAAuzB,EAAAA,EAAAvS,GACA9N,KAAAsgB,WAAAxzB,IAAAwzB,EAAAA,EAAAxS,GAEA9N,KAAAugB,eAAAzzB,IAAAyzB,EAAAA,EAAApS,GACAnO,KAAAwgB,eAAA1zB,IAAA0zB,EAAAA,EAAAnS,GAEArO,KAAA0gB,gBAAA5zB,IAAA4zB,EAAAA,EAAA,EAEA1gB,KAAAygB,YAAA3zB,IAAA2zB,EAAAA,EAAArR,GACApP,KAAA+gB,eAAA,KACA/gB,KAAAnM,UAAA/G,IAAA+G,EAAAA,EAAAya,GAEAtO,KAAA8a,OAAA,IAAArD,GAAA,EAAA,GACAzX,KAAAghB,OAAA,IAAAvJ,GAAA,EAAA,GACAzX,KAAAqb,OAAA,IAAA5D,GAAA,EAAA,GACAzX,KAAAmf,SAAA,EAEAnf,KAAAihB,kBAAA,EACAjhB,KAAAke,OAAA,IAAAxG,GAEA1X,KAAAkhB,iBAAA,EACAlhB,KAAAmhB,kBAAA,EACAnhB,KAAAohB,OAAA,EACAphB,KAAAqhB,gBAAA,EAMArhB,KAAAoC,cAAAtV,IAAAsV,EAAAA,EAAAuQ,GAEA3S,KAAAshB,QAAA,EACAthB,KAAAuhB,SAAA,KAgRA,SAAAC,GAAAr1B,EAAAsB,EAAAg0B,EAAAjJ,QACA,IAAArsB,IAAAA,EAAA,QACA,IAAAsB,IAAAA,EAAA,QACA,IAAAg0B,IAAAA,EAAA,QACA,IAAAjJ,IAAAA,EAAA,GAGAxY,KAAA7T,EAAAA,EACA6T,KAAAvS,EAAAA,EACAuS,KAAAyhB,EAAAA,EACAzhB,KAAAwY,EAAAA,EA0pBA,SAAAkJ,GAAA7nB,EAAAC,EAAA6nB,GAEA3hB,KAAAnG,MAAAA,EACAmG,KAAAlG,OAAAA,EAEAkG,KAAA4hB,QAAA,IAAAJ,GAAA,EAAA,EAAA3nB,EAAAC,GACAkG,KAAA6hB,aAAA,EAEA7hB,KAAA8hB,SAAA,IAAAN,GAAA,EAAA,EAAA3nB,EAAAC,GAIAkG,KAAA+hB,QAAA,IAAA5B,QAAArzB,GAFA60B,EAAAA,GAAA,IAEAvB,QAAAuB,EAAAtB,MAAAsB,EAAArB,MAAAqB,EAAApB,UAAAoB,EAAAnB,UAAAmB,EAAAlB,OAAAkB,EAAA9tB,KAAA8tB,EAAAjB,WAAAiB,EAAAvf,UAEApC,KAAA+hB,QAAApC,MAAA,GACA3f,KAAA+hB,QAAApC,MAAA9lB,MAAAA,EACAmG,KAAA+hB,QAAApC,MAAA7lB,OAAAA,EAEAkG,KAAA+hB,QAAAb,qBAAAp0B,IAAA60B,EAAAT,iBAAAS,EAAAT,gBACAlhB,KAAA+hB,QAAAvB,eAAA1zB,IAAA60B,EAAAnB,UAAAmB,EAAAnB,UAAArS,GAEAnO,KAAAgiB,iBAAAl1B,IAAA60B,EAAAK,aAAAL,EAAAK,YACAhiB,KAAAiiB,mBAAAn1B,IAAA60B,EAAAM,eAAAN,EAAAM,cACAjiB,KAAAkiB,kBAAAp1B,IAAA60B,EAAAO,aAAAP,EAAAO,aAAA,KAiEA,SAAAC,GAAAtoB,EAAAC,EAAA6nB,GAEAD,GAAAx6B,KAAA8Y,KAAAnG,EAAAC,EAAA6nB,GAEA3hB,KAAAoiB,QAAA,EA6BA,SAAAC,GAAAl2B,EAAAsB,EAAAg0B,EAAAjJ,QACA,IAAArsB,IAAAA,EAAA,QACA,IAAAsB,IAAAA,EAAA,QACA,IAAAg0B,IAAAA,EAAA,QACA,IAAAjJ,IAAAA,EAAA,GAGAxY,KAAAsiB,GAAAn2B,EACA6T,KAAAuiB,GAAA90B,EACAuS,KAAAwiB,GAAAf,EACAzhB,KAAAyiB,GAAAjK,EAnjCA2H,GAAAS,mBAAA9zB,EACAqzB,GAAAW,gBAv4CA,IAy4CAX,GAAA14B,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA/O,GAAAlsB,WAAA,CAEA4wB,YAAA8H,GAEAwC,WAAA,EAEAC,aAAA,WAEA5iB,KAAAke,OAAAY,eAAA9e,KAAA8a,OAAA3uB,EAAA6T,KAAA8a,OAAArtB,EAAAuS,KAAAghB,OAAA70B,EAAA6T,KAAAghB,OAAAvzB,EAAAuS,KAAAmf,SAAAnf,KAAAqb,OAAAlvB,EAAA6T,KAAAqb,OAAA5tB,IAIA2qB,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAvD,GAmCA,OAjCAmX,KAAA7J,KAAAtN,EAAAsN,KAEA6J,KAAA2f,MAAA92B,EAAA82B,MACA3f,KAAA6gB,QAAAh4B,EAAAg4B,QAAA11B,MAAA,GAEA6U,KAAAogB,QAAAv3B,EAAAu3B,QAEApgB,KAAAqgB,MAAAx3B,EAAAw3B,MACArgB,KAAAsgB,MAAAz3B,EAAAy3B,MAEAtgB,KAAAugB,UAAA13B,EAAA03B,UACAvgB,KAAAwgB,UAAA33B,EAAA23B,UAEAxgB,KAAA0gB,WAAA73B,EAAA63B,WAEA1gB,KAAAygB,OAAA53B,EAAA43B,OACAzgB,KAAA+gB,eAAAl4B,EAAAk4B,eACA/gB,KAAAnM,KAAAhL,EAAAgL,KAEAmM,KAAA8a,OAAA1uB,KAAAvD,EAAAiyB,QACA9a,KAAAghB,OAAA50B,KAAAvD,EAAAm4B,QACAhhB,KAAAqb,OAAAjvB,KAAAvD,EAAAwyB,QACArb,KAAAmf,SAAAt2B,EAAAs2B,SAEAnf,KAAAihB,iBAAAp4B,EAAAo4B,iBACAjhB,KAAAke,OAAA9xB,KAAAvD,EAAAq1B,QAEAle,KAAAkhB,gBAAAr4B,EAAAq4B,gBACAlhB,KAAAmhB,iBAAAt4B,EAAAs4B,iBACAnhB,KAAAohB,MAAAv4B,EAAAu4B,MACAphB,KAAAqhB,gBAAAx4B,EAAAw4B,gBACArhB,KAAAoC,SAAAvZ,EAAAuZ,SAEApC,MAIA6iB,OAAA,SAAAC,GAEA,IAAAC,OAAAj2B,IAAAg2B,GAAA,iBAAAA,EAEA,IAAAC,QAAAj2B,IAAAg2B,EAAAE,SAAAhjB,KAAA2gB,MAEA,OAAAmC,EAAAE,SAAAhjB,KAAA2gB,MAIA,IAAAvtB,EAAA,CAEA6vB,SAAA,CACA3B,QAAA,IACAztB,KAAA,UACAqvB,UAAA,kBAGAvC,KAAA3gB,KAAA2gB,KACAxqB,KAAA6J,KAAA7J,KAEAiqB,QAAApgB,KAAAogB,QAEAY,OAAA,CAAAhhB,KAAAghB,OAAA70B,EAAA6T,KAAAghB,OAAAvzB,GACAqtB,OAAA,CAAA9a,KAAA8a,OAAA3uB,EAAA6T,KAAA8a,OAAArtB,GACA4tB,OAAA,CAAArb,KAAAqb,OAAAlvB,EAAA6T,KAAAqb,OAAA5tB,GACA0xB,SAAAnf,KAAAmf,SAEAgE,KAAA,CAAAnjB,KAAAqgB,MAAArgB,KAAAsgB,OAEAG,OAAAzgB,KAAAygB,OACA5sB,KAAAmM,KAAAnM,KACAuO,SAAApC,KAAAoC,SAEAoe,UAAAxgB,KAAAwgB,UACAD,UAAAvgB,KAAAugB,UACAG,WAAA1gB,KAAA0gB,WAEAU,MAAAphB,KAAAohB,MAEAD,iBAAAnhB,KAAAmhB,iBACAE,gBAAArhB,KAAAqhB,iBAIA,QAAAv0B,IAAAkT,KAAA2f,MAAA,CAIA,IAAAA,EAAA3f,KAAA2f,MAQA,QANA7yB,IAAA6yB,EAAAgB,OAEAhB,EAAAgB,KAAApM,GAAAI,iBAIAoO,QAAAj2B,IAAAg2B,EAAAM,OAAAzD,EAAAgB,MAAA,CAEA,IAAA0C,EAEA,GAAAn4B,MAAA6B,QAAA4yB,GAAA,CAIA0D,EAAA,GAEA,IAAA,IAAA78B,EAAA,EAAAyJ,EAAA0vB,EAAAx4B,OAAAX,EAAAyJ,EAAAzJ,IAEA68B,EAAA14B,KAAA80B,GAAAC,WAAAC,EAAAn5B,UAQA68B,EAAA5D,GAAAC,WAAAC,GAIAmD,EAAAM,OAAAzD,EAAAgB,MAAA,CACAA,KAAAhB,EAAAgB,KACA0C,IAAAA,GAKAjwB,EAAAusB,MAAAA,EAAAgB,KAUA,OANAoC,IAEAD,EAAAE,SAAAhjB,KAAA2gB,MAAAvtB,GAIAA,GAIAwN,QAAA,WAEAZ,KAAAkU,cAAA,CAAArgB,KAAA,aAIAyvB,YAAA,SAAAC,GAEA,GAhjDA,MAgjDAvjB,KAAAogB,QAAA,OAAAmD,EAIA,GAFAA,EAAApK,aAAAnZ,KAAAke,QAEAqF,EAAAp3B,EAAA,GAAAo3B,EAAAp3B,EAAA,EAEA,OAAA6T,KAAAqgB,OAEA,KAAAxS,GAEA0V,EAAAp3B,EAAAo3B,EAAAp3B,EAAAsC,KAAAC,MAAA60B,EAAAp3B,GACA,MAEA,KAAA2hB,GAEAyV,EAAAp3B,EAAAo3B,EAAAp3B,EAAA,EAAA,EAAA,EACA,MAEA,KAAA4hB,GAIAwV,EAAAp3B,EAFA,IAAAsC,KAAAkC,IAAAlC,KAAAC,MAAA60B,EAAAp3B,GAAA,GAEAsC,KAAA+nB,KAAA+M,EAAAp3B,GAAAo3B,EAAAp3B,EAIAo3B,EAAAp3B,EAAAsC,KAAAC,MAAA60B,EAAAp3B,GAUA,GAAAo3B,EAAA91B,EAAA,GAAA81B,EAAA91B,EAAA,EAEA,OAAAuS,KAAAsgB,OAEA,KAAAzS,GAEA0V,EAAA91B,EAAA81B,EAAA91B,EAAAgB,KAAAC,MAAA60B,EAAA91B,GACA,MAEA,KAAAqgB,GAEAyV,EAAA91B,EAAA81B,EAAA91B,EAAA,EAAA,EAAA,EACA,MAEA,KAAAsgB,GAIAwV,EAAA91B,EAFA,IAAAgB,KAAAkC,IAAAlC,KAAAC,MAAA60B,EAAA91B,GAAA,GAEAgB,KAAA+nB,KAAA+M,EAAA91B,GAAA81B,EAAA91B,EAIA81B,EAAA91B,EAAAgB,KAAAC,MAAA60B,EAAA91B,GAgBA,OANAuS,KAAAohB,QAEAmC,EAAA91B,EAAA,EAAA81B,EAAA91B,GAIA81B,KAMAh8B,OAAA6iB,eAAA+V,GAAA14B,UAAA,cAAA,CAEA+vB,IAAA,SAAAtrB,IAEA,IAAAA,GAAA8T,KAAAshB,aA4BA/5B,OAAAqwB,iBAAA4J,GAAA/5B,UAAA,CAEAoS,MAAA,CAEAkG,IAAA,WAEA,OAAAC,KAAAyhB,GAIAjK,IAAA,SAAAtrB,GAEA8T,KAAAyhB,EAAAv1B,IAMA4N,OAAA,CAEAiG,IAAA,WAEA,OAAAC,KAAAwY,GAIAhB,IAAA,SAAAtrB,GAEA8T,KAAAwY,EAAAtsB,MAQA3E,OAAAM,OAAA25B,GAAA/5B,UAAA,CAEA+7B,WAAA,EAEAhM,IAAA,SAAArrB,EAAAsB,EAAAg0B,EAAAjJ,GAOA,OALAxY,KAAA7T,EAAAA,EACA6T,KAAAvS,EAAAA,EACAuS,KAAAyhB,EAAAA,EACAzhB,KAAAwY,EAAAA,EAEAxY,MAIA8X,UAAA,SAAAC,GAOA,OALA/X,KAAA7T,EAAA4rB,EACA/X,KAAAvS,EAAAsqB,EACA/X,KAAAyhB,EAAA1J,EACA/X,KAAAwY,EAAAT,EAEA/X,MAIAgY,KAAA,SAAA7rB,GAIA,OAFA6T,KAAA7T,EAAAA,EAEA6T,MAIAiY,KAAA,SAAAxqB,GAIA,OAFAuS,KAAAvS,EAAAA,EAEAuS,MAIAyjB,KAAA,SAAAhC,GAIA,OAFAzhB,KAAAyhB,EAAAA,EAEAzhB,MAIA0jB,KAAA,SAAAlL,GAIA,OAFAxY,KAAAwY,EAAAA,EAEAxY,MAIAkY,aAAA,SAAA7N,EAAAne,GAEA,OAAAme,GAEA,KAAA,EAAArK,KAAA7T,EAAAD,EAAA,MACA,KAAA,EAAA8T,KAAAvS,EAAAvB,EAAA,MACA,KAAA,EAAA8T,KAAAyhB,EAAAv1B,EAAA,MACA,KAAA,EAAA8T,KAAAwY,EAAAtsB,EAAA,MACA,QAAA,MAAA,IAAApF,MAAA,0BAAAujB,GAIA,OAAArK,MAIAmY,aAAA,SAAA9N,GAEA,OAAAA,GAEA,KAAA,EAAA,OAAArK,KAAA7T,EACA,KAAA,EAAA,OAAA6T,KAAAvS,EACA,KAAA,EAAA,OAAAuS,KAAAyhB,EACA,KAAA,EAAA,OAAAzhB,KAAAwY,EACA,QAAA,MAAA,IAAA1xB,MAAA,0BAAAujB,KAMA+N,MAAA,WAEA,OAAA,IAAApY,KAAAqY,YAAArY,KAAA7T,EAAA6T,KAAAvS,EAAAuS,KAAAyhB,EAAAzhB,KAAAwY,IAIApsB,KAAA,SAAAksB,GAOA,OALAtY,KAAA7T,EAAAmsB,EAAAnsB,EACA6T,KAAAvS,EAAA6qB,EAAA7qB,EACAuS,KAAAyhB,EAAAnJ,EAAAmJ,EACAzhB,KAAAwY,OAAA1rB,IAAAwrB,EAAAE,EAAAF,EAAAE,EAAA,EAEAxY,MAIAuY,IAAA,SAAAD,EAAAE,GAEA,YAAA1rB,IAAA0rB,GAEAthB,QAAAC,KAAA,yFACA6I,KAAAyY,WAAAH,EAAAE,KAIAxY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EACAuS,KAAAyhB,GAAAnJ,EAAAmJ,EACAzhB,KAAAwY,GAAAF,EAAAE,EAEAxY,OAIA0Y,UAAA,SAAAtvB,GAOA,OALA4W,KAAA7T,GAAA/C,EACA4W,KAAAvS,GAAArE,EACA4W,KAAAyhB,GAAAr4B,EACA4W,KAAAwY,GAAApvB,EAEA4W,MAIAyY,WAAA,SAAA5xB,EAAA6E,GAOA,OALAsU,KAAA7T,EAAAtF,EAAAsF,EAAAT,EAAAS,EACA6T,KAAAvS,EAAA5G,EAAA4G,EAAA/B,EAAA+B,EACAuS,KAAAyhB,EAAA56B,EAAA46B,EAAA/1B,EAAA+1B,EACAzhB,KAAAwY,EAAA3xB,EAAA2xB,EAAA9sB,EAAA8sB,EAEAxY,MAIA2Y,gBAAA,SAAAL,EAAAlvB,GAOA,OALA4W,KAAA7T,GAAAmsB,EAAAnsB,EAAA/C,EACA4W,KAAAvS,GAAA6qB,EAAA7qB,EAAArE,EACA4W,KAAAyhB,GAAAnJ,EAAAmJ,EAAAr4B,EACA4W,KAAAwY,GAAAF,EAAAE,EAAApvB,EAEA4W,MAIA4Y,IAAA,SAAAN,EAAAE,GAEA,YAAA1rB,IAAA0rB,GAEAthB,QAAAC,KAAA,yFACA6I,KAAA6Y,WAAAP,EAAAE,KAIAxY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EACAuS,KAAAyhB,GAAAnJ,EAAAmJ,EACAzhB,KAAAwY,GAAAF,EAAAE,EAEAxY,OAIA8Y,UAAA,SAAA1vB,GAOA,OALA4W,KAAA7T,GAAA/C,EACA4W,KAAAvS,GAAArE,EACA4W,KAAAyhB,GAAAr4B,EACA4W,KAAAwY,GAAApvB,EAEA4W,MAIA6Y,WAAA,SAAAhyB,EAAA6E,GAOA,OALAsU,KAAA7T,EAAAtF,EAAAsF,EAAAT,EAAAS,EACA6T,KAAAvS,EAAA5G,EAAA4G,EAAA/B,EAAA+B,EACAuS,KAAAyhB,EAAA56B,EAAA46B,EAAA/1B,EAAA+1B,EACAzhB,KAAAwY,EAAA3xB,EAAA2xB,EAAA9sB,EAAA8sB,EAEAxY,MAIAgZ,eAAA,SAAAjB,GAOA,OALA/X,KAAA7T,GAAA4rB,EACA/X,KAAAvS,GAAAsqB,EACA/X,KAAAyhB,GAAA1J,EACA/X,KAAAwY,GAAAT,EAEA/X,MAIA2jB,aAAA,SAAAn2B,GAEA,IAAArB,EAAA6T,KAAA7T,EAAAsB,EAAAuS,KAAAvS,EAAAg0B,EAAAzhB,KAAAyhB,EAAAjJ,EAAAxY,KAAAwY,EACApyB,EAAAoH,EAAAmqB,SAOA,OALA3X,KAAA7T,EAAA/F,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAAAq7B,EAAAr7B,EAAA,IAAAoyB,EACAxY,KAAAvS,EAAArH,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAAAq7B,EAAAr7B,EAAA,IAAAoyB,EACAxY,KAAAyhB,EAAAr7B,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,IAAAq7B,EAAAr7B,EAAA,IAAAoyB,EACAxY,KAAAwY,EAAApyB,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,IAAAq7B,EAAAr7B,EAAA,IAAAoyB,EAEAxY,MAIAkZ,aAAA,SAAAnB,GAEA,OAAA/X,KAAAgZ,eAAA,EAAAjB,IAIA6L,2BAAA,SAAAhN,GAMA5W,KAAAwY,EAAA,EAAA/pB,KAAAo1B,KAAAjN,EAAA4B,GAEA,IAAApvB,EAAAqF,KAAAorB,KAAA,EAAAjD,EAAA4B,EAAA5B,EAAA4B,GAgBA,OAdApvB,EAAA,MAEA4W,KAAA7T,EAAA,EACA6T,KAAAvS,EAAA,EACAuS,KAAAyhB,EAAA,IAIAzhB,KAAA7T,EAAAyqB,EAAAzqB,EAAA/C,EACA4W,KAAAvS,EAAAmpB,EAAAnpB,EAAArE,EACA4W,KAAAyhB,EAAA7K,EAAA6K,EAAAr4B,GAIA4W,MAIA8jB,+BAAA,SAAAt2B,GAMA,IAAAwsB,EAAA7tB,EAAAsB,EAAAg0B,EAIAzF,EAAAxuB,EAAAmqB,SAEAoM,EAAA/H,EAAA,GAAAgI,EAAAhI,EAAA,GAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GAAAmI,EAAAnI,EAAA,GAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GAAAsI,EAAAtI,EAAA,GAAAuI,EAAAvI,EAAA,IAEA,GAAAvtB,KAAAkC,IAAAqzB,EAAAE,GATA,KAUAz1B,KAAAkC,IAAAszB,EAAAI,GAVA,KAWA51B,KAAAkC,IAAAyzB,EAAAE,GAXA,IAWA,CAMA,GAAA71B,KAAAkC,IAAAqzB,EAAAE,GAhBA,IAiBAz1B,KAAAkC,IAAAszB,EAAAI,GAjBA,IAkBA51B,KAAAkC,IAAAyzB,EAAAE,GAlBA,IAmBA71B,KAAAkC,IAAAozB,EAAAI,EAAAI,EAAA,GAnBA,GAyBA,OAFAvkB,KAAAwX,IAAA,EAAA,EAAA,EAAA,GAEAxX,KAMAga,EAAAvrB,KAAAgmB,GAEA,IAAA+P,GAAAT,EAAA,GAAA,EACAr0B,GAAAy0B,EAAA,GAAA,EACAM,GAAAF,EAAA,GAAA,EACAG,GAAAV,EAAAE,GAAA,EACAS,GAAAV,EAAAI,GAAA,EACAO,GAAAR,EAAAE,GAAA,EA4DA,OA1DAE,EAAA90B,GAAA80B,EAAAC,EAIAD,EA7CA,KA+CAr4B,EAAA,EACAsB,EAAA,WACAg0B,EAAA,aAKAh0B,EAAAi3B,GADAv4B,EAAAsC,KAAAorB,KAAA2K,IAEA/C,EAAAkD,EAAAx4B,GAIAuD,EAAA+0B,EAIA/0B,EA/DA,KAiEAvD,EAAA,WACAsB,EAAA,EACAg0B,EAAA,aAKAt1B,EAAAu4B,GADAj3B,EAAAgB,KAAAorB,KAAAnqB,IAEA+xB,EAAAmD,EAAAn3B,GAQAg3B,EAjFA,KAmFAt4B,EAAA,WACAsB,EAAA,WACAg0B,EAAA,IAKAt1B,EAAAw4B,GADAlD,EAAAhzB,KAAAorB,KAAA4K,IAEAh3B,EAAAm3B,EAAAnD,GAMAzhB,KAAAwX,IAAArrB,EAAAsB,EAAAg0B,EAAAzH,GAEAha,KAMA,IAAA5W,EAAAqF,KAAAorB,MAAAyK,EAAAF,IAAAE,EAAAF,IACAH,EAAAI,IAAAJ,EAAAI,IACAH,EAAAF,IAAAE,EAAAF,IAYA,OAVAv1B,KAAAkC,IAAAvH,GAAA,OAAAA,EAAA,GAKA4W,KAAA7T,GAAAm4B,EAAAF,GAAAh7B,EACA4W,KAAAvS,GAAAw2B,EAAAI,GAAAj7B,EACA4W,KAAAyhB,GAAAyC,EAAAF,GAAA56B,EACA4W,KAAAwY,EAAA/pB,KAAAo1B,MAAAE,EAAAI,EAAAI,EAAA,GAAA,GAEAvkB,MAIAlF,IAAA,SAAAwd,GAOA,OALAtY,KAAA7T,EAAAsC,KAAAqM,IAAAkF,KAAA7T,EAAAmsB,EAAAnsB,GACA6T,KAAAvS,EAAAgB,KAAAqM,IAAAkF,KAAAvS,EAAA6qB,EAAA7qB,GACAuS,KAAAyhB,EAAAhzB,KAAAqM,IAAAkF,KAAAyhB,EAAAnJ,EAAAmJ,GACAzhB,KAAAwY,EAAA/pB,KAAAqM,IAAAkF,KAAAwY,EAAAF,EAAAE,GAEAxY,MAIAjO,IAAA,SAAAumB,GAOA,OALAtY,KAAA7T,EAAAsC,KAAAsD,IAAAiO,KAAA7T,EAAAmsB,EAAAnsB,GACA6T,KAAAvS,EAAAgB,KAAAsD,IAAAiO,KAAAvS,EAAA6qB,EAAA7qB,GACAuS,KAAAyhB,EAAAhzB,KAAAsD,IAAAiO,KAAAyhB,EAAAnJ,EAAAmJ,GACAzhB,KAAAwY,EAAA/pB,KAAAsD,IAAAiO,KAAAwY,EAAAF,EAAAE,GAEAxY,MAIAkV,MAAA,SAAApa,EAAA/I,GASA,OALAiO,KAAA7T,EAAAsC,KAAAsD,IAAA+I,EAAA3O,EAAAsC,KAAAqM,IAAA/I,EAAA5F,EAAA6T,KAAA7T,IACA6T,KAAAvS,EAAAgB,KAAAsD,IAAA+I,EAAArN,EAAAgB,KAAAqM,IAAA/I,EAAAtE,EAAAuS,KAAAvS,IACAuS,KAAAyhB,EAAAhzB,KAAAsD,IAAA+I,EAAA2mB,EAAAhzB,KAAAqM,IAAA/I,EAAA0vB,EAAAzhB,KAAAyhB,IACAzhB,KAAAwY,EAAA/pB,KAAAsD,IAAA+I,EAAA0d,EAAA/pB,KAAAqM,IAAA/I,EAAAymB,EAAAxY,KAAAwY,IAEAxY,MAIAoZ,YAAA,SAAAC,EAAAC,GAOA,OALAtZ,KAAA7T,EAAAsC,KAAAsD,IAAAsnB,EAAA5qB,KAAAqM,IAAAwe,EAAAtZ,KAAA7T,IACA6T,KAAAvS,EAAAgB,KAAAsD,IAAAsnB,EAAA5qB,KAAAqM,IAAAwe,EAAAtZ,KAAAvS,IACAuS,KAAAyhB,EAAAhzB,KAAAsD,IAAAsnB,EAAA5qB,KAAAqM,IAAAwe,EAAAtZ,KAAAyhB,IACAzhB,KAAAwY,EAAA/pB,KAAAsD,IAAAsnB,EAAA5qB,KAAAqM,IAAAwe,EAAAtZ,KAAAwY,IAEAxY,MAIAuZ,YAAA,SAAAze,EAAA/I,GAEA,IAAA5K,EAAA6Y,KAAA7Y,SAEA,OAAA6Y,KAAAkZ,aAAA/xB,GAAA,GAAA6xB,eAAAvqB,KAAAsD,IAAA+I,EAAArM,KAAAqM,IAAA/I,EAAA5K,MAIAuH,MAAA,WAOA,OALAsR,KAAA7T,EAAAsC,KAAAC,MAAAsR,KAAA7T,GACA6T,KAAAvS,EAAAgB,KAAAC,MAAAsR,KAAAvS,GACAuS,KAAAyhB,EAAAhzB,KAAAC,MAAAsR,KAAAyhB,GACAzhB,KAAAwY,EAAA/pB,KAAAC,MAAAsR,KAAAwY,GAEAxY,MAIAwW,KAAA,WAOA,OALAxW,KAAA7T,EAAAsC,KAAA+nB,KAAAxW,KAAA7T,GACA6T,KAAAvS,EAAAgB,KAAA+nB,KAAAxW,KAAAvS,GACAuS,KAAAyhB,EAAAhzB,KAAA+nB,KAAAxW,KAAAyhB,GACAzhB,KAAAwY,EAAA/pB,KAAA+nB,KAAAxW,KAAAwY,GAEAxY,MAIA9P,MAAA,WAOA,OALA8P,KAAA7T,EAAAsC,KAAAyB,MAAA8P,KAAA7T,GACA6T,KAAAvS,EAAAgB,KAAAyB,MAAA8P,KAAAvS,GACAuS,KAAAyhB,EAAAhzB,KAAAyB,MAAA8P,KAAAyhB,GACAzhB,KAAAwY,EAAA/pB,KAAAyB,MAAA8P,KAAAwY,GAEAxY,MAIAwZ,YAAA,WAOA,OALAxZ,KAAA7T,EAAA6T,KAAA7T,EAAA,EAAAsC,KAAA+nB,KAAAxW,KAAA7T,GAAAsC,KAAAC,MAAAsR,KAAA7T,GACA6T,KAAAvS,EAAAuS,KAAAvS,EAAA,EAAAgB,KAAA+nB,KAAAxW,KAAAvS,GAAAgB,KAAAC,MAAAsR,KAAAvS,GACAuS,KAAAyhB,EAAAzhB,KAAAyhB,EAAA,EAAAhzB,KAAA+nB,KAAAxW,KAAAyhB,GAAAhzB,KAAAC,MAAAsR,KAAAyhB,GACAzhB,KAAAwY,EAAAxY,KAAAwY,EAAA,EAAA/pB,KAAA+nB,KAAAxW,KAAAwY,GAAA/pB,KAAAC,MAAAsR,KAAAwY,GAEAxY,MAIAyZ,OAAA,WAOA,OALAzZ,KAAA7T,GAAA6T,KAAA7T,EACA6T,KAAAvS,GAAAuS,KAAAvS,EACAuS,KAAAyhB,GAAAzhB,KAAAyhB,EACAzhB,KAAAwY,GAAAxY,KAAAwY,EAEAxY,MAIA0Z,IAAA,SAAApB,GAEA,OAAAtY,KAAA7T,EAAAmsB,EAAAnsB,EAAA6T,KAAAvS,EAAA6qB,EAAA7qB,EAAAuS,KAAAyhB,EAAAnJ,EAAAmJ,EAAAzhB,KAAAwY,EAAAF,EAAAE,GAIAoB,SAAA,WAEA,OAAA5Z,KAAA7T,EAAA6T,KAAA7T,EAAA6T,KAAAvS,EAAAuS,KAAAvS,EAAAuS,KAAAyhB,EAAAzhB,KAAAyhB,EAAAzhB,KAAAwY,EAAAxY,KAAAwY,GAIArxB,OAAA,WAEA,OAAAsH,KAAAorB,KAAA7Z,KAAA7T,EAAA6T,KAAA7T,EAAA6T,KAAAvS,EAAAuS,KAAAvS,EAAAuS,KAAAyhB,EAAAzhB,KAAAyhB,EAAAzhB,KAAAwY,EAAAxY,KAAAwY,IAIAsB,gBAAA,WAEA,OAAArrB,KAAAkC,IAAAqP,KAAA7T,GAAAsC,KAAAkC,IAAAqP,KAAAvS,GAAAgB,KAAAkC,IAAAqP,KAAAyhB,GAAAhzB,KAAAkC,IAAAqP,KAAAwY,IAIAuB,UAAA,WAEA,OAAA/Z,KAAAkZ,aAAAlZ,KAAA7Y,UAAA,IAIAozB,UAAA,SAAApzB,GAEA,OAAA6Y,KAAA+Z,YAAAf,eAAA7xB,IAIAsuB,KAAA,SAAA6C,EAAAkC,GAOA,OALAxa,KAAA7T,IAAAmsB,EAAAnsB,EAAA6T,KAAA7T,GAAAquB,EACAxa,KAAAvS,IAAA6qB,EAAA7qB,EAAAuS,KAAAvS,GAAA+sB,EACAxa,KAAAyhB,IAAAnJ,EAAAmJ,EAAAzhB,KAAAyhB,GAAAjH,EACAxa,KAAAwY,IAAAF,EAAAE,EAAAxY,KAAAwY,GAAAgC,EAEAxa,MAIAya,YAAA,SAAAC,EAAAC,EAAAH,GAOA,OALAxa,KAAA7T,EAAAuuB,EAAAvuB,GAAAwuB,EAAAxuB,EAAAuuB,EAAAvuB,GAAAquB,EACAxa,KAAAvS,EAAAitB,EAAAjtB,GAAAktB,EAAAltB,EAAAitB,EAAAjtB,GAAA+sB,EACAxa,KAAAyhB,EAAA/G,EAAA+G,GAAA9G,EAAA8G,EAAA/G,EAAA+G,GAAAjH,EACAxa,KAAAwY,EAAAkC,EAAAlC,GAAAmC,EAAAnC,EAAAkC,EAAAlC,GAAAgC,EAEAxa,MAIA4a,OAAA,SAAAtC,GAEA,OAAAA,EAAAnsB,IAAA6T,KAAA7T,GAAAmsB,EAAA7qB,IAAAuS,KAAAvS,GAAA6qB,EAAAmJ,IAAAzhB,KAAAyhB,GAAAnJ,EAAAE,IAAAxY,KAAAwY,GAIAqC,UAAA,SAAAzG,EAAA0G,GASA,YAPAhuB,IAAAguB,IAAAA,EAAA,GAEA9a,KAAA7T,EAAAioB,EAAA0G,GACA9a,KAAAvS,EAAA2mB,EAAA0G,EAAA,GACA9a,KAAAyhB,EAAArN,EAAA0G,EAAA,GACA9a,KAAAwY,EAAApE,EAAA0G,EAAA,GAEA9a,MAIA+a,QAAA,SAAA3G,EAAA0G,GAUA,YARAhuB,IAAAsnB,IAAAA,EAAA,SACAtnB,IAAAguB,IAAAA,EAAA,GAEA1G,EAAA0G,GAAA9a,KAAA7T,EACAioB,EAAA0G,EAAA,GAAA9a,KAAAvS,EACA2mB,EAAA0G,EAAA,GAAA9a,KAAAyhB,EACArN,EAAA0G,EAAA,GAAA9a,KAAAwY,EAEApE,GAIA4G,oBAAA,SAAAC,EAAA5Q,EAAAyQ,GAaA,YAXAhuB,IAAAguB,GAEA5jB,QAAAC,KAAA,uEAIA6I,KAAA7T,EAAA8uB,EAAAC,KAAA7Q,GACArK,KAAAvS,EAAAwtB,EAAAE,KAAA9Q,GACArK,KAAAyhB,EAAAxG,EAAA4J,KAAAxa,GACArK,KAAAwY,EAAAyC,EAAA6J,KAAAza,GAEArK,MAIA6U,OAAA,WAOA,OALA7U,KAAA7T,EAAAsC,KAAAomB,SACA7U,KAAAvS,EAAAgB,KAAAomB,SACA7U,KAAAyhB,EAAAhzB,KAAAomB,SACA7U,KAAAwY,EAAA/pB,KAAAomB,SAEA7U,QA4CA0hB,GAAAj6B,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA/O,GAAAlsB,WAAA,CAEA4wB,YAAAqJ,GAEAqD,qBAAA,EAEAC,QAAA,SAAAnrB,EAAAC,GAEAkG,KAAAnG,QAAAA,GAAAmG,KAAAlG,SAAAA,IAEAkG,KAAAnG,MAAAA,EACAmG,KAAAlG,OAAAA,EAEAkG,KAAA+hB,QAAApC,MAAA9lB,MAAAA,EACAmG,KAAA+hB,QAAApC,MAAA7lB,OAAAA,EAEAkG,KAAAY,WAIAZ,KAAA8hB,SAAAtK,IAAA,EAAA,EAAA3d,EAAAC,GACAkG,KAAA4hB,QAAApK,IAAA,EAAA,EAAA3d,EAAAC,IAIAse,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAvD,GAaA,OAXAmX,KAAAnG,MAAAhR,EAAAgR,MACAmG,KAAAlG,OAAAjR,EAAAiR,OAEAkG,KAAA8hB,SAAA11B,KAAAvD,EAAAi5B,UAEA9hB,KAAA+hB,QAAAl5B,EAAAk5B,QAAA3J,QAEApY,KAAAgiB,YAAAn5B,EAAAm5B,YACAhiB,KAAAiiB,cAAAp5B,EAAAo5B,cACAjiB,KAAAkiB,aAAAr5B,EAAAq5B,aAEAliB,MAIAY,QAAA,WAEAZ,KAAAkU,cAAA,CAAArgB,KAAA,eAmBAsuB,GAAA16B,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAhB,GAAAj6B,WAAA,CAEA4wB,YAAA8J,GAEA8C,gCAAA,EAEA74B,KAAA,SAAAvD,GAMA,OAJA64B,GAAAj6B,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAoiB,QAAAv5B,EAAAu5B,QAEApiB,QA2BAzY,OAAAM,OAAAw6B,GAAA,CAEA6C,MAAA,SAAAC,EAAAC,EAAAC,EAAA/+B,GAEA,OAAA++B,EAAAj5B,KAAA+4B,GAAAD,MAAAE,EAAA9+B,IAIAg/B,UAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAt/B,GAIA,IAAAu/B,EAAAJ,EAAAC,EAAA,GACAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GAEAO,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GACAO,EAAAR,EAAAC,EAAA,GACAQ,EAAAT,EAAAC,EAAA,GAEA,GAAAI,IAAAI,GAAAP,IAAAI,GAAAH,IAAAI,GAAAH,IAAAI,EAAA,CAEA,IAAA/8B,EAAA,EAAA9C,EAEAwwB,EAAA+O,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAEAC,EAAAvP,GAAA,EAAA,GAAA,EACAwP,EAAA,EAAAxP,EAAAA,EAGA,GAAAwP,EAAA/sB,OAAAwQ,QAAA,CAEA,IAAAgN,EAAAtoB,KAAAorB,KAAAyM,GACAz1B,EAAApC,KAAAwrB,MAAAlD,EAAAD,EAAAuP,GAEAj9B,EAAAqF,KAAAsoB,IAAA3tB,EAAAyH,GAAAkmB,EACAzwB,EAAAmI,KAAAsoB,IAAAzwB,EAAAuK,GAAAkmB,EAIA,IAAAwP,EAAAjgC,EAAA+/B,EAQA,GANAR,EAAAA,EAAAz8B,EAAA68B,EAAAM,EACAT,EAAAA,EAAA18B,EAAA88B,EAAAK,EACAR,EAAAA,EAAA38B,EAAA+8B,EAAAI,EACAP,EAAAA,EAAA58B,EAAAg9B,EAAAG,EAGAn9B,IAAA,EAAA9C,EAAA,CAEA,IAAAG,EAAA,EAAAgI,KAAAorB,KAAAgM,EAAAA,EAAAC,EAAAA,EAAAC,EAAAA,EAAAC,EAAAA,GAEAH,GAAAp/B,EACAq/B,GAAAr/B,EACAs/B,GAAAt/B,EACAu/B,GAAAv/B,GAMA8+B,EAAAC,GAAAK,EACAN,EAAAC,EAAA,GAAAM,EACAP,EAAAC,EAAA,GAAAO,EACAR,EAAAC,EAAA,GAAAQ,GAIAQ,wBAAA,SAAAjB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAC,EAAAJ,EAAAC,GACAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GAEAO,EAAAN,EAAAC,GACAM,EAAAP,EAAAC,EAAA,GACAO,EAAAR,EAAAC,EAAA,GACAQ,EAAAT,EAAAC,EAAA,GAOA,OALAL,EAAAC,GAAAK,EAAAO,EAAAJ,EAAAC,EAAAH,EAAAK,EAAAJ,EAAAG,EACAX,EAAAC,EAAA,GAAAM,EAAAM,EAAAJ,EAAAE,EAAAH,EAAAE,EAAAJ,EAAAM,EACAZ,EAAAC,EAAA,GAAAO,EAAAK,EAAAJ,EAAAG,EAAAN,EAAAK,EAAAJ,EAAAG,EACAV,EAAAC,EAAA,GAAAQ,EAAAI,EAAAP,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAEAZ,KAMAh+B,OAAAqwB,iBAAAyK,GAAA56B,UAAA,CAEA0E,EAAA,CAEA4T,IAAA,WAEA,OAAAC,KAAAsiB,IAIA9K,IAAA,SAAAtrB,GAEA8T,KAAAsiB,GAAAp2B,EACA8T,KAAAymB,sBAMAh5B,EAAA,CAEAsS,IAAA,WAEA,OAAAC,KAAAuiB,IAIA/K,IAAA,SAAAtrB,GAEA8T,KAAAuiB,GAAAr2B,EACA8T,KAAAymB,sBAMAhF,EAAA,CAEA1hB,IAAA,WAEA,OAAAC,KAAAwiB,IAIAhL,IAAA,SAAAtrB,GAEA8T,KAAAwiB,GAAAt2B,EACA8T,KAAAymB,sBAMAjO,EAAA,CAEAzY,IAAA,WAEA,OAAAC,KAAAyiB,IAIAjL,IAAA,SAAAtrB,GAEA8T,KAAAyiB,GAAAv2B,EACA8T,KAAAymB,wBAQAl/B,OAAAM,OAAAw6B,GAAA56B,UAAA,CAEAi/B,cAAA,EAEAlP,IAAA,SAAArrB,EAAAsB,EAAAg0B,EAAAjJ,GASA,OAPAxY,KAAAsiB,GAAAn2B,EACA6T,KAAAuiB,GAAA90B,EACAuS,KAAAwiB,GAAAf,EACAzhB,KAAAyiB,GAAAjK,EAEAxY,KAAAymB,oBAEAzmB,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,YAAArY,KAAAsiB,GAAAtiB,KAAAuiB,GAAAviB,KAAAwiB,GAAAxiB,KAAAyiB,KAIAr2B,KAAA,SAAAu6B,GASA,OAPA3mB,KAAAsiB,GAAAqE,EAAAx6B,EACA6T,KAAAuiB,GAAAoE,EAAAl5B,EACAuS,KAAAwiB,GAAAmE,EAAAlF,EACAzhB,KAAAyiB,GAAAkE,EAAAnO,EAEAxY,KAAAymB,oBAEAzmB,MAIA4mB,aAAA,SAAAC,EAAA/hB,GAEA,IAAA+hB,IAAAA,EAAAC,QAEA,MAAA,IAAAhgC,MAAA,oGAIA,IAAAqF,EAAA06B,EAAAvE,GAAA70B,EAAAo5B,EAAAtE,GAAAd,EAAAoF,EAAArE,GAAA3L,EAAAgQ,EAAAhQ,MAMAC,EAAAroB,KAAAqoB,IACAC,EAAAtoB,KAAAsoB,IAEAgQ,EAAAjQ,EAAA3qB,EAAA,GACA6qB,EAAAF,EAAArpB,EAAA,GACAu5B,EAAAlQ,EAAA2K,EAAA,GAEAwF,EAAAlQ,EAAA5qB,EAAA,GACA8qB,EAAAF,EAAAtpB,EAAA,GACAy5B,EAAAnQ,EAAA0K,EAAA,GAEA,OAAA5K,GAEA,IAAA,MACA7W,KAAAsiB,GAAA2E,EAAAjQ,EAAAgQ,EAAAD,EAAA9P,EAAAiQ,EACAlnB,KAAAuiB,GAAAwE,EAAA9P,EAAA+P,EAAAC,EAAAjQ,EAAAkQ,EACAlnB,KAAAwiB,GAAAuE,EAAA/P,EAAAkQ,EAAAD,EAAAhQ,EAAA+P,EACAhnB,KAAAyiB,GAAAsE,EAAA/P,EAAAgQ,EAAAC,EAAAhQ,EAAAiQ,EACA,MAEA,IAAA,MACAlnB,KAAAsiB,GAAA2E,EAAAjQ,EAAAgQ,EAAAD,EAAA9P,EAAAiQ,EACAlnB,KAAAuiB,GAAAwE,EAAA9P,EAAA+P,EAAAC,EAAAjQ,EAAAkQ,EACAlnB,KAAAwiB,GAAAuE,EAAA/P,EAAAkQ,EAAAD,EAAAhQ,EAAA+P,EACAhnB,KAAAyiB,GAAAsE,EAAA/P,EAAAgQ,EAAAC,EAAAhQ,EAAAiQ,EACA,MAEA,IAAA,MACAlnB,KAAAsiB,GAAA2E,EAAAjQ,EAAAgQ,EAAAD,EAAA9P,EAAAiQ,EACAlnB,KAAAuiB,GAAAwE,EAAA9P,EAAA+P,EAAAC,EAAAjQ,EAAAkQ,EACAlnB,KAAAwiB,GAAAuE,EAAA/P,EAAAkQ,EAAAD,EAAAhQ,EAAA+P,EACAhnB,KAAAyiB,GAAAsE,EAAA/P,EAAAgQ,EAAAC,EAAAhQ,EAAAiQ,EACA,MAEA,IAAA,MACAlnB,KAAAsiB,GAAA2E,EAAAjQ,EAAAgQ,EAAAD,EAAA9P,EAAAiQ,EACAlnB,KAAAuiB,GAAAwE,EAAA9P,EAAA+P,EAAAC,EAAAjQ,EAAAkQ,EACAlnB,KAAAwiB,GAAAuE,EAAA/P,EAAAkQ,EAAAD,EAAAhQ,EAAA+P,EACAhnB,KAAAyiB,GAAAsE,EAAA/P,EAAAgQ,EAAAC,EAAAhQ,EAAAiQ,EACA,MAEA,IAAA,MACAlnB,KAAAsiB,GAAA2E,EAAAjQ,EAAAgQ,EAAAD,EAAA9P,EAAAiQ,EACAlnB,KAAAuiB,GAAAwE,EAAA9P,EAAA+P,EAAAC,EAAAjQ,EAAAkQ,EACAlnB,KAAAwiB,GAAAuE,EAAA/P,EAAAkQ,EAAAD,EAAAhQ,EAAA+P,EACAhnB,KAAAyiB,GAAAsE,EAAA/P,EAAAgQ,EAAAC,EAAAhQ,EAAAiQ,EACA,MAEA,IAAA,MACAlnB,KAAAsiB,GAAA2E,EAAAjQ,EAAAgQ,EAAAD,EAAA9P,EAAAiQ,EACAlnB,KAAAuiB,GAAAwE,EAAA9P,EAAA+P,EAAAC,EAAAjQ,EAAAkQ,EACAlnB,KAAAwiB,GAAAuE,EAAA/P,EAAAkQ,EAAAD,EAAAhQ,EAAA+P,EACAhnB,KAAAyiB,GAAAsE,EAAA/P,EAAAgQ,EAAAC,EAAAhQ,EAAAiQ,EACA,MAEA,QACAhwB,QAAAC,KAAA,mEAAA0f,GAMA,OAFA,IAAA/R,GAAA9E,KAAAymB,oBAEAzmB,MAIAmnB,iBAAA,SAAAC,EAAApN,GAMA,IAAAqN,EAAArN,EAAA,EAAA5wB,EAAAqF,KAAAsoB,IAAAsQ,GASA,OAPArnB,KAAAsiB,GAAA8E,EAAAj7B,EAAA/C,EACA4W,KAAAuiB,GAAA6E,EAAA35B,EAAArE,EACA4W,KAAAwiB,GAAA4E,EAAA3F,EAAAr4B,EACA4W,KAAAyiB,GAAAh0B,KAAAqoB,IAAAuQ,GAEArnB,KAAAymB,oBAEAzmB,MAIAsnB,sBAAA,SAAA95B,GAMA,IAAAwuB,EAAAxuB,EAAAmqB,SAEAoM,EAAA/H,EAAA,GAAAgI,EAAAhI,EAAA,GAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GAAAmI,EAAAnI,EAAA,GAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GAAAsI,EAAAtI,EAAA,GAAAuI,EAAAvI,EAAA,IAEAuL,EAAAxD,EAAAI,EAAAI,EAEA,GAAAgD,EAAA,EAAA,CAEA,IAAAn+B,EAAA,GAAAqF,KAAAorB,KAAA0N,EAAA,GAEAvnB,KAAAyiB,GAAA,IAAAr5B,EACA4W,KAAAsiB,IAAAgC,EAAAF,GAAAh7B,EACA4W,KAAAuiB,IAAA0B,EAAAI,GAAAj7B,EACA4W,KAAAwiB,IAAA0B,EAAAF,GAAA56B,OAEA,GAAA26B,EAAAI,GAAAJ,EAAAQ,EAAA,CAEA,IAAAiD,EAAA,EAAA/4B,KAAAorB,KAAA,EAAAkK,EAAAI,EAAAI,GAEAvkB,KAAAyiB,IAAA6B,EAAAF,GAAAoD,EACAxnB,KAAAsiB,GAAA,IAAAkF,EACAxnB,KAAAuiB,IAAAyB,EAAAE,GAAAsD,EACAxnB,KAAAwiB,IAAAyB,EAAAI,GAAAmD,OAEA,GAAArD,EAAAI,EAAA,CAEA,IAAAkD,EAAA,EAAAh5B,KAAAorB,KAAA,EAAAsK,EAAAJ,EAAAQ,GAEAvkB,KAAAyiB,IAAAwB,EAAAI,GAAAoD,EACAznB,KAAAsiB,IAAA0B,EAAAE,GAAAuD,EACAznB,KAAAuiB,GAAA,IAAAkF,EACAznB,KAAAwiB,IAAA4B,EAAAE,GAAAmD,MAEA,CAEA,IAAAC,EAAA,EAAAj5B,KAAAorB,KAAA,EAAA0K,EAAAR,EAAAI,GAEAnkB,KAAAyiB,IAAAyB,EAAAF,GAAA0D,EACA1nB,KAAAsiB,IAAA2B,EAAAI,GAAAqD,EACA1nB,KAAAuiB,IAAA6B,EAAAE,GAAAoD,EACA1nB,KAAAwiB,GAAA,IAAAkF,EAMA,OAFA1nB,KAAAymB,oBAEAzmB,MAIA2nB,mBAAA,SAAAC,EAAAC,GAIA,IAEA1hC,EAAAyhC,EAAAlO,IAAAmO,GAAA,EAiCA,OA/BA1hC,EAJA,MAMAA,EAAA,EAEAsI,KAAAkC,IAAAi3B,EAAAz7B,GAAAsC,KAAAkC,IAAAi3B,EAAAnG,IAEAzhB,KAAAsiB,IAAAsF,EAAAn6B,EACAuS,KAAAuiB,GAAAqF,EAAAz7B,EACA6T,KAAAwiB,GAAA,EACAxiB,KAAAyiB,GAAAt8B,IAIA6Z,KAAAsiB,GAAA,EACAtiB,KAAAuiB,IAAAqF,EAAAnG,EACAzhB,KAAAwiB,GAAAoF,EAAAn6B,EACAuS,KAAAyiB,GAAAt8B,KAQA6Z,KAAAsiB,GAAAsF,EAAAn6B,EAAAo6B,EAAApG,EAAAmG,EAAAnG,EAAAoG,EAAAp6B,EACAuS,KAAAuiB,GAAAqF,EAAAnG,EAAAoG,EAAA17B,EAAAy7B,EAAAz7B,EAAA07B,EAAApG,EACAzhB,KAAAwiB,GAAAoF,EAAAz7B,EAAA07B,EAAAp6B,EAAAm6B,EAAAn6B,EAAAo6B,EAAA17B,EACA6T,KAAAyiB,GAAAt8B,GAIA6Z,KAAA+Z,aAIA+N,QAAA,SAAAlR,GAEA,OAAA,EAAAnoB,KAAAo1B,KAAAp1B,KAAAkC,IAAA4jB,GAAAW,MAAAlV,KAAA0Z,IAAA9C,IAAA,EAAA,MAIAmR,cAAA,SAAAnR,EAAAoR,GAEA,IAAAhO,EAAAha,KAAA8nB,QAAAlR,GAEA,GAAA,IAAAoD,EAAA,OAAAha,KAEA,IAAA1Z,EAAAmI,KAAAqM,IAAA,EAAAktB,EAAAhO,GAIA,OAFAha,KAAAklB,MAAAtO,EAAAtwB,GAEA0Z,MAIAioB,QAAA,WAIA,OAAAjoB,KAAAkoB,aAIAA,UAAA,WAQA,OANAloB,KAAAsiB,KAAA,EACAtiB,KAAAuiB,KAAA,EACAviB,KAAAwiB,KAAA,EAEAxiB,KAAAymB,oBAEAzmB,MAIA0Z,IAAA,SAAApB,GAEA,OAAAtY,KAAAsiB,GAAAhK,EAAAgK,GAAAtiB,KAAAuiB,GAAAjK,EAAAiK,GAAAviB,KAAAwiB,GAAAlK,EAAAkK,GAAAxiB,KAAAyiB,GAAAnK,EAAAmK,IAIA7I,SAAA,WAEA,OAAA5Z,KAAAsiB,GAAAtiB,KAAAsiB,GAAAtiB,KAAAuiB,GAAAviB,KAAAuiB,GAAAviB,KAAAwiB,GAAAxiB,KAAAwiB,GAAAxiB,KAAAyiB,GAAAziB,KAAAyiB,IAIAt7B,OAAA,WAEA,OAAAsH,KAAAorB,KAAA7Z,KAAAsiB,GAAAtiB,KAAAsiB,GAAAtiB,KAAAuiB,GAAAviB,KAAAuiB,GAAAviB,KAAAwiB,GAAAxiB,KAAAwiB,GAAAxiB,KAAAyiB,GAAAziB,KAAAyiB,KAIA1I,UAAA,WAEA,IAAA9pB,EAAA+P,KAAA7Y,SAsBA,OApBA,IAAA8I,GAEA+P,KAAAsiB,GAAA,EACAtiB,KAAAuiB,GAAA,EACAviB,KAAAwiB,GAAA,EACAxiB,KAAAyiB,GAAA,IAMAziB,KAAAsiB,GAAAtiB,KAAAsiB,IAFAryB,EAAA,EAAAA,GAGA+P,KAAAuiB,GAAAviB,KAAAuiB,GAAAtyB,EACA+P,KAAAwiB,GAAAxiB,KAAAwiB,GAAAvyB,EACA+P,KAAAyiB,GAAAziB,KAAAyiB,GAAAxyB,GAIA+P,KAAAymB,oBAEAzmB,MAIA+Y,SAAA,SAAAnC,EAAA5vB,GAEA,YAAA8F,IAAA9F,GAEAkQ,QAAAC,KAAA,0GACA6I,KAAAmoB,oBAAAvR,EAAA5vB,IAIAgZ,KAAAmoB,oBAAAnoB,KAAA4W,IAIA8F,YAAA,SAAA9F,GAEA,OAAA5W,KAAAmoB,oBAAAvR,EAAA5W,OAIAmoB,oBAAA,SAAAthC,EAAA6E,GAIA,IAAA08B,EAAAvhC,EAAAy7B,GAAA+F,EAAAxhC,EAAA07B,GAAA+F,EAAAzhC,EAAA27B,GAAA+F,EAAA1hC,EAAA47B,GACA+F,EAAA98B,EAAA42B,GAAAmG,EAAA/8B,EAAA62B,GAAAmG,EAAAh9B,EAAA82B,GAAAmG,EAAAj9B,EAAA+2B,GASA,OAPAziB,KAAAsiB,GAAA8F,EAAAO,EAAAJ,EAAAC,EAAAH,EAAAK,EAAAJ,EAAAG,EACAzoB,KAAAuiB,GAAA8F,EAAAM,EAAAJ,EAAAE,EAAAH,EAAAE,EAAAJ,EAAAM,EACA1oB,KAAAwiB,GAAA8F,EAAAK,EAAAJ,EAAAG,EAAAN,EAAAK,EAAAJ,EAAAG,EACAxoB,KAAAyiB,GAAA8F,EAAAI,EAAAP,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAEA1oB,KAAAymB,oBAEAzmB,MAIAklB,MAAA,SAAAE,EAAA9+B,GAEA,GAAA,IAAAA,EAAA,OAAA0Z,KACA,GAAA,IAAA1Z,EAAA,OAAA0Z,KAAA5T,KAAAg5B,GAEA,IAAAj5B,EAAA6T,KAAAsiB,GAAA70B,EAAAuS,KAAAuiB,GAAAd,EAAAzhB,KAAAwiB,GAAAhK,EAAAxY,KAAAyiB,GAIAmG,EAAApQ,EAAA4M,EAAA3C,GAAAt2B,EAAAi5B,EAAA9C,GAAA70B,EAAA23B,EAAA7C,GAAAd,EAAA2D,EAAA5C,GAiBA,GAfAoG,EAAA,GAEA5oB,KAAAyiB,IAAA2C,EAAA3C,GACAziB,KAAAsiB,IAAA8C,EAAA9C,GACAtiB,KAAAuiB,IAAA6C,EAAA7C,GACAviB,KAAAwiB,IAAA4C,EAAA5C,GAEAoG,GAAAA,GAIA5oB,KAAA5T,KAAAg5B,GAIAwD,GAAA,EAOA,OALA5oB,KAAAyiB,GAAAjK,EACAxY,KAAAsiB,GAAAn2B,EACA6T,KAAAuiB,GAAA90B,EACAuS,KAAAwiB,GAAAf,EAEAzhB,KAIA,IAAA6oB,EAAA,EAAAD,EAAAA,EAEA,GAAAC,GAAAtvB,OAAAwQ,QAAA,CAEA,IAAA3gB,EAAA,EAAA9C,EASA,OARA0Z,KAAAyiB,GAAAr5B,EAAAovB,EAAAlyB,EAAA0Z,KAAAyiB,GACAziB,KAAAsiB,GAAAl5B,EAAA+C,EAAA7F,EAAA0Z,KAAAsiB,GACAtiB,KAAAuiB,GAAAn5B,EAAAqE,EAAAnH,EAAA0Z,KAAAuiB,GACAviB,KAAAwiB,GAAAp5B,EAAAq4B,EAAAn7B,EAAA0Z,KAAAwiB,GAEAxiB,KAAA+Z,YACA/Z,KAAAymB,oBAEAzmB,KAIA,IAAA8oB,EAAAr6B,KAAAorB,KAAAgP,GACAE,EAAAt6B,KAAAwrB,MAAA6O,EAAAF,GACAI,EAAAv6B,KAAAsoB,KAAA,EAAAzwB,GAAAyiC,GAAAD,EACAG,EAAAx6B,KAAAsoB,IAAAzwB,EAAAyiC,GAAAD,EASA,OAPA9oB,KAAAyiB,GAAAjK,EAAAwQ,EAAAhpB,KAAAyiB,GAAAwG,EACAjpB,KAAAsiB,GAAAn2B,EAAA68B,EAAAhpB,KAAAsiB,GAAA2G,EACAjpB,KAAAuiB,GAAA90B,EAAAu7B,EAAAhpB,KAAAuiB,GAAA0G,EACAjpB,KAAAwiB,GAAAf,EAAAuH,EAAAhpB,KAAAwiB,GAAAyG,EAEAjpB,KAAAymB,oBAEAzmB,MAIA4a,OAAA,SAAA+L,GAEA,OAAAA,EAAArE,KAAAtiB,KAAAsiB,IAAAqE,EAAApE,KAAAviB,KAAAuiB,IAAAoE,EAAAnE,KAAAxiB,KAAAwiB,IAAAmE,EAAAlE,KAAAziB,KAAAyiB,IAIA5H,UAAA,SAAAzG,EAAA0G,GAWA,YATAhuB,IAAAguB,IAAAA,EAAA,GAEA9a,KAAAsiB,GAAAlO,EAAA0G,GACA9a,KAAAuiB,GAAAnO,EAAA0G,EAAA,GACA9a,KAAAwiB,GAAApO,EAAA0G,EAAA,GACA9a,KAAAyiB,GAAArO,EAAA0G,EAAA,GAEA9a,KAAAymB,oBAEAzmB,MAIA+a,QAAA,SAAA3G,EAAA0G,GAUA,YARAhuB,IAAAsnB,IAAAA,EAAA,SACAtnB,IAAAguB,IAAAA,EAAA,GAEA1G,EAAA0G,GAAA9a,KAAAsiB,GACAlO,EAAA0G,EAAA,GAAA9a,KAAAuiB,GACAnO,EAAA0G,EAAA,GAAA9a,KAAAwiB,GACApO,EAAA0G,EAAA,GAAA9a,KAAAyiB,GAEArO,GAIA4G,oBAAA,SAAAC,EAAA5Q,GAOA,OALArK,KAAAsiB,GAAArH,EAAAC,KAAA7Q,GACArK,KAAAuiB,GAAAtH,EAAAE,KAAA9Q,GACArK,KAAAwiB,GAAAvH,EAAA4J,KAAAxa,GACArK,KAAAyiB,GAAAxH,EAAA6J,KAAAza,GAEArK,MAIAkpB,UAAA,SAAAC,GAIA,OAFAnpB,KAAAymB,kBAAA0C,EAEAnpB,MAIAymB,kBAAA,eAaA,IAAA2C,GAAA,IAAAC,GACAC,GAAA,IAAAjH,GAEA,SAAAgH,GAAAl9B,EAAAsB,EAAAg0B,QACA,IAAAt1B,IAAAA,EAAA,QACA,IAAAsB,IAAAA,EAAA,QACA,IAAAg0B,IAAAA,EAAA,GAGAzhB,KAAA7T,EAAAA,EACA6T,KAAAvS,EAAAA,EACAuS,KAAAyhB,EAAAA,EAIAl6B,OAAAM,OAAAwhC,GAAA5hC,UAAA,CAEA8hC,WAAA,EAEA/R,IAAA,SAAArrB,EAAAsB,EAAAg0B,GAMA,OAJAzhB,KAAA7T,EAAAA,EACA6T,KAAAvS,EAAAA,EACAuS,KAAAyhB,EAAAA,EAEAzhB,MAIA8X,UAAA,SAAAC,GAMA,OAJA/X,KAAA7T,EAAA4rB,EACA/X,KAAAvS,EAAAsqB,EACA/X,KAAAyhB,EAAA1J,EAEA/X,MAIAgY,KAAA,SAAA7rB,GAIA,OAFA6T,KAAA7T,EAAAA,EAEA6T,MAIAiY,KAAA,SAAAxqB,GAIA,OAFAuS,KAAAvS,EAAAA,EAEAuS,MAIAyjB,KAAA,SAAAhC,GAIA,OAFAzhB,KAAAyhB,EAAAA,EAEAzhB,MAIAkY,aAAA,SAAA7N,EAAAne,GAEA,OAAAme,GAEA,KAAA,EAAArK,KAAA7T,EAAAD,EAAA,MACA,KAAA,EAAA8T,KAAAvS,EAAAvB,EAAA,MACA,KAAA,EAAA8T,KAAAyhB,EAAAv1B,EAAA,MACA,QAAA,MAAA,IAAApF,MAAA,0BAAAujB,GAIA,OAAArK,MAIAmY,aAAA,SAAA9N,GAEA,OAAAA,GAEA,KAAA,EAAA,OAAArK,KAAA7T,EACA,KAAA,EAAA,OAAA6T,KAAAvS,EACA,KAAA,EAAA,OAAAuS,KAAAyhB,EACA,QAAA,MAAA,IAAA36B,MAAA,0BAAAujB,KAMA+N,MAAA,WAEA,OAAA,IAAApY,KAAAqY,YAAArY,KAAA7T,EAAA6T,KAAAvS,EAAAuS,KAAAyhB,IAIAr1B,KAAA,SAAAksB,GAMA,OAJAtY,KAAA7T,EAAAmsB,EAAAnsB,EACA6T,KAAAvS,EAAA6qB,EAAA7qB,EACAuS,KAAAyhB,EAAAnJ,EAAAmJ,EAEAzhB,MAIAuY,IAAA,SAAAD,EAAAE,GAEA,YAAA1rB,IAAA0rB,GAEAthB,QAAAC,KAAA,yFACA6I,KAAAyY,WAAAH,EAAAE,KAIAxY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EACAuS,KAAAyhB,GAAAnJ,EAAAmJ,EAEAzhB,OAIA0Y,UAAA,SAAAtvB,GAMA,OAJA4W,KAAA7T,GAAA/C,EACA4W,KAAAvS,GAAArE,EACA4W,KAAAyhB,GAAAr4B,EAEA4W,MAIAyY,WAAA,SAAA5xB,EAAA6E,GAMA,OAJAsU,KAAA7T,EAAAtF,EAAAsF,EAAAT,EAAAS,EACA6T,KAAAvS,EAAA5G,EAAA4G,EAAA/B,EAAA+B,EACAuS,KAAAyhB,EAAA56B,EAAA46B,EAAA/1B,EAAA+1B,EAEAzhB,MAIA2Y,gBAAA,SAAAL,EAAAlvB,GAMA,OAJA4W,KAAA7T,GAAAmsB,EAAAnsB,EAAA/C,EACA4W,KAAAvS,GAAA6qB,EAAA7qB,EAAArE,EACA4W,KAAAyhB,GAAAnJ,EAAAmJ,EAAAr4B,EAEA4W,MAIA4Y,IAAA,SAAAN,EAAAE,GAEA,YAAA1rB,IAAA0rB,GAEAthB,QAAAC,KAAA,yFACA6I,KAAA6Y,WAAAP,EAAAE,KAIAxY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EACAuS,KAAAyhB,GAAAnJ,EAAAmJ,EAEAzhB,OAIA8Y,UAAA,SAAA1vB,GAMA,OAJA4W,KAAA7T,GAAA/C,EACA4W,KAAAvS,GAAArE,EACA4W,KAAAyhB,GAAAr4B,EAEA4W,MAIA6Y,WAAA,SAAAhyB,EAAA6E,GAMA,OAJAsU,KAAA7T,EAAAtF,EAAAsF,EAAAT,EAAAS,EACA6T,KAAAvS,EAAA5G,EAAA4G,EAAA/B,EAAA+B,EACAuS,KAAAyhB,EAAA56B,EAAA46B,EAAA/1B,EAAA+1B,EAEAzhB,MAIA+Y,SAAA,SAAAT,EAAAE,GAEA,YAAA1rB,IAAA0rB,GAEAthB,QAAAC,KAAA,mGACA6I,KAAAwpB,gBAAAlR,EAAAE,KAIAxY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EACAuS,KAAAyhB,GAAAnJ,EAAAmJ,EAEAzhB,OAIAgZ,eAAA,SAAAjB,GAMA,OAJA/X,KAAA7T,GAAA4rB,EACA/X,KAAAvS,GAAAsqB,EACA/X,KAAAyhB,GAAA1J,EAEA/X,MAIAwpB,gBAAA,SAAA3iC,EAAA6E,GAMA,OAJAsU,KAAA7T,EAAAtF,EAAAsF,EAAAT,EAAAS,EACA6T,KAAAvS,EAAA5G,EAAA4G,EAAA/B,EAAA+B,EACAuS,KAAAyhB,EAAA56B,EAAA46B,EAAA/1B,EAAA+1B,EAEAzhB,MAIAypB,WAAA,SAAA5C,GAQA,OANAA,GAAAA,EAAAC,SAEA5vB,QAAAkK,MAAA,+FAIApB,KAAA0pB,gBAAAJ,GAAA1C,aAAAC,KAIA8C,eAAA,SAAAvC,EAAApN,GAEA,OAAAha,KAAA0pB,gBAAAJ,GAAAnC,iBAAAC,EAAApN,KAIAb,aAAA,SAAA3rB,GAEA,IAAArB,EAAA6T,KAAA7T,EAAAsB,EAAAuS,KAAAvS,EAAAg0B,EAAAzhB,KAAAyhB,EACAr7B,EAAAoH,EAAAmqB,SAMA,OAJA3X,KAAA7T,EAAA/F,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAAAq7B,EACAzhB,KAAAvS,EAAArH,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAAAq7B,EACAzhB,KAAAyhB,EAAAr7B,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAAAq7B,EAEAzhB,MAIA4pB,kBAAA,SAAAp8B,GAEA,OAAAwS,KAAAmZ,aAAA3rB,GAAAusB,aAIA4J,aAAA,SAAAn2B,GAEA,IAAArB,EAAA6T,KAAA7T,EAAAsB,EAAAuS,KAAAvS,EAAAg0B,EAAAzhB,KAAAyhB,EACAr7B,EAAAoH,EAAAmqB,SAEAa,EAAA,GAAApyB,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,IAAAq7B,EAAAr7B,EAAA,KAMA,OAJA4Z,KAAA7T,GAAA/F,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAAAq7B,EAAAr7B,EAAA,KAAAoyB,EACAxY,KAAAvS,GAAArH,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAAAq7B,EAAAr7B,EAAA,KAAAoyB,EACAxY,KAAAyhB,GAAAr7B,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,IAAAq7B,EAAAr7B,EAAA,KAAAoyB,EAEAxY,MAIA0pB,gBAAA,SAAA9S,GAEA,IAAAzqB,EAAA6T,KAAA7T,EAAAsB,EAAAuS,KAAAvS,EAAAg0B,EAAAzhB,KAAAyhB,EACAoI,EAAAjT,EAAAzqB,EAAA29B,EAAAlT,EAAAnpB,EAAAs8B,EAAAnT,EAAA6K,EAAAuI,EAAApT,EAAA4B,EAIAyR,EAAAD,EAAA79B,EAAA29B,EAAArI,EAAAsI,EAAAt8B,EACAy8B,EAAAF,EAAAv8B,EAAAs8B,EAAA59B,EAAA09B,EAAApI,EACA0I,EAAAH,EAAAvI,EAAAoI,EAAAp8B,EAAAq8B,EAAA39B,EACAi+B,GAAAP,EAAA19B,EAAA29B,EAAAr8B,EAAAs8B,EAAAtI,EAQA,OAJAzhB,KAAA7T,EAAA89B,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACA9pB,KAAAvS,EAAAy8B,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACA/pB,KAAAyhB,EAAA0I,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EAEA7pB,MAIAqqB,QAAA,SAAAC,GAEA,OAAAtqB,KAAA2jB,aAAA2G,EAAAC,oBAAA5G,aAAA2G,EAAAE,mBAIAC,UAAA,SAAAH,GAEA,OAAAtqB,KAAA2jB,aAAA2G,EAAAI,yBAAA/G,aAAA2G,EAAAK,cAIAC,mBAAA,SAAAp9B,GAKA,IAAArB,EAAA6T,KAAA7T,EAAAsB,EAAAuS,KAAAvS,EAAAg0B,EAAAzhB,KAAAyhB,EACAr7B,EAAAoH,EAAAmqB,SAMA,OAJA3X,KAAA7T,EAAA/F,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAAAq7B,EACAzhB,KAAAvS,EAAArH,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,GAAAq7B,EACAzhB,KAAAyhB,EAAAr7B,EAAA,GAAA+F,EAAA/F,EAAA,GAAAqH,EAAArH,EAAA,IAAAq7B,EAEAzhB,KAAA+Z,aAIAd,OAAA,SAAAX,GAMA,OAJAtY,KAAA7T,GAAAmsB,EAAAnsB,EACA6T,KAAAvS,GAAA6qB,EAAA7qB,EACAuS,KAAAyhB,GAAAnJ,EAAAmJ,EAEAzhB,MAIAkZ,aAAA,SAAAnB,GAEA,OAAA/X,KAAAgZ,eAAA,EAAAjB,IAIAjd,IAAA,SAAAwd,GAMA,OAJAtY,KAAA7T,EAAAsC,KAAAqM,IAAAkF,KAAA7T,EAAAmsB,EAAAnsB,GACA6T,KAAAvS,EAAAgB,KAAAqM,IAAAkF,KAAAvS,EAAA6qB,EAAA7qB,GACAuS,KAAAyhB,EAAAhzB,KAAAqM,IAAAkF,KAAAyhB,EAAAnJ,EAAAmJ,GAEAzhB,MAIAjO,IAAA,SAAAumB,GAMA,OAJAtY,KAAA7T,EAAAsC,KAAAsD,IAAAiO,KAAA7T,EAAAmsB,EAAAnsB,GACA6T,KAAAvS,EAAAgB,KAAAsD,IAAAiO,KAAAvS,EAAA6qB,EAAA7qB,GACAuS,KAAAyhB,EAAAhzB,KAAAsD,IAAAiO,KAAAyhB,EAAAnJ,EAAAmJ,GAEAzhB,MAIAkV,MAAA,SAAApa,EAAA/I,GAQA,OAJAiO,KAAA7T,EAAAsC,KAAAsD,IAAA+I,EAAA3O,EAAAsC,KAAAqM,IAAA/I,EAAA5F,EAAA6T,KAAA7T,IACA6T,KAAAvS,EAAAgB,KAAAsD,IAAA+I,EAAArN,EAAAgB,KAAAqM,IAAA/I,EAAAtE,EAAAuS,KAAAvS,IACAuS,KAAAyhB,EAAAhzB,KAAAsD,IAAA+I,EAAA2mB,EAAAhzB,KAAAqM,IAAA/I,EAAA0vB,EAAAzhB,KAAAyhB,IAEAzhB,MAIAoZ,YAAA,SAAAC,EAAAC,GAMA,OAJAtZ,KAAA7T,EAAAsC,KAAAsD,IAAAsnB,EAAA5qB,KAAAqM,IAAAwe,EAAAtZ,KAAA7T,IACA6T,KAAAvS,EAAAgB,KAAAsD,IAAAsnB,EAAA5qB,KAAAqM,IAAAwe,EAAAtZ,KAAAvS,IACAuS,KAAAyhB,EAAAhzB,KAAAsD,IAAAsnB,EAAA5qB,KAAAqM,IAAAwe,EAAAtZ,KAAAyhB,IAEAzhB,MAIAuZ,YAAA,SAAAze,EAAA/I,GAEA,IAAA5K,EAAA6Y,KAAA7Y,SAEA,OAAA6Y,KAAAkZ,aAAA/xB,GAAA,GAAA6xB,eAAAvqB,KAAAsD,IAAA+I,EAAArM,KAAAqM,IAAA/I,EAAA5K,MAIAuH,MAAA,WAMA,OAJAsR,KAAA7T,EAAAsC,KAAAC,MAAAsR,KAAA7T,GACA6T,KAAAvS,EAAAgB,KAAAC,MAAAsR,KAAAvS,GACAuS,KAAAyhB,EAAAhzB,KAAAC,MAAAsR,KAAAyhB,GAEAzhB,MAIAwW,KAAA,WAMA,OAJAxW,KAAA7T,EAAAsC,KAAA+nB,KAAAxW,KAAA7T,GACA6T,KAAAvS,EAAAgB,KAAA+nB,KAAAxW,KAAAvS,GACAuS,KAAAyhB,EAAAhzB,KAAA+nB,KAAAxW,KAAAyhB,GAEAzhB,MAIA9P,MAAA,WAMA,OAJA8P,KAAA7T,EAAAsC,KAAAyB,MAAA8P,KAAA7T,GACA6T,KAAAvS,EAAAgB,KAAAyB,MAAA8P,KAAAvS,GACAuS,KAAAyhB,EAAAhzB,KAAAyB,MAAA8P,KAAAyhB,GAEAzhB,MAIAwZ,YAAA,WAMA,OAJAxZ,KAAA7T,EAAA6T,KAAA7T,EAAA,EAAAsC,KAAA+nB,KAAAxW,KAAA7T,GAAAsC,KAAAC,MAAAsR,KAAA7T,GACA6T,KAAAvS,EAAAuS,KAAAvS,EAAA,EAAAgB,KAAA+nB,KAAAxW,KAAAvS,GAAAgB,KAAAC,MAAAsR,KAAAvS,GACAuS,KAAAyhB,EAAAzhB,KAAAyhB,EAAA,EAAAhzB,KAAA+nB,KAAAxW,KAAAyhB,GAAAhzB,KAAAC,MAAAsR,KAAAyhB,GAEAzhB,MAIAyZ,OAAA,WAMA,OAJAzZ,KAAA7T,GAAA6T,KAAA7T,EACA6T,KAAAvS,GAAAuS,KAAAvS,EACAuS,KAAAyhB,GAAAzhB,KAAAyhB,EAEAzhB,MAIA0Z,IAAA,SAAApB,GAEA,OAAAtY,KAAA7T,EAAAmsB,EAAAnsB,EAAA6T,KAAAvS,EAAA6qB,EAAA7qB,EAAAuS,KAAAyhB,EAAAnJ,EAAAmJ,GAMA7H,SAAA,WAEA,OAAA5Z,KAAA7T,EAAA6T,KAAA7T,EAAA6T,KAAAvS,EAAAuS,KAAAvS,EAAAuS,KAAAyhB,EAAAzhB,KAAAyhB,GAIAt6B,OAAA,WAEA,OAAAsH,KAAAorB,KAAA7Z,KAAA7T,EAAA6T,KAAA7T,EAAA6T,KAAAvS,EAAAuS,KAAAvS,EAAAuS,KAAAyhB,EAAAzhB,KAAAyhB,IAIA3H,gBAAA,WAEA,OAAArrB,KAAAkC,IAAAqP,KAAA7T,GAAAsC,KAAAkC,IAAAqP,KAAAvS,GAAAgB,KAAAkC,IAAAqP,KAAAyhB,IAIA1H,UAAA,WAEA,OAAA/Z,KAAAkZ,aAAAlZ,KAAA7Y,UAAA,IAIAozB,UAAA,SAAApzB,GAEA,OAAA6Y,KAAA+Z,YAAAf,eAAA7xB,IAIAsuB,KAAA,SAAA6C,EAAAkC,GAMA,OAJAxa,KAAA7T,IAAAmsB,EAAAnsB,EAAA6T,KAAA7T,GAAAquB,EACAxa,KAAAvS,IAAA6qB,EAAA7qB,EAAAuS,KAAAvS,GAAA+sB,EACAxa,KAAAyhB,IAAAnJ,EAAAmJ,EAAAzhB,KAAAyhB,GAAAjH,EAEAxa,MAIAya,YAAA,SAAAC,EAAAC,EAAAH,GAMA,OAJAxa,KAAA7T,EAAAuuB,EAAAvuB,GAAAwuB,EAAAxuB,EAAAuuB,EAAAvuB,GAAAquB,EACAxa,KAAAvS,EAAAitB,EAAAjtB,GAAAktB,EAAAltB,EAAAitB,EAAAjtB,GAAA+sB,EACAxa,KAAAyhB,EAAA/G,EAAA+G,GAAA9G,EAAA8G,EAAA/G,EAAA+G,GAAAjH,EAEAxa,MAIA2Z,MAAA,SAAArB,EAAAE,GAEA,YAAA1rB,IAAA0rB,GAEAthB,QAAAC,KAAA,6FACA6I,KAAA6qB,aAAAvS,EAAAE,IAIAxY,KAAA6qB,aAAA7qB,KAAAsY,IAIAuS,aAAA,SAAAhkC,EAAA6E,GAEA,IAAAo/B,EAAAjkC,EAAAsF,EAAA4+B,EAAAlkC,EAAA4G,EAAAu9B,EAAAnkC,EAAA46B,EACAwJ,EAAAv/B,EAAAS,EAAA++B,EAAAx/B,EAAA+B,EAAA09B,EAAAz/B,EAAA+1B,EAMA,OAJAzhB,KAAA7T,EAAA4+B,EAAAI,EAAAH,EAAAE,EACAlrB,KAAAvS,EAAAu9B,EAAAC,EAAAH,EAAAK,EACAnrB,KAAAyhB,EAAAqJ,EAAAI,EAAAH,EAAAE,EAEAjrB,MAIAorB,gBAAA,SAAA9S,GAEA,IAAA+S,EAAA/S,EAAAsB,WAEA,GAAA,IAAAyR,EAAA,OAAArrB,KAAAwX,IAAA,EAAA,EAAA,GAEA,IAAAO,EAAAO,EAAAoB,IAAA1Z,MAAAqrB,EAEA,OAAArrB,KAAA5T,KAAAksB,GAAAU,eAAAjB,IAIAuT,eAAA,SAAAC,GAIA,OAFAnC,GAAAh9B,KAAA4T,MAAAorB,gBAAAG,GAEAvrB,KAAA4Y,IAAAwQ,KAIAoC,QAAA,SAAAC,GAKA,OAAAzrB,KAAA4Y,IAAAwQ,GAAAh9B,KAAAq/B,GAAAzS,eAAA,EAAAhZ,KAAA0Z,IAAA+R,MAIA3D,QAAA,SAAAxP,GAEA,IAAA+S,EAAA58B,KAAAorB,KAAA7Z,KAAA4Z,WAAAtB,EAAAsB,YAEA,GAAA,IAAAyR,EAAA,OAAA58B,KAAAgmB,GAAA,EAEA,IAAA8K,EAAAvf,KAAA0Z,IAAApB,GAAA+S,EAIA,OAAA58B,KAAAo1B,KAAAtP,GAAAW,MAAAqK,GAAA,EAAA,KAIArF,WAAA,SAAA5B,GAEA,OAAA7pB,KAAAorB,KAAA7Z,KAAAma,kBAAA7B,KAIA6B,kBAAA,SAAA7B,GAEA,IAAA8B,EAAApa,KAAA7T,EAAAmsB,EAAAnsB,EAAAkuB,EAAAra,KAAAvS,EAAA6qB,EAAA7qB,EAAAi+B,EAAA1rB,KAAAyhB,EAAAnJ,EAAAmJ,EAEA,OAAArH,EAAAA,EAAAC,EAAAA,EAAAqR,EAAAA,GAIApR,oBAAA,SAAAhC,GAEA,OAAA7pB,KAAAkC,IAAAqP,KAAA7T,EAAAmsB,EAAAnsB,GAAAsC,KAAAkC,IAAAqP,KAAAvS,EAAA6qB,EAAA7qB,GAAAgB,KAAAkC,IAAAqP,KAAAyhB,EAAAnJ,EAAAmJ,IAIAkK,iBAAA,SAAAviC,GAEA,OAAA4W,KAAA4rB,uBAAAxiC,EAAAyiC,OAAAziC,EAAA0iC,IAAA1iC,EAAAm2B,QAIAqM,uBAAA,SAAAC,EAAAC,EAAAvM,GAEA,IAAAwM,EAAAt9B,KAAAsoB,IAAA+U,GAAAD,EAMA,OAJA7rB,KAAA7T,EAAA4/B,EAAAt9B,KAAAsoB,IAAAwI,GACAvf,KAAAvS,EAAAgB,KAAAqoB,IAAAgV,GAAAD,EACA7rB,KAAAyhB,EAAAsK,EAAAt9B,KAAAqoB,IAAAyI,GAEAvf,MAIAgsB,mBAAA,SAAAtlC,GAEA,OAAAsZ,KAAAisB,yBAAAvlC,EAAAmlC,OAAAnlC,EAAA64B,MAAA74B,EAAA+G,IAIAw+B,yBAAA,SAAAJ,EAAAtM,EAAA9xB,GAMA,OAJAuS,KAAA7T,EAAA0/B,EAAAp9B,KAAAsoB,IAAAwI,GACAvf,KAAAvS,EAAAA,EACAuS,KAAAyhB,EAAAoK,EAAAp9B,KAAAqoB,IAAAyI,GAEAvf,MAIAksB,sBAAA,SAAA1+B,GAEA,IAAApH,EAAAoH,EAAAmqB,SAMA,OAJA3X,KAAA7T,EAAA/F,EAAA,IACA4Z,KAAAvS,EAAArH,EAAA,IACA4Z,KAAAyhB,EAAAr7B,EAAA,IAEA4Z,MAIAmsB,mBAAA,SAAA3+B,GAEA,IAAAyxB,EAAAjf,KAAAosB,oBAAA5+B,EAAA,GAAArG,SACA+3B,EAAAlf,KAAAosB,oBAAA5+B,EAAA,GAAArG,SACAklC,EAAArsB,KAAAosB,oBAAA5+B,EAAA,GAAArG,SAMA,OAJA6Y,KAAA7T,EAAA8yB,EACAjf,KAAAvS,EAAAyxB,EACAlf,KAAAyhB,EAAA4K,EAEArsB,MAIAosB,oBAAA,SAAA5+B,EAAA6c,GAEA,OAAArK,KAAA6a,UAAArtB,EAAAmqB,SAAA,EAAAtN,IAIAkS,qBAAA,SAAA/uB,EAAA6c,GAEA,OAAArK,KAAA6a,UAAArtB,EAAAmqB,SAAA,EAAAtN,IAIAuQ,OAAA,SAAAtC,GAEA,OAAAA,EAAAnsB,IAAA6T,KAAA7T,GAAAmsB,EAAA7qB,IAAAuS,KAAAvS,GAAA6qB,EAAAmJ,IAAAzhB,KAAAyhB,GAIA5G,UAAA,SAAAzG,EAAA0G,GAQA,YANAhuB,IAAAguB,IAAAA,EAAA,GAEA9a,KAAA7T,EAAAioB,EAAA0G,GACA9a,KAAAvS,EAAA2mB,EAAA0G,EAAA,GACA9a,KAAAyhB,EAAArN,EAAA0G,EAAA,GAEA9a,MAIA+a,QAAA,SAAA3G,EAAA0G,GASA,YAPAhuB,IAAAsnB,IAAAA,EAAA,SACAtnB,IAAAguB,IAAAA,EAAA,GAEA1G,EAAA0G,GAAA9a,KAAA7T,EACAioB,EAAA0G,EAAA,GAAA9a,KAAAvS,EACA2mB,EAAA0G,EAAA,GAAA9a,KAAAyhB,EAEArN,GAIA4G,oBAAA,SAAAC,EAAA5Q,EAAAyQ,GAYA,YAVAhuB,IAAAguB,GAEA5jB,QAAAC,KAAA,uEAIA6I,KAAA7T,EAAA8uB,EAAAC,KAAA7Q,GACArK,KAAAvS,EAAAwtB,EAAAE,KAAA9Q,GACArK,KAAAyhB,EAAAxG,EAAA4J,KAAAxa,GAEArK,MAIA6U,OAAA,WAMA,OAJA7U,KAAA7T,EAAAsC,KAAAomB,SACA7U,KAAAvS,EAAAgB,KAAAomB,SACA7U,KAAAyhB,EAAAhzB,KAAAomB,SAEA7U,QAMA,IAAAssB,GAAA,IAAAjD,GACAkD,GAAA,IAAAC,GACAC,GAAA,IAAApD,GAAA,EAAA,EAAA,GACAqD,GAAA,IAAArD,GAAA,EAAA,EAAA,GACA/G,GAAA,IAAA+G,GACA9G,GAAA,IAAA8G,GACA7G,GAAA,IAAA6G,GAeA,SAAAmD,KAEAxsB,KAAA2X,SAAA,CAEA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAIAtuB,UAAAlC,OAAA,GAEA+P,QAAAkK,MAAA,iFAMA7Z,OAAAM,OAAA2kC,GAAA/kC,UAAA,CAEAklC,WAAA,EAEAnV,IAAA,SAAA+D,EAAAC,EAAAC,EAAAmR,EAAAlR,EAAAC,EAAAC,EAAAiR,EAAAhR,EAAAC,EAAAC,EAAA+Q,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAlR,EAAAhc,KAAA2X,SAOA,OALAqE,EAAA,GAAAT,EAAAS,EAAA,GAAAR,EAAAQ,EAAA,GAAAP,EAAAO,EAAA,IAAA4Q,EACA5Q,EAAA,GAAAN,EAAAM,EAAA,GAAAL,EAAAK,EAAA,GAAAJ,EAAAI,EAAA,IAAA6Q,EACA7Q,EAAA,GAAAH,EAAAG,EAAA,GAAAF,EAAAE,EAAA,IAAAD,EAAAC,EAAA,IAAA8Q,EACA9Q,EAAA,GAAA+Q,EAAA/Q,EAAA,GAAAgR,EAAAhR,EAAA,IAAAiR,EAAAjR,EAAA,IAAAkR,EAEAltB,MAIAic,SAAA,WAWA,OATAjc,KAAAwX,IAEA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAIAxX,MAIAoY,MAAA,WAEA,OAAA,IAAAoU,IAAA3R,UAAA7a,KAAA2X,WAIAvrB,KAAA,SAAAoB,GAEA,IAAAwuB,EAAAhc,KAAA2X,SACAuE,EAAA1uB,EAAAmqB,SAOA,OALAqE,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,IAAAE,EAAA,IAEAlc,MAIAmtB,aAAA,SAAA3/B,GAEA,IAAAwuB,EAAAhc,KAAA2X,SAAAuE,EAAA1uB,EAAAmqB,SAMA,OAJAqE,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IAEAlc,MAIAmc,aAAA,SAAAC,EAAAC,EAAAC,GAMA,OAJAF,EAAAgQ,oBAAApsB,KAAA,GACAqc,EAAA+P,oBAAApsB,KAAA,GACAsc,EAAA8P,oBAAApsB,KAAA,GAEAA,MAIAotB,UAAA,SAAAhR,EAAAC,EAAAC,GASA,OAPAtc,KAAAwX,IACA4E,EAAAjwB,EAAAkwB,EAAAlwB,EAAAmwB,EAAAnwB,EAAA,EACAiwB,EAAA3uB,EAAA4uB,EAAA5uB,EAAA6uB,EAAA7uB,EAAA,EACA2uB,EAAAqF,EAAApF,EAAAoF,EAAAnF,EAAAmF,EAAA,EACA,EAAA,EAAA,EAAA,GAGAzhB,MAIAqtB,gBAAA,SAAA7/B,GAIA,IAAAwuB,EAAAhc,KAAA2X,SACAuE,EAAA1uB,EAAAmqB,SAEApT,EAAA,EAAA+nB,GAAAF,oBAAA5+B,EAAA,GAAArG,SACAqd,EAAA,EAAA8nB,GAAAF,oBAAA5+B,EAAA,GAAArG,SACAmmC,EAAA,EAAAhB,GAAAF,oBAAA5+B,EAAA,GAAArG,SAsBA,OApBA60B,EAAA,GAAAE,EAAA,GAAA3X,EACAyX,EAAA,GAAAE,EAAA,GAAA3X,EACAyX,EAAA,GAAAE,EAAA,GAAA3X,EACAyX,EAAA,GAAA,EAEAA,EAAA,GAAAE,EAAA,GAAA1X,EACAwX,EAAA,GAAAE,EAAA,GAAA1X,EACAwX,EAAA,GAAAE,EAAA,GAAA1X,EACAwX,EAAA,GAAA,EAEAA,EAAA,GAAAE,EAAA,GAAAoR,EACAtR,EAAA,GAAAE,EAAA,GAAAoR,EACAtR,EAAA,IAAAE,EAAA,IAAAoR,EACAtR,EAAA,IAAA,EAEAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EAEAhc,MAIAutB,sBAAA,SAAA1G,GAEAA,GAAAA,EAAAC,SAEA5vB,QAAAkK,MAAA,yGAIA,IAAA4a,EAAAhc,KAAA2X,SAEAxrB,EAAA06B,EAAA16B,EAAAsB,EAAAo5B,EAAAp5B,EAAAg0B,EAAAoF,EAAApF,EACA56B,EAAA4H,KAAAqoB,IAAA3qB,GAAAT,EAAA+C,KAAAsoB,IAAA5qB,GACAzF,EAAA+H,KAAAqoB,IAAArpB,GAAAH,EAAAmB,KAAAsoB,IAAAtpB,GACArH,EAAAqI,KAAAqoB,IAAA2K,GAAAh7B,EAAAgI,KAAAsoB,IAAA0K,GAEA,GAAA,QAAAoF,EAAAhQ,MAAA,CAEA,IAAA8F,EAAA91B,EAAAT,EAAAonC,EAAA3mC,EAAAJ,EAAAm2B,EAAAlxB,EAAAtF,EAAAqnC,EAAA/hC,EAAAjF,EAEAu1B,EAAA,GAAAt1B,EAAAN,EACA41B,EAAA,IAAAt1B,EAAAD,EACAu1B,EAAA,GAAA1uB,EAEA0uB,EAAA,GAAAwR,EAAA5Q,EAAAtvB,EACA0uB,EAAA,GAAAW,EAAA8Q,EAAAngC,EACA0uB,EAAA,IAAAtwB,EAAAhF,EAEAs1B,EAAA,GAAAyR,EAAA9Q,EAAArvB,EACA0uB,EAAA,GAAAY,EAAA4Q,EAAAlgC,EACA0uB,EAAA,IAAAn1B,EAAAH,OAEA,GAAA,QAAAmgC,EAAAhQ,MAAA,CAEA,IAAA6W,EAAAhnC,EAAAN,EAAAunC,EAAAjnC,EAAAD,EAAAmnC,EAAAtgC,EAAAlH,EAAAynC,EAAAvgC,EAAA7G,EAEAu1B,EAAA,GAAA0R,EAAAG,EAAAniC,EACAswB,EAAA,GAAA4R,EAAAliC,EAAAiiC,EACA3R,EAAA,GAAAn1B,EAAAyG,EAEA0uB,EAAA,GAAAn1B,EAAAJ,EACAu1B,EAAA,GAAAn1B,EAAAT,EACA41B,EAAA,IAAAtwB,EAEAswB,EAAA,GAAA2R,EAAAjiC,EAAAkiC,EACA5R,EAAA,GAAA6R,EAAAH,EAAAhiC,EACAswB,EAAA,IAAAn1B,EAAAH,OAEA,GAAA,QAAAmgC,EAAAhQ,MAAA,CAEA,IAAAiX,EAAApnC,EAAAN,EAAA2nC,EAAArnC,EAAAD,EAAAunC,EAAA1gC,EAAAlH,EAAA6nC,EAAA3gC,EAAA7G,EAEAu1B,EAAA,GAAA8R,EAAAG,EAAAviC,EACAswB,EAAA,IAAAn1B,EAAAJ,EACAu1B,EAAA,GAAAgS,EAAAD,EAAAriC,EAEAswB,EAAA,GAAA+R,EAAAC,EAAAtiC,EACAswB,EAAA,GAAAn1B,EAAAT,EACA41B,EAAA,GAAAiS,EAAAH,EAAApiC,EAEAswB,EAAA,IAAAn1B,EAAAyG,EACA0uB,EAAA,GAAAtwB,EACAswB,EAAA,IAAAn1B,EAAAH,OAEA,GAAA,QAAAmgC,EAAAhQ,MAAA,CAEA,IAAAqX,EAAArnC,EAAAT,EAAA+nC,EAAAtnC,EAAAJ,EAAA2nC,EAAA1iC,EAAAtF,EAAAioC,EAAA3iC,EAAAjF,EAEAu1B,EAAA,GAAAt1B,EAAAN,EACA41B,EAAA,GAAAoS,EAAA9gC,EAAA6gC,EACAnS,EAAA,GAAAkS,EAAA5gC,EAAA+gC,EAEArS,EAAA,GAAAt1B,EAAAD,EACAu1B,EAAA,GAAAqS,EAAA/gC,EAAA4gC,EACAlS,EAAA,GAAAmS,EAAA7gC,EAAA8gC,EAEApS,EAAA,IAAA1uB,EACA0uB,EAAA,GAAAtwB,EAAAhF,EACAs1B,EAAA,IAAAn1B,EAAAH,OAEA,GAAA,QAAAmgC,EAAAhQ,MAAA,CAEA,IAAAyX,EAAAznC,EAAAH,EAAA6nC,EAAA1nC,EAAAyG,EAAAkhC,EAAA9iC,EAAAhF,EAAA+nC,EAAA/iC,EAAA4B,EAEA0uB,EAAA,GAAAt1B,EAAAN,EACA41B,EAAA,GAAAyS,EAAAH,EAAA7nC,EACAu1B,EAAA,GAAAwS,EAAA/nC,EAAA8nC,EAEAvS,EAAA,GAAAv1B,EACAu1B,EAAA,GAAAn1B,EAAAT,EACA41B,EAAA,IAAAtwB,EAAAtF,EAEA41B,EAAA,IAAA1uB,EAAAlH,EACA41B,EAAA,GAAAuS,EAAA9nC,EAAA+nC,EACAxS,EAAA,IAAAsS,EAAAG,EAAAhoC,OAEA,GAAA,QAAAogC,EAAAhQ,MAAA,CAEA,IAAA6X,EAAA7nC,EAAAH,EAAAioC,EAAA9nC,EAAAyG,EAAAshC,EAAAljC,EAAAhF,EAAAmoC,EAAAnjC,EAAA4B,EAEA0uB,EAAA,GAAAt1B,EAAAN,EACA41B,EAAA,IAAAv1B,EACAu1B,EAAA,GAAA1uB,EAAAlH,EAEA41B,EAAA,GAAA0S,EAAAjoC,EAAAooC,EACA7S,EAAA,GAAAn1B,EAAAT,EACA41B,EAAA,GAAA2S,EAAAloC,EAAAmoC,EAEA5S,EAAA,GAAA4S,EAAAnoC,EAAAkoC,EACA3S,EAAA,GAAAtwB,EAAAtF,EACA41B,EAAA,IAAA6S,EAAApoC,EAAAioC,EAeA,OAVA1S,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,IAAA,EAGAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EAEAhc,MAIA8uB,2BAAA,SAAAlY,GAEA,OAAA5W,KAAA+uB,QAAAtC,GAAA7V,EAAA8V,KAIAsC,OAAA,SAAAC,EAAArmC,EAAAsmC,GAEA,IAAAlT,EAAAhc,KAAA2X,SAyCA,OAvCA6K,GAAA3J,WAAAoW,EAAArmC,GAEA,IAAA45B,GAAA5I,aAIA4I,GAAAf,EAAA,GAIAe,GAAAzI,YACAuI,GAAAuI,aAAAqE,EAAA1M,IAEA,IAAAF,GAAA1I,aAIA,IAAAnrB,KAAAkC,IAAAu+B,EAAAzN,GAEAe,GAAAr2B,GAAA,KAIAq2B,GAAAf,GAAA,KAIAe,GAAAzI,YACAuI,GAAAuI,aAAAqE,EAAA1M,KAIAF,GAAAvI,YACAwI,GAAAsI,aAAArI,GAAAF,IAEAtG,EAAA,GAAAsG,GAAAn2B,EAAA6vB,EAAA,GAAAuG,GAAAp2B,EAAA6vB,EAAA,GAAAwG,GAAAr2B,EACA6vB,EAAA,GAAAsG,GAAA70B,EAAAuuB,EAAA,GAAAuG,GAAA90B,EAAAuuB,EAAA,GAAAwG,GAAA/0B,EACAuuB,EAAA,GAAAsG,GAAAb,EAAAzF,EAAA,GAAAuG,GAAAd,EAAAzF,EAAA,IAAAwG,GAAAf,EAEAzhB,MAIA+Y,SAAA,SAAAvrB,EAAAnH,GAEA,YAAAyG,IAAAzG,GAEA6Q,QAAAC,KAAA,oGACA6I,KAAAyc,iBAAAjvB,EAAAnH,IAIA2Z,KAAAyc,iBAAAzc,KAAAxS,IAIAkvB,YAAA,SAAAlvB,GAEA,OAAAwS,KAAAyc,iBAAAjvB,EAAAwS,OAIAyc,iBAAA,SAAA51B,EAAA6E,GAEA,IAAAixB,EAAA91B,EAAA8wB,SACAiF,EAAAlxB,EAAAisB,SACAqE,EAAAhc,KAAA2X,SAEAkF,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAwS,EAAAxS,EAAA,IACAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,GAAAyS,EAAAzS,EAAA,IACAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,IAAA0S,EAAA1S,EAAA,IACA2S,EAAA3S,EAAA,GAAA4S,EAAA5S,EAAA,GAAA6S,EAAA7S,EAAA,IAAA8S,EAAA9S,EAAA,IAEAW,EAAAV,EAAA,GAAAW,EAAAX,EAAA,GAAAY,EAAAZ,EAAA,GAAA8S,EAAA9S,EAAA,IACAa,EAAAb,EAAA,GAAAc,EAAAd,EAAA,GAAAe,EAAAf,EAAA,GAAA+S,EAAA/S,EAAA,IACAgB,EAAAhB,EAAA,GAAAiB,EAAAjB,EAAA,GAAAkB,EAAAlB,EAAA,IAAAgT,EAAAhT,EAAA,IACAiT,EAAAjT,EAAA,GAAAkT,EAAAlT,EAAA,GAAAmT,EAAAnT,EAAA,IAAAoT,EAAApT,EAAA,IAsBA,OApBAZ,EAAA,GAAAa,EAAAS,EAAAR,EAAAW,EAAAV,EAAAa,EAAAuR,EAAAU,EACA7T,EAAA,GAAAa,EAAAU,EAAAT,EAAAY,EAAAX,EAAAc,EAAAsR,EAAAW,EACA9T,EAAA,GAAAa,EAAAW,EAAAV,EAAAa,EAAAZ,EAAAe,EAAAqR,EAAAY,EACA/T,EAAA,IAAAa,EAAA6S,EAAA5S,EAAA6S,EAAA5S,EAAA6S,EAAAT,EAAAa,EAEAhU,EAAA,GAAAgB,EAAAM,EAAAL,EAAAQ,EAAAP,EAAAU,EAAAwR,EAAAS,EACA7T,EAAA,GAAAgB,EAAAO,EAAAN,EAAAS,EAAAR,EAAAW,EAAAuR,EAAAU,EACA9T,EAAA,GAAAgB,EAAAQ,EAAAP,EAAAU,EAAAT,EAAAY,EAAAsR,EAAAW,EACA/T,EAAA,IAAAgB,EAAA0S,EAAAzS,EAAA0S,EAAAzS,EAAA0S,EAAAR,EAAAY,EAEAhU,EAAA,GAAAmB,EAAAG,EAAAF,EAAAK,EAAAJ,EAAAO,EAAAyR,EAAAQ,EACA7T,EAAA,GAAAmB,EAAAI,EAAAH,EAAAM,EAAAL,EAAAQ,EAAAwR,EAAAS,EACA9T,EAAA,IAAAmB,EAAAK,EAAAJ,EAAAO,EAAAN,EAAAS,EAAAuR,EAAAU,EACA/T,EAAA,IAAAmB,EAAAuS,EAAAtS,EAAAuS,EAAAtS,EAAAuS,EAAAP,EAAAW,EAEAhU,EAAA,GAAAsT,EAAAhS,EAAAiS,EAAA9R,EAAA+R,EAAA5R,EAAA6R,EAAAI,EACA7T,EAAA,GAAAsT,EAAA/R,EAAAgS,EAAA7R,EAAA8R,EAAA3R,EAAA4R,EAAAK,EACA9T,EAAA,IAAAsT,EAAA9R,EAAA+R,EAAA5R,EAAA6R,EAAA1R,EAAA2R,EAAAM,EACA/T,EAAA,IAAAsT,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAAAH,EAAAO,EAEAhwB,MAIAgZ,eAAA,SAAA5vB,GAEA,IAAA4yB,EAAAhc,KAAA2X,SAOA,OALAqE,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,KAAA5yB,EACA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,KAAA5yB,EACA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,KAAA5yB,EAAA4yB,EAAA,KAAA5yB,EACA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,IAAA5yB,EAAA4yB,EAAA,KAAA5yB,EAAA4yB,EAAA,KAAA5yB,EAEA4W,MAIA+d,YAAA,WAEA,IAAA/B,EAAAhc,KAAA2X,SAEA4D,EAAAS,EAAA,GAAAR,EAAAQ,EAAA,GAAAP,EAAAO,EAAA,GAAA4Q,EAAA5Q,EAAA,IACAN,EAAAM,EAAA,GAAAL,EAAAK,EAAA,GAAAJ,EAAAI,EAAA,GAAA6Q,EAAA7Q,EAAA,IACAH,EAAAG,EAAA,GAAAF,EAAAE,EAAA,GAAAD,EAAAC,EAAA,IAAA8Q,EAAA9Q,EAAA,IAMA,OALAA,EAAA,KAOA4Q,EAAAhR,EAAAE,EACAL,EAAAoR,EAAA/Q,EACA8Q,EAAAjR,EAAAI,EACAP,EAAAqR,EAAA9Q,EACAN,EAAAE,EAAAmR,EACAtR,EAAAI,EAAAkR,GAZA9Q,EAAA,KAeAT,EAAAK,EAAAkR,EACAvR,EAAAsR,EAAA9Q,EACA6Q,EAAAlR,EAAAK,EACAN,EAAAC,EAAAoR,EACArR,EAAAoR,EAAAhR,EACA+Q,EAAAhR,EAAAC,GApBAG,EAAA,MAuBAT,EAAAsR,EAAA/Q,EACAP,EAAAI,EAAAmR,EACAF,EAAAlR,EAAAI,EACAN,EAAAE,EAAAoR,EACAF,EAAAjR,EAAAE,EACAL,EAAAqR,EAAAhR,GA5BAG,EAAA,MA+BAP,EAAAE,EAAAE,EACAN,EAAAK,EAAAE,EACAP,EAAAI,EAAAI,EACAN,EAAAC,EAAAI,EACAN,EAAAE,EAAAK,EACAP,EAAAI,EAAAC,IAOA4C,UAAA,WAEA,IACAC,EADA1C,EAAAhc,KAAA2X,SAWA,OARA+G,EAAA1C,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAA0C,EACAA,EAAA1C,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAA0C,EACAA,EAAA1C,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAA0C,EAEAA,EAAA1C,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAAA0C,EACAA,EAAA1C,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAAA0C,EACAA,EAAA1C,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAA0C,EAEA1e,MAIAiwB,YAAA,SAAA9jC,EAAAsB,EAAAg0B,GAEA,IAAAzF,EAAAhc,KAAA2X,SAgBA,OAdAxrB,EAAAo9B,WAEAvN,EAAA,IAAA7vB,EAAAA,EACA6vB,EAAA,IAAA7vB,EAAAsB,EACAuuB,EAAA,IAAA7vB,EAAAs1B,IAIAzF,EAAA,IAAA7vB,EACA6vB,EAAA,IAAAvuB,EACAuuB,EAAA,IAAAyF,GAIAzhB,MAIAie,WAAA,SAAAzwB,EAAA2wB,QAEArxB,IAAAqxB,GAEAjnB,QAAAC,KAAA,oFAKA,IAAA6kB,EAAAhc,KAAA2X,SACAuE,EAAA1uB,EAAAmqB,SAEA4D,EAAAW,EAAA,GAAAR,EAAAQ,EAAA,GAAAL,EAAAK,EAAA,GAAA6Q,EAAA7Q,EAAA,GACAV,EAAAU,EAAA,GAAAP,EAAAO,EAAA,GAAAJ,EAAAI,EAAA,GAAA8Q,EAAA9Q,EAAA,GACAT,EAAAS,EAAA,GAAAN,EAAAM,EAAA,GAAAH,EAAAG,EAAA,IAAA+Q,EAAA/Q,EAAA,IACA0Q,EAAA1Q,EAAA,IAAA2Q,EAAA3Q,EAAA,IAAA4Q,EAAA5Q,EAAA,IAAAgR,EAAAhR,EAAA,IAEAkC,EAAAxC,EAAAkR,EAAAE,EAAAH,EAAA9Q,EAAAiR,EAAAH,EAAA/Q,EAAAmR,EAAAtR,EAAAmR,EAAAG,EAAArR,EAAAE,EAAAoR,EAAAvR,EAAAI,EAAAmR,EACA7O,EAAAuO,EAAA7Q,EAAAiR,EAAAvR,EAAAqR,EAAAE,EAAAJ,EAAA9Q,EAAAmR,EAAAzR,EAAAsR,EAAAG,EAAAxR,EAAAK,EAAAoR,EAAA1R,EAAAO,EAAAmR,EACA5O,EAAA7C,EAAAoR,EAAAG,EAAAJ,EAAAhR,EAAAoR,EAAAJ,EAAAjR,EAAAsR,EAAAzR,EAAAqR,EAAAI,EAAAxR,EAAAE,EAAAuR,EAAA1R,EAAAI,EAAAsR,EACAgD,EAAAtD,EAAAhR,EAAAE,EAAAL,EAAAoR,EAAA/Q,EAAA8Q,EAAAjR,EAAAI,EAAAP,EAAAqR,EAAA9Q,EAAAN,EAAAE,EAAAmR,EAAAtR,EAAAI,EAAAkR,EAEAvO,EAAAhD,EAAA6C,EAAA1C,EAAA2C,EAAAxC,EAAAyC,EAAAyO,EAAAmD,EAEA,GAAA,IAAA3R,EAAA,OAAAve,KAAAwX,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IAAAgH,EAAA,EAAAD,EAsBA,OApBAvC,EAAA,GAAAoC,EAAAI,EACAxC,EAAA,IAAA6Q,EAAA9Q,EAAAgR,EAAAnR,EAAAkR,EAAAC,EAAAF,EAAAhR,EAAAoR,EAAAvR,EAAAoR,EAAAG,EAAArR,EAAAC,EAAAqR,EAAAxR,EAAAK,EAAAmR,GAAA1O,EACAxC,EAAA,IAAAL,EAAAmR,EAAAC,EAAAF,EAAA/Q,EAAAiR,EAAAF,EAAAhR,EAAAmR,EAAAtR,EAAAoR,EAAAE,EAAArR,EAAAE,EAAAqR,EAAAxR,EAAAI,EAAAoR,GAAA1O,EACAxC,EAAA,IAAAJ,EAAAE,EAAAiR,EAAApR,EAAAI,EAAAgR,EAAAnR,EAAAC,EAAAmR,EAAAtR,EAAAK,EAAAiR,EAAArR,EAAAE,EAAAoR,EAAAvR,EAAAI,EAAAmR,GAAAzO,EAEAxC,EAAA,GAAAqC,EAAAG,EACAxC,EAAA,IAAAP,EAAAqR,EAAAC,EAAAH,EAAA7Q,EAAAgR,EAAAH,EAAA/Q,EAAAoR,EAAA1R,EAAAuR,EAAAG,EAAAxR,EAAAI,EAAAqR,EAAA3R,EAAAQ,EAAAmR,GAAA1O,EACAxC,EAAA,IAAA4Q,EAAA9Q,EAAAiR,EAAAvR,EAAAsR,EAAAC,EAAAH,EAAA/Q,EAAAmR,EAAAzR,EAAAuR,EAAAE,EAAAxR,EAAAK,EAAAqR,EAAA3R,EAAAO,EAAAoR,GAAA1O,EACAxC,EAAA,IAAAR,EAAAO,EAAAgR,EAAAtR,EAAAK,EAAAiR,EAAAtR,EAAAI,EAAAmR,EAAAzR,EAAAQ,EAAAiR,EAAAxR,EAAAK,EAAAoR,EAAA1R,EAAAO,EAAAmR,GAAAzO,EAEAxC,EAAA,GAAAsC,EAAAE,EACAxC,EAAA,IAAA4Q,EAAAhR,EAAAmR,EAAAtR,EAAAoR,EAAAE,EAAAH,EAAAlR,EAAAuR,EAAA1R,EAAAsR,EAAAI,EAAAxR,EAAAC,EAAAwR,EAAA3R,EAAAK,EAAAsR,GAAA1O,EACAxC,EAAA,KAAAR,EAAAqR,EAAAE,EAAAH,EAAAjR,EAAAoR,EAAAH,EAAAlR,EAAAsR,EAAAzR,EAAAsR,EAAAG,EAAAxR,EAAAE,EAAAwR,EAAA3R,EAAAI,EAAAuR,GAAA1O,EACAxC,EAAA,KAAAP,EAAAE,EAAAoR,EAAAvR,EAAAI,EAAAmR,EAAAtR,EAAAC,EAAAsR,EAAAzR,EAAAK,EAAAoR,EAAAxR,EAAAE,EAAAuR,EAAA1R,EAAAI,EAAAsR,GAAAzO,EAEAxC,EAAA,IAAAkU,EAAA1R,EACAxC,EAAA,KAAAP,EAAAoR,EAAAhR,EAAA+Q,EAAAhR,EAAAC,EAAA+Q,EAAAlR,EAAAK,EAAAR,EAAAsR,EAAA9Q,EAAAN,EAAAC,EAAAoR,EAAAvR,EAAAK,EAAAkR,GAAAtO,EACAxC,EAAA,KAAA4Q,EAAAjR,EAAAE,EAAAL,EAAAqR,EAAAhR,EAAA+Q,EAAAlR,EAAAI,EAAAP,EAAAsR,EAAA/Q,EAAAN,EAAAE,EAAAoR,EAAAvR,EAAAI,EAAAmR,GAAAtO,EACAxC,EAAA,KAAAR,EAAAI,EAAAC,EAAAJ,EAAAE,EAAAE,EAAAJ,EAAAC,EAAAI,EAAAP,EAAAK,EAAAE,EAAAN,EAAAE,EAAAK,EAAAR,EAAAI,EAAAI,GAAAyC,EAEAxe,MAIAsE,MAAA,SAAAgU,GAEA,IAAA0D,EAAAhc,KAAA2X,SACAxrB,EAAAmsB,EAAAnsB,EAAAsB,EAAA6qB,EAAA7qB,EAAAg0B,EAAAnJ,EAAAmJ,EAOA,OALAzF,EAAA,IAAA7vB,EAAA6vB,EAAA,IAAAvuB,EAAAuuB,EAAA,IAAAyF,EACAzF,EAAA,IAAA7vB,EAAA6vB,EAAA,IAAAvuB,EAAAuuB,EAAA,IAAAyF,EACAzF,EAAA,IAAA7vB,EAAA6vB,EAAA,IAAAvuB,EAAAuuB,EAAA,KAAAyF,EACAzF,EAAA,IAAA7vB,EAAA6vB,EAAA,IAAAvuB,EAAAuuB,EAAA,KAAAyF,EAEAzhB,MAIAmwB,kBAAA,WAEA,IAAAnU,EAAAhc,KAAA2X,SAMA,OAAAlpB,KAAAorB,KAAAprB,KAAAsD,IAJAiqB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,OAMAoU,gBAAA,SAAAjkC,EAAAsB,EAAAg0B,GAWA,OATAzhB,KAAAwX,IAEA,EAAA,EAAA,EAAArrB,EACA,EAAA,EAAA,EAAAsB,EACA,EAAA,EAAA,EAAAg0B,EACA,EAAA,EAAA,EAAA,GAIAzhB,MAIAqwB,cAAA,SAAA9Q,GAEA,IAAA74B,EAAA+H,KAAAqoB,IAAAyI,GAAAn2B,EAAAqF,KAAAsoB,IAAAwI,GAWA,OATAvf,KAAAwX,IAEA,EAAA,EAAA,EAAA,EACA,EAAA9wB,GAAA0C,EAAA,EACA,EAAAA,EAAA1C,EAAA,EACA,EAAA,EAAA,EAAA,GAIAsZ,MAIAswB,cAAA,SAAA/Q,GAEA,IAAA74B,EAAA+H,KAAAqoB,IAAAyI,GAAAn2B,EAAAqF,KAAAsoB,IAAAwI,GAWA,OATAvf,KAAAwX,IAEA9wB,EAAA,EAAA0C,EAAA,EACA,EAAA,EAAA,EAAA,GACAA,EAAA,EAAA1C,EAAA,EACA,EAAA,EAAA,EAAA,GAIAsZ,MAIAuwB,cAAA,SAAAhR,GAEA,IAAA74B,EAAA+H,KAAAqoB,IAAAyI,GAAAn2B,EAAAqF,KAAAsoB,IAAAwI,GAWA,OATAvf,KAAAwX,IAEA9wB,GAAA0C,EAAA,EAAA,EACAA,EAAA1C,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAIAsZ,MAIAwwB,iBAAA,SAAApJ,EAAApN,GAIA,IAAAtzB,EAAA+H,KAAAqoB,IAAAkD,GACA5wB,EAAAqF,KAAAsoB,IAAAiD,GACA1zB,EAAA,EAAAI,EACAyF,EAAAi7B,EAAAj7B,EAAAsB,EAAA25B,EAAA35B,EAAAg0B,EAAA2F,EAAA3F,EACA1C,EAAAz4B,EAAA6F,EAAA6yB,EAAA14B,EAAAmH,EAWA,OATAuS,KAAAwX,IAEAuH,EAAA5yB,EAAAzF,EAAAq4B,EAAAtxB,EAAArE,EAAAq4B,EAAA1C,EAAA0C,EAAAr4B,EAAAqE,EAAA,EACAsxB,EAAAtxB,EAAArE,EAAAq4B,EAAAzC,EAAAvxB,EAAA/G,EAAAs4B,EAAAyC,EAAAr4B,EAAA+C,EAAA,EACA4yB,EAAA0C,EAAAr4B,EAAAqE,EAAAuxB,EAAAyC,EAAAr4B,EAAA+C,EAAA7F,EAAAm7B,EAAAA,EAAA/6B,EAAA,EACA,EAAA,EAAA,EAAA,GAIAsZ,MAIAywB,UAAA,SAAAtkC,EAAAsB,EAAAg0B,GAWA,OATAzhB,KAAAwX,IAEArrB,EAAA,EAAA,EAAA,EACA,EAAAsB,EAAA,EAAA,EACA,EAAA,EAAAg0B,EAAA,EACA,EAAA,EAAA,EAAA,GAIAzhB,MAIA0wB,UAAA,SAAAvkC,EAAAsB,EAAAg0B,GAWA,OATAzhB,KAAAwX,IAEA,EAAA/pB,EAAAg0B,EAAA,EACAt1B,EAAA,EAAAs1B,EAAA,EACAt1B,EAAAsB,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAIAuS,MAIA+uB,QAAA,SAAA4B,EAAAhK,EAAAriB,GAEA,IAAA0X,EAAAhc,KAAA2X,SAEAxrB,EAAAw6B,EAAArE,GAAA70B,EAAAk5B,EAAApE,GAAAd,EAAAkF,EAAAnE,GAAAhK,EAAAmO,EAAAlE,GACAmO,EAAAzkC,EAAAA,EAAA0kC,EAAApjC,EAAAA,EAAAqjC,EAAArP,EAAAA,EACA+C,EAAAr4B,EAAAykC,EAAAlM,EAAAv4B,EAAA0kC,EAAAlM,EAAAx4B,EAAA2kC,EACAphC,EAAAjC,EAAAojC,EAAAjM,EAAAn3B,EAAAqjC,EAAArM,EAAAhD,EAAAqP,EACAC,EAAAvY,EAAAoY,EAAAI,EAAAxY,EAAAqY,EAAAI,EAAAzY,EAAAsY,EAEA7R,EAAA3a,EAAAnY,EAAA+yB,EAAA5a,EAAA7W,EAAA4+B,EAAA/nB,EAAAmd,EAsBA,OApBAzF,EAAA,IAAA,GAAAtsB,EAAA+0B,IAAAxF,EACAjD,EAAA,IAAA0I,EAAAuM,GAAAhS,EACAjD,EAAA,IAAA2I,EAAAqM,GAAA/R,EACAjD,EAAA,GAAA,EAEAA,EAAA,IAAA0I,EAAAuM,GAAA/R,EACAlD,EAAA,IAAA,GAAAwI,EAAAC,IAAAvF,EACAlD,EAAA,IAAA4I,EAAAmM,GAAA7R,EACAlD,EAAA,GAAA,EAEAA,EAAA,IAAA2I,EAAAqM,GAAA3E,EACArQ,EAAA,IAAA4I,EAAAmM,GAAA1E,EACArQ,EAAA,KAAA,GAAAwI,EAAA90B,IAAA28B,EACArQ,EAAA,IAAA,EAEAA,EAAA,IAAA2U,EAAAxkC,EACA6vB,EAAA,IAAA2U,EAAAljC,EACAuuB,EAAA,IAAA2U,EAAAlP,EACAzF,EAAA,IAAA,EAEAhc,MAIAkxB,UAAA,SAAAP,EAAAhK,EAAAriB,GAEA,IAAA0X,EAAAhc,KAAA2X,SAEAsH,EAAAqN,GAAA9U,IAAAwE,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAA70B,SACA+3B,EAAAoN,GAAA9U,IAAAwE,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAA70B,SACAklC,EAAAC,GAAA9U,IAAAwE,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAAA70B,SAGA6Y,KAAA+d,cACA,IAAAkB,GAAAA,GAEA0R,EAAAxkC,EAAA6vB,EAAA,IACA2U,EAAAljC,EAAAuuB,EAAA,IACA2U,EAAAlP,EAAAzF,EAAA,IAGAuQ,GAAAngC,KAAA4T,MAEA,IAAAmxB,EAAA,EAAAlS,EACAmS,EAAA,EAAAlS,EACAmS,EAAA,EAAAhF,EAoBA,OAlBAE,GAAA5U,SAAA,IAAAwZ,EACA5E,GAAA5U,SAAA,IAAAwZ,EACA5E,GAAA5U,SAAA,IAAAwZ,EAEA5E,GAAA5U,SAAA,IAAAyZ,EACA7E,GAAA5U,SAAA,IAAAyZ,EACA7E,GAAA5U,SAAA,IAAAyZ,EAEA7E,GAAA5U,SAAA,IAAA0Z,EACA9E,GAAA5U,SAAA,IAAA0Z,EACA9E,GAAA5U,SAAA,KAAA0Z,EAEA1K,EAAAW,sBAAAiF,IAEAjoB,EAAAnY,EAAA8yB,EACA3a,EAAA7W,EAAAyxB,EACA5a,EAAAmd,EAAA4K,EAEArsB,MAIAsxB,gBAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,QAEA9kC,IAAA8kC,GAEA16B,QAAAC,KAAA,wGAIA,IAAA6kB,EAAAhc,KAAA2X,SAEAlqB,EAAA,EAAAkkC,GAAAF,EAAAC,GAEA7qC,GAAA2qC,EAAAD,IAAAC,EAAAD,GACA7lC,GAAA+lC,EAAAC,IAAAD,EAAAC,GACAhrC,IAAAkrC,EAAAD,IAAAC,EAAAD,GACArkC,GAAA,EAAAskC,EAAAD,GAAAC,EAAAD,GAOA,OALA3V,EAAA,GARA,EAAA2V,GAAAH,EAAAD,GAQAvV,EAAA,GAAA,EAAAA,EAAA,GAAAn1B,EAAAm1B,EAAA,IAAA,EACAA,EAAA,GAAA,EAAAA,EAAA,GAAAvuB,EAAAuuB,EAAA,GAAAtwB,EAAAswB,EAAA,IAAA,EACAA,EAAA,GAAA,EAAAA,EAAA,GAAA,EAAAA,EAAA,IAAAt1B,EAAAs1B,EAAA,IAAA1uB,EACA0uB,EAAA,GAAA,EAAAA,EAAA,GAAA,EAAAA,EAAA,KAAA,EAAAA,EAAA,IAAA,EAEAhc,MAIA6xB,iBAAA,SAAAN,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAA5V,EAAAhc,KAAA2X,SACAa,EAAA,GAAAgZ,EAAAD,GACA3hC,EAAA,GAAA6hC,EAAAC,GACA1qC,EAAA,GAAA4qC,EAAAD,GAEAxlC,GAAAqlC,EAAAD,GAAA/Y,EACA/qB,GAAAgkC,EAAAC,GAAA9hC,EACA6xB,GAAAmQ,EAAAD,GAAA3qC,EAOA,OALAg1B,EAAA,GAAA,EAAAxD,EAAAwD,EAAA,GAAA,EAAAA,EAAA,GAAA,EAAAA,EAAA,KAAA7vB,EACA6vB,EAAA,GAAA,EAAAA,EAAA,GAAA,EAAApsB,EAAAosB,EAAA,GAAA,EAAAA,EAAA,KAAAvuB,EACAuuB,EAAA,GAAA,EAAAA,EAAA,GAAA,EAAAA,EAAA,KAAA,EAAAh1B,EAAAg1B,EAAA,KAAAyF,EACAzF,EAAA,GAAA,EAAAA,EAAA,GAAA,EAAAA,EAAA,IAAA,EAAAA,EAAA,IAAA,EAEAhc,MAIA4a,OAAA,SAAAsD,GAKA,IAHA,IAAAlC,EAAAhc,KAAA2X,SACAuE,EAAAgC,EAAAvG,SAEAnxB,EAAA,EAAAA,EAAA,GAAAA,IAEA,GAAAw1B,EAAAx1B,KAAA01B,EAAA11B,GAAA,OAAA,EAIA,OAAA,GAIAq0B,UAAA,SAAAzG,EAAA0G,QAEAhuB,IAAAguB,IAAAA,EAAA,GAEA,IAAA,IAAAt0B,EAAA,EAAAA,EAAA,GAAAA,IAEAwZ,KAAA2X,SAAAnxB,GAAA4tB,EAAA5tB,EAAAs0B,GAIA,OAAA9a,MAIA+a,QAAA,SAAA3G,EAAA0G,QAEAhuB,IAAAsnB,IAAAA,EAAA,SACAtnB,IAAAguB,IAAAA,EAAA,GAEA,IAAAkB,EAAAhc,KAAA2X,SAsBA,OApBAvD,EAAA0G,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GAEA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GAEA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,GAAAkB,EAAA,GACA5H,EAAA0G,EAAA,IAAAkB,EAAA,IACA5H,EAAA0G,EAAA,IAAAkB,EAAA,IAEA5H,EAAA0G,EAAA,IAAAkB,EAAA,IACA5H,EAAA0G,EAAA,IAAAkB,EAAA,IACA5H,EAAA0G,EAAA,IAAAkB,EAAA,IACA5H,EAAA0G,EAAA,IAAAkB,EAAA,IAEA5H,KAYA,IAAA0d,GAAA,IAAAtF,GACAuF,GAAA,IAAA1P,GAEA,SAAA2P,GAAA7lC,EAAAsB,EAAAg0B,EAAA5K,QACA,IAAA1qB,IAAAA,EAAA,QACA,IAAAsB,IAAAA,EAAA,QACA,IAAAg0B,IAAAA,EAAA,QACA,IAAA5K,IAAAA,EAAAmb,GAAAC,cAGAjyB,KAAAsiB,GAAAn2B,EACA6T,KAAAuiB,GAAA90B,EACAuS,KAAAwiB,GAAAf,EACAzhB,KAAAkyB,OAAArb,EAoVA,SAAAsb,KAEAnyB,KAAArT,KAAA,EAlVAqlC,GAAAI,eAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OAEAJ,GAAAC,aAAA,MAEA1qC,OAAAqwB,iBAAAoa,GAAAvqC,UAAA,CAEA0E,EAAA,CAEA4T,IAAA,WAEA,OAAAC,KAAAsiB,IAIA9K,IAAA,SAAAtrB,GAEA8T,KAAAsiB,GAAAp2B,EACA8T,KAAAymB,sBAMAh5B,EAAA,CAEAsS,IAAA,WAEA,OAAAC,KAAAuiB,IAIA/K,IAAA,SAAAtrB,GAEA8T,KAAAuiB,GAAAr2B,EACA8T,KAAAymB,sBAMAhF,EAAA,CAEA1hB,IAAA,WAEA,OAAAC,KAAAwiB,IAIAhL,IAAA,SAAAtrB,GAEA8T,KAAAwiB,GAAAt2B,EACA8T,KAAAymB,sBAMA5P,MAAA,CAEA9W,IAAA,WAEA,OAAAC,KAAAkyB,QAIA1a,IAAA,SAAAtrB,GAEA8T,KAAAkyB,OAAAhmC,EACA8T,KAAAymB,wBAQAl/B,OAAAM,OAAAmqC,GAAAvqC,UAAA,CAEAq/B,SAAA,EAEAtP,IAAA,SAAArrB,EAAAsB,EAAAg0B,EAAA5K,GASA,OAPA7W,KAAAsiB,GAAAn2B,EACA6T,KAAAuiB,GAAA90B,EACAuS,KAAAwiB,GAAAf,EACAzhB,KAAAkyB,OAAArb,GAAA7W,KAAAkyB,OAEAlyB,KAAAymB,oBAEAzmB,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,YAAArY,KAAAsiB,GAAAtiB,KAAAuiB,GAAAviB,KAAAwiB,GAAAxiB,KAAAkyB,SAIA9lC,KAAA,SAAAy6B,GASA,OAPA7mB,KAAAsiB,GAAAuE,EAAAvE,GACAtiB,KAAAuiB,GAAAsE,EAAAtE,GACAviB,KAAAwiB,GAAAqE,EAAArE,GACAxiB,KAAAkyB,OAAArL,EAAAqL,OAEAlyB,KAAAymB,oBAEAzmB,MAIAsnB,sBAAA,SAAA95B,EAAAqpB,EAAA/R,GAEA,IAAAoQ,EAAAX,GAAAW,MAIA8G,EAAAxuB,EAAAmqB,SACAoM,EAAA/H,EAAA,GAAAgI,EAAAhI,EAAA,GAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GAAAmI,EAAAnI,EAAA,GAAAoI,EAAApI,EAAA,GACAqI,EAAArI,EAAA,GAAAsI,EAAAtI,EAAA,GAAAuI,EAAAvI,EAAA,IAIA,OAFAnF,EAAAA,GAAA7W,KAAAkyB,QAIA,IAAA,MAEAlyB,KAAAuiB,GAAA9zB,KAAA4jC,KAAAnd,EAAA+O,GAAA,EAAA,IAEAx1B,KAAAkC,IAAAszB,GAAA,UAEAjkB,KAAAsiB,GAAA7zB,KAAAwrB,OAAAmK,EAAAG,GACAvkB,KAAAwiB,GAAA/zB,KAAAwrB,OAAA+J,EAAAD,KAIA/jB,KAAAsiB,GAAA7zB,KAAAwrB,MAAAqK,EAAAH,GACAnkB,KAAAwiB,GAAA,GAIA,MAEA,IAAA,MAEAxiB,KAAAsiB,GAAA7zB,KAAA4jC,MAAAnd,EAAAkP,GAAA,EAAA,IAEA31B,KAAAkC,IAAAyzB,GAAA,UAEApkB,KAAAuiB,GAAA9zB,KAAAwrB,MAAAgK,EAAAM,GACAvkB,KAAAwiB,GAAA/zB,KAAAwrB,MAAAiK,EAAAC,KAIAnkB,KAAAuiB,GAAA9zB,KAAAwrB,OAAAoK,EAAAN,GACA/jB,KAAAwiB,GAAA,GAIA,MAEA,IAAA,MAEAxiB,KAAAsiB,GAAA7zB,KAAA4jC,KAAAnd,EAAAoP,GAAA,EAAA,IAEA71B,KAAAkC,IAAA2zB,GAAA,UAEAtkB,KAAAuiB,GAAA9zB,KAAAwrB,OAAAoK,EAAAE,GACAvkB,KAAAwiB,GAAA/zB,KAAAwrB,OAAA+J,EAAAG,KAIAnkB,KAAAuiB,GAAA,EACAviB,KAAAwiB,GAAA/zB,KAAAwrB,MAAAiK,EAAAH,IAIA,MAEA,IAAA,MAEA/jB,KAAAuiB,GAAA9zB,KAAA4jC,MAAAnd,EAAAmP,GAAA,EAAA,IAEA51B,KAAAkC,IAAA0zB,GAAA,UAEArkB,KAAAsiB,GAAA7zB,KAAAwrB,MAAAqK,EAAAC,GACAvkB,KAAAwiB,GAAA/zB,KAAAwrB,MAAAiK,EAAAH,KAIA/jB,KAAAsiB,GAAA,EACAtiB,KAAAwiB,GAAA/zB,KAAAwrB,OAAA+J,EAAAG,IAIA,MAEA,IAAA,MAEAnkB,KAAAwiB,GAAA/zB,KAAA4jC,KAAAnd,EAAAgP,GAAA,EAAA,IAEAz1B,KAAAkC,IAAAuzB,GAAA,UAEAlkB,KAAAsiB,GAAA7zB,KAAAwrB,OAAAmK,EAAAD,GACAnkB,KAAAuiB,GAAA9zB,KAAAwrB,OAAAoK,EAAAN,KAIA/jB,KAAAsiB,GAAA,EACAtiB,KAAAuiB,GAAA9zB,KAAAwrB,MAAAgK,EAAAM,IAIA,MAEA,IAAA,MAEAvkB,KAAAwiB,GAAA/zB,KAAA4jC,MAAAnd,EAAA8O,GAAA,EAAA,IAEAv1B,KAAAkC,IAAAqzB,GAAA,UAEAhkB,KAAAsiB,GAAA7zB,KAAAwrB,MAAAqK,EAAAH,GACAnkB,KAAAuiB,GAAA9zB,KAAAwrB,MAAAgK,EAAAF,KAIA/jB,KAAAsiB,GAAA7zB,KAAAwrB,OAAAmK,EAAAG,GACAvkB,KAAAuiB,GAAA,GAIA,MAEA,QAEArrB,QAAAC,KAAA,uEAAA0f,GAQA,OAJA7W,KAAAkyB,OAAArb,GAEA,IAAA/R,GAAA9E,KAAAymB,oBAEAzmB,MAIAsyB,kBAAA,SAAA1b,EAAAC,EAAA/R,GAIA,OAFAgtB,GAAAhD,2BAAAlY,GAEA5W,KAAAsnB,sBAAAwK,GAAAjb,EAAA/R,IAIAytB,eAAA,SAAAja,EAAAzB,GAEA,OAAA7W,KAAAwX,IAAAc,EAAAnsB,EAAAmsB,EAAA7qB,EAAA6qB,EAAAmJ,EAAA5K,GAAA7W,KAAAkyB,SAIAM,QAAA,SAAAC,GAMA,OAFAV,GAAAnL,aAAA5mB,MAEAA,KAAAsyB,kBAAAP,GAAAU,IAIA7X,OAAA,SAAAiM,GAEA,OAAAA,EAAAvE,KAAAtiB,KAAAsiB,IAAAuE,EAAAtE,KAAAviB,KAAAuiB,IAAAsE,EAAArE,KAAAxiB,KAAAwiB,IAAAqE,EAAAqL,SAAAlyB,KAAAkyB,QAIArX,UAAA,SAAAzG,GASA,OAPApU,KAAAsiB,GAAAlO,EAAA,GACApU,KAAAuiB,GAAAnO,EAAA,GACApU,KAAAwiB,GAAApO,EAAA,QACAtnB,IAAAsnB,EAAA,KAAApU,KAAAkyB,OAAA9d,EAAA,IAEApU,KAAAymB,oBAEAzmB,MAIA+a,QAAA,SAAA3G,EAAA0G,GAUA,YARAhuB,IAAAsnB,IAAAA,EAAA,SACAtnB,IAAAguB,IAAAA,EAAA,GAEA1G,EAAA0G,GAAA9a,KAAAsiB,GACAlO,EAAA0G,EAAA,GAAA9a,KAAAuiB,GACAnO,EAAA0G,EAAA,GAAA9a,KAAAwiB,GACApO,EAAA0G,EAAA,GAAA9a,KAAAkyB,OAEA9d,GAIAse,UAAA,SAAAC,GAEA,OAAAA,EAEAA,EAAAnb,IAAAxX,KAAAsiB,GAAAtiB,KAAAuiB,GAAAviB,KAAAwiB,IAIA,IAAA6G,GAAArpB,KAAAsiB,GAAAtiB,KAAAuiB,GAAAviB,KAAAwiB,KAMA0G,UAAA,SAAAC,GAIA,OAFAnpB,KAAAymB,kBAAA0C,EAEAnpB,MAIAymB,kBAAA,eAcAl/B,OAAAM,OAAAsqC,GAAA1qC,UAAA,CAEA+vB,IAAA,SAAAob,GAEA5yB,KAAArT,KAAA,GAAAimC,EAAA,GAIAC,OAAA,SAAAD,GAEA5yB,KAAArT,MAAA,GAAAimC,EAAA,GAIAE,UAAA,WAEA9yB,KAAArT,MAAA,GAIAomC,OAAA,SAAAH,GAEA5yB,KAAArT,MAAA,GAAAimC,EAAA,GAIAI,QAAA,SAAAJ,GAEA5yB,KAAArT,QAAA,GAAAimC,EAAA,IAIAK,WAAA,WAEAjzB,KAAArT,KAAA,GAIAM,KAAA,SAAAimC,GAEA,OAAA,IAAAlzB,KAAArT,KAAAumC,EAAAvmC,SAMA,IAAAwmC,GAAA,EAEAC,GAAA,IAAA/J,GACAgK,GAAA,IAAAhR,GACAiR,GAAA,IAAA9G,GACA+G,GAAA,IAAAlK,GAEAmK,GAAA,IAAAnK,GACAoK,GAAA,IAAApK,GACAqK,GAAA,IAAArR,GAEAsR,GAAA,IAAAtK,GAAA,EAAA,EAAA,GACAuK,GAAA,IAAAvK,GAAA,EAAA,EAAA,GACAwK,GAAA,IAAAxK,GAAA,EAAA,EAAA,GAEAyK,GAAA,CAAAjgC,KAAA,SACAkgC,GAAA,CAAAlgC,KAAA,WAUA,SAAAmgC,KAEAzsC,OAAA6iB,eAAApK,KAAA,KAAA,CAAA9T,MAAAinC,OAEAnzB,KAAA2gB,KAAApM,GAAAI,eAEA3U,KAAA7J,KAAA,GACA6J,KAAAnM,KAAA,WAEAmM,KAAA7E,OAAA,KACA6E,KAAAi0B,SAAA,GAEAj0B,KAAAkvB,GAAA8E,GAAAE,UAAA9b,QAEA,IAAAuY,EAAA,IAAAtH,GACAlK,EAAA,IAAA6S,GACArL,EAAA,IAAAtE,GACA/d,EAAA,IAAA+kB,GAAA,EAAA,EAAA,GAcAlK,EAAA+J,UAZA,WAEAvC,EAAAC,aAAAzH,GAAA,KAWAwH,EAAAuC,UAPA,WAEA/J,EAAAmT,kBAAA3L,OAAA75B,GAAA,KAOAvF,OAAAqwB,iBAAA5X,KAAA,CACA2wB,SAAA,CACAwD,cAAA,EACAC,YAAA,EACAloC,MAAAykC,GAEAxR,SAAA,CACAgV,cAAA,EACAC,YAAA,EACAloC,MAAAizB,GAEAwH,WAAA,CACAwN,cAAA,EACAC,YAAA,EACAloC,MAAAy6B,GAEAriB,MAAA,CACA6vB,cAAA,EACAC,YAAA,EACAloC,MAAAoY,GAEA+vB,gBAAA,CACAnoC,MAAA,IAAAsgC,IAEA8H,aAAA,CACApoC,MAAA,IAAAwrB,MAIA1X,KAAAke,OAAA,IAAAsO,GACAxsB,KAAA2qB,YAAA,IAAA6B,GAEAxsB,KAAAihB,iBAAA+S,GAAAO,wBACAv0B,KAAAw0B,wBAAA,EAEAx0B,KAAAkzB,OAAA,IAAAf,GACAnyB,KAAAy0B,SAAA,EAEAz0B,KAAA00B,YAAA,EACA10B,KAAA20B,eAAA,EAEA30B,KAAA40B,eAAA,EACA50B,KAAA60B,YAAA,EAEA70B,KAAA80B,SAAA,GAivBA,SAAAC,KAEAf,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,QAEAmM,KAAAg1B,WAAA,KACAh1B,KAAAi1B,YAAA,KACAj1B,KAAAk1B,IAAA,KAEAl1B,KAAAm1B,iBAAA,KAEAn1B,KAAAo1B,YAAA,EAEA,oBAAAC,oBAEAA,mBAAAnhB,cAAA,IAAAohB,YAAA,UAAA,CAAAC,OAAAv1B,QA7vBAg0B,GAAAE,UAAA,IAAA7K,GAAA,EAAA,EAAA,GACA2K,GAAAO,yBAAA,EAEAP,GAAAvsC,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA/O,GAAAlsB,WAAA,CAEA4wB,YAAA2b,GAEAwB,YAAA,EAEAC,eAAA,aACAC,cAAA,aAEA/R,aAAA,SAAAzF,GAEAle,KAAAihB,kBAAAjhB,KAAA4iB,eAEA5iB,KAAAke,OAAAxB,YAAAwB,GAEAle,KAAAke,OAAAgT,UAAAlxB,KAAA2wB,SAAA3wB,KAAA2mB,WAAA3mB,KAAAsE,QAIAolB,gBAAA,SAAA9S,GAIA,OAFA5W,KAAA2mB,WAAAjK,YAAA9F,GAEA5W,MAIA21B,yBAAA,SAAAvO,EAAApN,GAIAha,KAAA2mB,WAAAQ,iBAAAC,EAAApN,IAIA4b,qBAAA,SAAA/O,GAEA7mB,KAAA2mB,WAAAC,aAAAC,GAAA,IAIAgP,sBAAA,SAAAroC,GAIAwS,KAAA2mB,WAAAW,sBAAA95B,IAIAsoC,0BAAA,SAAAlf,GAIA5W,KAAA2mB,WAAAv6B,KAAAwqB,IAIAmf,aAAA,SAAA3O,EAAApN,GASA,OAJAqZ,GAAAlM,iBAAAC,EAAApN,GAEAha,KAAA2mB,WAAA5N,SAAAsa,IAEArzB,MAIAg2B,kBAAA,SAAA5O,EAAApN,GAUA,OAJAqZ,GAAAlM,iBAAAC,EAAApN,GAEAha,KAAA2mB,WAAAjK,YAAA2W,IAEArzB,MAIAi2B,QAAA,SAAAjc,GAEA,OAAAha,KAAA+1B,aAAApC,GAAA3Z,IAIAkc,QAAA,SAAAlc,GAEA,OAAAha,KAAA+1B,aAAAnC,GAAA5Z,IAIAmc,QAAA,SAAAnc,GAEA,OAAAha,KAAA+1B,aAAAlC,GAAA7Z,IAIAoc,gBAAA,SAAAhP,EAAAiP,GASA,OAJAjD,GAAAhnC,KAAAg7B,GAAAsC,gBAAA1pB,KAAA2mB,YAEA3mB,KAAA2wB,SAAApY,IAAA6a,GAAApa,eAAAqd,IAEAr2B,MAIAs2B,WAAA,SAAAD,GAEA,OAAAr2B,KAAAo2B,gBAAAzC,GAAA0C,IAIAE,WAAA,SAAAF,GAEA,OAAAr2B,KAAAo2B,gBAAAxC,GAAAyC,IAIAG,WAAA,SAAAH,GAEA,OAAAr2B,KAAAo2B,gBAAAvC,GAAAwC,IAIAI,aAAA,SAAAC,GAEA,OAAAA,EAAA/S,aAAA3jB,KAAA2qB,cAIAgM,aAAA,SAAAD,GAEA,OAAAA,EAAA/S,aAAA2P,GAAArV,WAAAje,KAAA2qB,eAIAqE,OAAA,SAAA7iC,EAAAsB,EAAAg0B,GAIAt1B,EAAAo9B,UAEAgK,GAAAnnC,KAAAD,GAIAonC,GAAA/b,IAAArrB,EAAAsB,EAAAg0B,GAIA,IAAAtmB,EAAA6E,KAAA7E,OAEA6E,KAAA42B,mBAAA,GAAA,GAEApD,GAAAtH,sBAAAlsB,KAAA2qB,aAEA3qB,KAAA62B,UAAA72B,KAAA82B,QAEAxD,GAAAtE,OAAAwE,GAAAD,GAAAvzB,KAAAkvB,IAIAoE,GAAAtE,OAAAuE,GAAAC,GAAAxzB,KAAAkvB,IAIAlvB,KAAA2mB,WAAAW,sBAAAgM,IAEAn4B,IAEAm4B,GAAAjG,gBAAAlyB,EAAAwvB,aACA0I,GAAA/L,sBAAAgM,IACAtzB,KAAA2mB,WAAAjK,YAAA2W,GAAApL,aAMA1P,IAAA,SAAAxtB,GAEA,GAAA1B,UAAAlC,OAAA,EAAA,CAEA,IAAA,IAAAX,EAAA,EAAAA,EAAA6C,UAAAlC,OAAAX,IAEAwZ,KAAAuY,IAAAlvB,UAAA7C,IAIA,OAAAwZ,KAIA,OAAAjV,IAAAiV,MAEA9I,QAAAkK,MAAA,kEAAArW,GACAiV,OAIAjV,GAAAA,EAAAyqC,YAEA,OAAAzqC,EAAAoQ,QAEApQ,EAAAoQ,OAAA47B,OAAAhsC,GAIAA,EAAAoQ,OAAA6E,KACAA,KAAAi0B,SAAAtpC,KAAAI,GAEAA,EAAAmpB,cAAA4f,KAIA58B,QAAAkK,MAAA,gEAAArW,GAIAiV,OAIA+2B,OAAA,SAAAhsC,GAEA,GAAA1B,UAAAlC,OAAA,EAAA,CAEA,IAAA,IAAAX,EAAA,EAAAA,EAAA6C,UAAAlC,OAAAX,IAEAwZ,KAAA+2B,OAAA1tC,UAAA7C,IAIA,OAAAwZ,KAIA,IAAAqK,EAAArK,KAAAi0B,SAAAxgC,QAAA1I,GAWA,OATA,IAAAsf,IAEAtf,EAAAoQ,OAAA,KACA6E,KAAAi0B,SAAAhgB,OAAA5J,EAAA,GAEAtf,EAAAmpB,cAAA6f,KAIA/zB,MAIA+I,OAAA,SAAAhe,GAsBA,OAlBAiV,KAAA42B,mBAAA,GAAA,GAEAtD,GAAArV,WAAAje,KAAA2qB,aAEA,OAAA5/B,EAAAoQ,SAEApQ,EAAAoQ,OAAAy7B,mBAAA,GAAA,GAEAtD,GAAAva,SAAAhuB,EAAAoQ,OAAAwvB,cAIA5/B,EAAA44B,aAAA2P,IAEAvoC,EAAA6rC,mBAAA,GAAA,GAEA52B,KAAAuY,IAAAxtB,GAEAiV,MAIAg3B,cAAA,SAAA1tB,GAEA,OAAAtJ,KAAAi3B,oBAAA,KAAA3tB,IAIA4tB,gBAAA,SAAA/gC,GAEA,OAAA6J,KAAAi3B,oBAAA,OAAA9gC,IAIA8gC,oBAAA,SAAA9gC,EAAAjK,GAEA,GAAA8T,KAAA7J,KAAAjK,EAAA,OAAA8T,KAEA,IAAA,IAAAxZ,EAAA,EAAAyJ,EAAA+P,KAAAi0B,SAAA9sC,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IACAuE,EADAiV,KAAAi0B,SAAAztC,GACAywC,oBAAA9gC,EAAAjK,GAEA,QAAAY,IAAA/B,EAEA,OAAAA,IAUAosC,iBAAA,SAAAvuC,GAWA,YATAkE,IAAAlE,IAEAsO,QAAAC,KAAA,8DACAvO,EAAA,IAAAygC,IAIArpB,KAAAo3B,mBAAA,GAEAxuC,EAAAsjC,sBAAAlsB,KAAA2qB,cAIA0M,mBAAA,SAAAzuC,GAaA,YAXAkE,IAAAlE,IAEAsO,QAAAC,KAAA,gEACAvO,EAAA,IAAAy5B,IAIAriB,KAAAo3B,mBAAA,GAEAp3B,KAAA2qB,YAAAuG,UAAAsC,GAAA5qC,EAAA6qC,IAEA7qC,GAIA0uC,cAAA,SAAA1uC,GAaA,YAXAkE,IAAAlE,IAEAsO,QAAAC,KAAA,2DACAvO,EAAA,IAAAygC,IAIArpB,KAAAo3B,mBAAA,GAEAp3B,KAAA2qB,YAAAuG,UAAAsC,GAAAE,GAAA9qC,GAEAA,GAIA2uC,kBAAA,SAAA3uC,QAEAkE,IAAAlE,IAEAsO,QAAAC,KAAA,+DACAvO,EAAA,IAAAygC,IAIArpB,KAAAo3B,mBAAA,GAEA,IAAAhxC,EAAA4Z,KAAA2qB,YAAAhT,SAEA,OAAA/uB,EAAA4uB,IAAApxB,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAAA2zB,aAIAyd,QAAA,aAEAC,SAAA,SAAAtO,GAEAA,EAAAnpB,MAIA,IAFA,IAAAi0B,EAAAj0B,KAAAi0B,SAEAztC,EAAA,EAAAyJ,EAAAgkC,EAAA9sC,OAAAX,EAAAyJ,EAAAzJ,IAEAytC,EAAAztC,GAAAixC,SAAAtO,IAMAuO,gBAAA,SAAAvO,GAEA,IAAA,IAAAnpB,KAAAy0B,QAAA,CAEAtL,EAAAnpB,MAIA,IAFA,IAAAi0B,EAAAj0B,KAAAi0B,SAEAztC,EAAA,EAAAyJ,EAAAgkC,EAAA9sC,OAAAX,EAAAyJ,EAAAzJ,IAEAytC,EAAAztC,GAAAkxC,gBAAAvO,KAMAwO,kBAAA,SAAAxO,GAEA,IAAAhuB,EAAA6E,KAAA7E,OAEA,OAAAA,IAEAguB,EAAAhuB,GAEAA,EAAAw8B,kBAAAxO,KAMAvG,aAAA,WAEA5iB,KAAAke,OAAA6Q,QAAA/uB,KAAA2wB,SAAA3wB,KAAA2mB,WAAA3mB,KAAAsE,OAEAtE,KAAAw0B,wBAAA,GAIA4C,kBAAA,SAAAQ,GAEA53B,KAAAihB,kBAAAjhB,KAAA4iB,gBAEA5iB,KAAAw0B,wBAAAoD,KAEA,OAAA53B,KAAA7E,OAEA6E,KAAA2qB,YAAAv+B,KAAA4T,KAAAke,QAIAle,KAAA2qB,YAAAlO,iBAAAzc,KAAA7E,OAAAwvB,YAAA3qB,KAAAke,QAIAle,KAAAw0B,wBAAA,EAEAoD,GAAA,GAQA,IAFA,IAAA3D,EAAAj0B,KAAAi0B,SAEAztC,EAAA,EAAAyJ,EAAAgkC,EAAA9sC,OAAAX,EAAAyJ,EAAAzJ,IAEAytC,EAAAztC,GAAA4wC,kBAAAQ,IAMAhB,kBAAA,SAAAiB,EAAAC,GAEA,IAAA38B,EAAA6E,KAAA7E,OAsBA,IApBA,IAAA08B,GAAA,OAAA18B,GAEAA,EAAAy7B,mBAAA,GAAA,GAIA52B,KAAAihB,kBAAAjhB,KAAA4iB,eAEA,OAAA5iB,KAAA7E,OAEA6E,KAAA2qB,YAAAv+B,KAAA4T,KAAAke,QAIAle,KAAA2qB,YAAAlO,iBAAAzc,KAAA7E,OAAAwvB,YAAA3qB,KAAAke,SAMA,IAAA4Z,EAIA,IAFA,IAAA7D,EAAAj0B,KAAAi0B,SAEAztC,EAAA,EAAAyJ,EAAAgkC,EAAA9sC,OAAAX,EAAAyJ,EAAAzJ,IAEAytC,EAAAztC,GAAAowC,mBAAA,GAAA,IAQA/T,OAAA,SAAAC,GAGA,IAAAC,OAAAj2B,IAAAg2B,GAAA,iBAAAA,EAEA1vB,EAAA,GAKA2vB,IAGAD,EAAA,CACAiV,WAAA,GACAC,UAAA,GACAhV,SAAA,GACAI,OAAA,GACA6U,OAAA,IAGA7kC,EAAA6vB,SAAA,CACA3B,QAAA,IACAztB,KAAA,SACAqvB,UAAA,oBAOA,IAAAn4B,EAAA,GA8BA,SAAAmtC,EAAAC,EAAAj9B,GAQA,YANApO,IAAAqrC,EAAAj9B,EAAAylB,QAEAwX,EAAAj9B,EAAAylB,MAAAzlB,EAAA2nB,OAAAC,IAIA5nB,EAAAylB,KAIA,GAxCA51B,EAAA41B,KAAA3gB,KAAA2gB,KACA51B,EAAA8I,KAAAmM,KAAAnM,KAEA,KAAAmM,KAAA7J,OAAApL,EAAAoL,KAAA6J,KAAA7J,OACA,IAAA6J,KAAA00B,aAAA3pC,EAAA2pC,YAAA,IACA,IAAA10B,KAAA20B,gBAAA5pC,EAAA4pC,eAAA,IACA,IAAA30B,KAAAy0B,UAAA1pC,EAAA0pC,SAAA,IACA,IAAAz0B,KAAA40B,gBAAA7pC,EAAA6pC,eAAA,GACA,IAAA50B,KAAA60B,cAAA9pC,EAAA8pC,YAAA70B,KAAA60B,aACA,OAAAuD,KAAAC,UAAAr4B,KAAA80B,YAAA/pC,EAAA+pC,SAAA90B,KAAA80B,UAEA/pC,EAAAmoC,OAAAlzB,KAAAkzB,OAAAvmC,KACA5B,EAAAmzB,OAAAle,KAAAke,OAAAnD,WAEA,IAAA/a,KAAAihB,mBAAAl2B,EAAAk2B,kBAAA,GAIAjhB,KAAAs4B,kBAEAvtC,EAAA8I,KAAA,gBACA9I,EAAAwtC,MAAAv4B,KAAAu4B,MACAxtC,EAAAytC,eAAAx4B,KAAAw4B,eAAA3V,UAkBA7iB,KAAAy4B,QAAAz4B,KAAA04B,QAAA14B,KAAA24B,SAAA,CAEA5tC,EAAA6tC,SAAAV,EAAApV,EAAAiV,WAAA/3B,KAAA44B,UAEA,IAAAC,EAAA74B,KAAA44B,SAAAC,WAEA,QAAA/rC,IAAA+rC,QAAA/rC,IAAA+rC,EAAAZ,OAAA,CAEA,IAAAA,EAAAY,EAAAZ,OAEA,GAAA/sC,MAAA6B,QAAAkrC,GAEA,IAAA,IAAAzxC,EAAA,EAAAyJ,EAAAgoC,EAAA9wC,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAIA0xC,EAAApV,EAAAmV,OAFAA,EAAAzxC,SAQA0xC,EAAApV,EAAAmV,OAAAA,IAQA,QAAAnrC,IAAAkT,KAAA84B,SAEA,GAAA5tC,MAAA6B,QAAAiT,KAAA84B,UAAA,CAIA,IAFA,IAAAC,EAAA,GAEAC,EAAA,EAAAC,EAAAj5B,KAAA84B,SAAA3xC,OAAA6xC,EAAAC,EAAAD,IAEAD,EAAApuC,KAAAutC,EAAApV,EAAAkV,UAAAh4B,KAAA84B,SAAAE,KAIAjuC,EAAA+tC,SAAAC,OAIAhuC,EAAA+tC,SAAAZ,EAAApV,EAAAkV,UAAAh4B,KAAA84B,UAQA,GAAA94B,KAAAi0B,SAAA9sC,OAAA,EAAA,CAEA4D,EAAAkpC,SAAA,GAEA,IAAA,IAAAiF,EAAA,EAAAA,EAAAl5B,KAAAi0B,SAAA9sC,OAAA+xC,IAEAnuC,EAAAkpC,SAAAtpC,KAAAqV,KAAAi0B,SAAAiF,GAAArW,OAAAC,GAAA/3B,QAMA,GAAAg4B,EAAA,CAEA,IAAAgV,EAAAoB,EAAArW,EAAAiV,YACAC,EAAAmB,EAAArW,EAAAkV,WACAhV,EAAAmW,EAAArW,EAAAE,UACAI,EAAA+V,EAAArW,EAAAM,QACAgW,EAAAD,EAAArW,EAAAmV,QAEAF,EAAA5wC,OAAA,IAAAiM,EAAA2kC,WAAAA,GACAC,EAAA7wC,OAAA,IAAAiM,EAAA4kC,UAAAA,GACAhV,EAAA77B,OAAA,IAAAiM,EAAA4vB,SAAAA,GACAI,EAAAj8B,OAAA,IAAAiM,EAAAgwB,OAAAA,GACAgW,EAAAjyC,OAAA,IAAAiM,EAAA6kC,OAAAmB,GAMA,OAFAhmC,EAAArI,OAAAA,EAEAqI,EAKA,SAAA+lC,EAAA1uC,GAEA,IAAA4uC,EAAA,GACA,IAAA,IAAA/vC,KAAAmB,EAAA,CAEA,IAAAqY,EAAArY,EAAAnB,UACAwZ,EAAAmgB,SACAoW,EAAA1uC,KAAAmY,GAIA,OAAAu2B,IAMAjhB,MAAA,SAAAkhB,GAEA,OAAA,IAAAt5B,KAAAqY,aAAAjsB,KAAA4T,KAAAs5B,IAIAltC,KAAA,SAAAvD,EAAAywC,GA6BA,QA3BAxsC,IAAAwsC,IAAAA,GAAA,GAEAt5B,KAAA7J,KAAAtN,EAAAsN,KAEA6J,KAAAkvB,GAAA9iC,KAAAvD,EAAAqmC,IAEAlvB,KAAA2wB,SAAAvkC,KAAAvD,EAAA8nC,UACA3wB,KAAA2mB,WAAAv6B,KAAAvD,EAAA89B,YACA3mB,KAAAsE,MAAAlY,KAAAvD,EAAAyb,OAEAtE,KAAAke,OAAA9xB,KAAAvD,EAAAq1B,QACAle,KAAA2qB,YAAAv+B,KAAAvD,EAAA8hC,aAEA3qB,KAAAihB,iBAAAp4B,EAAAo4B,iBACAjhB,KAAAw0B,uBAAA3rC,EAAA2rC,uBAEAx0B,KAAAkzB,OAAAvmC,KAAA9D,EAAAqqC,OAAAvmC,KACAqT,KAAAy0B,QAAA5rC,EAAA4rC,QAEAz0B,KAAA00B,WAAA7rC,EAAA6rC,WACA10B,KAAA20B,cAAA9rC,EAAA8rC,cAEA30B,KAAA40B,cAAA/rC,EAAA+rC,cACA50B,KAAA60B,YAAAhsC,EAAAgsC,YAEA70B,KAAA80B,SAAAsD,KAAAmB,MAAAnB,KAAAC,UAAAxvC,EAAAisC,YAEA,IAAAwE,EAEA,IAAA,IAAA9yC,EAAA,EAAAA,EAAAqC,EAAAorC,SAAA9sC,OAAAX,IAAA,CAGAwZ,KAAAuY,IADA1vB,EAAAorC,SAAAztC,GACA4xB,SAMA,OAAApY,QAgCA+0B,GAAAttC,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAA0c,GAEAyE,SAAA,EAEAptC,KAAA,SAAAvD,EAAAywC,GAaA,OAXAtF,GAAAvsC,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,EAAAywC,GAEA,OAAAzwC,EAAAmsC,aAAAh1B,KAAAg1B,WAAAnsC,EAAAmsC,WAAA5c,SACA,OAAAvvB,EAAAosC,cAAAj1B,KAAAi1B,YAAApsC,EAAAosC,YAAA7c,SACA,OAAAvvB,EAAAqsC,MAAAl1B,KAAAk1B,IAAArsC,EAAAqsC,IAAA9c,SAEA,OAAAvvB,EAAAssC,mBAAAn1B,KAAAm1B,iBAAAtsC,EAAAssC,iBAAA/c,SAEApY,KAAAo1B,WAAAvsC,EAAAusC,WACAp1B,KAAAihB,iBAAAp4B,EAAAo4B,iBAEAjhB,MAIA6iB,OAAA,SAAAC,GAEA,IAAAhgB,EAAAkxB,GAAAvsC,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,GAMA,OAJA,OAAA9iB,KAAAg1B,aAAAlyB,EAAA/X,OAAAiqC,WAAAh1B,KAAAg1B,WAAAnS,OAAAC,IACA,OAAA9iB,KAAAi1B,cAAAnyB,EAAA/X,OAAAkqC,YAAAj1B,KAAAi1B,YAAApS,OAAAC,IACA,OAAA9iB,KAAAk1B,MAAApyB,EAAA/X,OAAAmqC,IAAAl1B,KAAAk1B,IAAArS,UAEA/f,GAIAlC,QAAA,WAEAZ,KAAAkU,cAAA,CAAArgB,KAAA,eAMA,IAAA4lC,GAAA,CACA,IAAApQ,GACA,IAAAA,GACA,IAAAA,GACA,IAAAA,GACA,IAAAA,GACA,IAAAA,GACA,IAAAA,GACA,IAAAA,IAGAqQ,GAAA,IAAArQ,GAEAsQ,GAAA,IAAAC,GAIAC,GAAA,IAAAxQ,GACAyQ,GAAA,IAAAzQ,GACA0Q,GAAA,IAAA1Q,GAIA2Q,GAAA,IAAA3Q,GACA4Q,GAAA,IAAA5Q,GACA6Q,GAAA,IAAA7Q,GAEA8Q,GAAA,IAAA9Q,GACA+Q,GAAA,IAAA/Q,GACAgR,GAAA,IAAAhR,GACAiR,GAAA,IAAAjR,GAOA,SAAAuQ,GAAA9+B,EAAA/I,GAEAiO,KAAAlF,SAAAhO,IAAAgO,EAAAA,EAAA,IAAAuuB,GAAA,SAAA,SAAA,UACArpB,KAAAjO,SAAAjF,IAAAiF,EAAAA,EAAA,IAAAs3B,IAAA/hB,UAAAA,UAAAA,UA0eA,SAAAizB,GAAAC,EAAAC,EAAA/f,EAAAC,EAAA+f,GAEA,IAAA,IAAAl0C,EAAA,EAAAm0C,EAAAH,EAAArzC,OAAA,EAAAX,GAAAm0C,EAAAn0C,GAAA,EAAA,CAEA8zC,GAAAzf,UAAA2f,EAAAh0C,GAEA,IAAAL,EAAAu0C,EAAAvuC,EAAAsC,KAAAkC,IAAA2pC,GAAAnuC,GAAAuuC,EAAAjtC,EAAAgB,KAAAkC,IAAA2pC,GAAA7sC,GAAAitC,EAAAjZ,EAAAhzB,KAAAkC,IAAA2pC,GAAA7Y,GAEAmZ,EAAAH,EAAA/gB,IAAA4gB,IACAO,EAAAngB,EAAAhB,IAAA4gB,IACAQ,EAAAngB,EAAAjB,IAAA4gB,IAEA,GAAA7rC,KAAAsD,KAAAtD,KAAAsD,IAAA6oC,EAAAC,EAAAC,GAAArsC,KAAAqM,IAAA8/B,EAAAC,EAAAC,IAAA30C,EAIA,OAAA,EAMA,OAAA,EA3fAoB,OAAAM,OAAA+xC,GAAAnyC,UAAA,CAEAszC,QAAA,EAEAvjB,IAAA,SAAA1c,EAAA/I,GAKA,OAHAiO,KAAAlF,IAAA1O,KAAA0O,GACAkF,KAAAjO,IAAA3F,KAAA2F,GAEAiO,MAIAg7B,aAAA,SAAA5mB,GAUA,IARA,IAAA6mB,EAAA,SACAC,EAAA,SACAC,EAAA,SAEAC,GAAA9zB,SACA+zB,GAAA/zB,SACAg0B,GAAAh0B,SAEA9gB,EAAA,EAAAyJ,EAAAmkB,EAAAjtB,OAAAX,EAAAyJ,EAAAzJ,GAAA,EAAA,CAEA,IAAA2F,EAAAioB,EAAA5tB,GACAiH,EAAA2mB,EAAA5tB,EAAA,GACAi7B,EAAArN,EAAA5tB,EAAA,GAEA2F,EAAA8uC,IAAAA,EAAA9uC,GACAsB,EAAAytC,IAAAA,EAAAztC,GACAg0B,EAAA0Z,IAAAA,EAAA1Z,GAEAt1B,EAAAivC,IAAAA,EAAAjvC,GACAsB,EAAA4tC,IAAAA,EAAA5tC,GACAg0B,EAAA6Z,IAAAA,EAAA7Z,GAOA,OAHAzhB,KAAAlF,IAAA0c,IAAAyjB,EAAAC,EAAAC,GACAn7B,KAAAjO,IAAAylB,IAAA4jB,EAAAC,EAAAC,GAEAt7B,MAIAu7B,uBAAA,SAAAtgB,GAUA,IARA,IAAAggB,EAAA,SACAC,EAAA,SACAC,EAAA,SAEAC,GAAA9zB,SACA+zB,GAAA/zB,SACAg0B,GAAAh0B,SAEA9gB,EAAA,EAAAyJ,EAAAgrB,EAAAsd,MAAA/xC,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAA2F,EAAA8uB,EAAAC,KAAA10B,GACAiH,EAAAwtB,EAAAE,KAAA30B,GACAi7B,EAAAxG,EAAA4J,KAAAr+B,GAEA2F,EAAA8uC,IAAAA,EAAA9uC,GACAsB,EAAAytC,IAAAA,EAAAztC,GACAg0B,EAAA0Z,IAAAA,EAAA1Z,GAEAt1B,EAAAivC,IAAAA,EAAAjvC,GACAsB,EAAA4tC,IAAAA,EAAA5tC,GACAg0B,EAAA6Z,IAAAA,EAAA7Z,GAOA,OAHAzhB,KAAAlF,IAAA0c,IAAAyjB,EAAAC,EAAAC,GACAn7B,KAAAjO,IAAAylB,IAAA4jB,EAAAC,EAAAC,GAEAt7B,MAIAw7B,cAAA,SAAAC,GAEAz7B,KAAA07B,YAEA,IAAA,IAAAl1C,EAAA,EAAAm1C,EAAAF,EAAAt0C,OAAAX,EAAAm1C,EAAAn1C,IAEAwZ,KAAA47B,cAAAH,EAAAj1C,IAIA,OAAAwZ,MAIA67B,qBAAA,SAAAxgB,EAAAygB,GAEA,IAAAC,EAAArC,GAAAttC,KAAA0vC,GAAA9iB,eAAA,IAKA,OAHAhZ,KAAAlF,IAAA1O,KAAAivB,GAAAzC,IAAAmjB,GACA/7B,KAAAjO,IAAA3F,KAAAivB,GAAA9C,IAAAwjB,GAEA/7B,MAIAg8B,cAAA,SAAAjxC,GAIA,OAFAiV,KAAA07B,YAEA17B,KAAAi8B,eAAAlxC,IAIAqtB,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAA8vC,GAKA,OAHAl8B,KAAAlF,IAAA1O,KAAA8vC,EAAAphC,KACAkF,KAAAjO,IAAA3F,KAAA8vC,EAAAnqC,KAEAiO,MAIA07B,UAAA,WAKA,OAHA17B,KAAAlF,IAAA3O,EAAA6T,KAAAlF,IAAArN,EAAAuS,KAAAlF,IAAA2mB,EAAA,SACAzhB,KAAAjO,IAAA5F,EAAA6T,KAAAjO,IAAAtE,EAAAuS,KAAAjO,IAAA0vB,GAAAna,SAEAtH,MAIAm8B,QAAA,WAIA,OAAAn8B,KAAAjO,IAAA5F,EAAA6T,KAAAlF,IAAA3O,GAAA6T,KAAAjO,IAAAtE,EAAAuS,KAAAlF,IAAArN,GAAAuS,KAAAjO,IAAA0vB,EAAAzhB,KAAAlF,IAAA2mB,GAIA2a,UAAA,SAAAxzC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,mDACAvO,EAAA,IAAAygC,IAIArpB,KAAAm8B,UAAAvzC,EAAA4uB,IAAA,EAAA,EAAA,GAAA5uB,EAAA6vB,WAAAzY,KAAAlF,IAAAkF,KAAAjO,KAAAinB,eAAA,KAIAqjB,QAAA,SAAAzzC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,iDACAvO,EAAA,IAAAygC,IAIArpB,KAAAm8B,UAAAvzC,EAAA4uB,IAAA,EAAA,EAAA,GAAA5uB,EAAAiwB,WAAA7Y,KAAAjO,IAAAiO,KAAAlF,MAIA8gC,cAAA,SAAAU,GAKA,OAHAt8B,KAAAlF,IAAAA,IAAAwhC,GACAt8B,KAAAjO,IAAAA,IAAAuqC,GAEAt8B,MAIAu8B,eAAA,SAAA7F,GAKA,OAHA12B,KAAAlF,IAAA8d,IAAA8d,GACA12B,KAAAjO,IAAAwmB,IAAAme,GAEA12B,MAIAw8B,eAAA,SAAAzkB,GAKA,OAHA/X,KAAAlF,IAAA4d,WAAAX,GACA/X,KAAAjO,IAAA2mB,UAAAX,GAEA/X,MAIAi8B,eAAA,SAAAlxC,GAKAA,EAAA6rC,mBAAA,GAAA,GAEA,IAAAgC,EAAA7tC,EAAA6tC,cAEA9rC,IAAA8rC,IAEA,OAAAA,EAAA6D,aAEA7D,EAAA8D,qBAIA/C,GAAAvtC,KAAAwsC,EAAA6D,aACA9C,GAAAhW,aAAA54B,EAAA4/B,aAEA3qB,KAAA28B,MAAAhD,KAMA,IAFA,IAAA1F,EAAAlpC,EAAAkpC,SAEAztC,EAAA,EAAAyJ,EAAAgkC,EAAA9sC,OAAAX,EAAAyJ,EAAAzJ,IAEAwZ,KAAAi8B,eAAAhI,EAAAztC,IAIA,OAAAwZ,MAIA48B,cAAA,SAAAN,GAEA,QAAAA,EAAAnwC,EAAA6T,KAAAlF,IAAA3O,GAAAmwC,EAAAnwC,EAAA6T,KAAAjO,IAAA5F,GACAmwC,EAAA7uC,EAAAuS,KAAAlF,IAAArN,GAAA6uC,EAAA7uC,EAAAuS,KAAAjO,IAAAtE,GACA6uC,EAAA7a,EAAAzhB,KAAAlF,IAAA2mB,GAAA6a,EAAA7a,EAAAzhB,KAAAjO,IAAA0vB,IAIAob,YAAA,SAAAX,GAEA,OAAAl8B,KAAAlF,IAAA3O,GAAA+vC,EAAAphC,IAAA3O,GAAA+vC,EAAAnqC,IAAA5F,GAAA6T,KAAAjO,IAAA5F,GACA6T,KAAAlF,IAAArN,GAAAyuC,EAAAphC,IAAArN,GAAAyuC,EAAAnqC,IAAAtE,GAAAuS,KAAAjO,IAAAtE,GACAuS,KAAAlF,IAAA2mB,GAAAya,EAAAphC,IAAA2mB,GAAAya,EAAAnqC,IAAA0vB,GAAAzhB,KAAAjO,IAAA0vB,GAIAqb,aAAA,SAAAR,EAAA1zC,GAYA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,sDACAvO,EAAA,IAAAygC,IAIAzgC,EAAA4uB,KACA8kB,EAAAnwC,EAAA6T,KAAAlF,IAAA3O,IAAA6T,KAAAjO,IAAA5F,EAAA6T,KAAAlF,IAAA3O,IACAmwC,EAAA7uC,EAAAuS,KAAAlF,IAAArN,IAAAuS,KAAAjO,IAAAtE,EAAAuS,KAAAlF,IAAArN,IACA6uC,EAAA7a,EAAAzhB,KAAAlF,IAAA2mB,IAAAzhB,KAAAjO,IAAA0vB,EAAAzhB,KAAAlF,IAAA2mB,KAKAsb,cAAA,SAAAb,GAGA,QAAAA,EAAAnqC,IAAA5F,EAAA6T,KAAAlF,IAAA3O,GAAA+vC,EAAAphC,IAAA3O,EAAA6T,KAAAjO,IAAA5F,GACA+vC,EAAAnqC,IAAAtE,EAAAuS,KAAAlF,IAAArN,GAAAyuC,EAAAphC,IAAArN,EAAAuS,KAAAjO,IAAAtE,GACAyuC,EAAAnqC,IAAA0vB,EAAAzhB,KAAAlF,IAAA2mB,GAAAya,EAAAphC,IAAA2mB,EAAAzhB,KAAAjO,IAAA0vB,IAIAub,iBAAA,SAAAC,GAMA,OAHAj9B,KAAAk9B,WAAAD,EAAA5hB,OAAAqe,IAGAA,GAAAvf,kBAAA8iB,EAAA5hB,SAAA4hB,EAAApR,OAAAoR,EAAApR,QAIAsR,gBAAA,SAAAC,GAKA,IAAAtiC,EAAA/I,EAsCA,OApCAqrC,EAAA3R,OAAAt/B,EAAA,GAEA2O,EAAAsiC,EAAA3R,OAAAt/B,EAAA6T,KAAAlF,IAAA3O,EACA4F,EAAAqrC,EAAA3R,OAAAt/B,EAAA6T,KAAAjO,IAAA5F,IAIA2O,EAAAsiC,EAAA3R,OAAAt/B,EAAA6T,KAAAjO,IAAA5F,EACA4F,EAAAqrC,EAAA3R,OAAAt/B,EAAA6T,KAAAlF,IAAA3O,GAIAixC,EAAA3R,OAAAh+B,EAAA,GAEAqN,GAAAsiC,EAAA3R,OAAAh+B,EAAAuS,KAAAlF,IAAArN,EACAsE,GAAAqrC,EAAA3R,OAAAh+B,EAAAuS,KAAAjO,IAAAtE,IAIAqN,GAAAsiC,EAAA3R,OAAAh+B,EAAAuS,KAAAjO,IAAAtE,EACAsE,GAAAqrC,EAAA3R,OAAAh+B,EAAAuS,KAAAlF,IAAArN,GAIA2vC,EAAA3R,OAAAhK,EAAA,GAEA3mB,GAAAsiC,EAAA3R,OAAAhK,EAAAzhB,KAAAlF,IAAA2mB,EACA1vB,GAAAqrC,EAAA3R,OAAAhK,EAAAzhB,KAAAjO,IAAA0vB,IAIA3mB,GAAAsiC,EAAA3R,OAAAhK,EAAAzhB,KAAAjO,IAAA0vB,EACA1vB,GAAAqrC,EAAA3R,OAAAhK,EAAAzhB,KAAAlF,IAAA2mB,GAIA3mB,IAAAsiC,EAAAC,UAAAtrC,IAAAqrC,EAAAC,UAIAC,mBAAA,SAAAC,GAEA,GAAAv9B,KAAAm8B,UAEA,OAAA,EAKAn8B,KAAAo8B,UAAAjC,IACAC,GAAAvhB,WAAA7Y,KAAAjO,IAAAooC,IAGAN,GAAAhhB,WAAA0kB,EAAA12C,EAAAszC,IACAL,GAAAjhB,WAAA0kB,EAAA7xC,EAAAyuC,IACAJ,GAAAlhB,WAAA0kB,EAAA72C,EAAAyzC,IAGAH,GAAAnhB,WAAAihB,GAAAD,IACAI,GAAAphB,WAAAkhB,GAAAD,IACAI,GAAArhB,WAAAghB,GAAAE,IAKA,IAAAS,EAAA,CACA,GAAAR,GAAAvY,EAAAuY,GAAAvsC,EAAA,GAAAwsC,GAAAxY,EAAAwY,GAAAxsC,EAAA,GAAAysC,GAAAzY,EAAAyY,GAAAzsC,EACAusC,GAAAvY,EAAA,GAAAuY,GAAA7tC,EAAA8tC,GAAAxY,EAAA,GAAAwY,GAAA9tC,EAAA+tC,GAAAzY,EAAA,GAAAyY,GAAA/tC,GACA6tC,GAAAvsC,EAAAusC,GAAA7tC,EAAA,GAAA8tC,GAAAxsC,EAAAwsC,GAAA9tC,EAAA,GAAA+tC,GAAAzsC,EAAAysC,GAAA/tC,EAAA,GAEA,QAAAouC,GAAAC,EAAAX,GAAAC,GAAAC,GAAAK,QAQAG,GADAC,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACAX,GAAAC,GAAAC,GAAAK,MAQAC,GAAAxP,aAAAmP,GAAAC,IAGAM,GAFAC,EAAA,CAAAH,GAAAluC,EAAAkuC,GAAA5sC,EAAA4sC,GAAA5Y,GAEAoY,GAAAC,GAAAC,GAAAK,OAIA8C,WAAA,SAAAZ,EAAA1zC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,oDACAvO,EAAA,IAAAygC,IAIAzgC,EAAAwD,KAAAkwC,GAAApnB,MAAAlV,KAAAlF,IAAAkF,KAAAjO,MAIAyrC,gBAAA,SAAAlB,GAIA,OAFA5C,GAAAttC,KAAAkwC,GAAApnB,MAAAlV,KAAAlF,IAAAkF,KAAAjO,KAEA6mB,IAAA0jB,GAAAn1C,UAIAs2C,kBAAA,SAAA70C,GAaA,YAXAkE,IAAAlE,GAEAsO,QAAAkK,MAAA,2DAKApB,KAAAo8B,UAAAxzC,EAAAyyB,QAEAzyB,EAAAijC,OAAA,GAAA7rB,KAAAq8B,QAAA3C,IAAAvyC,SAEAyB,GAIA80C,UAAA,SAAAxB,GAQA,OANAl8B,KAAAlF,IAAA/I,IAAAmqC,EAAAphC,KACAkF,KAAAjO,IAAA+I,IAAAohC,EAAAnqC,KAGAiO,KAAAm8B,WAAAn8B,KAAA07B,YAEA17B,MAIA28B,MAAA,SAAAT,GAKA,OAHAl8B,KAAAlF,IAAAA,IAAAohC,EAAAphC,KACAkF,KAAAjO,IAAAA,IAAAmqC,EAAAnqC,KAEAiO,MAIA2jB,aAAA,SAAAzF,GAGA,OAAAle,KAAAm8B,UAAAn8B,MAGAy5B,GAAA,GAAAjiB,IAAAxX,KAAAlF,IAAA3O,EAAA6T,KAAAlF,IAAArN,EAAAuS,KAAAlF,IAAA2mB,GAAAkC,aAAAzF,GACAub,GAAA,GAAAjiB,IAAAxX,KAAAlF,IAAA3O,EAAA6T,KAAAlF,IAAArN,EAAAuS,KAAAjO,IAAA0vB,GAAAkC,aAAAzF,GACAub,GAAA,GAAAjiB,IAAAxX,KAAAlF,IAAA3O,EAAA6T,KAAAjO,IAAAtE,EAAAuS,KAAAlF,IAAA2mB,GAAAkC,aAAAzF,GACAub,GAAA,GAAAjiB,IAAAxX,KAAAlF,IAAA3O,EAAA6T,KAAAjO,IAAAtE,EAAAuS,KAAAjO,IAAA0vB,GAAAkC,aAAAzF,GACAub,GAAA,GAAAjiB,IAAAxX,KAAAjO,IAAA5F,EAAA6T,KAAAlF,IAAArN,EAAAuS,KAAAlF,IAAA2mB,GAAAkC,aAAAzF,GACAub,GAAA,GAAAjiB,IAAAxX,KAAAjO,IAAA5F,EAAA6T,KAAAlF,IAAArN,EAAAuS,KAAAjO,IAAA0vB,GAAAkC,aAAAzF,GACAub,GAAA,GAAAjiB,IAAAxX,KAAAjO,IAAA5F,EAAA6T,KAAAjO,IAAAtE,EAAAuS,KAAAlF,IAAA2mB,GAAAkC,aAAAzF,GACAub,GAAA,GAAAjiB,IAAAxX,KAAAjO,IAAA5F,EAAA6T,KAAAjO,IAAAtE,EAAAuS,KAAAjO,IAAA0vB,GAAAkC,aAAAzF,GAEAle,KAAAw7B,cAAA/B,IAEAz5B,OAIAwf,UAAA,SAAA1E,GAKA,OAHA9a,KAAAlF,IAAAyd,IAAAuC,GACA9a,KAAAjO,IAAAwmB,IAAAuC,GAEA9a,MAIA4a,OAAA,SAAAshB,GAEA,OAAAA,EAAAphC,IAAA8f,OAAA5a,KAAAlF,MAAAohC,EAAAnqC,IAAA6oB,OAAA5a,KAAAjO,QAgCA,IAAA4rC,GAAA,IAAA/D,GAOA,SAAAgE,GAAAviB,EAAAwQ,GAEA7rB,KAAAqb,YAAAvuB,IAAAuuB,EAAAA,EAAA,IAAAgO,GACArpB,KAAA6rB,YAAA/+B,IAAA++B,EAAAA,GAAA,EAIAtkC,OAAAM,OAAA+1C,GAAAn2C,UAAA,CAEA+vB,IAAA,SAAA6D,EAAAwQ,GAKA,OAHA7rB,KAAAqb,OAAAjvB,KAAAivB,GACArb,KAAA6rB,OAAAA,EAEA7rB,MAIAw7B,cAAA,SAAAC,EAAAoC,GAEA,IAAAxiB,EAAArb,KAAAqb,YAEAvuB,IAAA+wC,EAEAxiB,EAAAjvB,KAAAyxC,GAIAF,GAAAnC,cAAAC,GAAAW,UAAA/gB,GAMA,IAFA,IAAAyiB,EAAA,EAEAt3C,EAAA,EAAAm1C,EAAAF,EAAAt0C,OAAAX,EAAAm1C,EAAAn1C,IAEAs3C,EAAArvC,KAAAsD,IAAA+rC,EAAAziB,EAAAlB,kBAAAshB,EAAAj1C,KAMA,OAFAwZ,KAAA6rB,OAAAp9B,KAAAorB,KAAAikB,GAEA99B,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAA6wC,GAKA,OAHAj9B,KAAAqb,OAAAjvB,KAAA6wC,EAAA5hB,QACArb,KAAA6rB,OAAAoR,EAAApR,OAEA7rB,MAIAm8B,QAAA,WAEA,OAAAn8B,KAAA6rB,OAAA,GAIA6P,UAAA,WAKA,OAHA17B,KAAAqb,OAAA7D,IAAA,EAAA,EAAA,GACAxX,KAAA6rB,QAAA,EAEA7rB,MAIA48B,cAAA,SAAAN,GAEA,OAAAA,EAAAniB,kBAAAna,KAAAqb,SAAArb,KAAA6rB,OAAA7rB,KAAA6rB,QAIA2R,gBAAA,SAAAlB,GAEA,OAAAA,EAAApiB,WAAAla,KAAAqb,QAAArb,KAAA6rB,QAIAmR,iBAAA,SAAAC,GAEA,IAAAc,EAAA/9B,KAAA6rB,OAAAoR,EAAApR,OAEA,OAAAoR,EAAA5hB,OAAAlB,kBAAAna,KAAAqb,SAAA0iB,EAAAA,GAIAhB,cAAA,SAAAb,GAEA,OAAAA,EAAAc,iBAAAh9B,OAIAm9B,gBAAA,SAAAC,GAEA,OAAA3uC,KAAAkC,IAAAysC,EAAAI,gBAAAx9B,KAAAqb,UAAArb,KAAA6rB,QAIAqR,WAAA,SAAAZ,EAAA1zC,GAEA,IAAAo1C,EAAAh+B,KAAAqb,OAAAlB,kBAAAmiB,GAkBA,YAhBAxvC,IAAAlE,IAEAsO,QAAAC,KAAA,sDACAvO,EAAA,IAAAygC,IAIAzgC,EAAAwD,KAAAkwC,GAEA0B,EAAAh+B,KAAA6rB,OAAA7rB,KAAA6rB,SAEAjjC,EAAAgwB,IAAA5Y,KAAAqb,QAAAtB,YACAnxB,EAAAowB,eAAAhZ,KAAA6rB,QAAAtT,IAAAvY,KAAAqb,SAIAzyB,GAIAq1C,eAAA,SAAAr1C,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,0DACAvO,EAAA,IAAAgxC,IAIA55B,KAAAm8B,WAGAvzC,EAAA8yC,YACA9yC,IAIAA,EAAA4uB,IAAAxX,KAAAqb,OAAArb,KAAAqb,QACAzyB,EAAA4zC,eAAAx8B,KAAA6rB,QAEAjjC,IAIA+6B,aAAA,SAAAzF,GAKA,OAHAle,KAAAqb,OAAAsI,aAAAzF,GACAle,KAAA6rB,OAAA7rB,KAAA6rB,OAAA3N,EAAAiS,oBAEAnwB,MAIAwf,UAAA,SAAA1E,GAIA,OAFA9a,KAAAqb,OAAA9C,IAAAuC,GAEA9a,MAIA4a,OAAA,SAAAqiB,GAEA,OAAAA,EAAA5hB,OAAAT,OAAA5a,KAAAqb,SAAA4hB,EAAApR,SAAA7rB,KAAA6rB,UAMA,IAAAqS,GAAA,IAAA7U,GACA8U,GAAA,IAAA9U,GACA+U,GAAA,IAAA/U,GACAgV,GAAA,IAAAhV,GAEAiV,GAAA,IAAAjV,GACAkV,GAAA,IAAAlV,GACAmV,GAAA,IAAAnV,GAMA,SAAAoV,GAAAC,EAAAC,GAEA3+B,KAAA0+B,YAAA5xC,IAAA4xC,EAAAA,EAAA,IAAArV,GACArpB,KAAA2+B,eAAA7xC,IAAA6xC,EAAAA,EAAA,IAAAtV,GAAA,EAAA,GAAA,GAIA9hC,OAAAM,OAAA42C,GAAAh3C,UAAA,CAEA+vB,IAAA,SAAAknB,EAAAC,GAKA,OAHA3+B,KAAA0+B,OAAAtyC,KAAAsyC,GACA1+B,KAAA2+B,UAAAvyC,KAAAuyC,GAEA3+B,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAwyC,GAKA,OAHA5+B,KAAA0+B,OAAAtyC,KAAAwyC,EAAAF,QACA1+B,KAAA2+B,UAAAvyC,KAAAwyC,EAAAD,WAEA3+B,MAIA6+B,GAAA,SAAAv4C,EAAAsC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,2CACAvO,EAAA,IAAAygC,IAIAzgC,EAAAwD,KAAA4T,KAAA2+B,WAAA3lB,eAAA1yB,GAAAiyB,IAAAvY,KAAA0+B,SAIA1P,OAAA,SAAA1W,GAIA,OAFAtY,KAAA2+B,UAAAvyC,KAAAksB,GAAAM,IAAA5Y,KAAA0+B,QAAA3kB,YAEA/Z,MAIA8+B,OAAA,SAAAx4C,GAIA,OAFA0Z,KAAA0+B,OAAAtyC,KAAA4T,KAAA6+B,GAAAv4C,EAAA43C,KAEAl+B,MAIA++B,oBAAA,SAAAzC,EAAA1zC,QAEAkE,IAAAlE,IAEAsO,QAAAC,KAAA,4DACAvO,EAAA,IAAAygC,IAIAzgC,EAAAiwB,WAAAyjB,EAAAt8B,KAAA0+B,QAEA,IAAAM,EAAAp2C,EAAA8wB,IAAA1Z,KAAA2+B,WAEA,OAAAK,EAAA,EAEAp2C,EAAAwD,KAAA4T,KAAA0+B,QAIA91C,EAAAwD,KAAA4T,KAAA2+B,WAAA3lB,eAAAgmB,GAAAzmB,IAAAvY,KAAA0+B,SAIAlB,gBAAA,SAAAlB,GAEA,OAAA7tC,KAAAorB,KAAA7Z,KAAAi/B,kBAAA3C,KAIA2C,kBAAA,SAAA3C,GAEA,IAAA0C,EAAAd,GAAArlB,WAAAyjB,EAAAt8B,KAAA0+B,QAAAhlB,IAAA1Z,KAAA2+B,WAIA,OAAAK,EAAA,EAEAh/B,KAAA0+B,OAAAvkB,kBAAAmiB,IAIA4B,GAAA9xC,KAAA4T,KAAA2+B,WAAA3lB,eAAAgmB,GAAAzmB,IAAAvY,KAAA0+B,QAEAR,GAAA/jB,kBAAAmiB,KAIA4C,oBAAA,SAAAzE,EAAA/f,EAAAykB,EAAAC,GASAjB,GAAA/xC,KAAAquC,GAAAliB,IAAAmC,GAAA1B,eAAA,IACAolB,GAAAhyC,KAAAsuB,GAAA9B,IAAA6hB,GAAA1gB,YACAskB,GAAAjyC,KAAA4T,KAAA0+B,QAAA9lB,IAAAulB,IAEA,IAMAkB,EAAApY,EAAAqY,EAAAC,EANAC,EAAA,GAAA/E,EAAAvgB,WAAAQ,GACA+kB,GAAAz/B,KAAA2+B,UAAAjlB,IAAA0kB,IACAsB,EAAArB,GAAA3kB,IAAA1Z,KAAA2+B,WACAppB,GAAA8oB,GAAA3kB,IAAA0kB,IACA13C,EAAA23C,GAAAzkB,WACA2E,EAAA9vB,KAAAkC,IAAA,EAAA8uC,EAAAA,GAGA,GAAAlhB,EAAA,EAQA,GAHA0I,EAAAwY,EAAAC,EAAAnqB,EACAgqB,EAAAC,EAAAjhB,GAFA8gB,EAAAI,EAAAlqB,EAAAmqB,IAIA,EAEA,GAAAzY,IAAAsY,EAEA,GAAAtY,GAAAsY,EAAA,CAKA,IAAAI,EAAA,EAAAphB,EAGA+gB,GAFAD,GAAAM,IAEAN,EAAAI,GADAxY,GAAA0Y,GACA,EAAAD,GAAAzY,GAAAwY,EAAAJ,EAAApY,EAAA,EAAA1R,GAAA7uB,OAMAugC,EAAAuY,EAEAF,IADAD,EAAA5wC,KAAAsD,IAAA,IAAA0tC,EAAAxY,EAAAyY,KACAL,EAAApY,GAAAA,EAAA,EAAA1R,GAAA7uB,OAQAugC,GAAAuY,EAEAF,IADAD,EAAA5wC,KAAAsD,IAAA,IAAA0tC,EAAAxY,EAAAyY,KACAL,EAAApY,GAAAA,EAAA,EAAA1R,GAAA7uB,OAMAugC,IAAAsY,EAMAD,IAFAD,EAAA5wC,KAAAsD,IAAA,KAAA0tC,EAAAD,EAAAE,KAEAL,GADApY,EAAAoY,EAAA,GAAAG,EAAA/wC,KAAAqM,IAAArM,KAAAsD,KAAAytC,GAAAjqB,GAAAiqB,KACAvY,EAAA,EAAA1R,GAAA7uB,EAEAugC,GAAAsY,GAIAF,EAAA,EAEAC,GADArY,EAAAx4B,KAAAqM,IAAArM,KAAAsD,KAAAytC,GAAAjqB,GAAAiqB,KACAvY,EAAA,EAAA1R,GAAA7uB,GAQA44C,IAFAD,EAAA5wC,KAAAsD,IAAA,IAAA0tC,EAAAD,EAAAE,KAEAL,GADApY,EAAAoY,EAAA,EAAAG,EAAA/wC,KAAAqM,IAAArM,KAAAsD,KAAAytC,GAAAjqB,GAAAiqB,KACAvY,EAAA,EAAA1R,GAAA7uB,OAUAugC,EAAAwY,EAAA,GAAAD,EAAAA,EAEAF,IADAD,EAAA5wC,KAAAsD,IAAA,IAAA0tC,EAAAxY,EAAAyY,KACAL,EAAApY,GAAAA,EAAA,EAAA1R,GAAA7uB,EAgBA,OAZAy4C,GAEAA,EAAA/yC,KAAA4T,KAAA2+B,WAAA3lB,eAAAqmB,GAAA9mB,IAAAvY,KAAA0+B,QAIAU,GAEAA,EAAAhzC,KAAAgyC,IAAAplB,eAAAiO,GAAA1O,IAAA4lB,IAIAmB,GAIAM,gBAAA,SAAA3C,EAAAr0C,GAEAs1C,GAAArlB,WAAAokB,EAAA5hB,OAAArb,KAAA0+B,QACA,IAAAmB,EAAA3B,GAAAxkB,IAAA1Z,KAAA2+B,WACA5pB,EAAAmpB,GAAAxkB,IAAAwkB,IAAA2B,EAAAA,EACAC,EAAA7C,EAAApR,OAAAoR,EAAApR,OAEA,GAAA9W,EAAA+qB,EAAA,OAAA,KAEA,IAAAC,EAAAtxC,KAAAorB,KAAAimB,EAAA/qB,GAGAirB,EAAAH,EAAAE,EAGAE,EAAAJ,EAAAE,EAGA,OAAAC,EAAA,GAAAC,EAAA,EAAA,KAKAjgC,KAAA6+B,GAAAmB,EAAA,EAAAC,EAGAD,EAHAp3C,IAOAo0C,iBAAA,SAAAC,GAEA,OAAAj9B,KAAAi/B,kBAAAhC,EAAA5hB,SAAA4hB,EAAApR,OAAAoR,EAAApR,QAIAqU,gBAAA,SAAA9C,GAEA,IAAA/R,EAAA+R,EAAA3R,OAAA/R,IAAA1Z,KAAA2+B,WAEA,GAAA,IAAAtT,EAGA,OAAA,IAAA+R,EAAAI,gBAAAx9B,KAAA0+B,QAEA,EAMA,KAIA,IAAAp4C,IAAA0Z,KAAA0+B,OAAAhlB,IAAA0jB,EAAA3R,QAAA2R,EAAAC,UAAAhS,EAIA,OAAA/kC,GAAA,EAAAA,EAAA,MAIA65C,eAAA,SAAA/C,EAAAx0C,GAEA,IAAAtC,EAAA0Z,KAAAkgC,gBAAA9C,GAEA,OAAA,OAAA92C,EAEA,KAIA0Z,KAAA6+B,GAAAv4C,EAAAsC,IAIAu0C,gBAAA,SAAAC,GAIA,IAAAgD,EAAAhD,EAAAI,gBAAAx9B,KAAA0+B,QAEA,OAAA,IAAA0B,GAMAhD,EAAA3R,OAAA/R,IAAA1Z,KAAA2+B,WAEAyB,EAAA,GAYAC,aAAA,SAAAnE,EAAAtzC,GAEA,IAAA03C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEAC,EAAA,EAAA5gC,KAAA2+B,UAAAxyC,EACA00C,EAAA,EAAA7gC,KAAA2+B,UAAAlxC,EACAqzC,EAAA,EAAA9gC,KAAA2+B,UAAAld,EAEAid,EAAA1+B,KAAA0+B,OA0BA,OAxBAkC,GAAA,GAEAN,GAAApE,EAAAphC,IAAA3O,EAAAuyC,EAAAvyC,GAAAy0C,EACAL,GAAArE,EAAAnqC,IAAA5F,EAAAuyC,EAAAvyC,GAAAy0C,IAIAN,GAAApE,EAAAnqC,IAAA5F,EAAAuyC,EAAAvyC,GAAAy0C,EACAL,GAAArE,EAAAphC,IAAA3O,EAAAuyC,EAAAvyC,GAAAy0C,GAIAC,GAAA,GAEAL,GAAAtE,EAAAphC,IAAArN,EAAAixC,EAAAjxC,GAAAozC,EACAJ,GAAAvE,EAAAnqC,IAAAtE,EAAAixC,EAAAjxC,GAAAozC,IAIAL,GAAAtE,EAAAnqC,IAAAtE,EAAAixC,EAAAjxC,GAAAozC,EACAJ,GAAAvE,EAAAphC,IAAArN,EAAAixC,EAAAjxC,GAAAozC,GAIAP,EAAAG,GAAAD,EAAAD,EAAA,OAKAC,EAAAF,GAAAA,GAAAA,KAAAA,EAAAE,IAEAC,EAAAF,GAAAA,GAAAA,KAAAA,EAAAE,GAEAK,GAAA,GAEAJ,GAAAxE,EAAAphC,IAAA2mB,EAAAid,EAAAjd,GAAAqf,EACAH,GAAAzE,EAAAnqC,IAAA0vB,EAAAid,EAAAjd,GAAAqf,IAIAJ,GAAAxE,EAAAnqC,IAAA0vB,EAAAid,EAAAjd,GAAAqf,EACAH,GAAAzE,EAAAphC,IAAA2mB,EAAAid,EAAAjd,GAAAqf,GAIAR,EAAAK,GAAAD,EAAAH,EAAA,OAEAG,EAAAJ,GAAAA,GAAAA,KAAAA,EAAAI,IAEAC,EAAAJ,GAAAA,GAAAA,KAAAA,EAAAI,GAIAJ,EAAA,EAAA,KAEAvgC,KAAA6+B,GAAAyB,GAAA,EAAAA,EAAAC,EAAA33C,MAIAm0C,cAAA,SAAAb,GAEA,OAAA,OAAAl8B,KAAAqgC,aAAAnE,EAAAgC,KAIA6C,kBAAA,SAAAl6C,EAAA6E,EAAAhF,EAAAs6C,EAAAp4C,GAMA01C,GAAAzlB,WAAAntB,EAAA7E,GACA03C,GAAA1lB,WAAAnyB,EAAAG,GACA23C,GAAA3T,aAAAyT,GAAAC,IAOA,IACAr0B,EADA+2B,EAAAjhC,KAAA2+B,UAAAjlB,IAAA8kB,IAGA,GAAAyC,EAAA,EAAA,CAEA,GAAAD,EAAA,OAAA,KACA92B,EAAA,MAEA,CAAA,KAAA+2B,EAAA,GAOA,OAAA,KALA/2B,GAAA,EACA+2B,GAAAA,EAQA5C,GAAAxlB,WAAA7Y,KAAA0+B,OAAA73C,GACA,IAAAq6C,EAAAh3B,EAAAlK,KAAA2+B,UAAAjlB,IAAA6kB,GAAA1T,aAAAwT,GAAAE,KAGA,GAAA2C,EAAA,EAEA,OAAA,KAIA,IAAAC,EAAAj3B,EAAAlK,KAAA2+B,UAAAjlB,IAAA4kB,GAAA3kB,MAAA0kB,KAGA,GAAA8C,EAAA,EAEA,OAAA,KAKA,GAAAD,EAAAC,EAAAF,EAEA,OAAA,KAKA,IAAAG,GAAAl3B,EAAAm0B,GAAA3kB,IAAA8kB,IAGA,OAAA4C,EAAA,EAEA,KAKAphC,KAAA6+B,GAAAuC,EAAAH,EAAAr4C,IAIA+6B,aAAA,SAAA/E,GAKA,OAHA5e,KAAA0+B,OAAA/a,aAAA/E,GACA5e,KAAA2+B,UAAA/T,mBAAAhM,GAEA5e,MAIA4a,OAAA,SAAAgkB,GAEA,OAAAA,EAAAF,OAAA9jB,OAAA5a,KAAA0+B,SAAAE,EAAAD,UAAA/jB,OAAA5a,KAAA2+B,cAUA,IAAA0C,GAAA,IAAAhY,GACAiY,GAAA,IAAAjY,GACAkY,GAAA,IAAA7pB,GAEA,SAAA8pB,GAAA/V,EAAA4R,GAIAr9B,KAAAyrB,YAAA3+B,IAAA2+B,EAAAA,EAAA,IAAApC,GAAA,EAAA,EAAA,GACArpB,KAAAq9B,cAAAvwC,IAAAuwC,EAAAA,EAAA,EAIA91C,OAAAM,OAAA25C,GAAA/5C,UAAA,CAEAg6C,SAAA,EAEAjqB,IAAA,SAAAiU,EAAA4R,GAKA,OAHAr9B,KAAAyrB,OAAAr/B,KAAAq/B,GACAzrB,KAAAq9B,SAAAA,EAEAr9B,MAIA0hC,cAAA,SAAAv1C,EAAAsB,EAAAg0B,EAAAjJ,GAKA,OAHAxY,KAAAyrB,OAAAjU,IAAArrB,EAAAsB,EAAAg0B,GACAzhB,KAAAq9B,SAAA7kB,EAEAxY,MAIA2hC,8BAAA,SAAAlW,EAAA6Q,GAKA,OAHAt8B,KAAAyrB,OAAAr/B,KAAAq/B,GACAzrB,KAAAq9B,UAAAf,EAAA5iB,IAAA1Z,KAAAyrB,QAEAzrB,MAIA4hC,sBAAA,SAAA/6C,EAAA6E,EAAAhF,GAEA,IAAA+kC,EAAA4V,GAAAxoB,WAAAnyB,EAAAgF,GAAAiuB,MAAA2nB,GAAAzoB,WAAAhyB,EAAA6E,IAAAquB,YAMA,OAFA/Z,KAAA2hC,8BAAAlW,EAAA5kC,GAEAmZ,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAgxC,GAKA,OAHAp9B,KAAAyrB,OAAAr/B,KAAAgxC,EAAA3R,QACAzrB,KAAAq9B,SAAAD,EAAAC,SAEAr9B,MAIA+Z,UAAA,WAIA,IAAA8nB,EAAA,EAAA7hC,KAAAyrB,OAAAtkC,SAIA,OAHA6Y,KAAAyrB,OAAAzS,eAAA6oB,GACA7hC,KAAAq9B,UAAAwE,EAEA7hC,MAIAyZ,OAAA,WAKA,OAHAzZ,KAAAq9B,WAAA,EACAr9B,KAAAyrB,OAAAhS,SAEAzZ,MAIAw9B,gBAAA,SAAAlB,GAEA,OAAAt8B,KAAAyrB,OAAA/R,IAAA4iB,GAAAt8B,KAAAq9B,UAIAyE,iBAAA,SAAA7E,GAEA,OAAAj9B,KAAAw9B,gBAAAP,EAAA5hB,QAAA4hB,EAAApR,QAIAkW,aAAA,SAAAzF,EAAA1zC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,uDACAvO,EAAA,IAAAygC,IAIAzgC,EAAAwD,KAAA4T,KAAAyrB,QAAAzS,gBAAAhZ,KAAAw9B,gBAAAlB,IAAA/jB,IAAA+jB,IAIA0F,cAAA,SAAAC,EAAAr5C,QAEAkE,IAAAlE,IAEAsO,QAAAC,KAAA,wDACAvO,EAAA,IAAAygC,IAIA,IAAAsV,EAAAsD,EAAAC,MAAAb,IAEAhW,EAAArrB,KAAAyrB,OAAA/R,IAAAilB,GAEA,GAAA,IAAAtT,EAGA,OAAA,IAAArrB,KAAAw9B,gBAAAyE,EAAAE,OAEAv5C,EAAAwD,KAAA61C,EAAAE,YAKA,EAIA,IAAA77C,IAAA27C,EAAAE,MAAAzoB,IAAA1Z,KAAAyrB,QAAAzrB,KAAAq9B,UAAAhS,EAEA,OAAA/kC,EAAA,GAAAA,EAAA,OAAA,EAMAsC,EAAAwD,KAAAuyC,GAAA3lB,eAAA1yB,GAAAiyB,IAAA0pB,EAAAE,QAIAC,eAAA,SAAAH,GAIA,IAAAI,EAAAriC,KAAAw9B,gBAAAyE,EAAAE,OACAG,EAAAtiC,KAAAw9B,gBAAAyE,EAAAhgC,KAEA,OAAAogC,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAAAD,EAAA,GAIAtF,cAAA,SAAAb,GAEA,OAAAA,EAAAiB,gBAAAn9B,OAIAg9B,iBAAA,SAAAC,GAEA,OAAAA,EAAAE,gBAAAn9B,OAIAuiC,cAAA,SAAA35C,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,wDACAvO,EAAA,IAAAygC,IAIAzgC,EAAAwD,KAAA4T,KAAAyrB,QAAAzS,gBAAAhZ,KAAAq9B,WAIA1Z,aAAA,SAAAzF,EAAAskB,GAEA,IAAAlO,EAAAkO,GAAAjB,GAAA5iB,gBAAAT,GAEAukB,EAAAziC,KAAAuiC,cAAAlB,IAAA1d,aAAAzF,GAEAuN,EAAAzrB,KAAAyrB,OAAAtS,aAAAmb,GAAAva,YAIA,OAFA/Z,KAAAq9B,UAAAoF,EAAA/oB,IAAA+R,GAEAzrB,MAIAwf,UAAA,SAAA1E,GAIA,OAFA9a,KAAAq9B,UAAAviB,EAAApB,IAAA1Z,KAAAyrB,QAEAzrB,MAIA4a,OAAA,SAAAwiB,GAEA,OAAAA,EAAA3R,OAAA7Q,OAAA5a,KAAAyrB,SAAA2R,EAAAC,WAAAr9B,KAAAq9B,YAWA,IAAAqF,GAAA,IAAArZ,GACAsZ,GAAA,IAAAtZ,GACAuZ,GAAA,IAAAvZ,GACAwZ,GAAA,IAAAxZ,GAEAyZ,GAAA,IAAAzZ,GACA0Z,GAAA,IAAA1Z,GACA2Z,GAAA,IAAA3Z,GACA4Z,GAAA,IAAA5Z,GACA6Z,GAAA,IAAA7Z,GACA8Z,GAAA,IAAA9Z,GAEA,SAAA+Z,GAAAv8C,EAAA6E,EAAAhF,GAEAsZ,KAAAnZ,OAAAiG,IAAAjG,EAAAA,EAAA,IAAAwiC,GACArpB,KAAAtU,OAAAoB,IAAApB,EAAAA,EAAA,IAAA29B,GACArpB,KAAAtZ,OAAAoG,IAAApG,EAAAA,EAAA,IAAA2iC,GAIA9hC,OAAAM,OAAAu7C,GAAA,CAEAC,UAAA,SAAAx8C,EAAA6E,EAAAhF,EAAAkC,QAEAkE,IAAAlE,IAEAsO,QAAAC,KAAA,uDACAvO,EAAA,IAAAygC,IAIAzgC,EAAAiwB,WAAAnyB,EAAAgF,GACAg3C,GAAA7pB,WAAAhyB,EAAA6E,GACA9C,EAAA+wB,MAAA+oB,IAEA,IAAAY,EAAA16C,EAAAgxB,WACA,OAAA0pB,EAAA,EAEA16C,EAAAowB,eAAA,EAAAvqB,KAAAorB,KAAAypB,IAIA16C,EAAA4uB,IAAA,EAAA,EAAA,IAMA+rB,aAAA,SAAAjH,EAAAz1C,EAAA6E,EAAAhF,EAAAkC,GAEA85C,GAAA7pB,WAAAnyB,EAAAG,GACA87C,GAAA9pB,WAAAntB,EAAA7E,GACA+7C,GAAA/pB,WAAAyjB,EAAAz1C,GAEA,IAAA28C,EAAAd,GAAAhpB,IAAAgpB,IACAe,EAAAf,GAAAhpB,IAAAipB,IACAe,EAAAhB,GAAAhpB,IAAAkpB,IACAe,EAAAhB,GAAAjpB,IAAAipB,IACAiB,EAAAjB,GAAAjpB,IAAAkpB,IAEAiB,EAAAL,EAAAG,EAAAF,EAAAA,EAUA,QARA32C,IAAAlE,IAEAsO,QAAAC,KAAA,0DACAvO,EAAA,IAAAygC,IAKA,IAAAwa,EAIA,OAAAj7C,EAAA4uB,KAAA,GAAA,GAAA,GAIA,IAAAssB,EAAA,EAAAD,EACAj9C,GAAA+8C,EAAAD,EAAAD,EAAAG,GAAAE,EACAxrB,GAAAkrB,EAAAI,EAAAH,EAAAC,GAAAI,EAGA,OAAAl7C,EAAA4uB,IAAA,EAAA5wB,EAAA0xB,EAAAA,EAAA1xB,IAIAg2C,cAAA,SAAAN,EAAAz1C,EAAA6E,EAAAhF,GAIA,OAFA08C,GAAAG,aAAAjH,EAAAz1C,EAAA6E,EAAAhF,EAAAm8C,IAEAA,GAAA12C,GAAA,GAAA02C,GAAAp1C,GAAA,GAAAo1C,GAAA12C,EAAA02C,GAAAp1C,GAAA,GAIAs2C,MAAA,SAAAzH,EAAAzB,EAAAC,EAAAkJ,EAAAC,EAAAC,EAAAC,EAAAv7C,GASA,OAPAoX,KAAAujC,aAAAjH,EAAAzB,EAAAC,EAAAkJ,EAAAnB,IAEAj6C,EAAA4uB,IAAA,EAAA,GACA5uB,EAAA+vB,gBAAAsrB,EAAApB,GAAA12C,GACAvD,EAAA+vB,gBAAAurB,EAAArB,GAAAp1C,GACA7E,EAAA+vB,gBAAAwrB,EAAAtB,GAAAphB,GAEA74B,GAIAw7C,cAAA,SAAAv9C,EAAA6E,EAAAhF,EAAAi4C,GAMA,OAJA+D,GAAA7pB,WAAAnyB,EAAAgF,GACAi3C,GAAA9pB,WAAAhyB,EAAA6E,GAGAg3C,GAAA/oB,MAAAgpB,IAAAjpB,IAAAilB,GAAA,KAMAp3C,OAAAM,OAAAu7C,GAAA37C,UAAA,CAEA+vB,IAAA,SAAA3wB,EAAA6E,EAAAhF,GAMA,OAJAsZ,KAAAnZ,EAAAuF,KAAAvF,GACAmZ,KAAAtU,EAAAU,KAAAV,GACAsU,KAAAtZ,EAAA0F,KAAA1F,GAEAsZ,MAIAqkC,wBAAA,SAAA5I,EAAA6I,EAAAC,EAAAC,GAMA,OAJAxkC,KAAAnZ,EAAAuF,KAAAqvC,EAAA6I,IACAtkC,KAAAtU,EAAAU,KAAAqvC,EAAA8I,IACAvkC,KAAAtZ,EAAA0F,KAAAqvC,EAAA+I,IAEAxkC,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAmxC,GAMA,OAJAv9B,KAAAnZ,EAAAuF,KAAAmxC,EAAA12C,GACAmZ,KAAAtU,EAAAU,KAAAmxC,EAAA7xC,GACAsU,KAAAtZ,EAAA0F,KAAAmxC,EAAA72C,GAEAsZ,MAIAykC,QAAA,WAKA,OAHA/B,GAAA7pB,WAAA7Y,KAAAtZ,EAAAsZ,KAAAtU,GACAi3C,GAAA9pB,WAAA7Y,KAAAnZ,EAAAmZ,KAAAtU,GAEA,GAAAg3C,GAAA/oB,MAAAgpB,IAAAx7C,UAIAu9C,YAAA,SAAA97C,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,yDACAvO,EAAA,IAAAygC,IAIAzgC,EAAA6vB,WAAAzY,KAAAnZ,EAAAmZ,KAAAtU,GAAA6sB,IAAAvY,KAAAtZ,GAAAsyB,eAAA,EAAA,IAIAqqB,UAAA,SAAAz6C,GAEA,OAAAw6C,GAAAC,UAAArjC,KAAAnZ,EAAAmZ,KAAAtU,EAAAsU,KAAAtZ,EAAAkC,IAIA+7C,SAAA,SAAA/7C,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,sDACAvO,EAAA,IAAA44C,IAIA54C,EAAAg5C,sBAAA5hC,KAAAnZ,EAAAmZ,KAAAtU,EAAAsU,KAAAtZ,IAIA68C,aAAA,SAAAjH,EAAA1zC,GAEA,OAAAw6C,GAAAG,aAAAjH,EAAAt8B,KAAAnZ,EAAAmZ,KAAAtU,EAAAsU,KAAAtZ,EAAAkC,IAIAm7C,MAAA,SAAAzH,EAAA2H,EAAAC,EAAAC,EAAAv7C,GAEA,OAAAw6C,GAAAW,MAAAzH,EAAAt8B,KAAAnZ,EAAAmZ,KAAAtU,EAAAsU,KAAAtZ,EAAAu9C,EAAAC,EAAAC,EAAAv7C,IAIAg0C,cAAA,SAAAN,GAEA,OAAA8G,GAAAxG,cAAAN,EAAAt8B,KAAAnZ,EAAAmZ,KAAAtU,EAAAsU,KAAAtZ,IAIA09C,cAAA,SAAAzF,GAEA,OAAAyE,GAAAgB,cAAApkC,KAAAnZ,EAAAmZ,KAAAtU,EAAAsU,KAAAtZ,EAAAi4C,IAIA5B,cAAA,SAAAb,GAEA,OAAAA,EAAAoB,mBAAAt9B,OAIA++B,oBAAA,SAAA/3C,EAAA4B,QAEAkE,IAAAlE,IAEAsO,QAAAC,KAAA,iEACAvO,EAAA,IAAAygC,IAIA,IACA/Q,EAAAE,EADA3xB,EAAAmZ,KAAAnZ,EAAA6E,EAAAsU,KAAAtU,EAAAhF,EAAAsZ,KAAAtZ,EASAo8C,GAAAjqB,WAAAntB,EAAA7E,GACAk8C,GAAAlqB,WAAAnyB,EAAAG,GACAo8C,GAAApqB,WAAA7xB,EAAAH,GACA,IAAAiuB,EAAAguB,GAAAppB,IAAAupB,IACAluB,EAAAguB,GAAArpB,IAAAupB,IACA,GAAAnuB,GAAA,GAAAC,GAAA,EAGA,OAAAnsB,EAAAwD,KAAAvF,GAIAq8C,GAAArqB,WAAA7xB,EAAA0E,GACA,IAAAspB,EAAA8tB,GAAAppB,IAAAwpB,IACA0B,EAAA7B,GAAArpB,IAAAwpB,IACA,GAAAluB,GAAA,GAAA4vB,GAAA5vB,EAGA,OAAApsB,EAAAwD,KAAAV,GAIA,IAAAm5C,EAAA/vB,EAAA8vB,EAAA5vB,EAAAD,EACA,GAAA8vB,GAAA,GAAA/vB,GAAA,GAAAE,GAAA,EAIA,OAFAsD,EAAAxD,GAAAA,EAAAE,GAEApsB,EAAAwD,KAAAvF,GAAA8xB,gBAAAmqB,GAAAxqB,GAIA6qB,GAAAtqB,WAAA7xB,EAAAN,GACA,IAAAo+C,EAAAhC,GAAAppB,IAAAypB,IACA4B,EAAAhC,GAAArpB,IAAAypB,IACA,GAAA4B,GAAA,GAAAD,GAAAC,EAGA,OAAAn8C,EAAAwD,KAAA1F,GAIA,IAAAs+C,EAAAF,EAAA/vB,EAAAD,EAAAiwB,EACA,GAAAC,GAAA,GAAAjwB,GAAA,GAAAgwB,GAAA,EAIA,OAFAvsB,EAAAzD,GAAAA,EAAAgwB,GAEAn8C,EAAAwD,KAAAvF,GAAA8xB,gBAAAoqB,GAAAvqB,GAIA,IAAAysB,EAAAjwB,EAAA+vB,EAAAD,EAAAF,EACA,GAAAK,GAAA,GAAAL,EAAA5vB,GAAA,GAAA8vB,EAAAC,GAAA,EAKA,OAHA/B,GAAAnqB,WAAAnyB,EAAAgF,GACA8sB,GAAAosB,EAAA5vB,IAAA4vB,EAAA5vB,GAAA8vB,EAAAC,IAEAn8C,EAAAwD,KAAAV,GAAAitB,gBAAAqqB,GAAAxqB,GAKA,IAAAqrB,EAAA,GAAAoB,EAAAD,EAAAH,GAKA,OAHAvsB,EAAA0sB,EAAAnB,EACArrB,EAAAqsB,EAAAhB,EAEAj7C,EAAAwD,KAAAvF,GAAA8xB,gBAAAmqB,GAAAxqB,GAAAK,gBAAAoqB,GAAAvqB,IAIAoC,OAAA,SAAA2iB,GAEA,OAAAA,EAAA12C,EAAA+zB,OAAA5a,KAAAnZ,IAAA02C,EAAA7xC,EAAAkvB,OAAA5a,KAAAtU,IAAA6xC,EAAA72C,EAAAk0B,OAAA5a,KAAAtZ,MAUA,IAAAw+C,GAAA,CAAAC,UAAA,SAAAC,aAAA,SAAAC,KAAA,MAAAC,WAAA,QAAAC,MAAA,SACAC,MAAA,SAAAC,OAAA,SAAAC,MAAA,EAAAC,eAAA,SAAAC,KAAA,IAAAC,WAAA,QACAC,MAAA,SAAAC,UAAA,SAAAC,UAAA,QAAAC,WAAA,QAAAC,UAAA,SAAAC,MAAA,SACAC,eAAA,QAAAC,SAAA,SAAAC,QAAA,SAAAC,KAAA,MAAAC,SAAA,IAAAC,SAAA,MACAC,cAAA,SAAAC,SAAA,SAAAC,UAAA,MAAAC,SAAA,SAAAC,UAAA,SAAAC,YAAA,QACAC,eAAA,QAAAC,WAAA,SAAAC,WAAA,SAAAC,QAAA,QAAAC,WAAA,SAAAC,aAAA,QACAC,cAAA,QAAAC,cAAA,QAAAC,cAAA,QAAAC,cAAA,MAAAC,WAAA,QACAC,SAAA,SAAAC,YAAA,MAAAC,QAAA,QAAAC,QAAA,QAAAC,WAAA,QAAAC,UAAA,SACAC,YAAA,SAAAC,YAAA,QAAAC,QAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,KAAA,SACAC,UAAA,SAAAC,KAAA,QAAAC,MAAA,MAAAC,YAAA,SAAAC,KAAA,QAAAC,SAAA,SAAAC,QAAA,SACAC,UAAA,SAAAC,OAAA,QAAAC,MAAA,SAAAC,MAAA,SAAAC,SAAA,SAAAC,cAAA,SAAAC,UAAA,QACAC,aAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,UAAA,SAAAC,qBAAA,SAAAC,UAAA,SACAC,WAAA,QAAAC,UAAA,SAAAC,UAAA,SAAAC,YAAA,SAAAC,cAAA,QAAAC,aAAA,QACAC,eAAA,QAAAC,eAAA,QAAAC,eAAA,SAAAC,YAAA,SAAAC,KAAA,MAAAC,UAAA,QACAC,MAAA,SAAAC,QAAA,SAAAC,OAAA,QAAAC,iBAAA,QAAAC,WAAA,IAAAC,aAAA,SACAC,aAAA,QAAAC,eAAA,QAAAC,gBAAA,QAAAC,kBAAA,MAAAC,gBAAA,QACAC,gBAAA,SAAAC,aAAA,QAAAC,UAAA,SAAAC,UAAA,SAAAC,SAAA,SAAAC,YAAA,SACAC,KAAA,IAAAC,QAAA,SAAAC,MAAA,QAAAC,UAAA,QAAAC,OAAA,SAAAC,UAAA,SAAAC,OAAA,SACAC,cAAA,SAAAC,UAAA,SAAAC,cAAA,SAAAC,cAAA,SAAAC,WAAA,SAAAC,UAAA,SACAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,WAAA,SAAAC,OAAA,QAAAC,cAAA,QAAAC,IAAA,SAAAC,UAAA,SACAC,UAAA,QAAAC,YAAA,QAAAC,OAAA,SAAAC,WAAA,SAAAC,SAAA,QAAAC,SAAA,SACAC,OAAA,SAAAC,OAAA,SAAAC,QAAA,QAAAC,UAAA,QAAAC,UAAA,QAAAC,UAAA,QAAAC,KAAA,SACAC,YAAA,MAAAC,UAAA,QAAAC,IAAA,SAAAC,KAAA,MAAAC,QAAA,SAAAC,OAAA,SAAAC,UAAA,QACAC,OAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,WAAA,SAAAC,OAAA,SAAAC,YAAA,UAEAC,GAAA,CAAA3+C,EAAA,EAAAxG,EAAA,EAAA6G,EAAA,GACAu+C,GAAA,CAAA5+C,EAAA,EAAAxG,EAAA,EAAA6G,EAAA,GAEA,SAAAw+C,GAAAtoD,EAAA63B,EAAAtyB,GAEA,YAAAoB,IAAAkxB,QAAAlxB,IAAApB,EAGAsU,KAAAwX,IAAArxB,GAIA6Z,KAAA0uC,OAAAvoD,EAAA63B,EAAAtyB,GAIA,SAAAijD,GAAA3nD,EAAA4vB,EAAAtwB,GAIA,OAFAA,EAAA,IAAAA,GAAA,GACAA,EAAA,IAAAA,GAAA,GACAA,EAAA,EAAA,EAAAU,EAAA,GAAA4vB,EAAA5vB,GAAAV,EACAA,EAAA,GAAAswB,EACAtwB,EAAA,EAAA,EAAAU,EAAA,GAAA4vB,EAAA5vB,IAAA,EAAA,EAAAV,GACAU,EAIA,SAAA4nD,GAAAloD,GAEA,OAAAA,EAAA,OAAA,YAAAA,EAAA+H,KAAAub,IAAA,YAAAtjB,EAAA,YAAA,KAIA,SAAAmoD,GAAAnoD,GAEA,OAAAA,EAAA,SAAA,MAAAA,EAAA,MAAA+H,KAAAub,IAAAtjB,EAAA,QAAA,KAuiBA,SAAAooD,GAAAjoD,EAAA6E,EAAAhF,EAAA+kC,EAAAsjB,EAAAC,GAEAhvC,KAAAnZ,EAAAA,EACAmZ,KAAAtU,EAAAA,EACAsU,KAAAtZ,EAAAA,EAEAsZ,KAAAyrB,OAAAA,GAAAA,EAAAlC,UAAAkC,EAAA,IAAApC,GACArpB,KAAAivC,cAAA/jD,MAAA6B,QAAA0+B,GAAAA,EAAA,GAEAzrB,KAAA+uC,MAAAA,GAAAA,EAAAG,QAAAH,EAAA,IAAAN,GACAzuC,KAAAmvC,aAAAjkD,MAAA6B,QAAAgiD,GAAAA,EAAA,GAEA/uC,KAAAgvC,mBAAAliD,IAAAkiD,EAAAA,EAAA,EA/iBAznD,OAAAM,OAAA4mD,GAAAhnD,UAAA,CAEAynD,SAAA,EAEA/oD,EAAA,EAAA63B,EAAA,EAAAtyB,EAAA,EAEA8rB,IAAA,SAAAtrB,GAgBA,OAdAA,GAAAA,EAAAgjD,QAEAlvC,KAAA5T,KAAAF,GAEA,iBAAAA,EAEA8T,KAAAovC,OAAAljD,GAEA,iBAAAA,GAEA8T,KAAAqvC,SAAAnjD,GAIA8T,MAIA8X,UAAA,SAAAC,GAMA,OAJA/X,KAAA7Z,EAAA4xB,EACA/X,KAAAge,EAAAjG,EACA/X,KAAAtU,EAAAqsB,EAEA/X,MAIAovC,OAAA,SAAAE,GAQA,OANAA,EAAA7gD,KAAAC,MAAA4gD,GAEAtvC,KAAA7Z,GAAAmpD,GAAA,GAAA,KAAA,IACAtvC,KAAAge,GAAAsxB,GAAA,EAAA,KAAA,IACAtvC,KAAAtU,GAAA,IAAA4jD,GAAA,IAEAtvC,MAIA0uC,OAAA,SAAAvoD,EAAA63B,EAAAtyB,GAMA,OAJAsU,KAAA7Z,EAAAA,EACA6Z,KAAAge,EAAAA,EACAhe,KAAAtU,EAAAA,EAEAsU,MAIAuvC,OAAA,SAAA3/C,EAAAxG,EAAA6G,GAOA,GAJAL,EAAA2kB,GAAAY,gBAAAvlB,EAAA,GACAxG,EAAAmrB,GAAAW,MAAA9rB,EAAA,EAAA,GACA6G,EAAAskB,GAAAW,MAAAjlB,EAAA,EAAA,GAEA,IAAA7G,EAEA4W,KAAA7Z,EAAA6Z,KAAAge,EAAAhe,KAAAtU,EAAAuE,MAEA,CAEA,IAAAjJ,EAAAiJ,GAAA,GAAAA,GAAA,EAAA7G,GAAA6G,EAAA7G,EAAA6G,EAAA7G,EACAwtB,EAAA,EAAA3mB,EAAAjJ,EAEAgZ,KAAA7Z,EAAAwoD,GAAA/3B,EAAA5vB,EAAA4I,EAAA,EAAA,GACAoQ,KAAAge,EAAA2wB,GAAA/3B,EAAA5vB,EAAA4I,GACAoQ,KAAAtU,EAAAijD,GAAA/3B,EAAA5vB,EAAA4I,EAAA,EAAA,GAIA,OAAAoQ,MAIAqvC,SAAA,SAAA16C,GAEA,SAAA66C,EAAAC,QAEA3iD,IAAA2iD,GAEAC,WAAAD,GAAA,GAEAv4C,QAAAC,KAAA,mCAAAxC,EAAA,qBAOA,IAAAnH,EAEA,GAAAA,EAAA,kCAAAuG,KAAAY,GAAA,CAIA,IAAAo6C,EAEAY,EAAAniD,EAAA,GAEA,OAHAA,EAAA,IAKA,IAAA,MACA,IAAA,OAEA,GAAAuhD,EAAA,gEAAAh7C,KAAA47C,GASA,OANA3vC,KAAA7Z,EAAAsI,KAAAqM,IAAA,IAAA80C,SAAAb,EAAA,GAAA,KAAA,IACA/uC,KAAAge,EAAAvvB,KAAAqM,IAAA,IAAA80C,SAAAb,EAAA,GAAA,KAAA,IACA/uC,KAAAtU,EAAA+C,KAAAqM,IAAA,IAAA80C,SAAAb,EAAA,GAAA,KAAA,IAEAS,EAAAT,EAAA,IAEA/uC,KAIA,GAAA+uC,EAAA,sEAAAh7C,KAAA47C,GASA,OANA3vC,KAAA7Z,EAAAsI,KAAAqM,IAAA,IAAA80C,SAAAb,EAAA,GAAA,KAAA,IACA/uC,KAAAge,EAAAvvB,KAAAqM,IAAA,IAAA80C,SAAAb,EAAA,GAAA,KAAA,IACA/uC,KAAAtU,EAAA+C,KAAAqM,IAAA,IAAA80C,SAAAb,EAAA,GAAA,KAAA,IAEAS,EAAAT,EAAA,IAEA/uC,KAIA,MAEA,IAAA,MACA,IAAA,OAEA,GAAA+uC,EAAA,gFAAAh7C,KAAA47C,GAAA,CAGA,IAAA//C,EAAA8/C,WAAAX,EAAA,IAAA,IACA3lD,EAAAwmD,SAAAb,EAAA,GAAA,IAAA,IACA9+C,EAAA2/C,SAAAb,EAAA,GAAA,IAAA,IAIA,OAFAS,EAAAT,EAAA,IAEA/uC,KAAAuvC,OAAA3/C,EAAAxG,EAAA6G,UAQA,GAAAzC,EAAA,qBAAAuG,KAAAY,GAAA,CAIA,IAAA26C,EAAA9hD,EAAA,GACAsuC,EAAAwT,EAAAnoD,OAEA,GAAA,IAAA20C,EAOA,OAJA97B,KAAA7Z,EAAAypD,SAAAN,EAAAO,OAAA,GAAAP,EAAAO,OAAA,GAAA,IAAA,IACA7vC,KAAAge,EAAA4xB,SAAAN,EAAAO,OAAA,GAAAP,EAAAO,OAAA,GAAA,IAAA,IACA7vC,KAAAtU,EAAAkkD,SAAAN,EAAAO,OAAA,GAAAP,EAAAO,OAAA,GAAA,IAAA,IAEA7vC,KAEA,GAAA,IAAA87B,EAOA,OAJA97B,KAAA7Z,EAAAypD,SAAAN,EAAAO,OAAA,GAAAP,EAAAO,OAAA,GAAA,IAAA,IACA7vC,KAAAge,EAAA4xB,SAAAN,EAAAO,OAAA,GAAAP,EAAAO,OAAA,GAAA,IAAA,IACA7vC,KAAAtU,EAAAkkD,SAAAN,EAAAO,OAAA,GAAAP,EAAAO,OAAA,GAAA,IAAA,IAEA7vC,KAMA,OAAArL,GAAAA,EAAAxN,OAAA,EAEA6Y,KAAA8vC,aAAAn7C,GAIAqL,MAIA8vC,aAAA,SAAAn7C,GAGA,IAAA26C,EAAApK,GAAAvwC,GAcA,YAZA7H,IAAAwiD,EAGAtvC,KAAAovC,OAAAE,GAKAp4C,QAAAC,KAAA,8BAAAxC,GAIAqL,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,YAAArY,KAAA7Z,EAAA6Z,KAAAge,EAAAhe,KAAAtU,IAIAU,KAAA,SAAA2iD,GAMA,OAJA/uC,KAAA7Z,EAAA4oD,EAAA5oD,EACA6Z,KAAAge,EAAA+wB,EAAA/wB,EACAhe,KAAAtU,EAAAqjD,EAAArjD,EAEAsU,MAIA+vC,kBAAA,SAAAhB,EAAAiB,GAQA,YANAljD,IAAAkjD,IAAAA,EAAA,GAEAhwC,KAAA7Z,EAAAsI,KAAAub,IAAA+kC,EAAA5oD,EAAA6pD,GACAhwC,KAAAge,EAAAvvB,KAAAub,IAAA+kC,EAAA/wB,EAAAgyB,GACAhwC,KAAAtU,EAAA+C,KAAAub,IAAA+kC,EAAArjD,EAAAskD,GAEAhwC,MAIAiwC,kBAAA,SAAAlB,EAAAiB,QAEAljD,IAAAkjD,IAAAA,EAAA,GAEA,IAAAE,EAAAF,EAAA,EAAA,EAAAA,EAAA,EAMA,OAJAhwC,KAAA7Z,EAAAsI,KAAAub,IAAA+kC,EAAA5oD,EAAA+pD,GACAlwC,KAAAge,EAAAvvB,KAAAub,IAAA+kC,EAAA/wB,EAAAkyB,GACAlwC,KAAAtU,EAAA+C,KAAAub,IAAA+kC,EAAArjD,EAAAwkD,GAEAlwC,MAIAmwC,qBAAA,SAAAH,GAIA,OAFAhwC,KAAA+vC,kBAAA/vC,KAAAgwC,GAEAhwC,MAIAowC,qBAAA,SAAAJ,GAIA,OAFAhwC,KAAAiwC,kBAAAjwC,KAAAgwC,GAEAhwC,MAIAqwC,iBAAA,SAAAtB,GAMA,OAJA/uC,KAAA7Z,EAAAyoD,GAAAG,EAAA5oD,GACA6Z,KAAAge,EAAA4wB,GAAAG,EAAA/wB,GACAhe,KAAAtU,EAAAkjD,GAAAG,EAAArjD,GAEAsU,MAIAswC,iBAAA,SAAAvB,GAMA,OAJA/uC,KAAA7Z,EAAA0oD,GAAAE,EAAA5oD,GACA6Z,KAAAge,EAAA6wB,GAAAE,EAAA/wB,GACAhe,KAAAtU,EAAAmjD,GAAAE,EAAArjD,GAEAsU,MAIAuwC,oBAAA,WAIA,OAFAvwC,KAAAqwC,iBAAArwC,MAEAA,MAIAwwC,oBAAA,WAIA,OAFAxwC,KAAAswC,iBAAAtwC,MAEAA,MAIAywC,OAAA,WAEA,OAAA,IAAAzwC,KAAA7Z,GAAA,GAAA,IAAA6Z,KAAAge,GAAA,EAAA,IAAAhe,KAAAtU,GAAA,GAIAglD,aAAA,WAEA,OAAA,SAAA1wC,KAAAywC,SAAA5lD,SAAA,KAAAM,OAAA,IAIAwlD,OAAA,SAAA/nD,QAIAkE,IAAAlE,IAEAsO,QAAAC,KAAA,iDACAvO,EAAA,CAAAgH,EAAA,EAAAxG,EAAA,EAAA6G,EAAA,IAIA,IAKA2gD,EAAAC,EALA1qD,EAAA6Z,KAAA7Z,EAAA63B,EAAAhe,KAAAge,EAAAtyB,EAAAsU,KAAAtU,EAEAqG,EAAAtD,KAAAsD,IAAA5L,EAAA63B,EAAAtyB,GACAoP,EAAArM,KAAAqM,IAAA3U,EAAA63B,EAAAtyB,GAGAolD,GAAAh2C,EAAA/I,GAAA,EAEA,GAAA+I,IAAA/I,EAEA6+C,EAAA,EACAC,EAAA,MAEA,CAEA,IAAA3O,EAAAnwC,EAAA+I,EAIA,OAFA+1C,EAAAC,GAAA,GAAA5O,GAAAnwC,EAAA+I,GAAAonC,GAAA,EAAAnwC,EAAA+I,GAEA/I,GAEA,KAAA5L,EAAAyqD,GAAA5yB,EAAAtyB,GAAAw2C,GAAAlkB,EAAAtyB,EAAA,EAAA,GAAA,MACA,KAAAsyB,EAAA4yB,GAAAllD,EAAAvF,GAAA+7C,EAAA,EAAA,MACA,KAAAx2C,EAAAklD,GAAAzqD,EAAA63B,GAAAkkB,EAAA,EAIA0O,GAAA,EAQA,OAJAhoD,EAAAgH,EAAAghD,EACAhoD,EAAAQ,EAAAynD,EACAjoD,EAAAqH,EAAA6gD,EAEAloD,GAIAmoD,SAAA,WAEA,MAAA,QAAA,IAAA/wC,KAAA7Z,EAAA,GAAA,KAAA,IAAA6Z,KAAAge,EAAA,GAAA,KAAA,IAAAhe,KAAAtU,EAAA,GAAA,KAIAslD,UAAA,SAAAphD,EAAAxG,EAAA6G,GAQA,OANA+P,KAAA2wC,OAAApC,IAEAA,GAAA3+C,GAAAA,EAAA2+C,GAAAnlD,GAAAA,EAAAmlD,GAAAt+C,GAAAA,EAEA+P,KAAAuvC,OAAAhB,GAAA3+C,EAAA2+C,GAAAnlD,EAAAmlD,GAAAt+C,GAEA+P,MAIAuY,IAAA,SAAAw2B,GAMA,OAJA/uC,KAAA7Z,GAAA4oD,EAAA5oD,EACA6Z,KAAAge,GAAA+wB,EAAA/wB,EACAhe,KAAAtU,GAAAqjD,EAAArjD,EAEAsU,MAIAixC,UAAA,SAAAC,EAAAC,GAMA,OAJAnxC,KAAA7Z,EAAA+qD,EAAA/qD,EAAAgrD,EAAAhrD,EACA6Z,KAAAge,EAAAkzB,EAAAlzB,EAAAmzB,EAAAnzB,EACAhe,KAAAtU,EAAAwlD,EAAAxlD,EAAAylD,EAAAzlD,EAEAsU,MAIA0Y,UAAA,SAAAtvB,GAMA,OAJA4W,KAAA7Z,GAAAiD,EACA4W,KAAAge,GAAA50B,EACA4W,KAAAtU,GAAAtC,EAEA4W,MAIA4Y,IAAA,SAAAm2B,GAMA,OAJA/uC,KAAA7Z,EAAAsI,KAAAsD,IAAA,EAAAiO,KAAA7Z,EAAA4oD,EAAA5oD,GACA6Z,KAAAge,EAAAvvB,KAAAsD,IAAA,EAAAiO,KAAAge,EAAA+wB,EAAA/wB,GACAhe,KAAAtU,EAAA+C,KAAAsD,IAAA,EAAAiO,KAAAtU,EAAAqjD,EAAArjD,GAEAsU,MAIA+Y,SAAA,SAAAg2B,GAMA,OAJA/uC,KAAA7Z,GAAA4oD,EAAA5oD,EACA6Z,KAAAge,GAAA+wB,EAAA/wB,EACAhe,KAAAtU,GAAAqjD,EAAArjD,EAEAsU,MAIAgZ,eAAA,SAAA5vB,GAMA,OAJA4W,KAAA7Z,GAAAiD,EACA4W,KAAAge,GAAA50B,EACA4W,KAAAtU,GAAAtC,EAEA4W,MAIAyV,KAAA,SAAAs5B,EAAAv0B,GAMA,OAJAxa,KAAA7Z,IAAA4oD,EAAA5oD,EAAA6Z,KAAA7Z,GAAAq0B,EACAxa,KAAAge,IAAA+wB,EAAA/wB,EAAAhe,KAAAge,GAAAxD,EACAxa,KAAAtU,IAAAqjD,EAAArjD,EAAAsU,KAAAtU,GAAA8uB,EAEAxa,MAIAoxC,QAAA,SAAArC,EAAAv0B,GAEAxa,KAAA2wC,OAAApC,IACAQ,EAAA4B,OAAAnC,IAEA,IAAA5+C,EAAA2kB,GAAAkB,KAAA84B,GAAA3+C,EAAA4+C,GAAA5+C,EAAA4qB,GACApxB,EAAAmrB,GAAAkB,KAAA84B,GAAAnlD,EAAAolD,GAAAplD,EAAAoxB,GACAvqB,EAAAskB,GAAAkB,KAAA84B,GAAAt+C,EAAAu+C,GAAAv+C,EAAAuqB,GAIA,OAFAxa,KAAAuvC,OAAA3/C,EAAAxG,EAAA6G,GAEA+P,MAIA4a,OAAA,SAAAl0B,GAEA,OAAAA,EAAAP,IAAA6Z,KAAA7Z,GAAAO,EAAAs3B,IAAAhe,KAAAge,GAAAt3B,EAAAgF,IAAAsU,KAAAtU,GAIAmvB,UAAA,SAAAzG,EAAA0G,GAQA,YANAhuB,IAAAguB,IAAAA,EAAA,GAEA9a,KAAA7Z,EAAAiuB,EAAA0G,GACA9a,KAAAge,EAAA5J,EAAA0G,EAAA,GACA9a,KAAAtU,EAAA0oB,EAAA0G,EAAA,GAEA9a,MAIA+a,QAAA,SAAA3G,EAAA0G,GASA,YAPAhuB,IAAAsnB,IAAAA,EAAA,SACAtnB,IAAAguB,IAAAA,EAAA,GAEA1G,EAAA0G,GAAA9a,KAAA7Z,EACAiuB,EAAA0G,EAAA,GAAA9a,KAAAge,EACA5J,EAAA0G,EAAA,GAAA9a,KAAAtU,EAEA0oB,GAIA4G,oBAAA,SAAAC,EAAA5Q,GAgBA,OAdArK,KAAA7Z,EAAA80B,EAAAC,KAAA7Q,GACArK,KAAAge,EAAA/C,EAAAE,KAAA9Q,GACArK,KAAAtU,EAAAuvB,EAAA4J,KAAAxa,IAEA,IAAA4Q,EAAAo2B,aAIArxC,KAAA7Z,GAAA,IACA6Z,KAAAge,GAAA,IACAhe,KAAAtU,GAAA,KAIAsU,MAIA6iB,OAAA,WAEA,OAAA7iB,KAAAywC,YAMAhC,GAAA6C,MAAApM,GAuBA39C,OAAAM,OAAAinD,GAAArnD,UAAA,CAEA2wB,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAvD,GAEAmX,KAAAnZ,EAAAgC,EAAAhC,EACAmZ,KAAAtU,EAAA7C,EAAA6C,EACAsU,KAAAtZ,EAAAmC,EAAAnC,EAEAsZ,KAAAyrB,OAAAr/B,KAAAvD,EAAA4iC,QACAzrB,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OAEA/uC,KAAAgvC,cAAAnmD,EAAAmmD,cAEA,IAAA,IAAAxoD,EAAA,EAAAm1C,EAAA9yC,EAAAomD,cAAA9nD,OAAAX,EAAAm1C,EAAAn1C,IAEAwZ,KAAAivC,cAAAzoD,GAAAqC,EAAAomD,cAAAzoD,GAAA4xB,QAIA,IAAA,IAAA4gB,EAAA,EAAAuY,EAAA1oD,EAAAsmD,aAAAhoD,OAAA6xC,EAAAuY,EAAAvY,IAEAh5B,KAAAmvC,aAAAnW,GAAAnwC,EAAAsmD,aAAAnW,GAAA5gB,QAIA,OAAApY,QAWA,IAAAwxC,GAAA,EAEA,SAAAC,KAEAlqD,OAAA6iB,eAAApK,KAAA,KAAA,CAAA9T,MAAAslD,OAEAxxC,KAAA2gB,KAAApM,GAAAI,eAEA3U,KAAA7J,KAAA,GACA6J,KAAAnM,KAAA,WAEAmM,KAAAk1B,KAAA,EAEAl1B,KAAA0xC,SAAAzmC,EACAjL,KAAA2xC,KAAA9mC,EACA7K,KAAA4xC,aAAA,EACA5xC,KAAAmvC,cAAA,EAEAnvC,KAAA6xC,QAAA,EACA7xC,KAAA8xC,aAAA,EAEA9xC,KAAA+xC,SAAAhmC,EACA/L,KAAAgyC,SAAAhmC,EACAhM,KAAAiyC,cAAA3mC,EACAtL,KAAAkyC,cAAA,KACAlyC,KAAAmyC,cAAA,KACAnyC,KAAAoyC,mBAAA,KAEApyC,KAAAqyC,UAAA5lC,EACAzM,KAAAsyC,WAAA,EACAtyC,KAAAuyC,YAAA,EAEAvyC,KAAAwyC,iBAAA,IACAxyC,KAAAyyC,YAAAj/B,GACAxT,KAAA0yC,WAAA,EACA1yC,KAAA2yC,gBAAA,IACA3yC,KAAA4yC,YAAAr/B,GACAvT,KAAA6yC,aAAAt/B,GACAvT,KAAA8yC,aAAAv/B,GACAvT,KAAA+yC,cAAA,EAEA/yC,KAAAgzC,eAAA,KACAhzC,KAAAizC,kBAAA,EACAjzC,KAAAkzC,aAAA,EAEAlzC,KAAAmzC,WAAA,KAEAnzC,KAAAozC,YAAA,EAEApzC,KAAAnH,UAAA,KAEAmH,KAAAqzC,eAAA,EACArzC,KAAAszC,oBAAA,EACAtzC,KAAAuzC,mBAAA,EAEAvzC,KAAAwzC,WAAA,EAEAxzC,KAAAyzC,UAAA,EACAzzC,KAAA0zC,oBAAA,EAEA1zC,KAAAy0B,SAAA,EAEAz0B,KAAA2zC,YAAA,EAEA3zC,KAAA80B,SAAA,GAEA90B,KAAAshB,QAAA,EA6ZA,SAAAsyB,GAAA/a,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,oBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,UAEAzuC,KAAA7X,IAAA,KAEA6X,KAAA6zC,SAAA,KACA7zC,KAAA8zC,kBAAA,EAEA9zC,KAAA+zC,MAAA,KACA/zC,KAAAg0C,eAAA,EAEAh0C,KAAAi0C,YAAA,KAEAj0C,KAAAk0C,SAAA,KAEAl0C,KAAAm0C,OAAA,KACAn0C,KAAAo0C,QAAAtnC,EACA9M,KAAAq0C,aAAA,EACAr0C,KAAAs0C,gBAAA,IAEAt0C,KAAAu0C,WAAA,EACAv0C,KAAAw0C,mBAAA,EACAx0C,KAAAy0C,iBAAA,QACAz0C,KAAA00C,kBAAA,QAEA10C,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EAEA50C,KAAA60C,UAAAhc,GA1bA4Y,GAAAhqD,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA/O,GAAAlsB,WAAA,CAEA4wB,YAAAo5B,GAEAqD,YAAA,EAEAC,gBAAA,aAEAC,sBAAA,WAEA,OAAAh1C,KAAA+0C,gBAAAlqD,YAIAgqD,UAAA,SAAAxb,GAEA,QAAAvsC,IAAAusC,EAEA,IAAA,IAAA/vC,KAAA+vC,EAAA,CAEA,IAAA4b,EAAA5b,EAAA/vC,GAEA,QAAAwD,IAAAmoD,EAQA,GAAA,YAAA3rD,EAAA,CAQA,IAAA4rD,EAAAl1C,KAAA1W,QAEAwD,IAAAooD,EAOAA,GAAAA,EAAAhG,QAEAgG,EAAA19B,IAAAy9B,GAEAC,GAAAA,EAAA3rB,WAAA0rB,GAAAA,EAAA1rB,UAEA2rB,EAAA9oD,KAAA6oD,GAIAj1C,KAAA1W,GAAA2rD,EAfA/9C,QAAAC,KAAA,SAAA6I,KAAAnM,KAAA,MAAAvK,EAAA,8CAVA4N,QAAAC,KAAA,SAAA6I,KAAAnM,KAAA,sEACAmM,KAAA4xC,YA1hRA,IA0hRAqD,OATA/9C,QAAAC,KAAA,oBAAA7N,EAAA,+BAyCAu5B,OAAA,SAAAC,GAEA,IAAAqyB,OAAAroD,IAAAg2B,GAAA,iBAAAA,EAEAqyB,IAEAryB,EAAA,CACAE,SAAA,GACAI,OAAA,KAKA,IAAAtgB,EAAA,CACAmgB,SAAA,CACA3B,QAAA,IACAztB,KAAA,WACAqvB,UAAA,oBA+JA,SAAAiW,EAAA1uC,GAEA,IAAA4uC,EAAA,GAEA,IAAA,IAAA/vC,KAAAmB,EAAA,CAEA,IAAAqY,EAAArY,EAAAnB,UACAwZ,EAAAmgB,SACAoW,EAAA1uC,KAAAmY,GAIA,OAAAu2B,EAIA,GA1KAv2B,EAAA6d,KAAA3gB,KAAA2gB,KACA7d,EAAAjP,KAAAmM,KAAAnM,KAEA,KAAAmM,KAAA7J,OAAA2M,EAAA3M,KAAA6J,KAAA7J,MAEA6J,KAAA+uC,OAAA/uC,KAAA+uC,MAAAG,UAAApsC,EAAAisC,MAAA/uC,KAAA+uC,MAAA0B,eAEA3jD,IAAAkT,KAAAo1C,YAAAtyC,EAAAsyC,UAAAp1C,KAAAo1C,gBACAtoD,IAAAkT,KAAAq1C,YAAAvyC,EAAAuyC,UAAAr1C,KAAAq1C,WAEAr1C,KAAAs1C,OAAAt1C,KAAAs1C,MAAApG,UAAApsC,EAAAwyC,MAAAt1C,KAAAs1C,MAAA7E,UACAzwC,KAAAu1C,UAAAv1C,KAAAu1C,SAAArG,UAAApsC,EAAAyyC,SAAAv1C,KAAAu1C,SAAA9E,UACAzwC,KAAAw1C,mBAAA,IAAAx1C,KAAAw1C,oBAAA1yC,EAAA0yC,kBAAAx1C,KAAAw1C,mBAEAx1C,KAAAy1C,UAAAz1C,KAAAy1C,SAAAvG,UAAApsC,EAAA2yC,SAAAz1C,KAAAy1C,SAAAhF,eACA3jD,IAAAkT,KAAA01C,YAAA5yC,EAAA4yC,UAAA11C,KAAA01C,gBACA5oD,IAAAkT,KAAA21C,YAAA7yC,EAAA6yC,UAAA31C,KAAA21C,gBACA7oD,IAAAkT,KAAA41C,qBAAA9yC,EAAA8yC,mBAAA51C,KAAA41C,oBAEA51C,KAAA61C,cAAA71C,KAAA61C,aAAAlzB,YAEA7f,EAAA+yC,aAAA71C,KAAA61C,aAAAhzB,OAAAC,GAAAnC,MAIA3gB,KAAA81C,uBAAA91C,KAAA81C,sBAAAnzB,YAEA7f,EAAAgzC,sBAAA91C,KAAA81C,sBAAAjzB,OAAAC,GAAAnC,MAIA3gB,KAAA+1C,oBAAA/1C,KAAA+1C,mBAAApzB,YAEA7f,EAAAizC,mBAAA/1C,KAAA+1C,mBAAAlzB,OAAAC,GAAAnC,KACA7d,EAAAkzC,qBAAAh2C,KAAAg2C,qBAAAj7B,WAIA/a,KAAA7X,KAAA6X,KAAA7X,IAAAw6B,YAAA7f,EAAA3a,IAAA6X,KAAA7X,IAAA06B,OAAAC,GAAAnC,MACA3gB,KAAAi2C,QAAAj2C,KAAAi2C,OAAAtzB,YAAA7f,EAAAmzC,OAAAj2C,KAAAi2C,OAAApzB,OAAAC,GAAAnC,MACA3gB,KAAAk0C,UAAAl0C,KAAAk0C,SAAAvxB,YAAA7f,EAAAoxC,SAAAl0C,KAAAk0C,SAAArxB,OAAAC,GAAAnC,MACA3gB,KAAA6zC,UAAA7zC,KAAA6zC,SAAAlxB,YAAA7f,EAAA+wC,SAAA7zC,KAAA6zC,SAAAhxB,OAAAC,GAAAnC,MAEA3gB,KAAA+zC,OAAA/zC,KAAA+zC,MAAApxB,YAEA7f,EAAAixC,MAAA/zC,KAAA+zC,MAAAlxB,OAAAC,GAAAnC,KACA7d,EAAAkxC,eAAAh0C,KAAAg0C,gBAIAh0C,KAAAk2C,SAAAl2C,KAAAk2C,QAAAvzB,YAEA7f,EAAAozC,QAAAl2C,KAAAk2C,QAAArzB,OAAAC,GAAAnC,KACA7d,EAAAqzC,UAAAn2C,KAAAm2C,WAIAn2C,KAAAo2C,WAAAp2C,KAAAo2C,UAAAzzB,YAEA7f,EAAAszC,UAAAp2C,KAAAo2C,UAAAvzB,OAAAC,GAAAnC,KACA7d,EAAAuzC,cAAAr2C,KAAAq2C,cACAvzC,EAAAwzC,YAAAt2C,KAAAs2C,YAAAv7B,WAIA/a,KAAAu2C,iBAAAv2C,KAAAu2C,gBAAA5zB,YAEA7f,EAAAyzC,gBAAAv2C,KAAAu2C,gBAAA1zB,OAAAC,GAAAnC,KACA7d,EAAA0zC,kBAAAx2C,KAAAw2C,kBACA1zC,EAAA2zC,iBAAAz2C,KAAAy2C,kBAIAz2C,KAAA02C,cAAA12C,KAAA02C,aAAA/zB,YAAA7f,EAAA4zC,aAAA12C,KAAA02C,aAAA7zB,OAAAC,GAAAnC,MACA3gB,KAAA22C,cAAA32C,KAAA22C,aAAAh0B,YAAA7f,EAAA6zC,aAAA32C,KAAA22C,aAAA9zB,OAAAC,GAAAnC,MAEA3gB,KAAA42C,aAAA52C,KAAA42C,YAAAj0B,YAAA7f,EAAA8zC,YAAA52C,KAAA42C,YAAA/zB,OAAAC,GAAAnC,MACA3gB,KAAAi0C,aAAAj0C,KAAAi0C,YAAAtxB,YAAA7f,EAAAmxC,YAAAj0C,KAAAi0C,YAAApxB,OAAAC,GAAAnC,MAEA3gB,KAAAm0C,QAAAn0C,KAAAm0C,OAAAxxB,YAEA7f,EAAAqxC,OAAAn0C,KAAAm0C,OAAAtxB,OAAAC,GAAAnC,KACA7d,EAAAuxC,aAAAr0C,KAAAq0C,aACAvxC,EAAAwxC,gBAAAt0C,KAAAs0C,qBAEAxnD,IAAAkT,KAAAo0C,UAAAtxC,EAAAsxC,QAAAp0C,KAAAo0C,cACAtnD,IAAAkT,KAAA62C,kBAAA/zC,EAAA+zC,gBAAA72C,KAAA62C,kBAIA72C,KAAA82C,aAAA92C,KAAA82C,YAAAn0B,YAEA7f,EAAAg0C,YAAA92C,KAAA82C,YAAAj0B,OAAAC,GAAAnC,WAIA7zB,IAAAkT,KAAA87B,OAAAh5B,EAAAg5B,KAAA97B,KAAA87B,WACAhvC,IAAAkT,KAAA+2C,kBAAAj0C,EAAAi0C,gBAAA/2C,KAAA+2C,iBAEA/2C,KAAA0xC,WAAAzmC,IAAAnI,EAAA4uC,SAAA1xC,KAAA0xC,WACA,IAAA1xC,KAAA4xC,cAAA9uC,EAAA8uC,YAAA5xC,KAAA4xC,aACA5xC,KAAA2xC,OAAA9mC,IAAA/H,EAAA6uC,KAAA3xC,KAAA2xC,MACA3xC,KAAAmvC,eAAArsC,EAAAqsC,cAAA,GAEAnvC,KAAA6xC,QAAA,IAAA/uC,EAAA+uC,QAAA7xC,KAAA6xC,UACA,IAAA7xC,KAAA8xC,cAAAhvC,EAAAgvC,YAAA9xC,KAAA8xC,aAEAhvC,EAAAuvC,UAAAryC,KAAAqyC,UACAvvC,EAAAwvC,UAAAtyC,KAAAsyC,UACAxvC,EAAAyvC,WAAAvyC,KAAAuyC,WAEAzvC,EAAAiwC,aAAA/yC,KAAA+yC,aACAjwC,EAAA0vC,iBAAAxyC,KAAAwyC,iBACA1vC,EAAA2vC,YAAAzyC,KAAAyyC,YACA3vC,EAAA4vC,WAAA1yC,KAAA0yC,WACA5vC,EAAA6vC,gBAAA3yC,KAAA2yC,gBACA7vC,EAAA8vC,YAAA5yC,KAAA4yC,YACA9vC,EAAA+vC,aAAA7yC,KAAA6yC,aACA/vC,EAAAgwC,aAAA9yC,KAAA8yC,aAGA9yC,KAAAmf,UAAA,IAAAnf,KAAAmf,WAAArc,EAAAqc,SAAAnf,KAAAmf,WAEA,IAAAnf,KAAAqzC,gBAAAvwC,EAAAuwC,eAAA,GACA,IAAArzC,KAAAszC,sBAAAxwC,EAAAwwC,oBAAAtzC,KAAAszC,qBACA,IAAAtzC,KAAAuzC,qBAAAzwC,EAAAywC,mBAAAvzC,KAAAuzC,oBAEAvzC,KAAAg3C,WAAA,IAAAh3C,KAAAg3C,YAAAl0C,EAAAk0C,UAAAh3C,KAAAg3C,gBACAlqD,IAAAkT,KAAAi3C,WAAAn0C,EAAAm0C,SAAAj3C,KAAAi3C,eACAnqD,IAAAkT,KAAAk3C,UAAAp0C,EAAAo0C,QAAAl3C,KAAAk3C,cACApqD,IAAAkT,KAAAsE,QAAAxB,EAAAwB,MAAAtE,KAAAsE,QAEA,IAAAtE,KAAAwzC,YAAA1wC,EAAA0wC,WAAA,GAEAxzC,KAAAyzC,UAAA,IAAA3wC,EAAA2wC,UAAAzzC,KAAAyzC,YACA,IAAAzzC,KAAA0zC,qBAAA5wC,EAAA4wC,mBAAA1zC,KAAA0zC,qBAEA,IAAA1zC,KAAAu0C,YAAAzxC,EAAAyxC,UAAAv0C,KAAAu0C,WACAv0C,KAAAw0C,mBAAA,IAAA1xC,EAAA0xC,mBAAAx0C,KAAAw0C,oBACA,UAAAx0C,KAAAy0C,mBAAA3xC,EAAA2xC,iBAAAz0C,KAAAy0C,kBACA,UAAAz0C,KAAA00C,oBAAA5xC,EAAA4xC,kBAAA10C,KAAA00C,oBAEA,IAAA10C,KAAA40C,eAAA9xC,EAAA8xC,cAAA,IACA,IAAA50C,KAAAm3C,eAAAr0C,EAAAq0C,cAAA,IACA,IAAAn3C,KAAA20C,WAAA7xC,EAAA6xC,UAAA,IAEA,IAAA30C,KAAAy0B,UAAA3xB,EAAA2xB,SAAA,IAEA,IAAAz0B,KAAA2zC,aAAA7wC,EAAA6wC,YAAA,GAEA,OAAAvb,KAAAC,UAAAr4B,KAAA80B,YAAAhyB,EAAAgyB,SAAA90B,KAAA80B,UAoBAqgB,EAAA,CAEA,IAAAnyB,EAAAmW,EAAArW,EAAAE,UACAI,EAAA+V,EAAArW,EAAAM,QAEAJ,EAAA77B,OAAA,IAAA2b,EAAAkgB,SAAAA,GACAI,EAAAj8B,OAAA,IAAA2b,EAAAsgB,OAAAA,GAIA,OAAAtgB,GAIAsV,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAvD,GAEAmX,KAAA7J,KAAAtN,EAAAsN,KAEA6J,KAAAk1B,IAAArsC,EAAAqsC,IAEAl1B,KAAA0xC,SAAA7oD,EAAA6oD,SACA1xC,KAAA2xC,KAAA9oD,EAAA8oD,KACA3xC,KAAA4xC,YAAA/oD,EAAA+oD,YACA5xC,KAAAmvC,aAAAtmD,EAAAsmD,aAEAnvC,KAAA6xC,QAAAhpD,EAAAgpD,QACA7xC,KAAA8xC,YAAAjpD,EAAAipD,YAEA9xC,KAAA+xC,SAAAlpD,EAAAkpD,SACA/xC,KAAAgyC,SAAAnpD,EAAAmpD,SACAhyC,KAAAiyC,cAAAppD,EAAAopD,cACAjyC,KAAAkyC,cAAArpD,EAAAqpD,cACAlyC,KAAAmyC,cAAAtpD,EAAAspD,cACAnyC,KAAAoyC,mBAAAvpD,EAAAupD,mBAEApyC,KAAAqyC,UAAAxpD,EAAAwpD,UACAryC,KAAAsyC,UAAAzpD,EAAAypD,UACAtyC,KAAAuyC,WAAA1pD,EAAA0pD,WAEAvyC,KAAAwyC,iBAAA3pD,EAAA2pD,iBACAxyC,KAAAyyC,YAAA5pD,EAAA4pD,YACAzyC,KAAA0yC,WAAA7pD,EAAA6pD,WACA1yC,KAAA2yC,gBAAA9pD,EAAA8pD,gBACA3yC,KAAA4yC,YAAA/pD,EAAA+pD,YACA5yC,KAAA6yC,aAAAhqD,EAAAgqD,aACA7yC,KAAA8yC,aAAAjqD,EAAAiqD,aACA9yC,KAAA+yC,aAAAlqD,EAAAkqD,aAEA,IAAAqE,EAAAvuD,EAAAmqD,eACAqE,EAAA,KAEA,GAAA,OAAAD,EAAA,CAEA,IAAA/wD,EAAA+wD,EAAAjwD,OACAkwD,EAAA,IAAAnsD,MAAA7E,GAEA,IAAA,IAAAG,EAAA,EAAAA,IAAAH,IAAAG,EAEA6wD,EAAA7wD,GAAA4wD,EAAA5wD,GAAA4xB,QA+BA,OAzBApY,KAAAgzC,eAAAqE,EACAr3C,KAAAizC,iBAAApqD,EAAAoqD,iBACAjzC,KAAAkzC,YAAArqD,EAAAqqD,YAEAlzC,KAAAmzC,WAAAtqD,EAAAsqD,WAEAnzC,KAAAozC,WAAAvqD,EAAAuqD,WAEApzC,KAAAnH,UAAAhQ,EAAAgQ,UAEAmH,KAAAqzC,cAAAxqD,EAAAwqD,cACArzC,KAAAszC,oBAAAzqD,EAAAyqD,oBACAtzC,KAAAuzC,mBAAA1qD,EAAA0qD,mBAEAvzC,KAAAwzC,UAAA3qD,EAAA2qD,UAEAxzC,KAAAyzC,UAAA5qD,EAAA4qD,UACAzzC,KAAA0zC,mBAAA7qD,EAAA6qD,mBAEA1zC,KAAAy0B,QAAA5rC,EAAA4rC,QAEAz0B,KAAA2zC,WAAA9qD,EAAA8qD,WAEA3zC,KAAA80B,SAAAsD,KAAAmB,MAAAnB,KAAAC,UAAAxvC,EAAAisC,WAEA90B,MAIAY,QAAA,WAEAZ,KAAAkU,cAAA,CAAArgB,KAAA,eAMAtM,OAAA6iB,eAAAqnC,GAAAhqD,UAAA,cAAA,CAEA+vB,IAAA,SAAAtrB,IAEA,IAAAA,GAAA8T,KAAAshB,cA8EAsyB,GAAAnsD,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAu7B,GAEAA,GAAAnsD,UAAA6vD,qBAAA,EAEA1D,GAAAnsD,UAAA2E,KAAA,SAAAvD,GA+BA,OA7BA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OAEA/uC,KAAA7X,IAAAU,EAAAV,IAEA6X,KAAA6zC,SAAAhrD,EAAAgrD,SACA7zC,KAAA8zC,kBAAAjrD,EAAAirD,kBAEA9zC,KAAA+zC,MAAAlrD,EAAAkrD,MACA/zC,KAAAg0C,eAAAnrD,EAAAmrD,eAEAh0C,KAAAi0C,YAAAprD,EAAAorD,YAEAj0C,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAAm0C,OAAAtrD,EAAAsrD,OACAn0C,KAAAo0C,QAAAvrD,EAAAurD,QACAp0C,KAAAq0C,aAAAxrD,EAAAwrD,aACAr0C,KAAAs0C,gBAAAzrD,EAAAyrD,gBAEAt0C,KAAAu0C,UAAA1rD,EAAA0rD,UACAv0C,KAAAw0C,mBAAA3rD,EAAA2rD,mBACAx0C,KAAAy0C,iBAAA5rD,EAAA4rD,iBACAz0C,KAAA00C,kBAAA7rD,EAAA6rD,kBAEA10C,KAAA20C,SAAA9rD,EAAA8rD,SACA30C,KAAA40C,aAAA/rD,EAAA+rD,aAEA50C,MAQA,IAAAu3C,GAAA,IAAAluB,GACAmuB,GAAA,IAAA//B,GAEA,SAAAggC,GAAArjC,EAAAsjC,EAAArG,GAEA,GAAAnmD,MAAA6B,QAAAqnB,GAEA,MAAA,IAAAlrB,UAAA,yDAIA8W,KAAA7J,KAAA,GAEA6J,KAAAoU,MAAAA,EACApU,KAAA03C,SAAAA,EACA13C,KAAAu4B,WAAAzrC,IAAAsnB,EAAAA,EAAAjtB,OAAAuwD,EAAA,EACA13C,KAAAqxC,YAAA,IAAAA,EAEArxC,KAAA23C,MAAAlkC,GACAzT,KAAA43C,YAAA,CAAA98B,OAAA,EAAAyd,OAAA,GAEAv4B,KAAAshB,QAAA,EAgYA,SAAAu2B,GAAAzjC,EAAAsjC,EAAArG,GAEAoG,GAAAvwD,KAAA8Y,KAAA,IAAA83C,UAAA1jC,GAAAsjC,EAAArG,GAQA,SAAA0G,GAAA3jC,EAAAsjC,EAAArG,GAEAoG,GAAAvwD,KAAA8Y,KAAA,IAAA5L,WAAAggB,GAAAsjC,EAAArG,GAQA,SAAA2G,GAAA5jC,EAAAsjC,EAAArG,GAEAoG,GAAAvwD,KAAA8Y,KAAA,IAAAi4C,kBAAA7jC,GAAAsjC,EAAArG,GAQA,SAAA6G,GAAA9jC,EAAAsjC,EAAArG,GAEAoG,GAAAvwD,KAAA8Y,KAAA,IAAAm4C,WAAA/jC,GAAAsjC,EAAArG,GAQA,SAAA+G,GAAAhkC,EAAAsjC,EAAArG,GAEAoG,GAAAvwD,KAAA8Y,KAAA,IAAAq4C,YAAAjkC,GAAAsjC,EAAArG,GAQA,SAAAiH,GAAAlkC,EAAAsjC,EAAArG,GAEAoG,GAAAvwD,KAAA8Y,KAAA,IAAAu4C,WAAAnkC,GAAAsjC,EAAArG,GAQA,SAAAmH,GAAApkC,EAAAsjC,EAAArG,GAEAoG,GAAAvwD,KAAA8Y,KAAA,IAAAy4C,YAAArkC,GAAAsjC,EAAArG,GAQA,SAAAqH,GAAAtkC,EAAAsjC,EAAArG,GAEAoG,GAAAvwD,KAAA8Y,KAAA,IAAA24C,aAAAvkC,GAAAsjC,EAAArG,GAQA,SAAAuH,GAAAxkC,EAAAsjC,EAAArG,GAEAoG,GAAAvwD,KAAA8Y,KAAA,IAAA64C,aAAAzkC,GAAAsjC,EAAArG,GAWA,SAAAyH,KAEA94C,KAAA+4C,SAAA,GACA/4C,KAAAg5C,QAAA,GACAh5C,KAAAi5C,OAAA,GACAj5C,KAAAk5C,IAAA,GACAl5C,KAAAm5C,KAAA,GAEAn5C,KAAAo5C,OAAA,GAEAp5C,KAAA40C,aAAA,GAEA50C,KAAAq5C,YAAA,GACAr5C,KAAAs5C,YAAA,GAIAt5C,KAAAy8B,YAAA,KACAz8B,KAAAu5C,eAAA,KAIAv5C,KAAAw5C,oBAAA,EACAx5C,KAAAy5C,mBAAA,EACAz5C,KAAA05C,kBAAA,EACA15C,KAAA25C,eAAA,EACA35C,KAAA45C,kBAAA,EAiQA,SAAAC,GAAAzlC,GAEA,GAAA,IAAAA,EAAAjtB,OAAA,OAAAmgB,SAIA,IAFA,IAAAvV,EAAAqiB,EAAA,GAEA5tB,EAAA,EAAAyJ,EAAAmkB,EAAAjtB,OAAAX,EAAAyJ,IAAAzJ,EAEA4tB,EAAA5tB,GAAAuL,IAAAA,EAAAqiB,EAAA5tB,IAIA,OAAAuL,EAhwBAxK,OAAA6iB,eAAAqtC,GAAAhwD,UAAA,cAAA,CAEA+vB,IAAA,SAAAtrB,IAEA,IAAAA,GAAA8T,KAAAshB,aAMA/5B,OAAAM,OAAA4vD,GAAAhwD,UAAA,CAEAqyD,mBAAA,EAEAC,iBAAA,aAEAC,SAAA,SAAA9tD,GAIA,OAFA8T,KAAA23C,MAAAzrD,EAEA8T,MAIA5T,KAAA,SAAAvD,GAUA,OARAmX,KAAA7J,KAAAtN,EAAAsN,KACA6J,KAAAoU,MAAA,IAAAvrB,EAAAurB,MAAAiE,YAAAxvB,EAAAurB,OACApU,KAAA03C,SAAA7uD,EAAA6uD,SACA13C,KAAAu4B,MAAA1vC,EAAA0vC,MACAv4B,KAAAqxC,WAAAxoD,EAAAwoD,WAEArxC,KAAA23C,MAAA9uD,EAAA8uD,MAEA33C,MAIAi6C,OAAA,SAAAC,EAAAj/B,EAAAk/B,GAEAD,GAAAl6C,KAAA03C,SACAyC,GAAAl/B,EAAAy8B,SAEA,IAAA,IAAAlxD,EAAA,EAAAyJ,EAAA+P,KAAA03C,SAAAlxD,EAAAyJ,EAAAzJ,IAEAwZ,KAAAoU,MAAA8lC,EAAA1zD,GAAAy0B,EAAA7G,MAAA+lC,EAAA3zD,GAIA,OAAAwZ,MAIAo6C,UAAA,SAAAhmC,GAIA,OAFApU,KAAAoU,MAAAoD,IAAApD,GAEApU,MAIAq6C,gBAAA,SAAApB,GAKA,IAHA,IAAA7kC,EAAApU,KAAAoU,MACA0G,EAAA,EAEAt0B,EAAA,EAAAyJ,EAAAgpD,EAAA9xD,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAuoD,EAAAkK,EAAAzyD,QAEAsG,IAAAiiD,IAEA73C,QAAAC,KAAA,8DAAA3Q,GACAuoD,EAAA,IAAAN,IAIAr6B,EAAA0G,KAAAi0B,EAAA5oD,EACAiuB,EAAA0G,KAAAi0B,EAAA/wB,EACA5J,EAAA0G,KAAAi0B,EAAArjD,EAIA,OAAAsU,MAIAs6C,kBAAA,SAAAC,GAKA,IAHA,IAAAnmC,EAAApU,KAAAoU,MACA0G,EAAA,EAEAt0B,EAAA,EAAAyJ,EAAAsqD,EAAApzD,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAkwC,EAAA6jB,EAAA/zD,QAEAsG,IAAA4pC,IAEAx/B,QAAAC,KAAA,iEAAA3Q,GACAkwC,EAAA,IAAAjf,IAIArD,EAAA0G,KAAA4b,EAAAvqC,EACAioB,EAAA0G,KAAA4b,EAAAjpC,EAIA,OAAAuS,MAIAw6C,kBAAA,SAAAD,GAKA,IAHA,IAAAnmC,EAAApU,KAAAoU,MACA0G,EAAA,EAEAt0B,EAAA,EAAAyJ,EAAAsqD,EAAApzD,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAkwC,EAAA6jB,EAAA/zD,QAEAsG,IAAA4pC,IAEAx/B,QAAAC,KAAA,iEAAA3Q,GACAkwC,EAAA,IAAArN,IAIAjV,EAAA0G,KAAA4b,EAAAvqC,EACAioB,EAAA0G,KAAA4b,EAAAjpC,EACA2mB,EAAA0G,KAAA4b,EAAAjV,EAIA,OAAAzhB,MAIAy6C,kBAAA,SAAAF,GAKA,IAHA,IAAAnmC,EAAApU,KAAAoU,MACA0G,EAAA,EAEAt0B,EAAA,EAAAyJ,EAAAsqD,EAAApzD,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAkwC,EAAA6jB,EAAA/zD,QAEAsG,IAAA4pC,IAEAx/B,QAAAC,KAAA,iEAAA3Q,GACAkwC,EAAA,IAAAlV,IAIApN,EAAA0G,KAAA4b,EAAAvqC,EACAioB,EAAA0G,KAAA4b,EAAAjpC,EACA2mB,EAAA0G,KAAA4b,EAAAjV,EACArN,EAAA0G,KAAA4b,EAAAle,EAIA,OAAAxY,MAIAmZ,aAAA,SAAA3rB,GAEA,GAAA,IAAAwS,KAAA03C,SAEA,IAAA,IAAAlxD,EAAA,EAAAyJ,EAAA+P,KAAAu4B,MAAA/xC,EAAAyJ,EAAAzJ,IAEAgxD,GAAAx8B,oBAAAhb,KAAAxZ,GACAgxD,GAAAr+B,aAAA3rB,GAEAwS,KAAA06C,MAAAl0D,EAAAgxD,GAAArrD,EAAAqrD,GAAA/pD,QAIA,GAAA,IAAAuS,KAAA03C,SAEA,IAAA,IAAA1e,EAAA,EAAAC,EAAAj5B,KAAAu4B,MAAAS,EAAAC,EAAAD,IAEAue,GAAAv8B,oBAAAhb,KAAAg5B,GACAue,GAAAp+B,aAAA3rB,GAEAwS,KAAA26C,OAAA3hB,EAAAue,GAAAprD,EAAAorD,GAAA9pD,EAAA8pD,GAAA91B,GAMA,OAAAzhB,MAIA2jB,aAAA,SAAAn2B,GAEA,IAAA,IAAAhH,EAAA,EAAAyJ,EAAA+P,KAAAu4B,MAAA/xC,EAAAyJ,EAAAzJ,IAEA+wD,GAAAprD,EAAA6T,KAAAkb,KAAA10B,GACA+wD,GAAA9pD,EAAAuS,KAAAmb,KAAA30B,GACA+wD,GAAA91B,EAAAzhB,KAAA6kB,KAAAr+B,GAEA+wD,GAAA5zB,aAAAn2B,GAEAwS,KAAA26C,OAAAn0D,EAAA+wD,GAAAprD,EAAAorD,GAAA9pD,EAAA8pD,GAAA91B,GAIA,OAAAzhB,MAIA4pB,kBAAA,SAAAp8B,GAEA,IAAA,IAAAhH,EAAA,EAAAyJ,EAAA+P,KAAAu4B,MAAA/xC,EAAAyJ,EAAAzJ,IAEA+wD,GAAAprD,EAAA6T,KAAAkb,KAAA10B,GACA+wD,GAAA9pD,EAAAuS,KAAAmb,KAAA30B,GACA+wD,GAAA91B,EAAAzhB,KAAA6kB,KAAAr+B,GAEA+wD,GAAA3tB,kBAAAp8B,GAEAwS,KAAA26C,OAAAn0D,EAAA+wD,GAAAprD,EAAAorD,GAAA9pD,EAAA8pD,GAAA91B,GAIA,OAAAzhB,MAIA4qB,mBAAA,SAAAp9B,GAEA,IAAA,IAAAhH,EAAA,EAAAyJ,EAAA+P,KAAAu4B,MAAA/xC,EAAAyJ,EAAAzJ,IAEA+wD,GAAAprD,EAAA6T,KAAAkb,KAAA10B,GACA+wD,GAAA9pD,EAAAuS,KAAAmb,KAAA30B,GACA+wD,GAAA91B,EAAAzhB,KAAA6kB,KAAAr+B,GAEA+wD,GAAA3sB,mBAAAp9B,GAEAwS,KAAA26C,OAAAn0D,EAAA+wD,GAAAprD,EAAAorD,GAAA9pD,EAAA8pD,GAAA91B,GAIA,OAAAzhB,MAIAwX,IAAA,SAAAtrB,EAAA4uB,GAMA,YAJAhuB,IAAAguB,IAAAA,EAAA,GAEA9a,KAAAoU,MAAAoD,IAAAtrB,EAAA4uB,GAEA9a,MAIAkb,KAAA,SAAA7Q,GAEA,OAAArK,KAAAoU,MAAA/J,EAAArK,KAAA03C,WAIA1/B,KAAA,SAAA3N,EAAAle,GAIA,OAFA6T,KAAAoU,MAAA/J,EAAArK,KAAA03C,UAAAvrD,EAEA6T,MAIAmb,KAAA,SAAA9Q,GAEA,OAAArK,KAAAoU,MAAA/J,EAAArK,KAAA03C,SAAA,IAIAz/B,KAAA,SAAA5N,EAAA5c,GAIA,OAFAuS,KAAAoU,MAAA/J,EAAArK,KAAA03C,SAAA,GAAAjqD,EAEAuS,MAIA6kB,KAAA,SAAAxa,GAEA,OAAArK,KAAAoU,MAAA/J,EAAArK,KAAA03C,SAAA,IAIAj0B,KAAA,SAAApZ,EAAAoX,GAIA,OAFAzhB,KAAAoU,MAAA/J,EAAArK,KAAA03C,SAAA,GAAAj2B,EAEAzhB,MAIA8kB,KAAA,SAAAza,GAEA,OAAArK,KAAAoU,MAAA/J,EAAArK,KAAA03C,SAAA,IAIAh0B,KAAA,SAAArZ,EAAAmO,GAIA,OAFAxY,KAAAoU,MAAA/J,EAAArK,KAAA03C,SAAA,GAAAl/B,EAEAxY,MAIA06C,MAAA,SAAArwC,EAAAle,EAAAsB,GAOA,OAHAuS,KAAAoU,OAFA/J,GAAArK,KAAA03C,UAEA,GAAAvrD,EACA6T,KAAAoU,MAAA/J,EAAA,GAAA5c,EAEAuS,MAIA26C,OAAA,SAAAtwC,EAAAle,EAAAsB,EAAAg0B,GAQA,OAJAzhB,KAAAoU,OAFA/J,GAAArK,KAAA03C,UAEA,GAAAvrD,EACA6T,KAAAoU,MAAA/J,EAAA,GAAA5c,EACAuS,KAAAoU,MAAA/J,EAAA,GAAAoX,EAEAzhB,MAIA46C,QAAA,SAAAvwC,EAAAle,EAAAsB,EAAAg0B,EAAAjJ,GASA,OALAxY,KAAAoU,OAFA/J,GAAArK,KAAA03C,UAEA,GAAAvrD,EACA6T,KAAAoU,MAAA/J,EAAA,GAAA5c,EACAuS,KAAAoU,MAAA/J,EAAA,GAAAoX,EACAzhB,KAAAoU,MAAA/J,EAAA,GAAAmO,EAEAxY,MAIA66C,SAAA,SAAA1xB,GAIA,OAFAnpB,KAAA+5C,iBAAA5wB,EAEAnpB,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,YAAArY,KAAAoU,MAAApU,KAAA03C,UAAAtrD,KAAA4T,OAIA6iB,OAAA,WAEA,MAAA,CACA60B,SAAA13C,KAAA03C,SACA7jD,KAAAmM,KAAAoU,MAAAiE,YAAAliB,KACAie,MAAAlpB,MAAAzD,UAAA0D,MAAAjE,KAAA8Y,KAAAoU,OACAi9B,WAAArxC,KAAAqxC,gBAeAwG,GAAApwD,UAAAF,OAAAm7B,OAAA+0B,GAAAhwD,YACA4wB,YAAAw/B,IASAE,GAAAtwD,UAAAF,OAAAm7B,OAAA+0B,GAAAhwD,YACA4wB,YAAA0/B,IASAC,GAAAvwD,UAAAF,OAAAm7B,OAAA+0B,GAAAhwD,YACA4wB,YAAA2/B,IASAE,GAAAzwD,UAAAF,OAAAm7B,OAAA+0B,GAAAhwD,YACA4wB,YAAA6/B,IASAE,GAAA3wD,UAAAF,OAAAm7B,OAAA+0B,GAAAhwD,YACA4wB,YAAA+/B,IASAE,GAAA7wD,UAAAF,OAAAm7B,OAAA+0B,GAAAhwD,YACA4wB,YAAAigC,IASAE,GAAA/wD,UAAAF,OAAAm7B,OAAA+0B,GAAAhwD,YACA4wB,YAAAmgC,IASAE,GAAAjxD,UAAAF,OAAAm7B,OAAA+0B,GAAAhwD,YACA4wB,YAAAqgC,IASAE,GAAAnxD,UAAAF,OAAAm7B,OAAA+0B,GAAAhwD,YACA4wB,YAAAugC,GAoCArxD,OAAAM,OAAAixD,GAAArxD,UAAA,CAEAqzD,cAAA,SAAAliB,GAEA,IAEAmiB,EAAAv0D,EAFA4yD,EAAA,GAGApK,OAAAliD,EAEAkuD,EAAApiB,EAAAoiB,MAEA,IAAAx0D,EAAA,EAAAA,EAAAw0D,EAAA7zD,OAAAX,IAAA,CAEA,IAAAy0D,EAAAD,EAAAx0D,GAIAy0D,EAAAjM,gBAAAA,IAEAA,EAAAiM,EAAAjM,mBAEAliD,IAAAiuD,IAEAA,EAAAxiB,MAAA,EAAA/xC,EAAAu0D,EAAA5Y,MACAiX,EAAAzuD,KAAAowD,IAIAA,EAAA,CACA5Y,MAAA,EAAA37C,EACAwoD,cAAAA,SAOAliD,IAAAiuD,IAEAA,EAAAxiB,MAAA,EAAA/xC,EAAAu0D,EAAA5Y,MACAiX,EAAAzuD,KAAAowD,IAIA/6C,KAAAo5C,OAAAA,GAIA8B,aAAA,SAAAtiB,GAEA,IAYAuiB,EAZAH,EAAApiB,EAAAoiB,MACAjC,EAAAngB,EAAAmgB,SACAqC,EAAAxiB,EAAAwiB,cAEAC,EAAAD,EAAA,IAAAA,EAAA,GAAAj0D,OAAA,EACAm0D,EAAAF,EAAA,IAAAA,EAAA,GAAAj0D,OAAA,EAIAytD,EAAAhc,EAAAgc,aACA2G,EAAA3G,EAAAztD,OAIA,GAAAo0D,EAAA,EAAA,CAEAJ,EAAA,GAEA,IAAA,IAAA30D,EAAA,EAAAA,EAAA+0D,EAAA/0D,IAEA20D,EAAA30D,GAAA,CACA2P,KAAAy+C,EAAApuD,GAAA2P,KACA2M,KAAA,IAKA9C,KAAA40C,aAAAjkB,SAAAwqB,EAIA,IAGAK,EAHArE,EAAAve,EAAAue,aACAsE,EAAAtE,EAAAhwD,OAIA,GAAAs0D,EAAA,EAAA,CAEAD,EAAA,GAEA,IAAA,IAAAxiB,EAAA,EAAAA,EAAAyiB,EAAAziB,IAEAwiB,EAAAxiB,GAAA,CACA7iC,KAAAghD,EAAAne,GAAA7iC,KACA2M,KAAA,IAKA9C,KAAA40C,aAAAnpB,OAAA+vB,EAMA,IAAAlC,EAAA1gB,EAAA0gB,YACAD,EAAAzgB,EAAAygB,YAEAqC,EAAApC,EAAAnyD,SAAA4xD,EAAA5xD,OACAw0D,EAAAtC,EAAAlyD,SAAA4xD,EAAA5xD,OAIA4xD,EAAA5xD,OAAA,GAAA,IAAA6zD,EAAA7zD,QAEA+P,QAAAkK,MAAA,gEAIA,IAAA,IAAA83B,EAAA,EAAAA,EAAA8hB,EAAA7zD,OAAA+xC,IAAA,CAEA,IAAA+hB,EAAAD,EAAA9hB,GAEAl5B,KAAA+4C,SAAApuD,KAAAouD,EAAAkC,EAAAp0D,GAAAkyD,EAAAkC,EAAAvvD,GAAAqtD,EAAAkC,EAAAv0D,IAEA,IAAAuoD,EAAAgM,EAAAhM,cAEA,GAAA,IAAAA,EAAA9nD,OAEA6Y,KAAAg5C,QAAAruD,KAAAskD,EAAA,GAAAA,EAAA,GAAAA,EAAA,QAEA,CAEA,IAAAxjB,EAAAwvB,EAAAxvB,OAEAzrB,KAAAg5C,QAAAruD,KAAA8gC,EAAAA,EAAAA,GAIA,IAAA0jB,EAAA8L,EAAA9L,aAEA,GAAA,IAAAA,EAAAhoD,OAEA6Y,KAAAi5C,OAAAtuD,KAAAwkD,EAAA,GAAAA,EAAA,GAAAA,EAAA,QAEA,CAEA,IAAAJ,EAAAkM,EAAAlM,MAEA/uC,KAAAi5C,OAAAtuD,KAAAokD,EAAAA,EAAAA,GAIA,IAAA,IAAAsM,EAAA,CAEA,IAAAO,EAAAR,EAAA,GAAAliB,QAEApsC,IAAA8uD,EAEA57C,KAAAk5C,IAAAvuD,KAAAixD,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAIA1kD,QAAAC,KAAA,2DAAA+hC,GAEAl5B,KAAAk5C,IAAAvuD,KAAA,IAAA8sB,GAAA,IAAAA,GAAA,IAAAA,KAMA,IAAA,IAAA6jC,EAAA,CAEA,IAAAO,EAAAT,EAAA,GAAAliB,QAEApsC,IAAA+uD,EAEA77C,KAAAm5C,KAAAxuD,KAAAkxD,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAIA3kD,QAAAC,KAAA,4DAAA+hC,GAEAl5B,KAAAm5C,KAAAxuD,KAAA,IAAA8sB,GAAA,IAAAA,GAAA,IAAAA,KAQA,IAAA,IAAAkjB,EAAA,EAAAA,EAAA4gB,EAAA5gB,IAAA,CAEA,IAAAmhB,EAAAlH,EAAAja,GAAAoe,SAEAoC,EAAAxgB,GAAA73B,KAAAnY,KAAAmxD,EAAAb,EAAAp0D,GAAAi1D,EAAAb,EAAAvvD,GAAAowD,EAAAb,EAAAv0D,IAIA,IAAA,IAAAq1D,EAAA,EAAAA,EAAAN,EAAAM,IAAA,CAEA,IAAAC,EAAA7E,EAAA4E,GAAA9M,cAAA/V,GAEAsiB,EAAAO,GAAAj5C,KAAAnY,KAAAqxD,EAAAn1D,EAAAm1D,EAAAtwD,EAAAswD,EAAAt1D,GAMAg1D,GAEA17C,KAAAs5C,YAAA3uD,KAAA2uD,EAAA2B,EAAAp0D,GAAAyyD,EAAA2B,EAAAvvD,GAAA4tD,EAAA2B,EAAAv0D,IAIAi1D,GAEA37C,KAAAq5C,YAAA1uD,KAAA0uD,EAAA4B,EAAAp0D,GAAAwyD,EAAA4B,EAAAvvD,GAAA2tD,EAAA4B,EAAAv0D,IA0BA,OApBAsZ,KAAA86C,cAAAliB,GAEA54B,KAAAw5C,mBAAA5gB,EAAA4gB,mBACAx5C,KAAAy5C,kBAAA7gB,EAAA6gB,kBACAz5C,KAAA05C,iBAAA9gB,EAAA8gB,iBACA15C,KAAA25C,cAAA/gB,EAAA+gB,cACA35C,KAAA45C,iBAAAhhB,EAAAghB,iBAEA,OAAAhhB,EAAA2gB,iBAEAv5C,KAAAu5C,eAAA3gB,EAAA2gB,eAAAnhC,SAIA,OAAAwgB,EAAA6D,cAEAz8B,KAAAy8B,YAAA7D,EAAA6D,YAAArkB,SAIApY,QA+BA,IAAAi8C,GAAA,EAEAC,GAAA,IAAA1vB,GACA2vB,GAAA,IAAAnoB,GACAooB,GAAA,IAAA/yB,GACAgzB,GAAA,IAAAziB,GACA0iB,GAAA,IAAA1iB,GACA2iB,GAAA,IAAAlzB,GAEA,SAAAmzB,KAEAj1D,OAAA6iB,eAAApK,KAAA,KAAA,CAAA9T,MAAA+vD,IAAA,IAEAj8C,KAAA2gB,KAAApM,GAAAI,eAEA3U,KAAA7J,KAAA,GACA6J,KAAAnM,KAAA,iBAEAmM,KAAAqK,MAAA,KACArK,KAAA/C,WAAA,GAEA+C,KAAAy8C,gBAAA,GACAz8C,KAAA08C,sBAAA,EAEA18C,KAAAo5C,OAAA,GAEAp5C,KAAAy8B,YAAA,KACAz8B,KAAAu5C,eAAA,KAEAv5C,KAAA28C,UAAA,CAAAxa,MAAA,EAAA5J,MAAAjxB,UAEAtH,KAAA80B,SAAA,GAIA0nB,GAAA/0D,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA/O,GAAAlsB,WAAA,CAEA4wB,YAAAmkC,GAEAI,kBAAA,EAEAC,SAAA,WAEA,OAAA78C,KAAAqK,OAIAyyC,SAAA,SAAAzyC,GAIArK,KAAAqK,MAFAnf,MAAA6B,QAAAsd,GAEA,IAAAwvC,GAAAxvC,GAAA,MAAAmuC,GAAAJ,IAAA/tC,EAAA,GAIAA,GAMA0yC,aAAA,SAAA5mD,GAEA,OAAA6J,KAAA/C,WAAA9G,IAIA6mD,aAAA,SAAA7mD,EAAA8kB,GAIA,OAFAjb,KAAA/C,WAAA9G,GAAA8kB,EAEAjb,MAIAi9C,gBAAA,SAAA9mD,GAIA,cAFA6J,KAAA/C,WAAA9G,GAEA6J,MAIAk9C,SAAA,SAAA/a,EAAA5J,EAAAyW,GAEAhvC,KAAAo5C,OAAAzuD,KAAA,CAEAw3C,MAAAA,EACA5J,MAAAA,EACAyW,mBAAAliD,IAAAkiD,EAAAA,EAAA,KAMAmO,YAAA,WAEAn9C,KAAAo5C,OAAA,IAIAgE,aAAA,SAAAjb,EAAA5J,GAEAv4B,KAAA28C,UAAAxa,MAAAA,EACAniC,KAAA28C,UAAApkB,MAAAA,GAIA5U,aAAA,SAAAzF,GAEA,IAAAyS,EAAA3wB,KAAA/C,WAAA0zB,cAEA7jC,IAAA6jC,IAEAA,EAAAhN,aAAAzF,GAEAyS,EAAA0sB,aAAA,GAIA,IAAA5xB,EAAAzrB,KAAA/C,WAAAwuB,OAEA,QAAA3+B,IAAA2+B,EAAA,CAEA,IAAA6I,GAAA,IAAA5c,IAAAiH,gBAAAT,GAEAuN,EAAA7B,kBAAA0K,GAEA7I,EAAA4xB,aAAA,EAIA,IAAAC,EAAAt9C,KAAA/C,WAAAqgD,QAsBA,YApBAxwD,IAAAwwD,IAEAA,EAAA1yB,mBAAA1M,GAEAo/B,EAAAD,aAAA,GAIA,OAAAr9C,KAAAy8B,aAEAz8B,KAAA08B,qBAIA,OAAA18B,KAAAu5C,gBAEAv5C,KAAAu9C,wBAIAv9C,MAIAi2B,QAAA,SAAAjc,GAQA,OAJAkiC,GAAA7rB,cAAArW,GAEAha,KAAA2jB,aAAAu4B,IAEAl8C,MAIAk2B,QAAA,SAAAlc,GAQA,OAJAkiC,GAAA5rB,cAAAtW,GAEAha,KAAA2jB,aAAAu4B,IAEAl8C,MAIAm2B,QAAA,SAAAnc,GAQA,OAJAkiC,GAAA3rB,cAAAvW,GAEAha,KAAA2jB,aAAAu4B,IAEAl8C,MAIAwf,UAAA,SAAArzB,EAAAsB,EAAAg0B,GAQA,OAJAy6B,GAAA9rB,gBAAAjkC,EAAAsB,EAAAg0B,GAEAzhB,KAAA2jB,aAAAu4B,IAEAl8C,MAIAsE,MAAA,SAAAnY,EAAAsB,EAAAg0B,GAQA,OAJAy6B,GAAAzrB,UAAAtkC,EAAAsB,EAAAg0B,GAEAzhB,KAAA2jB,aAAAu4B,IAEAl8C,MAIAgvB,OAAA,SAAA0H,GAQA,OANAylB,GAAAntB,OAAA0H,GAEAylB,GAAAv5B,eAEA5iB,KAAA2jB,aAAAw4B,GAAAj+B,QAEAle,MAIAqb,OAAA,WAQA,OANArb,KAAA08B,qBAEA18B,KAAAy8B,YAAAL,UAAAggB,IAAA3iC,SAEAzZ,KAAAwf,UAAA48B,GAAAjwD,EAAAiwD,GAAA3uD,EAAA2uD,GAAA36B,GAEAzhB,MAIAg8B,cAAA,SAAAjxC,GAIA,IAAA6tC,EAAA7tC,EAAA6tC,SAEA,GAAA7tC,EAAA4tC,UAAA5tC,EAAA2tC,OAAA,CAEA,IAAA8kB,EAAA,IAAA9E,GAAA,EAAA9f,EAAAmgB,SAAA5xD,OAAA,GACA8xD,EAAA,IAAAP,GAAA,EAAA9f,EAAAqgB,OAAA9xD,OAAA,GAKA,GAHA6Y,KAAAg9C,aAAA,WAAAQ,EAAAhD,kBAAA5hB,EAAAmgB,WACA/4C,KAAAg9C,aAAA,QAAA/D,EAAAoB,gBAAAzhB,EAAAqgB,SAEArgB,EAAA6kB,eAAA7kB,EAAA6kB,cAAAt2D,SAAAyxC,EAAAmgB,SAAA5xD,OAAA,CAEA,IAAAs2D,EAAA,IAAA/E,GAAA9f,EAAA6kB,cAAAt2D,OAAA,GAEA6Y,KAAAg9C,aAAA,eAAAS,EAAArD,UAAAxhB,EAAA6kB,gBAIA,OAAA7kB,EAAA2gB,iBAEAv5C,KAAAu5C,eAAA3gB,EAAA2gB,eAAAnhC,SAIA,OAAAwgB,EAAA6D,cAEAz8B,KAAAy8B,YAAA7D,EAAA6D,YAAArkB,cAIArtB,EAAA0tC,QAEAG,GAAAA,EAAA8kB,YAEA19C,KAAAk7C,aAAAtiB,GAMA,OAAA54B,MAIAw7B,cAAA,SAAAC,GAIA,IAFA,IAAA9K,EAAA,GAEAnqC,EAAA,EAAAyJ,EAAAwrC,EAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAA81C,EAAAb,EAAAj1C,GACAmqC,EAAAhmC,KAAA2xC,EAAAnwC,EAAAmwC,EAAA7uC,EAAA6uC,EAAA7a,GAAA,GAMA,OAFAzhB,KAAAg9C,aAAA,WAAA,IAAAtE,GAAA/nB,EAAA,IAEA3wB,MAIA29C,iBAAA,SAAA5yD,GAEA,IAAA6tC,EAAA7tC,EAAA6tC,SAEA,GAAA7tC,EAAA0tC,OAAA,CAEA,IAAAmlB,EAAAhlB,EAAAilB,iBASA,IAPA,IAAAjlB,EAAAklB,qBAEAF,OAAA9wD,EACA8rC,EAAAklB,oBAAA,QAIAhxD,IAAA8wD,EAEA,OAAA59C,KAAAk7C,aAAAtiB,GAIAglB,EAAApE,mBAAA5gB,EAAA4gB,mBACAoE,EAAAnE,kBAAA7gB,EAAA6gB,kBACAmE,EAAAlE,iBAAA9gB,EAAA8gB,iBACAkE,EAAAjE,cAAA/gB,EAAA+gB,cACAiE,EAAAhE,iBAAAhhB,EAAAghB,iBAEAhhB,EAAA4gB,oBAAA,EACA5gB,EAAA6gB,mBAAA,EACA7gB,EAAA8gB,kBAAA,EACA9gB,EAAA+gB,eAAA,EACA/gB,EAAAghB,kBAAA,EAEAhhB,EAAAglB,EAIA,IAAA,IAAAhlB,EAAA4gB,mBAAA,CAEA,IAAAv+B,EAAAjb,KAAA/C,WAAA0zB,cAEA7jC,IAAAmuB,IAEAA,EAAAu/B,kBAAA5hB,EAAAmgB,UACA99B,EAAAoiC,aAAA,GAIAzkB,EAAA4gB,oBAAA,EAIA,IAAA,IAAA5gB,EAAA6gB,kBAAA,CAEA,IAAAsE,EAAA/9C,KAAA/C,WAAAwuB,YAEA3+B,IAAAixD,IAEAA,EAAAvD,kBAAA5hB,EAAAogB,SACA+E,EAAAV,aAAA,GAIAzkB,EAAA6gB,mBAAA,EAIA,IAAA,IAAA7gB,EAAA8gB,iBAAA,CAEA,IAAAsE,EAAAh+C,KAAA/C,WAAA8xC,WAEAjiD,IAAAkxD,IAEAA,EAAA3D,gBAAAzhB,EAAAqgB,QACA+E,EAAAX,aAAA,GAIAzkB,EAAA8gB,kBAAA,EAIA,GAAA9gB,EAAA+gB,cAAA,CAEA,IAAAsE,EAAAj+C,KAAA/C,WAAAsmB,QAEAz2B,IAAAmxD,IAEAA,EAAA3D,kBAAA1hB,EAAAsgB,KACA+E,EAAAZ,aAAA,GAIAzkB,EAAA+gB,eAAA,EAIA,GAAA/gB,EAAAslB,wBAAA,CAEA,IAAAC,EAAAn+C,KAAA/C,WAAAmhD,kBAEAtxD,IAAAqxD,IAEAA,EAAA/D,UAAAxhB,EAAA6kB,eACAU,EAAAd,aAAA,GAIAzkB,EAAAslB,yBAAA,EAaA,OATAtlB,EAAAghB,mBAEAhhB,EAAAkiB,cAAA/vD,EAAA6tC,UACA54B,KAAAo5C,OAAAxgB,EAAAwgB,OAEAxgB,EAAAghB,kBAAA,GAIA55C,MAIAk7C,aAAA,SAAAtiB,GAIA,OAFAA,EAAAilB,kBAAA,IAAA/E,IAAAoC,aAAAtiB,GAEA54B,KAAAq+C,mBAAAzlB,EAAAilB,mBAIAQ,mBAAA,SAAAzlB,GAEA,IAAA4kB,EAAA,IAAA7E,aAAA,EAAA/f,EAAAmgB,SAAA5xD,QAGA,GAFA6Y,KAAAg9C,aAAA,WAAA,IAAAvF,GAAA+F,EAAA,GAAAhD,kBAAA5hB,EAAAmgB,WAEAngB,EAAAogB,QAAA7xD,OAAA,EAAA,CAEA,IAAA6xD,EAAA,IAAAL,aAAA,EAAA/f,EAAAogB,QAAA7xD,QACA6Y,KAAAg9C,aAAA,SAAA,IAAAvF,GAAAuB,EAAA,GAAAwB,kBAAA5hB,EAAAogB,UAIA,GAAApgB,EAAAqgB,OAAA9xD,OAAA,EAAA,CAEA,IAAA8xD,EAAA,IAAAN,aAAA,EAAA/f,EAAAqgB,OAAA9xD,QACA6Y,KAAAg9C,aAAA,QAAA,IAAAvF,GAAAwB,EAAA,GAAAoB,gBAAAzhB,EAAAqgB,SAIA,GAAArgB,EAAAsgB,IAAA/xD,OAAA,EAAA,CAEA,IAAA+xD,EAAA,IAAAP,aAAA,EAAA/f,EAAAsgB,IAAA/xD,QACA6Y,KAAAg9C,aAAA,KAAA,IAAAvF,GAAAyB,EAAA,GAAAoB,kBAAA1hB,EAAAsgB,MAIA,GAAAtgB,EAAAugB,KAAAhyD,OAAA,EAAA,CAEA,IAAAgyD,EAAA,IAAAR,aAAA,EAAA/f,EAAAugB,KAAAhyD,QACA6Y,KAAAg9C,aAAA,MAAA,IAAAvF,GAAA0B,EAAA,GAAAmB,kBAAA1hB,EAAAugB,OAUA,IAAA,IAAAhjD,KAJA6J,KAAAo5C,OAAAxgB,EAAAwgB,OAIAxgB,EAAAgc,aAAA,CAKA,IAHA,IAAAxgC,EAAA,GACAwgC,EAAAhc,EAAAgc,aAAAz+C,GAEA3P,EAAA,EAAAyJ,EAAA2kD,EAAAztD,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAs1D,EAAAlH,EAAApuD,GAEAy0B,EAAA,IAAAy9B,GAAA,EAAAoD,EAAAh5C,KAAA3b,OAAA,GACA8zB,EAAA9kB,KAAA2lD,EAAA3lD,KAEAie,EAAAzpB,KAAAswB,EAAAu/B,kBAAAsB,EAAAh5C,OAIA9C,KAAAy8C,gBAAAtmD,GAAAie,EAMA,GAAAwkB,EAAA0gB,YAAAnyD,OAAA,EAAA,CAEA,IAAAmyD,EAAA,IAAAZ,GAAA,EAAA9f,EAAA0gB,YAAAnyD,OAAA,GACA6Y,KAAAg9C,aAAA,YAAA1D,EAAAmB,kBAAA7hB,EAAA0gB,cAIA,GAAA1gB,EAAAygB,YAAAlyD,OAAA,EAAA,CAEA,IAAAkyD,EAAA,IAAAX,GAAA,EAAA9f,EAAAygB,YAAAlyD,OAAA,GACA6Y,KAAAg9C,aAAA,aAAA3D,EAAAoB,kBAAA7hB,EAAAygB,cAkBA,OAZA,OAAAzgB,EAAA2gB,iBAEAv5C,KAAAu5C,eAAA3gB,EAAA2gB,eAAAnhC,SAIA,OAAAwgB,EAAA6D,cAEAz8B,KAAAy8B,YAAA7D,EAAA6D,YAAArkB,SAIApY,MAIA08B,mBAAA,WAEA,OAAA18B,KAAAy8B,cAEAz8B,KAAAy8B,YAAA,IAAA7C,IAIA,IAAAjJ,EAAA3wB,KAAA/C,WAAA0zB,SACA2tB,EAAAt+C,KAAAy8C,gBAAA9rB,SAEA,QAAA7jC,IAAA6jC,GAMA,GAJA3wB,KAAAy8B,YAAAlB,uBAAA5K,GAIA2tB,EAEA,IAAA,IAAA93D,EAAA,EAAAm1C,EAAA2iB,EAAAn3D,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAGA61D,GAAA9gB,uBADA+iB,EAAA93D,IAGAwZ,KAAA08C,sBAEAH,GAAA9jC,WAAAzY,KAAAy8B,YAAA3hC,IAAAuhD,GAAAvhD,KACAkF,KAAAy8B,YAAAb,cAAA2gB,IAEAA,GAAA9jC,WAAAzY,KAAAy8B,YAAA1qC,IAAAsqD,GAAAtqD,KACAiO,KAAAy8B,YAAAb,cAAA2gB,MAIAv8C,KAAAy8B,YAAAb,cAAAygB,GAAAvhD,KACAkF,KAAAy8B,YAAAb,cAAAygB,GAAAtqD,YAUAiO,KAAAy8B,YAAAf,aAIAxuC,MAAA8S,KAAAy8B,YAAA3hC,IAAA3O,IAAAe,MAAA8S,KAAAy8B,YAAA3hC,IAAArN,IAAAP,MAAA8S,KAAAy8B,YAAA3hC,IAAA2mB,KAEAvqB,QAAAkK,MAAA,oIAAApB,OAMAu9C,sBAAA,WAEA,OAAAv9C,KAAAu5C,iBAEAv5C,KAAAu5C,eAAA,IAAA3b,IAIA,IAAAjN,EAAA3wB,KAAA/C,WAAA0zB,SACA2tB,EAAAt+C,KAAAy8C,gBAAA9rB,SAEA,GAAAA,EAAA,CAIA,IAAAtV,EAAArb,KAAAu5C,eAAAl+B,OAMA,GAJAghC,GAAA9gB,uBAAA5K,GAIA2tB,EAEA,IAAA,IAAA93D,EAAA,EAAAm1C,EAAA2iB,EAAAn3D,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAGA81D,GAAA/gB,uBADA+iB,EAAA93D,IAGAwZ,KAAA08C,sBAEAH,GAAA9jC,WAAA4jC,GAAAvhD,IAAAwhD,GAAAxhD,KACAuhD,GAAAzgB,cAAA2gB,IAEAA,GAAA9jC,WAAA4jC,GAAAtqD,IAAAuqD,GAAAvqD,KACAsqD,GAAAzgB,cAAA2gB,MAIAF,GAAAzgB,cAAA0gB,GAAAxhD,KACAuhD,GAAAzgB,cAAA0gB,GAAAvqD,MAQAsqD,GAAAjgB,UAAA/gB,GAOA,IAFA,IAAAyiB,EAAA,EAEA9E,EAAA,EAAAuY,EAAA5gB,EAAA4H,MAAAS,EAAAuY,EAAAvY,IAEAujB,GAAAvhC,oBAAA2V,EAAAqI,GAEA8E,EAAArvC,KAAAsD,IAAA+rC,EAAAziB,EAAAlB,kBAAAoiC,KAMA,GAAA+B,EAEA,IAAA,IAAAplB,EAAA,EAAAqlB,EAAAD,EAAAn3D,OAAA+xC,EAAAqlB,EAAArlB,IAKA,IAHA,IAAAslB,EAAAF,EAAAplB,GACAwjB,EAAA18C,KAAA08C,qBAEA/hB,EAAA,EAAA8jB,EAAAD,EAAAjmB,MAAAoC,EAAA8jB,EAAA9jB,IAEA4hB,GAAAvhC,oBAAAwjC,EAAA7jB,GAEA+hB,IAEAN,GAAAphC,oBAAA2V,EAAAgK,GACA4hB,GAAAhkC,IAAA6jC,KAIAte,EAAArvC,KAAAsD,IAAA+rC,EAAAziB,EAAAlB,kBAAAoiC,KAQAv8C,KAAAu5C,eAAA1tB,OAAAp9B,KAAAorB,KAAAikB,GAEA5wC,MAAA8S,KAAAu5C,eAAA1tB,SAEA30B,QAAAkK,MAAA,+HAAApB,QAQA0+C,mBAAA,aAMAC,qBAAA,WAEA,IAAAt0C,EAAArK,KAAAqK,MACAu0C,EAAA5+C,KAAA+8C,aAAA,YAEA,QAAAjwD,IAAA8xD,EAAA,CAEA,IAAAC,EAAA7+C,KAAA+8C,aAAA,UAEA,QAAAjwD,IAAA+xD,EAEAA,EAAA,IAAApH,GAAA,IAAAkB,aAAA,EAAAiG,EAAArmB,OAAA,GACAv4B,KAAAg9C,aAAA,SAAA6B,QAMA,IAAA,IAAAr4D,EAAA,EAAAm1C,EAAAkjB,EAAAtmB,MAAA/xC,EAAAm1C,EAAAn1C,IAEAq4D,EAAAlE,OAAAn0D,EAAA,EAAA,EAAA,GAMA,IAAAs4D,EAAA,IAAAz1B,GAAA01B,EAAA,IAAA11B,GAAA21B,EAAA,IAAA31B,GACA41B,EAAA,IAAA51B,GAAA61B,EAAA,IAAA71B,GAAA81B,EAAA,IAAA91B,GACAnlB,EAAA,IAAAmlB,GAAAp1B,EAAA,IAAAo1B,GAIA,GAAAhf,EAEA,IAAA,IAAA2uB,EAAA,EAAAuY,EAAAlnC,EAAAkuB,MAAAS,EAAAuY,EAAAvY,GAAA,EAAA,CAEA,IAAAomB,EAAA/0C,EAAA6Q,KAAA8d,EAAA,GACAqmB,EAAAh1C,EAAA6Q,KAAA8d,EAAA,GACAsmB,EAAAj1C,EAAA6Q,KAAA8d,EAAA,GAEA8lB,EAAA9jC,oBAAA4jC,EAAAQ,GACAL,EAAA/jC,oBAAA4jC,EAAAS,GACAL,EAAAhkC,oBAAA4jC,EAAAU,GAEAp7C,EAAA2U,WAAAmmC,EAAAD,GACA9qD,EAAA4kB,WAAAimC,EAAAC,GACA76C,EAAAyV,MAAA1lB,GAEAgrD,EAAAjkC,oBAAA6jC,EAAAO,GACAF,EAAAlkC,oBAAA6jC,EAAAQ,GACAF,EAAAnkC,oBAAA6jC,EAAAS,GAEAL,EAAA1mC,IAAArU,GACAg7C,EAAA3mC,IAAArU,GACAi7C,EAAA5mC,IAAArU,GAEA26C,EAAAlE,OAAAyE,EAAAH,EAAA9yD,EAAA8yD,EAAAxxD,EAAAwxD,EAAAx9B,GACAo9B,EAAAlE,OAAA0E,EAAAH,EAAA/yD,EAAA+yD,EAAAzxD,EAAAyxD,EAAAz9B,GACAo9B,EAAAlE,OAAA2E,EAAAH,EAAAhzD,EAAAgzD,EAAA1xD,EAAA0xD,EAAA19B,QAQA,IAAA,IAAAyX,EAAA,EAAAqlB,EAAAK,EAAArmB,MAAAW,EAAAqlB,EAAArlB,GAAA,EAEA4lB,EAAA9jC,oBAAA4jC,EAAA1lB,EAAA,GACA6lB,EAAA/jC,oBAAA4jC,EAAA1lB,EAAA,GACA8lB,EAAAhkC,oBAAA4jC,EAAA1lB,EAAA,GAEAh1B,EAAA2U,WAAAmmC,EAAAD,GACA9qD,EAAA4kB,WAAAimC,EAAAC,GACA76C,EAAAyV,MAAA1lB,GAEA4qD,EAAAlE,OAAAzhB,EAAA,EAAAh1B,EAAA/X,EAAA+X,EAAAzW,EAAAyW,EAAAud,GACAo9B,EAAAlE,OAAAzhB,EAAA,EAAAh1B,EAAA/X,EAAA+X,EAAAzW,EAAAyW,EAAAud,GACAo9B,EAAAlE,OAAAzhB,EAAA,EAAAh1B,EAAA/X,EAAA+X,EAAAzW,EAAAyW,EAAAud,GAMAzhB,KAAAu/C,mBAEAV,EAAAxB,aAAA,IAMAmC,MAAA,SAAA5mB,EAAA9d,GAEA,GAAA8d,GAAAA,EAAAgkB,iBAAA,MAOA9vD,IAAAguB,IAEAA,EAAA,EAEA5jB,QAAAC,KACA,2JAMA,IAAA8F,EAAA+C,KAAA/C,WAEA,IAAA,IAAA3T,KAAA2T,EAEA,QAAAnQ,IAAA8rC,EAAA37B,WAAA3T,GAWA,IATA,IACAm2D,EADAxiD,EAAA3T,GACA8qB,MAEAsrC,EAAA9mB,EAAA37B,WAAA3T,GACAq2D,EAAAD,EAAAtrC,MAEAwrC,EAAAF,EAAAhI,SAAA58B,EACA3zB,EAAAsH,KAAAqM,IAAA6kD,EAAAx4D,OAAAs4D,EAAAt4D,OAAAy4D,GAEAp5D,EAAA,EAAAm0C,EAAAilB,EAAAp5D,EAAAW,EAAAX,IAAAm0C,IAEA8kB,EAAA9kB,GAAAglB,EAAAn5D,GAMA,OAAAwZ,KAvCA9I,QAAAkK,MAAA,kFAAAw3B,IA2CA2mB,iBAAA,WAIA,IAFA,IAAAvG,EAAAh5C,KAAA/C,WAAAwuB,OAEAjlC,EAAA,EAAAm1C,EAAAqd,EAAAzgB,MAAA/xC,EAAAm1C,EAAAn1C,IAEA+1D,GAAAvhC,oBAAAg+B,EAAAxyD,GAEA+1D,GAAAxiC,YAEAi/B,EAAA2B,OAAAn0D,EAAA+1D,GAAApwD,EAAAowD,GAAA9uD,EAAA8uD,GAAA96B,IAMAo+B,aAAA,WAEA,SAAAC,EAAA7kC,EAAA8kC,GAUA,IARA,IAAA3rC,EAAA6G,EAAA7G,MACAsjC,EAAAz8B,EAAAy8B,SACArG,EAAAp2B,EAAAo2B,WAEA2O,EAAA,IAAA5rC,EAAAiE,YAAA0nC,EAAA54D,OAAAuwD,GAEArtC,EAAA,EAAA8vC,EAAA,EAEA3zD,EAAA,EAAAyJ,EAAA8vD,EAAA54D,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA6jB,EAAA01C,EAAAv5D,GAAAkxD,EAEA,IAAA,IAAA/c,EAAA,EAAAA,EAAA+c,EAAA/c,IAEAqlB,EAAA7F,KAAA/lC,EAAA/J,KAMA,OAAA,IAAAotC,GAAAuI,EAAAtI,EAAArG,GAMA,GAAA,OAAArxC,KAAAqK,MAGA,OADAnT,QAAAC,KAAA,yEACA6I,KAIA,IAAAigD,EAAA,IAAAzD,GAEAuD,EAAA//C,KAAAqK,MAAA+J,MACAnX,EAAA+C,KAAA/C,WAIA,IAAA,IAAA9G,KAAA8G,EAAA,CAEA,IAEAijD,EAAAJ,EAFA7iD,EAAA9G,GAEA4pD,GAEAE,EAAAjD,aAAA7mD,EAAA+pD,GAMA,IAAAzD,EAAAz8C,KAAAy8C,gBAEA,IAAA,IAAA0D,KAAA1D,EAAA,CAKA,IAHA,IAAA2D,EAAA,GACAC,EAAA5D,EAAA0D,GAEA35D,EAAA,EAAAm1C,EAAA0kB,EAAAl5D,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAEA85D,EAAAR,EAFAO,EAAA75D,GAEAu5D,GAEAK,EAAAz1D,KAAA21D,GAIAL,EAAAxD,gBAAA0D,GAAAC,EAIAH,EAAAvD,qBAAA18C,KAAA08C,qBAMA,IAFA,IAAAtD,EAAAp5C,KAAAo5C,OAEApgB,EAAA,EAAA/oC,EAAAmpD,EAAAjyD,OAAA6xC,EAAA/oC,EAAA+oC,IAAA,CAEA,IAAA+hB,EAAA3B,EAAApgB,GACAinB,EAAA/C,SAAAnC,EAAA5Y,MAAA4Y,EAAAxiB,MAAAwiB,EAAA/L,eAIA,OAAAiR,GAIAp9B,OAAA,WAEA,IAAA/f,EAAA,CACAmgB,SAAA,CACA3B,QAAA,IACAztB,KAAA,iBACAqvB,UAAA,0BAWA,GALApgB,EAAA6d,KAAA3gB,KAAA2gB,KACA7d,EAAAjP,KAAAmM,KAAAnM,KACA,KAAAmM,KAAA7J,OAAA2M,EAAA3M,KAAA6J,KAAA7J,MACA5O,OAAAkB,KAAAuX,KAAA80B,UAAA3tC,OAAA,IAAA2b,EAAAgyB,SAAA90B,KAAA80B,eAEAhoC,IAAAkT,KAAA64B,WAAA,CAEA,IAAAA,EAAA74B,KAAA64B,WAEA,IAAA,IAAAvvC,KAAAuvC,OAEA/rC,IAAA+rC,EAAAvvC,KAAAwZ,EAAAxZ,GAAAuvC,EAAAvvC,IAIA,OAAAwZ,EAIAA,EAAAA,KAAA,CAAA7F,WAAA,IAEA,IAAAoN,EAAArK,KAAAqK,MAEA,OAAAA,IAEAvH,EAAAA,KAAAuH,MAAA,CACAxW,KAAAwW,EAAA+J,MAAAiE,YAAAliB,KACAie,MAAAlpB,MAAAzD,UAAA0D,MAAAjE,KAAAmjB,EAAA+J,SAKA,IAAAnX,EAAA+C,KAAA/C,WAEA,IAAA,IAAAsjD,KAAAtjD,EAAA,CAEA,IAAAge,EAAAhe,EAAAsjD,GAEAC,EAAAvlC,EAAA4H,OAAA/f,EAAAA,MAEA,KAAAmY,EAAA9kB,OAAAqqD,EAAArqD,KAAA8kB,EAAA9kB,MAEA2M,EAAAA,KAAA7F,WAAAsjD,GAAAC,EAIA,IAAA/D,EAAA,GACAgE,GAAA,EAEA,IAAA,IAAAC,KAAA1gD,KAAAy8C,gBAAA,CAMA,IAJA,IAAAkE,EAAA3gD,KAAAy8C,gBAAAiE,GAEAtsC,EAAA,GAEA5tB,EAAA,EAAAm1C,EAAAglB,EAAAx5D,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAAu3D,EAAA4C,EAAAn6D,GAEAo6D,EAAA7C,EAAAl7B,OAAA/f,EAAAA,MAEA,KAAAi7C,EAAA5nD,OAAAyqD,EAAAzqD,KAAA4nD,EAAA5nD,MAEAie,EAAAzpB,KAAAi2D,GAIAxsC,EAAAjtB,OAAA,IAEAs1D,EAAAiE,GAAAtsC,EAEAqsC,GAAA,GAMAA,IAEA39C,EAAAA,KAAA25C,gBAAAA,EACA35C,EAAAA,KAAA45C,qBAAA18C,KAAA08C,sBAIA,IAAAtD,EAAAp5C,KAAAo5C,OAEAA,EAAAjyD,OAAA,IAEA2b,EAAAA,KAAAs2C,OAAAhhB,KAAAmB,MAAAnB,KAAAC,UAAA+gB,KAIA,IAAAG,EAAAv5C,KAAAu5C,eAWA,OATA,OAAAA,IAEAz2C,EAAAA,KAAAy2C,eAAA,CACAl+B,OAAAk+B,EAAAl+B,OAAAN,UACA8Q,OAAA0tB,EAAA1tB,SAKA/oB,GAIAsV,MAAA,WA0BA,OAAA,IAAAokC,IAAApwD,KAAA4T,OAIA5T,KAAA,SAAAvD,GAIAmX,KAAAqK,MAAA,KACArK,KAAA/C,WAAA,GACA+C,KAAAy8C,gBAAA,GACAz8C,KAAAo5C,OAAA,GACAp5C,KAAAy8B,YAAA,KACAz8B,KAAAu5C,eAAA,KAIA,IAAAz2C,EAAA,GAIA9C,KAAA7J,KAAAtN,EAAAsN,KAIA,IAAAkU,EAAAxhB,EAAAwhB,MAEA,OAAAA,GAEArK,KAAA88C,SAAAzyC,EAAA+N,MAAAtV,IAMA,IAAA7F,EAAApU,EAAAoU,WAEA,IAAA,IAAA9G,KAAA8G,EAAA,CAGA+C,KAAAg9C,aAAA7mD,EADA8G,EAAA9G,GACAiiB,MAAAtV,IAMA,IAAA25C,EAAA5zD,EAAA4zD,gBAEA,IAAA,IAAA0D,KAAA1D,EAAA,CAKA,IAHA,IAAAroC,EAAA,GACAisC,EAAA5D,EAAA0D,GAEA35D,EAAA,EAAAyJ,EAAAowD,EAAAl5D,OAAAX,EAAAyJ,EAAAzJ,IAEA4tB,EAAAzpB,KAAA01D,EAAA75D,GAAA4xB,MAAAtV,IAIA9C,KAAAy8C,gBAAA0D,GAAA/rC,EAIApU,KAAA08C,qBAAA7zD,EAAA6zD,qBAMA,IAFA,IAAAtD,EAAAvwD,EAAAuwD,OAEApgB,EAAA,EAAAC,EAAAmgB,EAAAjyD,OAAA6xC,EAAAC,EAAAD,IAAA,CAEA,IAAA+hB,EAAA3B,EAAApgB,GACAh5B,KAAAk9C,SAAAnC,EAAA5Y,MAAA4Y,EAAAxiB,MAAAwiB,EAAA/L,eAMA,IAAAvS,EAAA5zC,EAAA4zC,YAEA,OAAAA,IAEAz8B,KAAAy8B,YAAAA,EAAArkB,SAMA,IAAAmhC,EAAA1wD,EAAA0wD,eAiBA,OAfA,OAAAA,IAEAv5C,KAAAu5C,eAAAA,EAAAnhC,SAMApY,KAAA28C,UAAAxa,MAAAt5C,EAAA8zD,UAAAxa,MACAniC,KAAA28C,UAAApkB,MAAA1vC,EAAA8zD,UAAApkB,MAIAv4B,KAAA80B,SAAAjsC,EAAAisC,SAEA90B,MAIAY,QAAA,WAEAZ,KAAAkU,cAAA,CAAArgB,KAAA,eAaA,IAAAgtD,GAAA,IAAAr0B,GACAs0B,GAAA,IAAAriB,GACAsiB,GAAA,IAAAnjB,GAEAojB,GAAA,IAAA33B,GACA43B,GAAA,IAAA53B,GACA63B,GAAA,IAAA73B,GAEA83B,GAAA,IAAA93B,GACA+3B,GAAA,IAAA/3B,GACAg4B,GAAA,IAAAh4B,GAEAi4B,GAAA,IAAAj4B,GACAk4B,GAAA,IAAAl4B,GACAm4B,GAAA,IAAAn4B,GAEAo4B,GAAA,IAAAhqC,GACAiqC,GAAA,IAAAjqC,GACAkqC,GAAA,IAAAlqC,GAEAmqC,GAAA,IAAAv4B,GACAw4B,GAAA,IAAAx4B,GAEA,SAAAy4B,GAAAlpB,EAAAE,GAEA9E,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,OAEAmM,KAAA44B,cAAA9rC,IAAA8rC,EAAAA,EAAA,IAAA4jB,GACAx8C,KAAA84B,cAAAhsC,IAAAgsC,EAAAA,EAAA,IAAA8a,GAEA5zC,KAAA+hD,qBAkSA,SAAAC,GAAAj3D,EAAA+tC,EAAAmpB,EAAArjB,EAAAkgB,EAAAC,EAAAC,EAAA1iB,GAcA,GAAA,QAVAxD,EAAA6Y,OAAA7mC,EAEA8zB,EAAAmC,kBAAAie,EAAAD,EAAAD,GAAA,EAAAxiB,GAIAsC,EAAAmC,kBAAA+d,EAAAC,EAAAC,EAAAlmB,EAAA6Y,OAAA5mC,EAAAuxB,IAIA,OAAA,KAEAulB,GAAAz1D,KAAAkwC,GACAulB,GAAAl+B,aAAA54B,EAAA4/B,aAEA,IAAA0L,EAAA4rB,EAAArjB,IAAAF,OAAAxkB,WAAA2nC,IAEA,OAAAxrB,EAAA4rB,EAAAtwB,MAAA0E,EAAA4rB,EAAArwB,IAAA,KAEA,CACAyE,SAAAA,EACAiG,MAAAulB,GAAAzpC,QACArtB,OAAAA,GAKA,SAAAm3D,GAAAn3D,EAAA+tC,EAAAmpB,EAAArjB,EAAAjO,EAAAwxB,EAAAzF,EAAAn5B,EAAA2gB,EAAAr9C,EAAA6E,EAAAhF,GAEAs6D,GAAAhmC,oBAAA2V,EAAA9pC,GACAo6D,GAAAjmC,oBAAA2V,EAAAjlC,GACAw1D,GAAAlmC,oBAAA2V,EAAAjqC,GAEA,IAAA07D,EAAAr3D,EAAAs3D,sBAEA,GAAAvpB,EAAA8b,cAAAuN,GAAAC,EAAA,CAEAd,GAAA9pC,IAAA,EAAA,EAAA,GACA+pC,GAAA/pC,IAAA,EAAA,EAAA,GACAgqC,GAAAhqC,IAAA,EAAA,EAAA,GAEA,IAAA,IAAAhxB,EAAA,EAAAm1C,EAAAwmB,EAAAh7D,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAA87D,EAAAF,EAAA57D,GACA65D,EAAA8B,EAAA37D,GAEA,IAAA87D,IAEAnB,GAAAnmC,oBAAAqlC,EAAAx5D,GACAu6D,GAAApmC,oBAAAqlC,EAAA30D,GACA21D,GAAArmC,oBAAAqlC,EAAA35D,GAEAg2D,GAEA4E,GAAA3oC,gBAAAwoC,GAAAmB,GACAf,GAAA5oC,gBAAAyoC,GAAAkB,GACAd,GAAA7oC,gBAAA0oC,GAAAiB,KAIAhB,GAAA3oC,gBAAAwoC,GAAAvoC,IAAAooC,IAAAsB,GACAf,GAAA5oC,gBAAAyoC,GAAAxoC,IAAAqoC,IAAAqB,GACAd,GAAA7oC,gBAAA0oC,GAAAzoC,IAAAsoC,IAAAoB,KAMAtB,GAAAzoC,IAAA+oC,IACAL,GAAA1oC,IAAAgpC,IACAL,GAAA3oC,IAAAipC,IAIAz2D,EAAAw3D,gBAEAx3D,EAAAy3D,cAAA37D,EAAAm6D,IACAj2D,EAAAy3D,cAAA92D,EAAAu1D,IACAl2D,EAAAy3D,cAAA97D,EAAAw6D,KAIA,IAAAuB,EAAAT,GAAAj3D,EAAA+tC,EAAAmpB,EAAArjB,EAAAoiB,GAAAC,GAAAC,GAAAU,IAEA,GAAAa,EAAA,CAEAl/B,IAEAk+B,GAAAzmC,oBAAAuI,EAAA18B,GACA66D,GAAA1mC,oBAAAuI,EAAA73B,GACAi2D,GAAA3mC,oBAAAuI,EAAA78B,GAEA+7D,EAAAl/B,GAAA6f,GAAAW,MAAA6d,GAAAZ,GAAAC,GAAAC,GAAAO,GAAAC,GAAAC,GAAA,IAAAlqC,KAIAysB,IAEAud,GAAAzmC,oBAAAkpB,EAAAr9C,GACA66D,GAAA1mC,oBAAAkpB,EAAAx4C,GACAi2D,GAAA3mC,oBAAAkpB,EAAAx9C,GAEA+7D,EAAAve,IAAAd,GAAAW,MAAA6d,GAAAZ,GAAAC,GAAAC,GAAAO,GAAAC,GAAAC,GAAA,IAAAlqC,KAIA,IAAAwjC,EAAA,IAAAnM,GAAAjoD,EAAA6E,EAAAhF,GACA08C,GAAAC,UAAA2d,GAAAC,GAAAC,GAAAjG,EAAAxvB,QAEAg3B,EAAAxH,KAAAA,EAIA,OAAAwH,EAnZAX,GAAAr6D,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAAypC,GAEArpB,QAAA,EAEArsC,KAAA,SAAAvD,GAmBA,OAjBAmrC,GAAAvsC,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,QAEAiE,IAAAjE,EAAAw5D,wBAEAriD,KAAAqiD,sBAAAx5D,EAAAw5D,sBAAAl3D,cAIA2B,IAAAjE,EAAA65D,wBAEA1iD,KAAA0iD,sBAAAn7D,OAAAM,OAAA,GAAAgB,EAAA65D,wBAIA1iD,KAAA84B,SAAAjwC,EAAAiwC,SACA94B,KAAA44B,SAAA/vC,EAAA+vC,SAEA54B,MAIA+hD,mBAAA,WAEA,IAAAnpB,EAAA54B,KAAA44B,SAEA,GAAAA,EAAAgkB,iBAAA,CAEA,IAAAH,EAAA7jB,EAAA6jB,gBACAh0D,EAAAlB,OAAAkB,KAAAg0D,GAEA,GAAAh0D,EAAAtB,OAAA,EAAA,CAEA,IAAAk5D,EAAA5D,EAAAh0D,EAAA,IAEA,QAAAqE,IAAAuzD,EAAA,CAEArgD,KAAAqiD,sBAAA,GACAriD,KAAA0iD,sBAAA,GAEA,IAAA,IAAAl1D,EAAA,EAAAm1D,EAAAtC,EAAAl5D,OAAAqG,EAAAm1D,EAAAn1D,IAAA,CAEA,IAAA2I,EAAAkqD,EAAA7yD,GAAA2I,MAAApO,OAAAyF,GAEAwS,KAAAqiD,sBAAA13D,KAAA,GACAqV,KAAA0iD,sBAAAvsD,GAAA3I,SAQA,CAEA,IAAAonD,EAAAhc,EAAAgc,kBAEA9nD,IAAA8nD,GAAAA,EAAAztD,OAAA,GAEA+P,QAAAkK,MAAA,0GAQAo2B,QAAA,SAAAyqB,EAAAW,GAEA,IA4BAH,EA5BA7pB,EAAA54B,KAAA44B,SACAE,EAAA94B,KAAA84B,SACAnO,EAAA3qB,KAAA2qB,YAEA,QAAA79B,IAAAgsC,IAIA,OAAAF,EAAA2gB,gBAAA3gB,EAAA2kB,wBAEAwD,GAAA30D,KAAAwsC,EAAA2gB,gBACAwH,GAAAp9B,aAAAgH,IAEA,IAAAs3B,EAAArjB,IAAA5B,iBAAA+jB,MAIAF,GAAA5iC,WAAA0M,GACAm2B,GAAA10D,KAAA61D,EAAArjB,KAAAjb,aAAAk9B,IAIA,OAAAjoB,EAAA6D,cAEA,IAAAqkB,GAAA/jB,cAAAnE,EAAA6D,eAMA,GAAA7D,EAAAgkB,iBAAA,CAEA,IAAAvyC,EAAAuuB,EAAAvuB,MACAsmB,EAAAiI,EAAA37B,WAAA0zB,SACAwxB,EAAAvpB,EAAA6jB,gBAAA9rB,SACA+rB,EAAA9jB,EAAA8jB,qBACAn5B,EAAAqV,EAAA37B,WAAAsmB,GACA2gB,EAAAtL,EAAA37B,WAAAinC,IACAkV,EAAAxgB,EAAAwgB,OACAuD,EAAA/jB,EAAA+jB,UAEA,GAAA,OAAAtyC,EAIA,GAAAnf,MAAA6B,QAAA+rC,GAEA,IAAA,IAAAtyC,EAAA,EAAAm1C,EAAAyd,EAAAjyD,OAAAX,EAAAm1C,EAAAn1C,IAQA,IANA,IAAAu0D,EAAA3B,EAAA5yD,GACAq8D,EAAA/pB,EAAAiiB,EAAA/L,eAKArU,EAHAlsC,KAAAsD,IAAAgpD,EAAA5Y,MAAAwa,EAAAxa,OAGAsc,EAFAhwD,KAAAqM,IAAAigD,EAAA5Y,MAAA4Y,EAAAxiB,MAAAokB,EAAAxa,MAAAwa,EAAApkB,OAEAoC,EAAA8jB,EAAA9jB,GAAA,EAAA,CAEA,IAAA9zC,EAAAwjB,EAAA6Q,KAAAyf,GACAjvC,EAAA2e,EAAA6Q,KAAAyf,EAAA,GACAj0C,EAAA2jB,EAAA6Q,KAAAyf,EAAA,IAEA8nB,EAAAP,GAAAliD,KAAA6iD,EAAAZ,EAAAnB,GAAAnwB,EAAAwxB,EAAAzF,EAAAn5B,EAAA2gB,EAAAr9C,EAAA6E,EAAAhF,MAIA+7D,EAAAK,UAAAr0D,KAAAC,MAAAisC,EAAA,GACA8nB,EAAAxH,KAAAjM,cAAA+L,EAAA/L,cACA4T,EAAAj4D,KAAA83D,SAaA,IAHA,IAGAzpB,EAHAvqC,KAAAsD,IAAA,EAAA4qD,EAAAxa,OAGAoP,EAFA9iD,KAAAqM,IAAAuP,EAAAkuB,MAAAokB,EAAAxa,MAAAwa,EAAApkB,OAEAS,EAAAuY,EAAAvY,GAAA,EAAA,CAEA,IAAA+pB,EAAA14C,EAAA6Q,KAAA8d,GACAgqB,EAAA34C,EAAA6Q,KAAA8d,EAAA,GACAiqB,EAAA54C,EAAA6Q,KAAA8d,EAAA,IAEAypB,EAAAP,GAAAliD,KAAA84B,EAAAmpB,EAAAnB,GAAAnwB,EAAAwxB,EAAAzF,EAAAn5B,EAAA2gB,EAAA6e,EAAAC,EAAAC,MAIAR,EAAAK,UAAAr0D,KAAAC,MAAAsqC,EAAA,GACA4pB,EAAAj4D,KAAA83D,SAQA,QAAA31D,IAAA6jC,EAIA,GAAAzlC,MAAA6B,QAAA+rC,GAEA,IAAA,IAAAI,EAAA,EAAAqlB,EAAAnF,EAAAjyD,OAAA+xC,EAAAqlB,EAAArlB,IAQA,IANA,IAAAgqB,EAAA9J,EAAAlgB,GACAiqB,EAAArqB,EAAAoqB,EAAAlU,eAKA+M,EAHAttD,KAAAsD,IAAAmxD,EAAA/gB,MAAAwa,EAAAxa,OAGAihB,EAFA30D,KAAAqM,IAAAooD,EAAA/gB,MAAA+gB,EAAA3qB,MAAAokB,EAAAxa,MAAAwa,EAAApkB,OAEAwjB,EAAAqH,EAAArH,GAAA,EAAA,EAMA0G,EAAAP,GAAAliD,KAAAmjD,EAAAlB,EAAAnB,GAAAnwB,EAAAwxB,EAAAzF,EAAAn5B,EAAA2gB,EAJA6X,EACAA,EAAA,EACAA,EAAA,MAMA0G,EAAAK,UAAAr0D,KAAAC,MAAAqtD,EAAA,GACA0G,EAAAxH,KAAAjM,cAAAkU,EAAAlU,cACA4T,EAAAj4D,KAAA83D,SAaA,IAHA,IAGAY,EAHA50D,KAAAsD,IAAA,EAAA4qD,EAAAxa,OAGAmhB,EAFA70D,KAAAqM,IAAA61B,EAAA4H,MAAAokB,EAAAxa,MAAAwa,EAAApkB,OAEA8qB,EAAAC,EAAAD,GAAA,EAAA,EAMAZ,EAAAP,GAAAliD,KAAA84B,EAAAmpB,EAAAnB,GAAAnwB,EAAAwxB,EAAAzF,EAAAn5B,EAAA2gB,EAJAmf,EACAA,EAAA,EACAA,EAAA,MAMAZ,EAAAK,UAAAr0D,KAAAC,MAAA20D,EAAA,GACAT,EAAAj4D,KAAA83D,UAUA,GAAA7pB,EAAA8kB,WAAA,CAEA,IAIAxE,EAJAqK,EAAAr4D,MAAA6B,QAAA+rC,GAEAigB,EAAAngB,EAAAmgB,SACAiC,EAAApiB,EAAAoiB,MAGAI,EAAAxiB,EAAAwiB,cAAA,GACAA,EAAAj0D,OAAA,IAAA+xD,EAAAkC,GAEA,IAAA,IAAA30D,EAAA,EAAA+8D,EAAAxI,EAAA7zD,OAAAV,EAAA+8D,EAAA/8D,IAAA,CAEA,IAAAw0D,EAAAD,EAAAv0D,GACAg9D,EAAAF,EAAAzqB,EAAAmiB,EAAAjM,eAAAlW,EAEA,QAAAhsC,IAAA22D,EAAA,CAEA,IAAAC,EAAA3K,EAAAkC,EAAAp0D,GACA88D,EAAA5K,EAAAkC,EAAAvvD,GACAk4D,EAAA7K,EAAAkC,EAAAv0D,GAIA,GAFA+7D,EAAAT,GAAAhiD,KAAAyjD,EAAAxB,EAAAnB,GAAA4C,EAAAC,EAAAC,EAAAhC,IAEA,CAEA,GAAA1I,GAAAA,EAAAzyD,GAAA,CAEA,IAAAo9D,EAAA3K,EAAAzyD,GACAg7D,GAAAr1D,KAAAy3D,EAAA,IACAnC,GAAAt1D,KAAAy3D,EAAA,IACAlC,GAAAv1D,KAAAy3D,EAAA,IAEApB,EAAAl/B,GAAA6f,GAAAW,MAAA6d,GAAA8B,EAAAC,EAAAC,EAAAnC,GAAAC,GAAAC,GAAA,IAAAlqC,IAIAgrC,EAAAxH,KAAAA,EACAwH,EAAAK,UAAAr8D,EACAm8D,EAAAj4D,KAAA83D,UA8IA,IAAAqB,GAAA,EACAC,GAAA,IAAAv3B,GACAw3B,GAAA,IAAAhwB,GACAiwB,GAAA,IAAA56B,GAEA,SAAA66B,KAEA38D,OAAA6iB,eAAApK,KAAA,KAAA,CAAA9T,MAAA43D,IAAA,IAEA9jD,KAAA2gB,KAAApM,GAAAI,eAEA3U,KAAA7J,KAAA,GACA6J,KAAAnM,KAAA,WAEAmM,KAAA+4C,SAAA,GACA/4C,KAAAi5C,OAAA,GACAj5C,KAAAg7C,MAAA,GACAh7C,KAAAo7C,cAAA,CAAA,IAEAp7C,KAAA40C,aAAA,GACA50C,KAAAm3C,aAAA,GAEAn3C,KAAAq5C,YAAA,GACAr5C,KAAAs5C,YAAA,GAEAt5C,KAAAy9C,cAAA,GAEAz9C,KAAAy8B,YAAA,KACAz8B,KAAAu5C,eAAA,KAIAv5C,KAAA89C,oBAAA,EACA99C,KAAAw5C,oBAAA,EACAx5C,KAAA25C,eAAA,EACA35C,KAAAy5C,mBAAA,EACAz5C,KAAA05C,kBAAA,EACA15C,KAAAk+C,yBAAA,EACAl+C,KAAA45C,kBAAA,EAIAsK,GAAAz8D,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA/O,GAAAlsB,WAAA,CAEA4wB,YAAA6rC,GAEAxG,YAAA,EAEA/5B,aAAA,SAAAzF,GAIA,IAFA,IAAAoW,GAAA,IAAA5c,IAAAiH,gBAAAT,GAEA13B,EAAA,EAAAm1C,EAAA37B,KAAA+4C,SAAA5xD,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEAwZ,KAAA+4C,SAAAvyD,GACAm9B,aAAAzF,GAIA,IAAA,IAAA8a,EAAA,EAAAuY,EAAAvxC,KAAAg7C,MAAA7zD,OAAA6xC,EAAAuY,EAAAvY,IAAA,CAEA,IAAAiiB,EAAAj7C,KAAAg7C,MAAAhiB,GACAiiB,EAAAxvB,OAAAtS,aAAAmb,GAAAva,YAEA,IAAA,IAAA4gB,EAAA,EAAA8jB,EAAAxD,EAAAhM,cAAA9nD,OAAAwzC,EAAA8jB,EAAA9jB,IAEAsgB,EAAAhM,cAAAtU,GAAAxhB,aAAAmb,GAAAva,YAqBA,OAfA,OAAA/Z,KAAAy8B,aAEAz8B,KAAA08B,qBAIA,OAAA18B,KAAAu5C,gBAEAv5C,KAAAu9C,wBAIAv9C,KAAAw5C,oBAAA,EACAx5C,KAAAy5C,mBAAA,EAEAz5C,MAIAi2B,QAAA,SAAAjc,GAQA,OAJA+pC,GAAA1zB,cAAArW,GAEAha,KAAA2jB,aAAAogC,IAEA/jD,MAIAk2B,QAAA,SAAAlc,GAQA,OAJA+pC,GAAAzzB,cAAAtW,GAEAha,KAAA2jB,aAAAogC,IAEA/jD,MAIAm2B,QAAA,SAAAnc,GAQA,OAJA+pC,GAAAxzB,cAAAvW,GAEAha,KAAA2jB,aAAAogC,IAEA/jD,MAIAwf,UAAA,SAAArzB,EAAAsB,EAAAg0B,GAQA,OAJAsiC,GAAA3zB,gBAAAjkC,EAAAsB,EAAAg0B,GAEAzhB,KAAA2jB,aAAAogC,IAEA/jD,MAIAsE,MAAA,SAAAnY,EAAAsB,EAAAg0B,GAQA,OAJAsiC,GAAAtzB,UAAAtkC,EAAAsB,EAAAg0B,GAEAzhB,KAAA2jB,aAAAogC,IAEA/jD,MAIAgvB,OAAA,SAAA0H,GAQA,OANAstB,GAAAh1B,OAAA0H,GAEAstB,GAAAphC,eAEA5iB,KAAA2jB,aAAAqgC,GAAA9lC,QAEAle,MAIAmkD,mBAAA,SAAAvrB,GAEA,IAAAwrB,EAAApkD,KAEAqK,EAAA,OAAAuuB,EAAAvuB,MAAAuuB,EAAAvuB,WAAAvd,EACAmQ,EAAA27B,EAAA37B,WAEA,QAAAnQ,IAAAmQ,EAAA0zB,SAGA,OADAz5B,QAAAkK,MAAA,oFACApB,KAIA,IAAA2wB,EAAA1zB,EAAA0zB,SACAlF,EAAAxuB,EAAAwuB,OACAsjB,EAAA9xC,EAAA8xC,MACAxrB,EAAAtmB,EAAAsmB,GACA2gB,EAAAjnC,EAAAinC,SAEAp3C,IAAAo3C,IAAAlkC,KAAAo7C,cAAA,GAAA,IAEA,IAAA,IAAA50D,EAAA,EAAAA,EAAAmqC,EAAA4H,MAAA/xC,IAEA49D,EAAArL,SAAApuD,MAAA,IAAA0+B,IAAArO,oBAAA2V,EAAAnqC,SAEAsG,IAAAiiD,GAEAqV,EAAAnL,OAAAtuD,MAAA,IAAA8jD,IAAAzzB,oBAAA+zB,EAAAvoD,IAMA,SAAA69D,EAAAx9D,EAAA6E,EAAAhF,EAAAsoD,GAEA,IAAAG,OAAAriD,IAAAiiD,EAAA,GAAA,CACAqV,EAAAnL,OAAApyD,GAAAuxB,QACAgsC,EAAAnL,OAAAvtD,GAAA0sB,QACAgsC,EAAAnL,OAAAvyD,GAAA0xB,SASA6iC,EAAA,IAAAnM,GAAAjoD,EAAA6E,EAAAhF,OANAoG,IAAA2+B,EAAA,GAAA,EACA,IAAApC,IAAArO,oBAAAyQ,EAAA5kC,IACA,IAAAwiC,IAAArO,oBAAAyQ,EAAA//B,IACA,IAAA29B,IAAArO,oBAAAyQ,EAAA/kC,IAGAyoD,EAAAH,GAEAoV,EAAApJ,MAAArwD,KAAAswD,QAEAnuD,IAAAy2B,GAEA6gC,EAAAhJ,cAAA,GAAAzwD,KAAA,EACA,IAAA8sB,IAAAuD,oBAAAuI,EAAA18B,IACA,IAAA4wB,IAAAuD,oBAAAuI,EAAA73B,IACA,IAAA+rB,IAAAuD,oBAAAuI,EAAA78B,UAKAoG,IAAAo3C,GAEAkgB,EAAAhJ,cAAA,GAAAzwD,KAAA,EACA,IAAA8sB,IAAAuD,oBAAAkpB,EAAAr9C,IACA,IAAA4wB,IAAAuD,oBAAAkpB,EAAAx4C,IACA,IAAA+rB,IAAAuD,oBAAAkpB,EAAAx9C,KAOA,IAAA0yD,EAAAxgB,EAAAwgB,OAEA,GAAAA,EAAAjyD,OAAA,EAEA,IAAA,IAAA6xC,EAAA,EAAAA,EAAAogB,EAAAjyD,OAAA6xC,IAOA,IALA,IAAA+hB,EAAA3B,EAAApgB,GAEAmJ,EAAA4Y,EAAA5Y,MAGAxH,EAAAwH,EAAAsc,EAAAtc,EAFA4Y,EAAAxiB,MAEAoC,EAAA8jB,EAAA9jB,GAAA,OAEA7tC,IAAAud,EAEAg6C,EAAAh6C,EAAA6Q,KAAAyf,GAAAtwB,EAAA6Q,KAAAyf,EAAA,GAAAtwB,EAAA6Q,KAAAyf,EAAA,GAAAogB,EAAA/L,eAIAqV,EAAA1pB,EAAAA,EAAA,EAAAA,EAAA,EAAAogB,EAAA/L,oBAUA,QAAAliD,IAAAud,EAEA,IAAA,IAAA6uB,EAAA,EAAAA,EAAA7uB,EAAAkuB,MAAAW,GAAA,EAEAmrB,EAAAh6C,EAAA6Q,KAAAge,GAAA7uB,EAAA6Q,KAAAge,EAAA,GAAA7uB,EAAA6Q,KAAAge,EAAA,SAMA,IAAA,IAAAmqB,EAAA,EAAAA,EAAA1yB,EAAA4H,MAAA8qB,GAAA,EAEAgB,EAAAhB,EAAAA,EAAA,EAAAA,EAAA,GAsBA,OAdArjD,KAAA0+C,qBAEA,OAAA9lB,EAAA6D,cAEAz8B,KAAAy8B,YAAA7D,EAAA6D,YAAArkB,SAIA,OAAAwgB,EAAA2gB,iBAEAv5C,KAAAu5C,eAAA3gB,EAAA2gB,eAAAnhC,SAIApY,MAIAqb,OAAA,WAQA,OANArb,KAAA08B,qBAEA18B,KAAAy8B,YAAAL,UAAA6nB,IAAAxqC,SAEAzZ,KAAAwf,UAAAykC,GAAA93D,EAAA83D,GAAAx2D,EAAAw2D,GAAAxiC,GAEAzhB,MAIA+Z,UAAA,WAEA/Z,KAAAu9C,wBAEA,IAAAliC,EAAArb,KAAAu5C,eAAAl+B,OACAwQ,EAAA7rB,KAAAu5C,eAAA1tB,OAEAziC,EAAA,IAAAyiC,EAAA,EAAA,EAAAA,EAEA3N,EAAA,IAAAsO,GAUA,OATAtO,EAAA1G,IACApuB,EAAA,EAAA,GAAAA,EAAAiyB,EAAAlvB,EACA,EAAA/C,EAAA,GAAAA,EAAAiyB,EAAA5tB,EACA,EAAA,EAAArE,GAAAA,EAAAiyB,EAAAoG,EACA,EAAA,EAAA,EAAA,GAGAzhB,KAAA2jB,aAAAzF,GAEAle,MAIA0+C,mBAAA,WAIA,IAFA,IAAAx6C,EAAA,IAAAmlB,GAAAp1B,EAAA,IAAAo1B,GAEA5iC,EAAA,EAAA+8D,EAAAxjD,KAAAg7C,MAAA7zD,OAAAV,EAAA+8D,EAAA/8D,IAAA,CAEA,IAAAw0D,EAAAj7C,KAAAg7C,MAAAv0D,GAEA24D,EAAAp/C,KAAA+4C,SAAAkC,EAAAp0D,GACAw4D,EAAAr/C,KAAA+4C,SAAAkC,EAAAvvD,GAGAwY,EAAA2U,WAFA7Y,KAAA+4C,SAAAkC,EAAAv0D,GAEA24D,GACAprD,EAAA4kB,WAAAumC,EAAAC,GACAn7C,EAAAyV,MAAA1lB,GAEAiQ,EAAA6V,YAEAkhC,EAAAxvB,OAAAr/B,KAAA8X,KAMAy6C,qBAAA,SAAA2F,QAEAx3D,IAAAw3D,IAAAA,GAAA,GAIA,IAFA,IAAAvL,EAAA,IAAA7tD,MAAA8U,KAAA+4C,SAAA5xD,QAEAmxB,EAAA,EAAAisC,EAAAvkD,KAAA+4C,SAAA5xD,OAAAmxB,EAAAisC,EAAAjsC,IAEAygC,EAAAzgC,GAAA,IAAA+Q,GAIA,GAAAi7B,EAOA,IAFA,IAAApgD,EAAA,IAAAmlB,GAAAp1B,EAAA,IAAAo1B,GAEA5iC,EAAA,EAAA+8D,EAAAxjD,KAAAg7C,MAAA7zD,OAAAV,EAAA+8D,EAAA/8D,IAAA,CAEA,IAAAw0D,EAAAj7C,KAAAg7C,MAAAv0D,GAEA24D,EAAAp/C,KAAA+4C,SAAAkC,EAAAp0D,GACAw4D,EAAAr/C,KAAA+4C,SAAAkC,EAAAvvD,GAGAwY,EAAA2U,WAFA7Y,KAAA+4C,SAAAkC,EAAAv0D,GAEA24D,GACAprD,EAAA4kB,WAAAumC,EAAAC,GACAn7C,EAAAyV,MAAA1lB,GAEA8kD,EAAAkC,EAAAp0D,GAAA0xB,IAAArU,GACA60C,EAAAkC,EAAAvvD,GAAA6sB,IAAArU,GACA60C,EAAAkC,EAAAv0D,GAAA6xB,IAAArU,OAIA,CAEAlE,KAAA0+C,qBAEA,IAAA,IAAA8F,EAAA,EAAAC,EAAAzkD,KAAAg7C,MAAA7zD,OAAAq9D,EAAAC,EAAAD,IAAA,CAEA,IAAAE,EAAA1kD,KAAAg7C,MAAAwJ,GAEAzL,EAAA2L,EAAA79D,GAAA0xB,IAAAmsC,EAAAj5B,QACAstB,EAAA2L,EAAAh5D,GAAA6sB,IAAAmsC,EAAAj5B,QACAstB,EAAA2L,EAAAh+D,GAAA6xB,IAAAmsC,EAAAj5B,SAMA,IAAA,IAAAk5B,EAAA,EAAAC,EAAA5kD,KAAA+4C,SAAA5xD,OAAAw9D,EAAAC,EAAAD,IAEA5L,EAAA4L,GAAA5qC,YAIA,IAAA,IAAA8qC,EAAA,EAAAC,EAAA9kD,KAAAg7C,MAAA7zD,OAAA09D,EAAAC,EAAAD,IAAA,CAEA,IAAAE,EAAA/kD,KAAAg7C,MAAA6J,GAEA5V,EAAA8V,EAAA9V,cAEA,IAAAA,EAAA9nD,QAEA8nD,EAAA,GAAA7iD,KAAA2sD,EAAAgM,EAAAl+D,IACAooD,EAAA,GAAA7iD,KAAA2sD,EAAAgM,EAAAr5D,IACAujD,EAAA,GAAA7iD,KAAA2sD,EAAAgM,EAAAr+D,MAIAuoD,EAAA,GAAA8J,EAAAgM,EAAAl+D,GAAAuxB,QACA62B,EAAA,GAAA8J,EAAAgM,EAAAr5D,GAAA0sB,QACA62B,EAAA,GAAA8J,EAAAgM,EAAAr+D,GAAA0xB,SAMApY,KAAAg7C,MAAA7zD,OAAA,IAEA6Y,KAAAy5C,mBAAA,IAMAuL,yBAAA,WAEAhlD,KAAA0+C,qBAEA,IAAA,IAAAj4D,EAAA,EAAA+8D,EAAAxjD,KAAAg7C,MAAA7zD,OAAAV,EAAA+8D,EAAA/8D,IAAA,CAEA,IAAAw0D,EAAAj7C,KAAAg7C,MAAAv0D,GAEAwoD,EAAAgM,EAAAhM,cAEA,IAAAA,EAAA9nD,QAEA8nD,EAAA,GAAA7iD,KAAA6uD,EAAAxvB,QACAwjB,EAAA,GAAA7iD,KAAA6uD,EAAAxvB,QACAwjB,EAAA,GAAA7iD,KAAA6uD,EAAAxvB,UAIAwjB,EAAA,GAAAgM,EAAAxvB,OAAArT,QACA62B,EAAA,GAAAgM,EAAAxvB,OAAArT,QACA62B,EAAA,GAAAgM,EAAAxvB,OAAArT,SAMApY,KAAAg7C,MAAA7zD,OAAA,IAEA6Y,KAAAy5C,mBAAA,IAMAwL,oBAAA,WAMA,IAAA,IAAAx+D,EAAA,EAAA+8D,EAAAxjD,KAAAg7C,MAAA7zD,OAAAV,EAAA+8D,EAAA/8D,IAAA,CAEA,IAAAw0D,EAAAj7C,KAAAg7C,MAAAv0D,GAEAw0D,EAAAiK,qBAMAjK,EAAAiK,qBAAA94D,KAAA6uD,EAAAxvB,QAJAwvB,EAAAiK,qBAAAjK,EAAAxvB,OAAArT,QAQA6iC,EAAAkK,0BAAAlK,EAAAkK,wBAAA,IAEA,IAAA,IAAA3+D,EAAA,EAAAm1C,EAAAsf,EAAAhM,cAAA9nD,OAAAX,EAAAm1C,EAAAn1C,IAEAy0D,EAAAkK,wBAAA3+D,GAMAy0D,EAAAkK,wBAAA3+D,GAAA4F,KAAA6uD,EAAAhM,cAAAzoD,IAJAy0D,EAAAkK,wBAAA3+D,GAAAy0D,EAAAhM,cAAAzoD,GAAA4xB,QAcA,IAAAgtC,EAAA,IAAAlB,GACAkB,EAAApK,MAAAh7C,KAAAg7C,MAEA,IAAA,IAAAhiB,EAAA,EAAAuY,EAAAvxC,KAAA40C,aAAAztD,OAAA6xC,EAAAuY,EAAAvY,IAAA,CAIA,IAAAh5B,KAAAm3C,aAAAne,GAAA,CAEAh5B,KAAAm3C,aAAAne,GAAA,GACAh5B,KAAAm3C,aAAAne,GAAAqsB,YAAA,GACArlD,KAAAm3C,aAAAne,GAAAiW,cAAA,GAKA,IAHA,IAAAqW,EAAAtlD,KAAAm3C,aAAAne,GAAAqsB,YACAE,EAAAvlD,KAAAm3C,aAAAne,GAAAiW,cAEAuV,EAAA,EAAAC,EAAAzkD,KAAAg7C,MAAA7zD,OAAAq9D,EAAAC,EAAAD,IAAA,CAEA,IAAAgB,EAAA,IAAAn8B,GACA4lB,EAAA,CAAApoD,EAAA,IAAAwiC,GAAA39B,EAAA,IAAA29B,GAAA3iC,EAAA,IAAA2iC,IAEAi8B,EAAA36D,KAAA66D,GACAD,EAAA56D,KAAAskD,IAMA,IAAAkI,EAAAn3C,KAAAm3C,aAAAne,GAIAosB,EAAArM,SAAA/4C,KAAA40C,aAAA5b,GAAA+f,SAIAqM,EAAA1G,qBACA0G,EAAAzG,uBAIA,IAAA,IAAAkG,EAAA,EAAAC,EAAA9kD,KAAAg7C,MAAA7zD,OAAA09D,EAAAC,EAAAD,IAAA,CAEA,IAAAH,EAAA1kD,KAAAg7C,MAAA6J,GAGAY,EAAAtO,EAAAlI,cAAA4V,GADA1N,EAAAkO,YAAAR,GAGAz4D,KAAAs4D,EAAAj5B,QAEAg6B,EAAA5+D,EAAAuF,KAAAs4D,EAAAzV,cAAA,IACAwW,EAAA/5D,EAAAU,KAAAs4D,EAAAzV,cAAA,IACAwW,EAAA/+D,EAAA0F,KAAAs4D,EAAAzV,cAAA,KAQA,IAAA,IAAAyW,EAAA,EAAAC,EAAA3lD,KAAAg7C,MAAA7zD,OAAAu+D,EAAAC,EAAAD,IAAA,CAEA,IAAAX,EAAA/kD,KAAAg7C,MAAA0K,GAEAX,EAAAt5B,OAAAs5B,EAAAG,qBACAH,EAAA9V,cAAA8V,EAAAI,0BAMAzoB,mBAAA,WAEA,OAAA18B,KAAAy8B,cAEAz8B,KAAAy8B,YAAA,IAAA7C,IAIA55B,KAAAy8B,YAAAjB,cAAAx7B,KAAA+4C,WAIAwE,sBAAA,WAEA,OAAAv9C,KAAAu5C,iBAEAv5C,KAAAu5C,eAAA,IAAA3b,IAIA59B,KAAAu5C,eAAA/d,cAAAx7B,KAAA+4C,WAIAyG,MAAA,SAAA5mB,EAAA1a,EAAA0nC,GAEA,GAAAhtB,GAAAA,EAAA8kB,WAAA,CAOA,IAAAppB,EACAuxB,EAAA7lD,KAAA+4C,SAAA5xD,OACA2+D,EAAA9lD,KAAA+4C,SACAgN,EAAAntB,EAAAmgB,SACAiN,EAAAhmD,KAAAg7C,MACAiL,EAAArtB,EAAAoiB,MACAkL,EAAAlmD,KAAAi5C,OACAkN,EAAAvtB,EAAAqgB,YAEAnsD,IAAA84D,IAAAA,EAAA,QAEA94D,IAAAoxB,IAEAoW,GAAA,IAAA5c,IAAAiH,gBAAAT,IAMA,IAAA,IAAA13B,EAAA,EAAAm1C,EAAAoqB,EAAA5+D,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAEA4/D,EAFAL,EAAAv/D,GAEA4xB,aAEAtrB,IAAAoxB,GAAAkoC,EAAAziC,aAAAzF,GAEA4nC,EAAAn7D,KAAAy7D,GAMA,IAAA,IAAAptB,EAAA,EAAAuY,EAAA4U,EAAAh/D,OAAA6xC,EAAAuY,EAAAvY,IAEAktB,EAAAv7D,KAAAw7D,EAAAntB,GAAA5gB,SAMA,IAAA,IAAA8gB,EAAA,EAAAqlB,EAAA0H,EAAA9+D,OAAA+xC,EAAAqlB,EAAArlB,IAAA,CAEA,IAAA+hB,EAAAgL,EAAA/sB,GAAAmtB,OAAA,EAAA56B,OAAA,EACA66B,EAAArL,EAAAhM,cACAsX,EAAAtL,EAAA9L,cAEAkX,EAAA,IAAAvX,GAAAmM,EAAAp0D,EAAAg/D,EAAA5K,EAAAvvD,EAAAm6D,EAAA5K,EAAAv0D,EAAAm/D,IACAp6B,OAAAr/B,KAAA6uD,EAAAxvB,aAEA3+B,IAAAwnC,GAEA+xB,EAAA56B,OAAAtS,aAAAmb,GAAAva,YAIA,IAAA,IAAA4gB,EAAA,EAAA8jB,EAAA6H,EAAAn/D,OAAAwzC,EAAA8jB,EAAA9jB,IAEAlP,EAAA66B,EAAA3rB,GAAAviB,aAEAtrB,IAAAwnC,GAEA7I,EAAAtS,aAAAmb,GAAAva,YAIAssC,EAAApX,cAAAtkD,KAAA8gC,GAIA46B,EAAAtX,MAAA3iD,KAAA6uD,EAAAlM,OAEA,IAAA,IAAAgN,EAAA,EAAAqH,EAAAmD,EAAAp/D,OAAA40D,EAAAqH,EAAArH,IAGAsK,EAAAlX,aAAAxkD,KADA47D,EAAAxK,GACA3jC,SAIAiuC,EAAArX,cAAAiM,EAAAjM,cAAA4W,EAEAI,EAAAr7D,KAAA07D,GAMA,IAAA,IAAAhD,EAAA,EAAAC,EAAA1qB,EAAAwiB,cAAAj0D,OAAAk8D,EAAAC,EAAAD,IAAA,CAEA,IAAAmD,EAAA5tB,EAAAwiB,cAAAiI,QAEAv2D,IAAAkT,KAAAo7C,cAAAiI,KAAArjD,KAAAo7C,cAAAiI,GAAA,IAEA,IAAA,IAAAoD,EAAA,EAAAC,EAAAF,EAAAr/D,OAAAs/D,EAAAC,EAAAD,IAAA,CAIA,IAFA,IAAAtN,EAAAqN,EAAAC,GAAAE,EAAA,GAEAvjD,EAAA,EAAAwjD,EAAAzN,EAAAhyD,OAAAic,EAAAwjD,EAAAxjD,IAEAujD,EAAAh8D,KAAAwuD,EAAA/1C,GAAAgV,SAIApY,KAAAo7C,cAAAiI,GAAA14D,KAAAg8D,UA5GAzvD,QAAAkK,MAAA,sEAAAw3B,IAoHAiuB,UAAA,SAAAC,GAEAA,GAAAA,EAAAruB,QAOAquB,EAAA7lC,kBAAA6lC,EAAAlkC,eAEA5iB,KAAAw/C,MAAAsH,EAAAluB,SAAAkuB,EAAA5oC,SAPAhnB,QAAAkK,MAAA,kEAAA0lD,IAiBAC,cAAA,WAQA,IANA,IAAAC,EAAA,GACAC,EAAA,GAAAC,EAAA,GAGAruD,EAAApK,KAAAub,IAAA,GADA,GAGAxjB,EAAA,EAAAm1C,EAAA37B,KAAA+4C,SAAA5xD,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAA8xB,EAAAtY,KAAA+4C,SAAAvyD,GACA8C,EAAAmF,KAAAyB,MAAAooB,EAAAnsB,EAAA0M,GAAA,IAAApK,KAAAyB,MAAAooB,EAAA7qB,EAAAoL,GAAA,IAAApK,KAAAyB,MAAAooB,EAAAmJ,EAAA5oB,QAEA/L,IAAAk6D,EAAA19D,IAEA09D,EAAA19D,GAAA9C,EACAygE,EAAAt8D,KAAAqV,KAAA+4C,SAAAvyD,IACA0gE,EAAA1gE,GAAAygE,EAAA9/D,OAAA,GAKA+/D,EAAA1gE,GAAA0gE,EAAAF,EAAA19D,IAWA,IAFA,IAAA69D,EAAA,GAEAnuB,EAAA,EAAAuY,EAAAvxC,KAAAg7C,MAAA7zD,OAAA6xC,EAAAuY,EAAAvY,IAAA,CAEA,IAAAiiB,EAAAj7C,KAAAg7C,MAAAhiB,GAEAiiB,EAAAp0D,EAAAqgE,EAAAjM,EAAAp0D,GACAo0D,EAAAvvD,EAAAw7D,EAAAjM,EAAAvvD,GACAuvD,EAAAv0D,EAAAwgE,EAAAjM,EAAAv0D,GAMA,IAJA,IAAAq5D,EAAA,CAAA9E,EAAAp0D,EAAAo0D,EAAAvvD,EAAAuvD,EAAAv0D,GAIAL,EAAA,EAAAA,EAAA,EAAAA,IAEA,GAAA05D,EAAA15D,KAAA05D,GAAA15D,EAAA,GAAA,GAAA,CAEA8gE,EAAAx8D,KAAAquC,GACA,OAQA,IAAA,IAAAE,EAAAiuB,EAAAhgE,OAAA,EAAA+xC,GAAA,EAAAA,IAAA,CAEA,IAAAkuB,EAAAD,EAAAjuB,GAEAl5B,KAAAg7C,MAAA/mC,OAAAmzC,EAAA,GAEA,IAAA,IAAAzsB,EAAA,EAAA8jB,EAAAz+C,KAAAo7C,cAAAj0D,OAAAwzC,EAAA8jB,EAAA9jB,IAEA36B,KAAAo7C,cAAAzgB,GAAA1mB,OAAAmzC,EAAA,GAQA,IAAAC,EAAArnD,KAAA+4C,SAAA5xD,OAAA8/D,EAAA9/D,OAEA,OADA6Y,KAAA+4C,SAAAkO,EACAI,GAIA7rB,cAAA,SAAAC,GAEAz7B,KAAA+4C,SAAA,GAEA,IAAA,IAAAvyD,EAAA,EAAAyJ,EAAAwrC,EAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAA81C,EAAAb,EAAAj1C,GACAwZ,KAAA+4C,SAAApuD,KAAA,IAAA0+B,GAAAiT,EAAAnwC,EAAAmwC,EAAA7uC,EAAA6uC,EAAA7a,GAAA,IAIA,OAAAzhB,MAIAsnD,yBAAA,WAOA,IALA,IAAAtM,EAAAh7C,KAAAg7C,MACA7zD,EAAA6zD,EAAA7zD,OAIAX,EAAA,EAAAA,EAAAW,EAAAX,IAEAw0D,EAAAx0D,GAAA+gE,IAAA/gE,EAYAw0D,EAAAhvD,KANA,SAAAnF,EAAA6E,GAEA,OAAA7E,EAAAmoD,cAAAtjD,EAAAsjD,gBAQA,IAGAwY,EAAAC,EAHAC,EAAA1nD,KAAAo7C,cAAA,GACAjC,EAAAn5C,KAAAo7C,cAAA,GAIAsM,GAAAA,EAAAvgE,SAAAA,IAAAqgE,EAAA,IACArO,GAAAA,EAAAhyD,SAAAA,IAAAsgE,EAAA,IAEA,IAAA,IAAAzuB,EAAA,EAAAA,EAAA7xC,EAAA6xC,IAAA,CAEA,IAAA1vB,EAAA0xC,EAAAhiB,GAAAuuB,IAEAC,GAAAA,EAAA78D,KAAA+8D,EAAAp+C,IACAm+C,GAAAA,EAAA98D,KAAAwuD,EAAA7vC,IAIAk+C,IAAAxnD,KAAAo7C,cAAA,GAAAoM,GACAC,IAAAznD,KAAAo7C,cAAA,GAAAqM,IAIA5kC,OAAA,WAEA,IAAA/f,EAAA,CACAmgB,SAAA,CACA3B,QAAA,IACAztB,KAAA,WACAqvB,UAAA,oBAUA,GAJApgB,EAAA6d,KAAA3gB,KAAA2gB,KACA7d,EAAAjP,KAAAmM,KAAAnM,KACA,KAAAmM,KAAA7J,OAAA2M,EAAA3M,KAAA6J,KAAA7J,WAEArJ,IAAAkT,KAAA64B,WAAA,CAEA,IAAAA,EAAA74B,KAAA64B,WAEA,IAAA,IAAAvvC,KAAAuvC,OAEA/rC,IAAA+rC,EAAAvvC,KAAAwZ,EAAAxZ,GAAAuvC,EAAAvvC,IAIA,OAAAwZ,EAMA,IAFA,IAAAi2C,EAAA,GAEAvyD,EAAA,EAAAA,EAAAwZ,KAAA+4C,SAAA5xD,OAAAX,IAAA,CAEA,IAAAmhE,EAAA3nD,KAAA+4C,SAAAvyD,GACAuyD,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAYA,IARA,IAAAu5B,EAAA,GACAhC,EAAA,GACA4O,EAAA,GACA3O,EAAA,GACA4O,EAAA,GACA3O,EAAA,GACA4O,EAAA,GAEA9uB,EAAA,EAAAA,EAAAh5B,KAAAg7C,MAAA7zD,OAAA6xC,IAAA,CAEA,IAAAiiB,EAAAj7C,KAAAg7C,MAAAhiB,GAIAqiB,OAAAvuD,IAAAkT,KAAAo7C,cAAA,GAAApiB,GACA+uB,EAAA9M,EAAAxvB,OAAAtkC,SAAA,EACA6gE,EAAA/M,EAAAhM,cAAA9nD,OAAA,EACA8gE,EAAA,IAAAhN,EAAAlM,MAAA5oD,GAAA,IAAA80D,EAAAlM,MAAA/wB,GAAA,IAAAi9B,EAAAlM,MAAArjD,EACAw8D,EAAAjN,EAAA9L,aAAAhoD,OAAA,EAEAghE,EAAA,EAeA,GAbAA,EAAAC,EAAAD,EAAA,EAAA,GACAA,EAAAC,EAAAD,EAAA,GAXA,GAYAA,EAAAC,EAAAD,EAAA,GAXA,GAYAA,EAAAC,EAAAD,EAAA,EAAA9M,GACA8M,EAAAC,EAAAD,EAAA,EAAAJ,GACAI,EAAAC,EAAAD,EAAA,EAAAH,GACAG,EAAAC,EAAAD,EAAA,EAAAF,GACAE,EAAAC,EAAAD,EAAA,EAAAD,GAEAlN,EAAArwD,KAAAw9D,GACAnN,EAAArwD,KAAAswD,EAAAp0D,EAAAo0D,EAAAvvD,EAAAuvD,EAAAv0D,GACAs0D,EAAArwD,KAAAswD,EAAAjM,eAEAqM,EAAA,CAEA,IAAAD,EAAAp7C,KAAAo7C,cAAA,GAAApiB,GAEAgiB,EAAArwD,KACA09D,EAAAjN,EAAA,IACAiN,EAAAjN,EAAA,IACAiN,EAAAjN,EAAA,KAWA,GANA2M,GAEA/M,EAAArwD,KAAA29D,EAAArN,EAAAxvB,SAIAu8B,EAAA,CAEA,IAAA/Y,EAAAgM,EAAAhM,cAEA+L,EAAArwD,KACA29D,EAAArZ,EAAA,IACAqZ,EAAArZ,EAAA,IACAqZ,EAAArZ,EAAA,KAWA,GANAgZ,GAEAjN,EAAArwD,KAAA49D,EAAAtN,EAAAlM,QAIAmZ,EAAA,CAEA,IAAA/Y,EAAA8L,EAAA9L,aAEA6L,EAAArwD,KACA49D,EAAApZ,EAAA,IACAoZ,EAAApZ,EAAA,IACAoZ,EAAApZ,EAAA,MAOA,SAAAiZ,EAAAl8D,EAAAykC,EAAAzyB,GAEA,OAAAA,EAAAhS,EAAA,GAAAykC,EAAAzkC,IAAA,GAAAykC,GAIA,SAAA23B,EAAA78B,GAEA,IAAAp1B,EAAAo1B,EAAAt/B,EAAAtB,WAAA4gC,EAAAh+B,EAAA5C,WAAA4gC,EAAAhK,EAAA52B,WAEA,YAAAiC,IAAA86D,EAAAvxD,GAEAuxD,EAAAvxD,IAIAuxD,EAAAvxD,GAAA2iD,EAAA7xD,OAAA,EACA6xD,EAAAruD,KAAA8gC,EAAAt/B,EAAAs/B,EAAAh+B,EAAAg+B,EAAAhK,GAEAmmC,EAAAvxD,IAIA,SAAAkyD,EAAAxZ,GAEA,IAAA14C,EAAA04C,EAAA5oD,EAAA0E,WAAAkkD,EAAA/wB,EAAAnzB,WAAAkkD,EAAArjD,EAAAb,WAEA,YAAAiC,IAAA+6D,EAAAxxD,GAEAwxD,EAAAxxD,IAIAwxD,EAAAxxD,GAAA4iD,EAAA9xD,OACA8xD,EAAAtuD,KAAAokD,EAAA0B,UAEAoX,EAAAxxD,IAIA,SAAAgyD,EAAA9kC,GAEA,IAAAltB,EAAAktB,EAAAp3B,EAAAtB,WAAA04B,EAAA91B,EAAA5C,WAEA,YAAAiC,IAAAg7D,EAAAzxD,GAEAyxD,EAAAzxD,IAIAyxD,EAAAzxD,GAAA6iD,EAAA/xD,OAAA,EACA+xD,EAAAvuD,KAAA44B,EAAAp3B,EAAAo3B,EAAA91B,GAEAq6D,EAAAzxD,IAYA,OARAyM,EAAAA,KAAA,GAEAA,EAAAA,KAAAi2C,SAAAA,EACAj2C,EAAAA,KAAAk2C,QAAAA,EACAC,EAAA9xD,OAAA,IAAA2b,EAAAA,KAAAm2C,OAAAA,GACAC,EAAA/xD,OAAA,IAAA2b,EAAAA,KAAAo2C,IAAA,CAAAA,IACAp2C,EAAAA,KAAAk4C,MAAAA,EAEAl4C,GAIAsV,MAAA,WA0BA,OAAA,IAAA8rC,IAAA93D,KAAA4T,OAIA5T,KAAA,SAAAvD,GAIAmX,KAAA+4C,SAAA,GACA/4C,KAAAi5C,OAAA,GACAj5C,KAAAg7C,MAAA,GACAh7C,KAAAo7C,cAAA,CAAA,IACAp7C,KAAA40C,aAAA,GACA50C,KAAAm3C,aAAA,GACAn3C,KAAAq5C,YAAA,GACAr5C,KAAAs5C,YAAA,GACAt5C,KAAAy9C,cAAA,GACAz9C,KAAAy8B,YAAA,KACAz8B,KAAAu5C,eAAA,KAIAv5C,KAAA7J,KAAAtN,EAAAsN,KAMA,IAFA,IAAA4iD,EAAAlwD,EAAAkwD,SAEAvyD,EAAA,EAAAm1C,EAAAod,EAAA5xD,OAAAX,EAAAm1C,EAAAn1C,IAEAwZ,KAAA+4C,SAAApuD,KAAAouD,EAAAvyD,GAAA4xB,SAQA,IAFA,IAAA6gC,EAAApwD,EAAAowD,OAEAjgB,EAAA,EAAAuY,EAAA0H,EAAA9xD,OAAA6xC,EAAAuY,EAAAvY,IAEAh5B,KAAAi5C,OAAAtuD,KAAAsuD,EAAAjgB,GAAA5gB,SAQA,IAFA,IAAA4iC,EAAAnyD,EAAAmyD,MAEA9hB,EAAA,EAAAqlB,EAAAvD,EAAA7zD,OAAA+xC,EAAAqlB,EAAArlB,IAEAl5B,KAAAg7C,MAAArwD,KAAAqwD,EAAA9hB,GAAA9gB,SAMA,IAAA,IAAAirC,EAAA,EAAAC,EAAAz6D,EAAAuyD,cAAAj0D,OAAAk8D,EAAAC,EAAAD,IAAA,CAEA,IAAAjI,EAAAvyD,EAAAuyD,cAAAiI,QAEAv2D,IAAAkT,KAAAo7C,cAAAiI,KAEArjD,KAAAo7C,cAAAiI,GAAA,IAIA,IAAA,IAAA1oB,EAAA,EAAA8jB,EAAArD,EAAAj0D,OAAAwzC,EAAA8jB,EAAA9jB,IAAA,CAIA,IAFA,IAAAue,EAAAkC,EAAAzgB,GAAAgsB,EAAA,GAEAvjD,EAAA,EAAAwjD,EAAA1N,EAAA/xD,OAAAic,EAAAwjD,EAAAxjD,IAAA,CAIAujD,EAAAh8D,KAFAuuD,EAAA91C,GAEAgV,SAIApY,KAAAo7C,cAAAiI,GAAA14D,KAAAg8D,IAUA,IAFA,IAAA/R,EAAA/rD,EAAA+rD,aAEA4T,EAAA,EAAAC,EAAA7T,EAAAztD,OAAAqhE,EAAAC,EAAAD,IAAA,CAEA,IAAA1M,EAAA,GAKA,GAJAA,EAAA3lD,KAAAy+C,EAAA4T,GAAAryD,UAIArJ,IAAA8nD,EAAA4T,GAAAzP,SAAA,CAEA+C,EAAA/C,SAAA,GAEA,IAAA,IAAAgD,EAAA,EAAAqH,EAAAxO,EAAA4T,GAAAzP,SAAA5xD,OAAA40D,EAAAqH,EAAArH,IAEAD,EAAA/C,SAAApuD,KAAAiqD,EAAA4T,GAAAzP,SAAAgD,GAAA3jC,SAQA,QAAAtrB,IAAA8nD,EAAA4T,GAAAxP,QAAA,CAEA8C,EAAA9C,QAAA,GAEA,IAAA,IAAAyN,EAAA,EAAAC,EAAA9R,EAAA4T,GAAAxP,QAAA7xD,OAAAs/D,EAAAC,EAAAD,IAEA3K,EAAA9C,QAAAruD,KAAAiqD,EAAA4T,GAAAxP,QAAAyN,GAAAruC,SAMApY,KAAA40C,aAAAjqD,KAAAmxD,GAQA,IAFA,IAAA3E,EAAAtuD,EAAAsuD,aAEAuR,EAAA,EAAAC,EAAAxR,EAAAhwD,OAAAuhE,EAAAC,EAAAD,IAAA,CAEA,IAAA1M,EAAA,GAIA,QAAAlvD,IAAAqqD,EAAAuR,GAAAzZ,cAAA,CAEA+M,EAAA/M,cAAA,GAEA,IAAA,IAAA2Z,EAAA,EAAAC,EAAA1R,EAAAuR,GAAAzZ,cAAA9nD,OAAAyhE,EAAAC,EAAAD,IAAA,CAEA,IAAAE,EAAA3R,EAAAuR,GAAAzZ,cAAA2Z,GACAG,EAAA,GAEAA,EAAAliE,EAAAiiE,EAAAjiE,EAAAuxB,QACA2wC,EAAAr9D,EAAAo9D,EAAAp9D,EAAA0sB,QACA2wC,EAAAriE,EAAAoiE,EAAApiE,EAAA0xB,QAEA4jC,EAAA/M,cAAAtkD,KAAAo+D,IAQA,QAAAj8D,IAAAqqD,EAAAuR,GAAArD,YAAA,CAEArJ,EAAAqJ,YAAA,GAEA,IAAA,IAAA2D,EAAA,EAAAC,EAAA9R,EAAAuR,GAAArD,YAAAl+D,OAAA6hE,EAAAC,EAAAD,IAEAhN,EAAAqJ,YAAA16D,KAAAwsD,EAAAuR,GAAArD,YAAA2D,GAAA5wC,SAMApY,KAAAm3C,aAAAxsD,KAAAqxD,GAQA,IAFA,IAAA3C,EAAAxwD,EAAAwwD,YAEA6P,EAAA,EAAAC,EAAA9P,EAAAlyD,OAAA+hE,EAAAC,EAAAD,IAEAlpD,KAAAq5C,YAAA1uD,KAAA0uD,EAAA6P,GAAA9wC,SAQA,IAFA,IAAAkhC,EAAAzwD,EAAAywD,YAEA8P,EAAA,EAAAC,EAAA/P,EAAAnyD,OAAAiiE,EAAAC,EAAAD,IAEAppD,KAAAs5C,YAAA3uD,KAAA2uD,EAAA8P,GAAAhxC,SAQA,IAFA,IAAAqlC,EAAA50D,EAAA40D,cAEA6L,EAAA,EAAAC,EAAA9L,EAAAt2D,OAAAmiE,EAAAC,EAAAD,IAEAtpD,KAAAy9C,cAAA9yD,KAAA8yD,EAAA6L,IAMA,IAAA7sB,EAAA5zC,EAAA4zC,YAEA,OAAAA,IAEAz8B,KAAAy8B,YAAAA,EAAArkB,SAMA,IAAAmhC,EAAA1wD,EAAA0wD,eAkBA,OAhBA,OAAAA,IAEAv5C,KAAAu5C,eAAAA,EAAAnhC,SAMApY,KAAA89C,mBAAAj1D,EAAAi1D,mBACA99C,KAAAw5C,mBAAA3wD,EAAA2wD,mBACAx5C,KAAA25C,cAAA9wD,EAAA8wD,cACA35C,KAAAy5C,kBAAA5wD,EAAA4wD,kBACAz5C,KAAA05C,iBAAA7wD,EAAA6wD,iBACA15C,KAAAk+C,wBAAAr1D,EAAAq1D,wBACAl+C,KAAA45C,iBAAA/wD,EAAA+wD,iBAEA55C,MAIAY,QAAA,WAEAZ,KAAAkU,cAAA,CAAArgB,KAAA,eAaA,IAAA21D,GAAA,SAAAtF,GACA,SAAAsF,EAAA3vD,EAAAC,EAAA2vD,EAAAC,EAAAC,EAAAC,GAEA1F,EAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,cAEAmM,KAAA64B,WAAA,CACAh/B,MAAAA,EACAC,OAAAA,EACA2vD,MAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,cAAAA,GAGA5pD,KAAAmkD,mBAAA,IAAA0F,GAAAhwD,EAAAC,EAAA2vD,EAAAC,EAAAC,EAAAC,IACA5pD,KAAA+mD,gBAQA,OAJA7C,IAAAsF,EAAAM,UAAA5F,IACAsF,EAAA/hE,UAAAF,OAAAm7B,OAAAwhC,GAAAA,EAAAz8D,YACA4wB,YAAAmxC,EAEAA,EAzBA,CA0BAtF,IAIA2F,GAAA,SAAArN,GACA,SAAAqN,EAAAhwD,EAAAC,EAAA2vD,EAAAC,EAAAC,EAAAC,GAEApN,EAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,oBAEAmM,KAAA64B,WAAA,CACAh/B,MAAAA,EACAC,OAAAA,EACA2vD,MAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,cAAAA,GAGA,IAAAxF,EAAApkD,KAEAnG,EAAAA,GAAA,EACAC,EAAAA,GAAA,EACA2vD,EAAAA,GAAA,EAIAC,EAAAj7D,KAAAC,MAAAg7D,IAAA,EACAC,EAAAl7D,KAAAC,MAAAi7D,IAAA,EACAC,EAAAn7D,KAAAC,MAAAk7D,IAAA,EAIA,IAAA7J,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIA6Q,EAAA,EACAC,EAAA,EAkBA,SAAAC,EAAArjE,EAAA0xB,EAAAE,EAAA0xC,EAAAC,EAAAtwD,EAAAC,EAAA2vD,EAAAW,EAAAC,EAAArb,GAmBA,IAjBA,IAAAsb,EAAAzwD,EAAAuwD,EACAG,EAAAzwD,EAAAuwD,EAEAG,EAAA3wD,EAAA,EACA4wD,EAAA3wD,EAAA,EACA4wD,EAAAjB,EAAA,EAEAkB,EAAAP,EAAA,EACAQ,EAAAP,EAAA,EAEAQ,EAAA,EACAC,EAAA,EAEAp0B,EAAA,IAAArN,GAIAa,EAAA,EAAAA,EAAA0gC,EAAA1gC,IAIA,IAFA,IAAAz8B,EAAAy8B,EAAAqgC,EAAAE,EAEAxgC,EAAA,EAAAA,EAAA0gC,EAAA1gC,IAAA,CAMAyM,EAAA9vC,IAJAqjC,EAAAqgC,EAAAE,GAIAN,EACAxzB,EAAApe,GAAA7qB,EAAA08D,EACAzzB,EAAAle,GAAAkyC,EAIA3R,EAAApuD,KAAA+rC,EAAAvqC,EAAAuqC,EAAAjpC,EAAAipC,EAAAjV,GAIAiV,EAAA9vC,GAAA,EACA8vC,EAAApe,GAAA,EACAoe,EAAAle,GAAAixC,EAAA,EAAA,GAAA,EAIAzQ,EAAAruD,KAAA+rC,EAAAvqC,EAAAuqC,EAAAjpC,EAAAipC,EAAAjV,GAIAy3B,EAAAvuD,KAAAs/B,EAAAmgC,GACAlR,EAAAvuD,KAAA,EAAAu/B,EAAAmgC,GAIAQ,GAAA,EAYA,IAAA,IAAAE,EAAA,EAAAA,EAAAV,EAAAU,IAEA,IAAA,IAAAC,EAAA,EAAAA,EAAAZ,EAAAY,IAAA,CAEA,IACAt/D,EAAAq+D,EAAAiB,EAAAL,GAAAI,EAAA,GACArkE,EAAAqjE,GAAAiB,EAAA,GAAAL,GAAAI,EAAA,GACAz9D,EAAAy8D,GAAAiB,EAAA,GAAAL,EAAAI,EAIAhL,EAAAp1D,KAPAo/D,EAAAiB,EAAAL,EAAAI,EAOAr/D,EAAA4B,GACAyyD,EAAAp1D,KAAAe,EAAAhF,EAAA4G,GAIAw9D,GAAA,EAQA1G,EAAAlH,SAAA8M,EAAAc,EAAA9b,GAIAgb,GAAAc,EAIAf,GAAAc,EAhHAZ,EAAA,IAAA,IAAA,KAAA,GAAA,EAAAR,EAAA3vD,EAAAD,EAAA+vD,EAAAD,EAAA,GACAM,EAAA,IAAA,IAAA,IAAA,GAAA,EAAAR,EAAA3vD,GAAAD,EAAA+vD,EAAAD,EAAA,GACAM,EAAA,IAAA,IAAA,IAAA,EAAA,EAAApwD,EAAA4vD,EAAA3vD,EAAA4vD,EAAAE,EAAA,GACAK,EAAA,IAAA,IAAA,IAAA,GAAA,EAAApwD,EAAA4vD,GAAA3vD,EAAA4vD,EAAAE,EAAA,GACAK,EAAA,IAAA,IAAA,IAAA,GAAA,EAAApwD,EAAAC,EAAA2vD,EAAAC,EAAAC,EAAA,GACAM,EAAA,IAAA,IAAA,KAAA,GAAA,EAAApwD,EAAAC,GAAA2vD,EAAAC,EAAAC,EAAA,GAIA3pD,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IA8GA,OAJAsD,IAAAqN,EAAAC,UAAAtN,IACAqN,EAAApiE,UAAAF,OAAAm7B,OAAA85B,GAAAA,EAAA/0D,YACA4wB,YAAAwxC,EAEAA,EApKA,CAqKArN,IAMA,SAAAyO,GAAArrC,GAEA,IAAA2F,EAAA,GAEA,IAAA,IAAA3+B,KAAAg5B,EAIA,IAAA,IAAA54B,KAFAu+B,EAAA3+B,GAAA,GAEAg5B,EAAAh5B,GAAA,CAEA,IAAAskE,EAAAtrC,EAAAh5B,GAAAI,GAOAu+B,EAAA3+B,GAAAI,GALAkkE,IAAAA,EAAAhc,SACAgc,EAAA5vC,WAAA4vC,EAAAv+B,WACAu+B,EAAArzC,WAAAqzC,EAAA3hC,WAAA2hC,EAAA1nC,WACA0nC,EAAAvoC,WAEAuoC,EAAA9yC,QAEAltB,MAAA6B,QAAAm+D,GAEAA,EAAA//D,QAIA+/D,EAQA,OAAA3lC,EAIA,SAAA4lC,GAAAC,GAIA,IAFA,IAAAC,EAAA,GAEAzkE,EAAA,EAAAA,EAAAwkE,EAAAjkE,OAAAP,IAAA,CAEA,IAAA83B,EAAAusC,GAAAG,EAAAxkE,IAEA,IAAA,IAAAI,KAAA03B,EAEA2sC,EAAArkE,GAAA03B,EAAA13B,GAMA,OAAAqkE,EAMA,IAAAC,GAAA,CAAAlzC,MAAA6yC,GAAAzL,MAAA2L,IAEAI,GAAA,gGAEAC,GAAA,iEAuBA,SAAAC,GAAA5yB,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,iBAEAmM,KAAA0rD,QAAA,GACA1rD,KAAAorD,SAAA,GAEAprD,KAAA2rD,aAAAJ,GACAvrD,KAAA4rD,eAAAJ,GAEAxrD,KAAAg3C,UAAA,EAEAh3C,KAAAu0C,WAAA,EACAv0C,KAAAw0C,mBAAA,EAEAx0C,KAAAk1B,KAAA,EACAl1B,KAAA6rD,QAAA,EACA7rD,KAAA8rD,UAAA,EAEA9rD,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EACA50C,KAAAm3C,cAAA,EAEAn3C,KAAA+rD,WAAA,CACAC,aAAA,EACAC,WAAA,EACAC,aAAA,EACAC,kBAAA,GAKAnsD,KAAAosD,uBAAA,CACArd,MAAA,CAAA,EAAA,EAAA,GACAxrB,GAAA,CAAA,EAAA,GACA2gB,IAAA,CAAA,EAAA,IAGAlkC,KAAAqsD,yBAAAv/D,EACAkT,KAAAssD,oBAAA,OAEAx/D,IAAA+rC,SAEA/rC,IAAA+rC,EAAA57B,YAEA/F,QAAAkK,MAAA,2FAIApB,KAAA60C,UAAAhc,IAwIA,SAAA0zB,KAEAv4B,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,SAEAmM,KAAAuqB,mBAAA,IAAAiC,GAEAxsB,KAAAwqB,iBAAA,IAAAgC,GACAxsB,KAAA0qB,wBAAA,IAAA8B,GAuEA,SAAAggC,GAAAC,EAAAxwD,EAAA01B,EAAAC,GAEA26B,GAAArlE,KAAA8Y,MAEAA,KAAAnM,KAAA,oBAEAmM,KAAAysD,SAAA3/D,IAAA2/D,EAAAA,EAAA,GACAzsD,KAAA0sD,KAAA,EAEA1sD,KAAA2xB,UAAA7kC,IAAA6kC,EAAAA,EAAA,GACA3xB,KAAA4xB,SAAA9kC,IAAA8kC,EAAAA,EAAA,IACA5xB,KAAA2sD,MAAA,GAEA3sD,KAAA/D,YAAAnP,IAAAmP,EAAAA,EAAA,EACA+D,KAAA4sD,KAAA,KAEA5sD,KAAA6sD,UAAA,GACA7sD,KAAA8sD,WAAA,EAEA9sD,KAAA+sD,0BArOAtB,GAAAhkE,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAozC,GAEAA,GAAAhkE,UAAAulE,kBAAA,EAEAvB,GAAAhkE,UAAA2E,KAAA,SAAAvD,GAwBA,OAtBA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA4rD,eAAA/iE,EAAA+iE,eACA5rD,KAAA2rD,aAAA9iE,EAAA8iE,aAEA3rD,KAAAorD,SAAAH,GAAApiE,EAAAuiE,UAEAprD,KAAA0rD,QAAAnkE,OAAAM,OAAA,GAAAgB,EAAA6iE,SAEA1rD,KAAAu0C,UAAA1rD,EAAA0rD,UACAv0C,KAAAw0C,mBAAA3rD,EAAA2rD,mBAEAx0C,KAAA6rD,OAAAhjE,EAAAgjE,OACA7rD,KAAA8rD,SAAAjjE,EAAAijE,SAEA9rD,KAAA20C,SAAA9rD,EAAA8rD,SAEA30C,KAAA40C,aAAA/rD,EAAA+rD,aACA50C,KAAAm3C,aAAAtuD,EAAAsuD,aAEAn3C,KAAA+rD,WAAAxkE,OAAAM,OAAA,GAAAgB,EAAAkjE,YAEA/rD,MAIAyrD,GAAAhkE,UAAAo7B,OAAA,SAAAC,GAEA,IAAAhgB,EAAA2uC,GAAAhqD,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,GAIA,IAAA,IAAA3sB,KAFA2M,EAAAsoD,SAAA,GAEAprD,KAAAorD,SAAA,CAEA,IACAl/D,EADA8T,KAAAorD,SAAAj1D,GACAjK,MAIA4W,EAAAsoD,SAAAj1D,GAFAjK,GAAAA,EAAAy2B,UAEA,CACA9uB,KAAA,IACA3H,MAAAA,EAAA22B,OAAAC,GAAAnC,MAGAz0B,GAAAA,EAAAgjD,QAEA,CACAr7C,KAAA,IACA3H,MAAAA,EAAAukD,UAGAvkD,GAAAA,EAAA2rB,UAEA,CACAhkB,KAAA,KACA3H,MAAAA,EAAA6uB,WAGA7uB,GAAAA,EAAAq9B,UAEA,CACA11B,KAAA,KACA3H,MAAAA,EAAA6uB,WAGA7uB,GAAAA,EAAAs3B,UAEA,CACA3vB,KAAA,KACA3H,MAAAA,EAAA6uB,WAGA7uB,GAAAA,EAAAovB,UAEA,CACAznB,KAAA,KACA3H,MAAAA,EAAA6uB,WAGA7uB,GAAAA,EAAAygC,UAEA,CACA94B,KAAA,KACA3H,MAAAA,EAAA6uB,WAKA,CACA7uB,MAAAA,GASA3E,OAAAkB,KAAAuX,KAAA0rD,SAAAvkE,OAAA,IAAA2b,EAAA4oD,QAAA1rD,KAAA0rD,SAEA5oD,EAAA6oD,aAAA3rD,KAAA2rD,aACA7oD,EAAA8oD,eAAA5rD,KAAA4rD,eAEA,IAAAG,EAAA,GAEA,IAAA,IAAAziE,KAAA0W,KAAA+rD,YAEA,IAAA/rD,KAAA+rD,WAAAziE,KAAAyiE,EAAAziE,IAAA,GAMA,OAFA/B,OAAAkB,KAAAsjE,GAAA5kE,OAAA,IAAA2b,EAAAipD,WAAAA,GAEAjpD,GAuBAypD,GAAA9kE,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAAk0C,GAEA11B,UAAA,EAEAzqC,KAAA,SAAAvD,EAAAywC,GASA,OAPAtF,GAAAvsC,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,EAAAywC,GAEAt5B,KAAAuqB,mBAAAn+B,KAAAvD,EAAA0hC,oBAEAvqB,KAAAwqB,iBAAAp+B,KAAAvD,EAAA2hC,kBACAxqB,KAAA0qB,wBAAAt+B,KAAAvD,EAAA6hC,yBAEA1qB,MAIAu3B,kBAAA,SAAA3uC,QAEAkE,IAAAlE,IAEAsO,QAAAC,KAAA,6DACAvO,EAAA,IAAAygC,IAIArpB,KAAAo3B,mBAAA,GAEA,IAAAhxC,EAAA4Z,KAAA2qB,YAAAhT,SAEA,OAAA/uB,EAAA4uB,KAAApxB,EAAA,IAAAA,EAAA,IAAAA,EAAA,KAAA2zB,aAIAqd,kBAAA,SAAAQ,GAEA5D,GAAAvsC,UAAA2vC,kBAAAlwC,KAAA8Y,KAAA43B,GAEA53B,KAAAuqB,mBAAAtM,WAAAje,KAAA2qB,cAIAiM,kBAAA,SAAAiB,EAAAC,GAEA9D,GAAAvsC,UAAAmvC,kBAAA1vC,KAAA8Y,KAAA63B,EAAAC,GAEA93B,KAAAuqB,mBAAAtM,WAAAje,KAAA2qB,cAIAvS,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,SAoCAwsD,GAAA/kE,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA6pC,GAAA9kE,WAAA,CAEA4wB,YAAAm0C,GAEAS,qBAAA,EAEA7gE,KAAA,SAAAvD,EAAAywC,GAiBA,OAfAizB,GAAA9kE,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,EAAAywC,GAEAt5B,KAAAysD,IAAA5jE,EAAA4jE,IACAzsD,KAAA0sD,KAAA7jE,EAAA6jE,KAEA1sD,KAAA2xB,KAAA9oC,EAAA8oC,KACA3xB,KAAA4xB,IAAA/oC,EAAA+oC,IACA5xB,KAAA2sD,MAAA9jE,EAAA8jE,MAEA3sD,KAAA/D,OAAApT,EAAAoT,OACA+D,KAAA4sD,KAAA,OAAA/jE,EAAA+jE,KAAA,KAAArlE,OAAAM,OAAA,GAAAgB,EAAA+jE,MAEA5sD,KAAA6sD,UAAAhkE,EAAAgkE,UACA7sD,KAAA8sD,WAAAjkE,EAAAikE,WAEA9sD,MAYAktD,eAAA,SAAAC,GAGA,IAAAC,EAAA,GAAAptD,KAAAqtD,gBAAAF,EAEAntD,KAAAysD,IAAA,EAAAl4C,GAAAG,QAAAjmB,KAAA6+D,KAAAF,GACAptD,KAAA+sD,0BAOAQ,eAAA,WAEA,IAAAH,EAAA3+D,KAAAm/C,IAAA,GAAAr5B,GAAAC,QAAAxU,KAAAysD,KAEA,MAAA,GAAAzsD,KAAAqtD,gBAAAD,GAIAI,gBAAA,WAEA,OAAA,EAAAj5C,GAAAG,QAAAjmB,KAAA6+D,KACA7+D,KAAAm/C,IAAA,GAAAr5B,GAAAC,QAAAxU,KAAAysD,KAAAzsD,KAAA0sD,OAIAe,aAAA,WAGA,OAAAztD,KAAA6sD,UAAAp+D,KAAAqM,IAAAkF,KAAA/D,OAAA,IAIAoxD,cAAA,WAGA,OAAArtD,KAAA6sD,UAAAp+D,KAAAsD,IAAAiO,KAAA/D,OAAA,IAuCAyxD,cAAA,SAAAC,EAAAC,EAAAzhE,EAAAsB,EAAAoM,EAAAC,GAEAkG,KAAA/D,OAAA0xD,EAAAC,EAEA,OAAA5tD,KAAA4sD,OAEA5sD,KAAA4sD,KAAA,CACA1uD,SAAA,EACAyvD,UAAA,EACAC,WAAA,EACAC,QAAA,EACAC,QAAA,EACAj0D,MAAA,EACAC,OAAA,IAKAkG,KAAA4sD,KAAA1uD,SAAA,EACA8B,KAAA4sD,KAAAe,UAAAA,EACA3tD,KAAA4sD,KAAAgB,WAAAA,EACA5tD,KAAA4sD,KAAAiB,QAAA1hE,EACA6T,KAAA4sD,KAAAkB,QAAArgE,EACAuS,KAAA4sD,KAAA/yD,MAAAA,EACAmG,KAAA4sD,KAAA9yD,OAAAA,EAEAkG,KAAA+sD,0BAIAgB,gBAAA,WAEA,OAAA/tD,KAAA4sD,OAEA5sD,KAAA4sD,KAAA1uD,SAAA,GAIA8B,KAAA+sD,0BAIAA,uBAAA,WAEA,IAAAp7B,EAAA3xB,KAAA2xB,KACAF,EAAAE,EAAAljC,KAAAm/C,IAAA,GAAAr5B,GAAAC,QAAAxU,KAAAysD,KAAAzsD,KAAA0sD,KACA5yD,EAAA,EAAA23B,EACA53B,EAAAmG,KAAA/D,OAAAnC,EACAy3B,GAAA,GAAA13B,EACA+yD,EAAA5sD,KAAA4sD,KAEA,GAAA,OAAA5sD,KAAA4sD,MAAA5sD,KAAA4sD,KAAA1uD,QAAA,CAEA,IAAAyvD,EAAAf,EAAAe,UACAC,EAAAhB,EAAAgB,WAEAr8B,GAAAq7B,EAAAiB,QAAAh0D,EAAA8zD,EACAl8B,GAAAm7B,EAAAkB,QAAAh0D,EAAA8zD,EACA/zD,GAAA+yD,EAAA/yD,MAAA8zD,EACA7zD,GAAA8yD,EAAA9yD,OAAA8zD,EAIA,IAAAI,EAAAhuD,KAAA8sD,WACA,IAAAkB,IAAAz8B,GAAAI,EAAAq8B,EAAAhuD,KAAAytD,gBAEAztD,KAAAwqB,iBAAA8G,gBAAAC,EAAAA,EAAA13B,EAAA43B,EAAAA,EAAA33B,EAAA63B,EAAA3xB,KAAA4xB,KAEA5xB,KAAA0qB,wBAAAzM,WAAAje,KAAAwqB,mBAIA3H,OAAA,SAAAC,GAEA,IAAAhgB,EAAAkxB,GAAAvsC,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,GAgBA,OAdAhgB,EAAA/X,OAAA0hE,IAAAzsD,KAAAysD,IACA3pD,EAAA/X,OAAA2hE,KAAA1sD,KAAA0sD,KAEA5pD,EAAA/X,OAAA4mC,KAAA3xB,KAAA2xB,KACA7uB,EAAA/X,OAAA6mC,IAAA5xB,KAAA4xB,IACA9uB,EAAA/X,OAAA4hE,MAAA3sD,KAAA2sD,MAEA7pD,EAAA/X,OAAAkR,OAAA+D,KAAA/D,OAEA,OAAA+D,KAAA4sD,OAAA9pD,EAAA/X,OAAA6hE,KAAArlE,OAAAM,OAAA,GAAAmY,KAAA4sD,OAEA9pD,EAAA/X,OAAA8hE,UAAA7sD,KAAA6sD,UACA/pD,EAAA/X,OAAA+hE,WAAA9sD,KAAA8sD,WAEAhqD,KAaA,IAAA2pD,GAAA,GAAAxwD,GAAA,EAEA,SAAAgyD,GAAAt8B,EAAAC,EAAAs8B,GAMA,GAJAl6B,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,cAEA,IAAAq6D,EAAAC,wBAAA,CAOAnuD,KAAAkuD,aAAAA,EAEA,IAAAE,EAAA,IAAA5B,GAAAC,GAAAxwD,GAAA01B,EAAAC,GACAw8B,EAAAl7B,OAAAlzB,KAAAkzB,OACAk7B,EAAAl/B,GAAA1X,IAAA,GAAA,EAAA,GACA42C,EAAAp/B,OAAA,IAAA3F,GAAA,EAAA,EAAA,IACArpB,KAAAuY,IAAA61C,GAEA,IAAAC,EAAA,IAAA7B,GAAAC,GAAAxwD,GAAA01B,EAAAC,GACAy8B,EAAAn7B,OAAAlzB,KAAAkzB,OACAm7B,EAAAn/B,GAAA1X,IAAA,GAAA,EAAA,GACA62C,EAAAr/B,OAAA,IAAA3F,IAAA,EAAA,EAAA,IACArpB,KAAAuY,IAAA81C,GAEA,IAAAC,EAAA,IAAA9B,GAAAC,GAAAxwD,GAAA01B,EAAAC,GACA08B,EAAAp7B,OAAAlzB,KAAAkzB,OACAo7B,EAAAp/B,GAAA1X,IAAA,EAAA,EAAA,GACA82C,EAAAt/B,OAAA,IAAA3F,GAAA,EAAA,EAAA,IACArpB,KAAAuY,IAAA+1C,GAEA,IAAAC,EAAA,IAAA/B,GAAAC,GAAAxwD,GAAA01B,EAAAC,GACA28B,EAAAr7B,OAAAlzB,KAAAkzB,OACAq7B,EAAAr/B,GAAA1X,IAAA,EAAA,GAAA,GACA+2C,EAAAv/B,OAAA,IAAA3F,GAAA,GAAA,EAAA,IACArpB,KAAAuY,IAAAg2C,GAEA,IAAAC,EAAA,IAAAhC,GAAAC,GAAAxwD,GAAA01B,EAAAC,GACA48B,EAAAt7B,OAAAlzB,KAAAkzB,OACAs7B,EAAAt/B,GAAA1X,IAAA,GAAA,EAAA,GACAg3C,EAAAx/B,OAAA,IAAA3F,GAAA,EAAA,EAAA,IACArpB,KAAAuY,IAAAi2C,GAEA,IAAAC,EAAA,IAAAjC,GAAAC,GAAAxwD,GAAA01B,EAAAC,GACA68B,EAAAv7B,OAAAlzB,KAAAkzB,OACAu7B,EAAAv/B,GAAA1X,IAAA,GAAA,EAAA,GACAi3C,EAAAz/B,OAAA,IAAA3F,GAAA,EAAA,GAAA,IACArpB,KAAAuY,IAAAk2C,GAEAzuD,KAAA8E,OAAA,SAAAyD,EAAAmmD,GAEA,OAAA1uD,KAAA7E,QAAA6E,KAAAo3B,oBAEA,IAAAu3B,EAAApmD,EAAAqmD,GAAA1wD,QACA2wD,EAAAtmD,EAAAumD,kBAEAvmD,EAAAqmD,GAAA1wD,SAAA,EAEA,IAAAgjB,EAAAgtC,EAAAnsC,QAAAb,gBAEAgtC,EAAAnsC,QAAAb,iBAAA,EAEA3Y,EAAAwmD,gBAAAb,EAAA,GACA3lD,EAAA1I,OAAA6uD,EAAAN,GAEA7lD,EAAAwmD,gBAAAb,EAAA,GACA3lD,EAAA1I,OAAA6uD,EAAAL,GAEA9lD,EAAAwmD,gBAAAb,EAAA,GACA3lD,EAAA1I,OAAA6uD,EAAAJ,GAEA/lD,EAAAwmD,gBAAAb,EAAA,GACA3lD,EAAA1I,OAAA6uD,EAAAH,GAEAhmD,EAAAwmD,gBAAAb,EAAA,GACA3lD,EAAA1I,OAAA6uD,EAAAF,GAEAN,EAAAnsC,QAAAb,gBAAAA,EAEA3Y,EAAAwmD,gBAAAb,EAAA,GACA3lD,EAAA1I,OAAA6uD,EAAAD,GAEAlmD,EAAAwmD,gBAAAF,GAEAtmD,EAAAqmD,GAAA1wD,QAAAywD,GAIA3uD,KAAAgH,MAAA,SAAAuB,EAAAwmC,EAAA0a,EAAAuF,GAIA,IAFA,IAAAH,EAAAtmD,EAAAumD,kBAEAtoE,EAAA,EAAAA,EAAA,EAAAA,IAEA+hB,EAAAwmD,gBAAAb,EAAA1nE,GAEA+hB,EAAAvB,MAAA+nC,EAAA0a,EAAAuF,GAIAzmD,EAAAwmD,gBAAAF,SA9FA33D,QAAAkK,MAAA,0GA4GA,SAAA6tD,GAAAnzB,EAAAna,EAAAutC,GAEA31D,OAAA0Q,UAAA0X,KAEAzqB,QAAAC,KAAA,oGAEAwqB,EAAAutC,GAIAxtC,GAAAx6B,KAAA8Y,KAAA87B,EAAAA,EAAAna,GAiGA,SAAAwtC,GAAArsD,EAAAjJ,EAAAC,EAAA2mB,EAAA5sB,EAAAusB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,EAAAte,GAEA+d,GAAAj5B,KAAA8Y,KAAA,KAAAogB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5sB,EAAA6sB,EAAAte,GAEApC,KAAA2f,MAAA,CAAA7c,KAAAA,GAAA,KAAAjJ,MAAAA,GAAA,EAAAC,OAAAA,GAAA,GAEAkG,KAAAugB,eAAAzzB,IAAAyzB,EAAAA,EAAAvS,GACAhO,KAAAwgB,eAAA1zB,IAAA0zB,EAAAA,EAAAxS,GAEAhO,KAAAkhB,iBAAA,EACAlhB,KAAAohB,OAAA,EACAphB,KAAAqhB,gBAAA,EAEArhB,KAAAq9C,aAAA,GAhIA4Q,GAAAxmE,UAAAF,OAAAm7B,OAAAsR,GAAAvsC,YACA4wB,YAAA41C,IAqBAgB,GAAAxnE,UAAAF,OAAAm7B,OAAAhB,GAAAj6B,YACA4wB,YAAA42C,GAEAA,GAAAxnE,UAAA0mE,yBAAA,EAEAc,GAAAxnE,UAAA2nE,2BAAA,SAAA7mD,EAAAwZ,GAEA/hB,KAAA+hB,QAAAluB,KAAAkuB,EAAAluB,KACAmM,KAAA+hB,QAAAtB,OAAAsB,EAAAtB,OACAzgB,KAAA+hB,QAAA3f,SAAA2f,EAAA3f,SAEA,IAAAssD,EAAA,IAAA35B,GAEAs6B,EAAA,CAEAjE,SAAA,CACAkE,UAAA,CAAApjE,MAAA,OAGAy/D,aAAA,CAEA,gCAEA,2DAEA,2DAEA,IAEA,gBAEA,mEAEA,4BACA,8BAEA,KAEAvjE,KAAA,MAEAwjE,eAAA,CAEA,+BAEA,gCAEA,oBAEA,gBAEA,mDAEA,6CAEA,qDAEA,KAEAxjE,KAAA,OAGA0wC,EAAA,IAAA2yB,GAAA,CAEAt1D,KAAA,sBAEAi1D,SAAAH,GAAAoE,EAAAjE,UACAO,aAAA0D,EAAA1D,aACAC,eAAAyD,EAAAzD,eACAja,KAAA7mC,EACA4mC,SAAA1mC,IAIA8tB,EAAAsyB,SAAAkE,UAAApjE,MAAA61B,EAEA,IAAA+kC,EAAA,IAAAhF,GAAA,IAAA+H,GAAA,EAAA,EAAA,GAAA/wB,GAUA,OARA41B,EAAAn2C,IAAAuuC,GAEA,IAAAmH,GAAA,EAAA,GAAAjuD,MACA8E,OAAAyD,EAAAmmD,GAEA5H,EAAAluB,SAAAh4B,UACAkmD,EAAAhuB,SAAAl4B,UAEAZ,OAyBAmvD,GAAA1nE,UAAAF,OAAAm7B,OAAAvC,GAAA14B,YACA4wB,YAAA82C,GAEAA,GAAA1nE,UAAA8nE,eAAA,EAQA,IAAAC,GAAA,IAAA5xB,GACA6xB,GAAA,IAAApmC,GAEA,SAAAqmC,GAAA90B,EAAAC,EAAAC,EAAAkJ,EAAA2rB,EAAAtrD,GAEArE,KAAA4vD,OAAA,MAEA9iE,IAAA8tC,EAAAA,EAAA,IAAA4G,QACA10C,IAAA+tC,EAAAA,EAAA,IAAA2G,QACA10C,IAAAguC,EAAAA,EAAA,IAAA0G,QACA10C,IAAAk3C,EAAAA,EAAA,IAAAxC,QACA10C,IAAA6iE,EAAAA,EAAA,IAAAnuB,QACA10C,IAAAuX,EAAAA,EAAA,IAAAm9B,IAMAj6C,OAAAM,OAAA6nE,GAAAjoE,UAAA,CAEA+vB,IAAA,SAAAojB,EAAAC,EAAAC,EAAAkJ,EAAA2rB,EAAAtrD,GAEA,IAAAurD,EAAA5vD,KAAA4vD,OASA,OAPAA,EAAA,GAAAxjE,KAAAwuC,GACAg1B,EAAA,GAAAxjE,KAAAyuC,GACA+0B,EAAA,GAAAxjE,KAAA0uC,GACA80B,EAAA,GAAAxjE,KAAA43C,GACA4rB,EAAA,GAAAxjE,KAAAujE,GACAC,EAAA,GAAAxjE,KAAAiY,GAEArE,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAyjE,GAIA,IAFA,IAAAD,EAAA5vD,KAAA4vD,OAEAppE,EAAA,EAAAA,EAAA,EAAAA,IAEAopE,EAAAppE,GAAA4F,KAAAyjE,EAAAD,OAAAppE,IAIA,OAAAwZ,MAIA8vD,wBAAA,SAAAtiE,GAEA,IAAAoiE,EAAA5vD,KAAA4vD,OACA1zC,EAAA1uB,EAAAmqB,SACAo4C,EAAA7zC,EAAA,GAAA8zC,EAAA9zC,EAAA,GAAA+zC,EAAA/zC,EAAA,GAAAg0C,EAAAh0C,EAAA,GACAi0C,EAAAj0C,EAAA,GAAAk0C,EAAAl0C,EAAA,GAAAm0C,EAAAn0C,EAAA,GAAAo0C,EAAAp0C,EAAA,GACAq0C,EAAAr0C,EAAA,GAAAs0C,EAAAt0C,EAAA,GAAAu0C,EAAAv0C,EAAA,IAAAw0C,EAAAx0C,EAAA,IACAy0C,EAAAz0C,EAAA,IAAA00C,EAAA10C,EAAA,IAAA20C,EAAA30C,EAAA,IAAA40C,EAAA50C,EAAA,IASA,OAPA0zC,EAAA,GAAAluB,cAAAwuB,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,GAAA52C,YACA61C,EAAA,GAAAluB,cAAAwuB,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,GAAA52C,YACA61C,EAAA,GAAAluB,cAAAwuB,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,GAAA72C,YACA61C,EAAA,GAAAluB,cAAAwuB,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,GAAA72C,YACA61C,EAAA,GAAAluB,cAAAwuB,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,GAAA92C,YACA61C,EAAA,GAAAluB,cAAAwuB,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,GAAA92C,YAEA/Z,MAIA+wD,iBAAA,SAAAhmE,GAEA,IAAA6tC,EAAA7tC,EAAA6tC,SAMA,OAJA,OAAAA,EAAA2gB,gBAAA3gB,EAAA2kB,wBAEAiS,GAAApjE,KAAAwsC,EAAA2gB,gBAAA51B,aAAA54B,EAAA4/B,aAEA3qB,KAAAg9B,iBAAAwyB,KAIAwB,iBAAA,SAAAC,GAMA,OAJAzB,GAAAn0C,OAAA7D,IAAA,EAAA,EAAA,GACAg4C,GAAA3jC,OAAA,kBACA2jC,GAAA7rC,aAAAstC,EAAAtmC,aAEA3qB,KAAAg9B,iBAAAwyB,KAIAxyB,iBAAA,SAAAC,GAMA,IAJA,IAAA2yB,EAAA5vD,KAAA4vD,OACAv0C,EAAA4hB,EAAA5hB,OACA61C,GAAAj0B,EAAApR,OAEArlC,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAIA,GAFAopE,EAAAppE,GAAAg3C,gBAAAniB,GAEA61C,EAEA,OAAA,EAMA,OAAA,GAIAn0B,cAAA,SAAAb,GAIA,IAFA,IAAA0zB,EAAA5vD,KAAA4vD,OAEAppE,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAEA,IAAA42C,EAAAwyB,EAAAppE,GAQA,GAJAipE,GAAAtjE,EAAAixC,EAAA3R,OAAAt/B,EAAA,EAAA+vC,EAAAnqC,IAAA5F,EAAA+vC,EAAAphC,IAAA3O,EACAsjE,GAAAhiE,EAAA2vC,EAAA3R,OAAAh+B,EAAA,EAAAyuC,EAAAnqC,IAAAtE,EAAAyuC,EAAAphC,IAAArN,EACAgiE,GAAAhuC,EAAA2b,EAAA3R,OAAAhK,EAAA,EAAAya,EAAAnqC,IAAA0vB,EAAAya,EAAAphC,IAAA2mB,EAEA2b,EAAAI,gBAAAiyB,IAAA,EAEA,OAAA,EAMA,OAAA,GAIA7yB,cAAA,SAAAN,GAIA,IAFA,IAAAszB,EAAA5vD,KAAA4vD,OAEAppE,EAAA,EAAAA,EAAA,EAAAA,IAEA,GAAAopE,EAAAppE,GAAAg3C,gBAAAlB,GAAA,EAEA,OAAA,EAMA,OAAA,KAUA,IAAA60B,GAAA,CAEAC,OAAA,CAEAC,QAAA,CAAAnlE,MAAA,IAAAuiD,GAAA,WACAoD,QAAA,CAAA3lD,MAAA,GAEA/D,IAAA,CAAA+D,MAAA,MACAolE,YAAA,CAAAplE,MAAA,IAAAwrB,IACA65C,aAAA,CAAArlE,MAAA,IAAAwrB,IAEAw8B,SAAA,CAAAhoD,MAAA,OAIAslE,YAAA,CAEAvd,YAAA,CAAA/nD,MAAA,OAIAulE,OAAA,CAEAtd,OAAA,CAAAjoD,MAAA,MACAwlE,WAAA,CAAAxlE,OAAA,GACAmoD,aAAA,CAAAnoD,MAAA,GACAooD,gBAAA,CAAApoD,MAAA,KACAylE,YAAA,CAAAzlE,MAAA,IAIA0lE,MAAA,CAEA7d,MAAA,CAAA7nD,MAAA,MACA8nD,eAAA,CAAA9nD,MAAA,IAIA2lE,SAAA,CAEAhe,SAAA,CAAA3nD,MAAA,MACA4nD,kBAAA,CAAA5nD,MAAA,IAIA4lE,YAAA,CAEAlb,YAAA,CAAA1qD,MAAA,OAIA6lE,QAAA,CAEA7b,QAAA,CAAAhqD,MAAA,MACAiqD,UAAA,CAAAjqD,MAAA,IAIA8lE,UAAA,CAEA5b,UAAA,CAAAlqD,MAAA,MACAoqD,YAAA,CAAApqD,MAAA,IAAAurB,GAAA,EAAA,KAIAw6C,gBAAA,CAEA1b,gBAAA,CAAArqD,MAAA,MACAsqD,kBAAA,CAAAtqD,MAAA,GACAuqD,iBAAA,CAAAvqD,MAAA,IAIAgmE,aAAA,CAEAxb,aAAA,CAAAxqD,MAAA,OAIAimE,aAAA,CAEAxb,aAAA,CAAAzqD,MAAA,OAIAkmE,YAAA,CAEAtb,YAAA,CAAA5qD,MAAA,OAIAgpC,IAAA,CAEAm9B,WAAA,CAAAnmE,MAAA,OACAomE,QAAA,CAAApmE,MAAA,GACAqmE,OAAA,CAAArmE,MAAA,KACAsmE,SAAA,CAAAtmE,MAAA,IAAAuiD,GAAA,YAIAod,OAAA,CAEA4G,kBAAA,CAAAvmE,MAAA,IAEAwmE,WAAA,CAAAxmE,MAAA,IAEAymE,kBAAA,CAAAzmE,MAAA,GAAA0mE,WAAA,CACAj0B,UAAA,GACAoQ,MAAA,KAGA8jB,wBAAA,CAAA3mE,MAAA,GAAA0mE,WAAA,CACAE,WAAA,GACAC,iBAAA,GACAC,aAAA,GACAC,cAAA,KAGAC,qBAAA,CAAAhnE,MAAA,IACAinE,wBAAA,CAAAjnE,MAAA,IAEAknE,WAAA,CAAAlnE,MAAA,GAAA0mE,WAAA,CACA7jB,MAAA,GACApe,SAAA,GACAgO,UAAA,GACAtI,SAAA,GACAg9B,QAAA,GACAC,YAAA,GACAC,MAAA,KAGAC,iBAAA,CAAAtnE,MAAA,GAAA0mE,WAAA,CACAE,WAAA,GACAC,iBAAA,GACAC,aAAA,GACAC,cAAA,KAGAQ,cAAA,CAAAvnE,MAAA,IACAwnE,iBAAA,CAAAxnE,MAAA,IAEAynE,YAAA,CAAAznE,MAAA,GAAA0mE,WAAA,CACA7jB,MAAA,GACApe,SAAA,GACA4iC,MAAA,GACAl9B,SAAA,KAGAu9B,kBAAA,CAAA1nE,MAAA,GAAA0mE,WAAA,CACAE,WAAA,GACAC,iBAAA,GACAC,aAAA,GACAC,cAAA,GACAY,iBAAA,GACAC,gBAAA,KAGAC,eAAA,CAAA7nE,MAAA,IACA8nE,kBAAA,CAAA9nE,MAAA,IAEA+nE,iBAAA,CAAA/nE,MAAA,GAAA0mE,WAAA,CACAj0B,UAAA,GACAu1B,SAAA,GACAC,YAAA,KAIAC,eAAA,CAAAloE,MAAA,GAAA0mE,WAAA,CACA7jB,MAAA,GACApe,SAAA,GACA92B,MAAA,GACAC,OAAA,MAKA2hC,OAAA,CAEA41B,QAAA,CAAAnlE,MAAA,IAAAuiD,GAAA,WACAoD,QAAA,CAAA3lD,MAAA,GACA4vC,KAAA,CAAA5vC,MAAA,GACAoY,MAAA,CAAApY,MAAA,GACA/D,IAAA,CAAA+D,MAAA,MACAgoD,SAAA,CAAAhoD,MAAA,MACAolE,YAAA,CAAAplE,MAAA,IAAAwrB,KAIAu5C,OAAA,CAEAI,QAAA,CAAAnlE,MAAA,IAAAuiD,GAAA,WACAoD,QAAA,CAAA3lD,MAAA,GACAmvB,OAAA,CAAAnvB,MAAA,IAAAurB,GAAA,GAAA,KACA0H,SAAA,CAAAjzB,MAAA,GACA/D,IAAA,CAAA+D,MAAA,MACAgoD,SAAA,CAAAhoD,MAAA,MACAolE,YAAA,CAAAplE,MAAA,IAAAwrB,MAUA,SAAA28C,KAEA,IAAAx3D,EAAA,KACAy3D,GAAA,EACAC,EAAA,KACAC,EAAA,KAEA,SAAAC,EAAAn0D,EAAArN,GAEAshE,EAAAj0D,EAAArN,GAEAuhE,EAAA33D,EAAAsE,sBAAAszD,GAIA,MAAA,CAEAtyB,MAAA,YAEA,IAAAmyB,GACA,OAAAC,IAEAC,EAAA33D,EAAAsE,sBAAAszD,GAEAH,GAAA,IAIAjzD,KAAA,WAEAxE,EAAAoE,qBAAAuzD,GAEAF,GAAA,GAIAI,iBAAA,SAAAvrC,GAEAorC,EAAAprC,GAIAwrC,WAAA,SAAAzoE,GAEA2Q,EAAA3Q,IAYA,SAAA0oE,GAAAp4D,EAAAq4D,GAEA,IAAAC,EAAAD,EAAAC,SAEAC,EAAA,IAAAC,QA0IA,MAAA,CAEAj1D,IA9CA,SAAAkb,GAIA,OAFAA,EAAAg6C,+BAAAh6C,EAAAA,EAAAnY,MAEAiyD,EAAAh1D,IAAAkb,IA2CA8b,OAvCA,SAAA9b,GAEAA,EAAAg6C,+BAAAh6C,EAAAA,EAAAnY,MAEA,IAAAA,EAAAiyD,EAAAh1D,IAAAkb,GAEAnY,IAEAtG,EAAA04D,aAAApyD,EAAAqyD,QAEAJ,EAAAK,OAAAn6C,KA8BAnW,OAxBA,SAAAmW,EAAAo6C,GAEAp6C,EAAAg6C,+BAAAh6C,EAAAA,EAAAnY,MAEA,IAAAA,EAAAiyD,EAAAh1D,IAAAkb,QAEAnuB,IAAAgW,EAEAiyD,EAAAv9C,IAAAyD,EA5HA,SAAAA,EAAAo6C,GAEA,IAAAjhD,EAAA6G,EAAA7G,MACAujC,EAAA18B,EAAA08B,MAEAwd,EAAA34D,EAAA84D,eAEA94D,EAAA+4D,WAAAF,EAAAF,GACA34D,EAAA0K,WAAAmuD,EAAAjhD,EAAAujC,GAEA18B,EAAA8+B,mBAEA,IAAAlmD,EAAA,KAoCA,OAlCAugB,aAAAukC,aAEA9kD,EAAA,KAEAugB,aAAAykC,aAEA3hD,QAAAC,KAAA,wEAEAid,aAAAikC,YAEAxkD,EAAA,KAEAugB,aAAA+jC,WAEAtkD,EAAA,KAEAugB,aAAAqkC,YAEA5kD,EAAA,KAEAugB,aAAAmkC,WAEA1kD,EAAA,KAEAugB,aAAA0jC,UAEAjkD,EAAA,KAEAugB,aAAAhgB,aAEAP,EAAA,MAIA,CACAshE,OAAAA,EACAthE,KAAAA,EACA2hE,gBAAAphD,EAAAqhD,kBACAn0C,QAAArG,EAAAqG,SAwEAg0C,CAAAr6C,EAAAo6C,IAEAvyD,EAAAwe,QAAArG,EAAAqG,UArEA,SAAA6zC,EAAAl6C,EAAAo6C,GAEA,IAAAjhD,EAAA6G,EAAA7G,MACAwjC,EAAA38B,EAAA28B,YAEAp7C,EAAA+4D,WAAAF,EAAAF,IAEA,IAAAvd,EAAArf,MAIA/7B,EAAAk5D,cAAAL,EAAA,EAAAjhD,IAIA0gD,EAEAt4D,EAAAk5D,cAAAL,EAAAzd,EAAA98B,OAAA1G,EAAAqhD,kBACArhD,EAAAwjC,EAAA98B,OAAA88B,EAAArf,OAIA/7B,EAAAk5D,cAAAL,EAAAzd,EAAA98B,OAAA1G,EAAAqhD,kBACArhD,EAAAuhD,SAAA/d,EAAA98B,OAAA88B,EAAA98B,OAAA88B,EAAArf,QAIAqf,EAAArf,OAAA,GA4CAq9B,CAAA9yD,EAAAqyD,OAAAl6C,EAAAo6C,GAEAvyD,EAAAwe,QAAArG,EAAAqG,WAuBA,SAAAu0C,GAAAh8D,EAAAC,EAAA4vD,EAAAC,GAEAzF,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,gBAEAmM,KAAA64B,WAAA,CACAh/B,MAAAA,EACAC,OAAAA,EACA4vD,cAAAA,EACAC,eAAAA,GAGA3pD,KAAAmkD,mBAAA,IAAA2R,GAAAj8D,EAAAC,EAAA4vD,EAAAC,IACA3pD,KAAA+mD,gBASA,SAAA+O,GAAAj8D,EAAAC,EAAA4vD,EAAAC,GAEAnN,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,sBAEAmM,KAAA64B,WAAA,CACAh/B,MAAAA,EACAC,OAAAA,EACA4vD,cAAAA,EACAC,eAAAA,GA2BA,IArBA,IAAAoM,GAHAl8D,EAAAA,GAAA,GAGA,EACAm8D,GAHAl8D,EAAAA,GAAA,GAGA,EAEAswD,EAAA37D,KAAAC,MAAAg7D,IAAA,EACAW,EAAA57D,KAAAC,MAAAi7D,IAAA,EAEAgB,EAAAP,EAAA,EACAQ,EAAAP,EAAA,EAEA4L,EAAAp8D,EAAAuwD,EACA8L,EAAAp8D,EAAAuwD,EAIAtK,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIAhvB,EAAA,EAAAA,EAAA0gC,EAAA1gC,IAIA,IAFA,IAAAz8B,EAAAy8B,EAAAgsC,EAAAF,EAEA/rC,EAAA,EAAAA,EAAA0gC,EAAA1gC,IAAA,CAIA8uB,EAAApuD,KAFAs/B,EAAAgsC,EAAAF,GAEAtoE,EAAA,GAEAurD,EAAAruD,KAAA,EAAA,EAAA,GAEAuuD,EAAAvuD,KAAAs/B,EAAAmgC,GACAlR,EAAAvuD,KAAA,EAAAu/B,EAAAmgC,GAQA,IAAA,IAAAU,EAAA,EAAAA,EAAAV,EAAAU,IAEA,IAAA,IAAAC,EAAA,EAAAA,EAAAZ,EAAAY,IAAA,CAEA,IACAt/D,EAAAs/D,EAAAL,GAAAI,EAAA,GACArkE,EAAAskE,EAAA,EAAAL,GAAAI,EAAA,GACAz9D,EAAA09D,EAAA,EAAAL,EAAAI,EAIAhL,EAAAp1D,KAPAqgE,EAAAL,EAAAI,EAOAr/D,EAAA4B,GACAyyD,EAAAp1D,KAAAe,EAAAhF,EAAA4G,GAQA0S,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,KAtFA2c,GAAApuE,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAw9C,IAyFAC,GAAAruE,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAy9C,GAEA,IA8PAK,GAAA,CACAC,kBA/PA,iFAgQAC,uBA9PA,6DA+PAC,mBA7PA,yEA8PAC,eA5PA,2aA6PAC,oBA3PA,wFA4PAC,aA1PA,uCA2PAC,mBAzPA,+GA0PAC,MAxPA,+pPAyPAC,sBAvPA,i9BAwPAC,yBAtPA,6nBAuPAC,8BArPA,4HAsPAC,4BApPA,qEAqPAC,uBAnPA,2EAoPAC,eAlPA,0DAmPAC,oBAjPA,mDAkPAC,kBAhPA,mDAiPAC,aA/OA,sDAgPAhG,OA9OA,s0FA+OAiG,4BA7OA,0gHA8OAC,qBA5OA,2jBA6OAC,4BA3OA,kJA4OAC,uBA1OA,mKA2OAC,qBAzOA,6MA0OAC,0BAxOA,mEAyOAC,mBAvOA,sDAwOAC,wBAtOA,6uFAuOAC,gBArOA,6iDAsOAC,4BApOA,yOAqOAC,qBAnOA,yTAoOAC,mBAlOA,+RAmOAC,8BA7MA,+tFA8MAC,cAlOA,6oBAmOAC,WAjOA,sDAkOAC,gBAhOA,oDAiOAC,aA/NA,wRAgOAC,kBA9NA,0MA+NAC,0BA7NA,iYA8NAC,kBA5NA,4LA6NAC,uBA3NA,iGA4NAC,sBA1NA,wwFA2NAC,kBAzNA,uzIA0NAC,qBAtNA,oEAuNAC,0BArNA,w9BAsNAC,sBApNA,sMAqNAC,2BAnNA,yxCAoNAC,yBAlNA,w0CAmNAC,8BAjNA,2jLAkNAC,sBAhNA,62HAiNAC,qBA/MA,63BAgNAC,oBA9MA,2QA+MAC,qBA7MA,mLA8MAC,0BA5MA,yKA6MAC,wBA3MA,sLA4MAC,mBA1MA,+XA2MAC,aAzMA,oJA0MAC,kBAxMA,mDAyMAC,sBAvMA,kVAwMAC,2BAtMA,uMAuMAC,sBArMA,uKAsMAC,2BApMA,qEAqMAC,mBAnMA,uUAoMAC,wBAlMA,sNAmMAC,mBAjMA,4lBAkMAC,sBAhMA,63BAiMAC,qBA/LA,6pBAgMAC,wBA9LA,q6BA+LAC,gCA7LA,qEA8LAC,+BA5LA,oWA6LAC,wBA3LA,mRA4LAC,QA1LA,yjDA2LAC,6BAzLA,4EA0LAC,eAxLA,oNAyLAC,mBAvLA,gFAwLAC,wBAtLA,2UAuLAC,sBArLA,uKAsLAC,2BApLA,qEAqLAC,wBAnLA,26RAoLAC,sBAlLA,mxCAmLAC,iBAjLA,kzCAkLAC,yBAhLA,k5CAiLAC,gBA/KA,kOAgLAC,qBA9KA,ghCA+KAC,gBA7KA,+XA8KAC,kBA5KA,sdA6KAC,qBA3KA,0LA4KAC,0BA1KA,mEA2KAC,qBAzKA,6FA0KAC,0BAxKA,kyCAyKAC,iBAvKA,yFAwKAC,eAtKA,wIAuKAC,UArKA,qEAsKAC,kBApKA,oFAqKAC,gBAnKA,yIAoKAC,WAlKA,8GAmKAC,gBAjKA,kRAmKAC,gBAjKA,4NAkKAC,gBAhKA,8JAiKAC,UA/JA,0VAgKAC,UA9JA,iOA+JAC,WA7JA,01BA8JAC,WA5JA,wuBA6JAC,kBA3JA,6rBA4JAC,kBA1JA,ktBA2JAC,cAzJA,0WA0JAC,cAxJA,+LAyJAC,gBAvJA,myBAwJAC,gBAtJA,+hBAuJAC,eArJA,gqDAsJAC,eApJA,q2BAqJAC,iBAnJA,60EAoJAC,iBAlJA,6nCAmJAC,gBAjJA,6gDAkJAC,gBAhJA,69BAiJAC,cA/IA,yvDAgJAC,cA9IA,ymCA+IAC,eA7IA,kiEA8IAC,eA5IA,qqCA6IAC,kBA3IA,y6FA4IAC,kBA1IA,+1CA2IAC,YAzIA,muBA0IAC,YAxIA,myCAyIAC,YAvIA,ovBAwIAC,YAtIA,qrBAuIAC,YArIA,maAsIAC,YApIA,qZAqIAC,YAnIA,0tBAoIAC,YAlIA,unCA2IAC,GAAA,CAEAC,MAAA,CAEA/S,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAK,YACAL,GAAAM,OACAN,GAAAS,MACAT,GAAAU,SACAV,GAAAj8B,MAGAy2B,aAAAwK,GAAA4G,eACAnR,eAAAuK,GAAA2G,gBAIAsB,QAAA,CAEAhT,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAK,YACAL,GAAAM,OACAN,GAAAS,MACAT,GAAAU,SACAV,GAAAW,YACAX,GAAAj8B,IACAi8B,GAAAtF,OACA,CACAtW,SAAA,CAAArpD,MAAA,IAAAuiD,GAAA,OAIAkd,aAAAwK,GAAA8G,iBACArR,eAAAuK,GAAA6G,kBAIAqB,MAAA,CAEAjT,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAK,YACAL,GAAAM,OACAN,GAAAS,MACAT,GAAAU,SACAV,GAAAW,YACAX,GAAAY,QACAZ,GAAAa,UACAb,GAAAc,gBACAd,GAAAj8B,IACAi8B,GAAAtF,OACA,CACAtW,SAAA,CAAArpD,MAAA,IAAAuiD,GAAA,IACAgH,SAAA,CAAAvpD,MAAA,IAAAuiD,GAAA,UACAiH,UAAA,CAAAxpD,MAAA,OAIAy/D,aAAAwK,GAAAoH,eACA3R,eAAAuK,GAAAmH,gBAIAgB,SAAA,CAEAlT,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAM,OACAN,GAAAS,MACAT,GAAAU,SACAV,GAAAW,YACAX,GAAAY,QACAZ,GAAAa,UACAb,GAAAc,gBACAd,GAAAe,aACAf,GAAAgB,aACAhB,GAAAj8B,IACAi8B,GAAAtF,OACA,CACAtW,SAAA,CAAArpD,MAAA,IAAAuiD,GAAA,IACA2G,UAAA,CAAAlpD,MAAA,GACAmpD,UAAA,CAAAnpD,MAAA,GACA2qD,gBAAA,CAAA3qD,MAAA,MAIAy/D,aAAAwK,GAAAsH,kBACA7R,eAAAuK,GAAAqH,mBAIAe,KAAA,CAEAnT,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAS,MACAT,GAAAU,SACAV,GAAAW,YACAX,GAAAY,QACAZ,GAAAa,UACAb,GAAAc,gBACAd,GAAAiB,YACAjB,GAAAj8B,IACAi8B,GAAAtF,OACA,CACAtW,SAAA,CAAArpD,MAAA,IAAAuiD,GAAA,OAIAkd,aAAAwK,GAAAkH,cACAzR,eAAAuK,GAAAiH,eAIAnnB,OAAA,CAEAmV,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAY,QACAZ,GAAAa,UACAb,GAAAc,gBACAd,GAAAj8B,IACA,CACA+gB,OAAA,CAAA/pD,MAAA,SAIAy/D,aAAAwK,GAAAgH,gBACAvR,eAAAuK,GAAA+G,iBAIAzhC,OAAA,CAEA2vB,SAAAD,GAAA,CACAgG,GAAA11B,OACA01B,GAAAj8B,MAGAy2B,aAAAwK,GAAA0H,YACAjS,eAAAuK,GAAAyH,aAIAY,OAAA,CAEApT,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAj8B,IACA,CACA5wB,MAAA,CAAApY,MAAA,GACA+qD,SAAA,CAAA/qD,MAAA,GACAuyE,UAAA,CAAAvyE,MAAA,MAIAy/D,aAAAwK,GAAA0G,gBACAjR,eAAAuK,GAAAyG,iBAIAnT,MAAA,CAEA2B,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAc,kBAGAtG,aAAAwK,GAAAoG,WACA3Q,eAAAuK,GAAAmG,YAIA7wC,OAAA,CAEA2/B,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAY,QACAZ,GAAAa,UACAb,GAAAc,gBACA,CACApgB,QAAA,CAAA3lD,MAAA,MAIAy/D,aAAAwK,GAAAwH,YACA/R,eAAAuK,GAAAuH,aAIAzM,OAAA,CAEA7F,SAAAD,GAAA,CACAgG,GAAAF,OACAE,GAAAj8B,MAGAy2B,aAAAwK,GAAA8H,YACArS,eAAAuK,GAAA6H,aAIAhpC,WAAA,CAEAo2B,SAAA,CACAkG,YAAA,CAAAplE,MAAA,IAAAwrB,IACAgnD,IAAA,CAAAxyE,MAAA,OAGAy/D,aAAAwK,GAAAgG,gBACAvQ,eAAAuK,GAAA+F,iBAOAyC,KAAA,CAEAvT,SAAAD,GAAA,CACAgG,GAAAM,OACA,CACA5f,QAAA,CAAA3lD,MAAA,MAIAy/D,aAAAwK,GAAAkG,UACAzQ,eAAAuK,GAAAiG,WAIAwC,SAAA,CAEAxT,SAAA,CACAkE,UAAA,CAAApjE,MAAA,OAGAy/D,aAAAwK,GAAAwG,cACA/Q,eAAAuK,GAAAuG,eAIAmC,aAAA,CAEAzT,SAAAD,GAAA,CACAgG,GAAAC,OACAD,GAAAc,gBACA,CACA6M,kBAAA,CAAA5yE,MAAA,IAAAm9B,IACA01C,aAAA,CAAA7yE,MAAA,GACA8yE,YAAA,CAAA9yE,MAAA,QAIAy/D,aAAAwK,GAAAsG,kBACA7Q,eAAAuK,GAAAqG,mBAIAyC,OAAA,CAEA7T,SAAAD,GAAA,CACAgG,GAAAtF,OACAsF,GAAAj8B,IACA,CACA6Z,MAAA,CAAA7iD,MAAA,IAAAuiD,GAAA,IACAoD,QAAA,CAAA3lD,MAAA,MAGAy/D,aAAAwK,GAAA4H,YACAnS,eAAAuK,GAAA2H,cA+BA,SAAAoB,GAAA32D,EAAA42D,EAAAC,EAAA1rB,GAEA,IAGA2rB,EACAC,EAJAr4D,EAAA,IAAAwnC,GAAA,GACA8wB,EAAA,EAKAC,EAAA,KACAC,EAAA,EACAC,EAAA,KAkKA,SAAAC,EAAA5wB,EAAAv0B,GAEA2kD,EAAApK,QAAAhmB,MAAA4wB,SAAA5wB,EAAA5oD,EAAA4oD,EAAA/wB,EAAA+wB,EAAArjD,EAAA8uB,EAAAk5B,GAIA,MAAA,CAEAksB,cAAA,WAEA,OAAA34D,GAGA44D,cAAA,SAAA9wB,EAAAv0B,GAEAvT,EAAAuQ,IAAAu3B,GAEA4wB,EAAA14D,EADAs4D,OAAAzyE,IAAA0tB,EAAAA,EAAA,IAIAslD,cAAA,WAEA,OAAAP,GAGAQ,cAAA,SAAAvlD,GAGAmlD,EAAA14D,EADAs4D,EAAA/kD,IAIA3a,OA/LA,SAAAmgE,EAAAtR,EAAApkC,EAAA21C,GAEA,IAAAjrC,GAAA,IAAA05B,EAAAl1B,QAAAk1B,EAAA15B,WAAA,KAKA45B,EAAArmD,EAAAqmD,GACAsR,EAAAtR,EAAAuR,YAAAvR,EAAAuR,aAyBA,GAvBAD,GAAA,aAAAA,EAAAE,uBAEAprC,EAAA,MAIA,OAAAA,EAEA2qC,EAAA14D,EAAAs4D,GAEAvqC,GAAAA,EAAAka,UAEAywB,EAAA3qC,EAAA,GACAirC,GAAA,IAIA13D,EAAA83D,WAAAJ,IAEA13D,EAAAvB,MAAAuB,EAAA+3D,eAAA/3D,EAAAg4D,eAAAh4D,EAAAi4D,kBAIAxrC,IAAAA,EAAAyrC,eAAAzrC,EAAAm5B,yBAAAn5B,EAAA5U,UAAAzS,GAAA,MAEA7gB,IAAAwyE,KAEAA,EAAA,IAAAxd,GACA,IAAA+H,GAAA,EAAA,EAAA,GACA,IAAA4B,GAAA,CACAt1D,KAAA,yBACAi1D,SAAAH,GAAAiT,GAAAS,KAAAvT,UACAO,aAAAuS,GAAAS,KAAAhT,aACAC,eAAAsS,GAAAS,KAAA/S,eACAja,KAAA7mC,EACAwnC,WAAA,EACAC,YAAA,EACArd,KAAA,MAIA0D,SAAAqkB,gBAAA,UACAqiB,EAAA1mC,SAAAqkB,gBAAA,MAEAqiB,EAAA7pC,eAAA,SAAAltB,EAAAmmD,EAAApkC,GAEAtqB,KAAA2qB,YAAAwC,aAAA7C,EAAAK,cAKApjC,OAAA6iB,eAAAk1D,EAAAxmC,SAAA,SAAA,CAEA/4B,IAAA,WAEA,OAAAC,KAAAorD,SAAAjX,OAAAjoD,SAMAkzE,EAAAt6D,OAAAw6D,IAIA,IAAAv9C,EAAAiT,EAAAm5B,wBAAAn5B,EAAAjT,QAAAiT,EAEAsqC,EAAAxmC,SAAAsyB,SAAAjX,OAAAjoD,MAAA61B,EACAu9C,EAAAxmC,SAAAsyB,SAAAsG,WAAAxlE,MAAA61B,EAAA0+C,eAAA,EAAA,EAEAjB,IAAAxqC,GACAyqC,IAAA19C,EAAAT,SACAo+C,IAAAn3D,EAAAm4D,cAEApB,EAAAxmC,SAAAukB,aAAA,EAEAmiB,EAAAxqC,EACAyqC,EAAA19C,EAAAT,QACAo+C,EAAAn3D,EAAAm4D,aAKAV,EAAAW,QAAArB,EAAAA,EAAA1mC,SAAA0mC,EAAAxmC,SAAA,EAAA,EAAA,WAEA9D,GAAAA,EAAArS,iBAEA71B,IAAAuyE,KAEAA,EAAA,IAAAvd,GACA,IAAAgU,GAAA,EAAA,GACA,IAAArK,GAAA,CACAt1D,KAAA,qBACAi1D,SAAAH,GAAAiT,GAAAlpC,WAAAo2B,UACAO,aAAAuS,GAAAlpC,WAAA22B,aACAC,eAAAsS,GAAAlpC,WAAA42B,eACAja,KAAA9mC,EACAynC,WAAA,EACAC,YAAA,EACArd,KAAA,MAIA0D,SAAAqkB,gBAAA,UAGA11D,OAAA6iB,eAAAi1D,EAAAvmC,SAAA,MAAA,CAEA/4B,IAAA,WAEA,OAAAC,KAAAorD,SAAAsT,IAAAxyE,SAMAkzE,EAAAt6D,OAAAu6D,IAIAA,EAAAvmC,SAAAsyB,SAAAsT,IAAAxyE,MAAA8oC,GAEA,IAAAA,EAAA/T,kBAEA+T,EAAApS,eAIAy8C,EAAAvmC,SAAAsyB,SAAAkG,YAAAplE,MAAAE,KAAA4oC,EAAA9W,QAEAshD,IAAAxqC,GACAyqC,IAAAzqC,EAAA1T,SACAo+C,IAAAn3D,EAAAm4D,cAEArB,EAAAvmC,SAAAukB,aAAA,EAEAmiB,EAAAxqC,EACAyqC,EAAAzqC,EAAA1T,QACAo+C,EAAAn3D,EAAAm4D,aAMAV,EAAAW,QAAAtB,EAAAA,EAAAzmC,SAAAymC,EAAAvmC,SAAA,EAAA,EAAA,SAgDA,SAAA8nC,GAAApkE,EAAAuvD,EAAA9uD,EAAA43D,GAEA,IAAAgM,EAAArkE,EAAAsgC,aAAA,OAEAxqC,EAAAuiE,EAAAC,SAAA,KAAA/I,EAAAhsD,IAAA,2BACA+gE,EAAAjM,EAAAC,UAAA,OAAAxiE,EAEAyuE,EAAA,GAEAC,EAAAC,EAAA,MACAC,EAAAF,EAyEA,SAAAG,EAAAC,GAEA,OAAAvM,EAAAC,SAAAt4D,EAAA6kE,gBAAAD,GAEA9uE,EAAAgvE,mBAAAF,GAIA,SAAAG,EAAAH,GAEA,OAAAvM,EAAAC,SAAAt4D,EAAAglE,kBAAAJ,GAEA9uE,EAAAmvE,qBAAAL,GAuCA,SAAAH,EAAAG,GAMA,IAJA,IAAAM,EAAA,GACAC,EAAA,GACAC,EAAA,GAEAp7E,EAAA,EAAAA,EAAAq6E,EAAAr6E,IAEAk7E,EAAAl7E,GAAA,EACAm7E,EAAAn7E,GAAA,EACAo7E,EAAAp7E,GAAA,EAIA,MAAA,CAGAoyC,SAAA,KACAipC,QAAA,KACAttB,WAAA,EAEAmtB,cAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACA72E,OAAAq2E,EACAnkE,WAAA,IAsDA,SAAA6kE,IAIA,IAFA,IAAAJ,EAAAR,EAAAQ,cAEAl7E,EAAA,EAAAm1C,EAAA+lC,EAAAv6E,OAAAX,EAAAm1C,EAAAn1C,IAEAk7E,EAAAl7E,GAAA,EAMA,SAAAu7E,EAAA9mD,GAEA+mD,EAAA/mD,EAAA,GAIA,SAAA+mD,EAAA/mD,EAAAgnD,GAEA,IACAN,EAAAT,EAAAS,kBACAC,EAAAV,EAAAU,mBAFAV,EAAAQ,cAIAzmD,GAAA,EAEA,IAAA0mD,EAAA1mD,KAEAze,EAAA0lE,wBAAAjnD,GACA0mD,EAAA1mD,GAAA,GAIA2mD,EAAA3mD,KAAAgnD,MAEApN,EAAAC,SAAAt4D,EAAAuvD,EAAAhsD,IAAA,2BAEA80D,EAAAC,SAAA,sBAAA,4BAAA75C,EAAAgnD,GACAL,EAAA3mD,GAAAgnD,GAMA,SAAAE,IAKA,IAHA,IAAAT,EAAAR,EAAAQ,cACAC,EAAAT,EAAAS,kBAEAn7E,EAAA,EAAAm1C,EAAAgmC,EAAAx6E,OAAAX,EAAAm1C,EAAAn1C,IAEAm7E,EAAAn7E,KAAAk7E,EAAAl7E,KAEAgW,EAAA4lE,yBAAA57E,GACAm7E,EAAAn7E,GAAA,GAQA,SAAA67E,EAAAh4D,EAAAyxB,EAAAjoC,EAAAw9C,EAAAixB,EAAAxnD,IAEA,IAAA+5C,EAAAC,UAAA,OAAAjhE,GAAA,OAAAA,EAMA2I,EAAA6lE,oBAAAh4D,EAAAyxB,EAAAjoC,EAAAw9C,EAAAixB,EAAAxnD,GAJAte,EAAA+lE,qBAAAl4D,EAAAyxB,EAAAjoC,EAAAw9C,EAAAixB,EAAAxnD,GA6OA,SAAA0nD,IAEAC,IAEAvB,IAAAF,GAGAG,GADAD,EAAAF,GACAj2E,QAMA,SAAA03E,IAEAzB,EAAApoC,SAAA,KACAooC,EAAAa,QAAA,KACAb,EAAAzsB,WAAA,EAIA,MAAA,CAEA5sC,MA/gBA,SAAA5c,EAAA+tC,EAAA+oC,EAAAjpC,EAAAvuB,GAEA,IAAAq4D,GAAA,EAEA,GAAA5B,EAAA,CAEA,IAAA3B,EAiFA,SAAAvmC,EAAAipC,EAAA/oC,GAEA,IAAAyb,GAAA,IAAAzb,EAAAyb,UAEAouB,EAAA5B,EAAAnoC,EAAAtvB,SAEAxc,IAAA61E,IAGA5B,EAAAnoC,EAAAtvB,IADAq5D,EAAA,IAKA,IAAAC,EAAAD,EAAAd,EAAAv4D,SAEAxc,IAAA81E,IAGAD,EAAAd,EAAAv4D,IADAs5D,EAAA,IAKA,IAAAzD,EAAAyD,EAAAruB,GASA,YAPAznD,IAAAqyE,IAEAA,EAAA8B,EAhDApM,EAAAC,SAAAt4D,EAAAqmE,oBAEAvwE,EAAAwwE,wBA+CAF,EAAAruB,GAAA4qB,GAIAA,EAhHA4D,CAAAnqC,EAAAipC,EAAA/oC,GAEAooC,IAAA/B,GAGAgC,GADAD,EAAA/B,GACAp0E,SAIA23E,EA0IA,SAAA9pC,GAEA,IAAAoqC,EAAA9B,EAAAjkE,WACAgmE,EAAArqC,EAAA37B,WAEA,GAAA1V,OAAAkB,KAAAu6E,GAAA77E,SAAAI,OAAAkB,KAAAw6E,GAAA97E,OAAA,OAAA,EAEA,IAAA,IAAAmC,KAAA25E,EAAA,CAEA,IAAAC,EAAAF,EAAA15E,GACA65E,EAAAF,EAAA35E,GAEA,GAAA45E,EAAAjoD,YAAAkoD,EAAA,OAAA,EAEA,GAAAD,EAAApgE,OAAAqgE,EAAArgE,KAAA,OAAA,EAIA,OAAA,EA5JAu6C,CAAAzkB,KAgKA,SAAAA,GAEA,IAAAnuC,EAAA,GACAwS,EAAA27B,EAAA37B,WAEA,IAAA,IAAA3T,KAAA2T,EAAA,CAEA,IAAAge,EAAAhe,EAAA3T,GAEAwZ,EAAA,GACAA,EAAAmY,UAAAA,EAEAA,EAAAnY,OAEAA,EAAAA,KAAAmY,EAAAnY,MAIArY,EAAAnB,GAAAwZ,EAIAo+D,EAAAjkE,WAAAxS,EApLA24E,CAAAxqC,OAEA,CAEA,IAAA2b,GAAA,IAAAzb,EAAAyb,UAEA2sB,EAAAtoC,WAAAA,EAAAtvB,IACA43D,EAAAW,UAAAA,EAAAv4D,IACA43D,EAAA3sB,YAAAA,IAEA2sB,EAAAtoC,SAAAA,EAAAtvB,GACA43D,EAAAW,QAAAA,EAAAv4D,GACA43D,EAAA3sB,UAAAA,EAEAmuB,GAAA,IAMA,IAAA33E,EAAAutC,kBAEAoqC,GAAA,GAIA,OAAAr4D,GAEApN,EAAA6H,OAAAuF,EAAA,OAIAq4D,IAoOA,SAAA33E,EAAA+tC,EAAA+oC,EAAAjpC,GAEA,IAAA,IAAAi8B,EAAAC,WAAA/pE,EAAAutC,kBAAAM,EAAAyqC,2BAEA,OAAAtX,EAAAhsD,IAAA,0BAFA,CAMA+hE,IAEA,IAAAmB,EAAArqC,EAAA37B,WAEAqmE,EAAAzB,EAAA0B,gBAEAC,EAAA1qC,EAAAszB,uBAEA,IAAA,IAAAj2D,KAAAmtE,EAAA,CAEA,IAAAG,EAAAH,EAAAntE,GAEA,GAAAstE,GAAA,EAAA,CAEA,IAAAN,EAAAF,EAAA9sE,GAEA,QAAArJ,IAAAq2E,EAAA,CAEA,IAAA9xB,EAAA8xB,EAAA9xB,WACAvV,EAAAqnC,EAAAzrB,SAEAz8B,EAAAhe,EAAA8C,IAAAojE,GAIA,QAAAr2E,IAAAmuB,EAAA,SAEA,IAAAk6C,EAAAl6C,EAAAk6C,OACAthE,EAAAonB,EAAApnB,KACA2hE,EAAAv6C,EAAAu6C,gBAEA,GAAA2N,EAAAlO,6BAAA,CAEA,IAAAnyD,EAAAqgE,EAAArgE,KACAw/D,EAAAx/D,EAAAw/D,OACAxnD,EAAAqoD,EAAAroD,OAEAhY,GAAAA,EAAA4gE,8BAEA1B,EAAAyB,EAAA3gE,EAAAm/D,uBAEAn1E,IAAA8rC,EAAA+qC,oBAEA/qC,EAAA+qC,kBAAA7gE,EAAAm/D,iBAAAn/D,EAAAy1B,QAMAwpC,EAAA0B,GAIAjnE,EAAA+4D,WAAA,MAAAJ,GACAkN,EAAAoB,EAAA3nC,EAAAjoC,EAAAw9C,EAAAixB,EAAA9M,EAAA16C,EAAA06C,QAIA2N,EAAAS,4BAEA5B,EAAAyB,EAAAN,EAAAlB,uBAEAn1E,IAAA8rC,EAAA+qC,oBAEA/qC,EAAA+qC,kBAAAR,EAAAlB,iBAAAkB,EAAA5qC,QAMAwpC,EAAA0B,GAIAjnE,EAAA+4D,WAAA,MAAAJ,GACAkN,EAAAoB,EAAA3nC,EAAAjoC,EAAAw9C,EAAA,EAAA,QAIA,GAAA,mBAAAl7C,EAAA,CAEA,IAAA4nD,EAAA9gD,EAAA8C,IAAAhV,EAAAytC,gBAIA,QAAA1rC,IAAAixD,EAAA,SAEA,IAAA8lB,EAAA9lB,EAAAoX,OACA2O,EAAA/lB,EAAAlqD,KAEAmuE,EAAAyB,EAAA,EAAA,GACAzB,EAAAyB,EAAA,EAAA,GACAzB,EAAAyB,EAAA,EAAA,GACAzB,EAAAyB,EAAA,EAAA,GAEAjnE,EAAA+4D,WAAA,MAAAsO,GAEArnE,EAAA6lE,oBAAAoB,EAAA,EAAA,EAAAK,GAAA,EAAA,GAAA,GACAtnE,EAAA6lE,oBAAAoB,EAAA,EAAA,EAAAK,GAAA,EAAA,GAAA,IACAtnE,EAAA6lE,oBAAAoB,EAAA,EAAA,EAAAK,GAAA,EAAA,GAAA,IACAtnE,EAAA6lE,oBAAAoB,EAAA,EAAA,EAAAK,GAAA,EAAA,GAAA,SAEA,QAAAh3E,IAAA02E,EAAA,CAEA,IAAAt3E,EAAAs3E,EAAArtE,GAEA,QAAArJ,IAAAZ,EAEA,OAAAA,EAAA/E,QAEA,KAAA,EACAqV,EAAAunE,gBAAAN,EAAAv3E,GACA,MAEA,KAAA,EACAsQ,EAAAwnE,gBAAAP,EAAAv3E,GACA,MAEA,KAAA,EACAsQ,EAAAynE,gBAAAR,EAAAv3E,GACA,MAEA,QACAsQ,EAAA0nE,gBAAAT,EAAAv3E,MAYAi2E,KAjXAgC,CAAAp5E,EAAA+tC,EAAA+oC,EAAAjpC,GAEA,OAAAvuB,GAEA7N,EAAA+4D,WAAA,MAAAt4D,EAAA8C,IAAAsK,GAAA8qD,UAydAqN,MAAAA,EACAC,kBAAAA,EACA7hE,QA1GA,WAIA,IAAA,IAAAwjE,KAFA5B,IAEAzB,EAAA,CAEA,IAAA4B,EAAA5B,EAAAqD,GAEA,IAAA,IAAAC,KAAA1B,EAAA,CAEA,IAAAC,EAAAD,EAAA0B,GAEA,IAAA,IAAA9vB,KAAAquB,EAEArB,EAAAqB,EAAAruB,GAAAxpD,eAEA63E,EAAAruB,UAIAouB,EAAA0B,UAIAtD,EAAAqD,KAmFAE,wBA7EA,SAAA1rC,GAEA,QAAA9rC,IAAAi0E,EAAAnoC,EAAAtvB,IAAA,CAEA,IAAAq5D,EAAA5B,EAAAnoC,EAAAtvB,IAEA,IAAA,IAAA+6D,KAAA1B,EAAA,CAEA,IAAAC,EAAAD,EAAA0B,GAEA,IAAA,IAAA9vB,KAAAquB,EAEArB,EAAAqB,EAAAruB,GAAAxpD,eAEA63E,EAAAruB,UAIAouB,EAAA0B,UAIAtD,EAAAnoC,EAAAtvB,MAwDAi7D,uBApDA,SAAA1C,GAEA,IAAA,IAAAuC,KAAArD,EAAA,CAEA,IAAA4B,EAAA5B,EAAAqD,GAEA,QAAAt3E,IAAA61E,EAAAd,EAAAv4D,IAAA,CAEA,IAAAs5D,EAAAD,EAAAd,EAAAv4D,IAEA,IAAA,IAAAirC,KAAAquB,EAEArB,EAAAqB,EAAAruB,GAAAxpD,eAEA63E,EAAAruB,UAIAouB,EAAAd,EAAAv4D,OAoCAw4D,eAAAA,EACAC,gBAAAA,EACAI,wBAAAA,GAUA,SAAAqC,GAAAhoE,EAAAuvD,EAAA0Y,EAAA5P,GAEA,IAEA6P,EAFA5P,EAAAD,EAAAC,SAmDA90D,KAAA2kE,QA/CA,SAAAz4E,GAEAw4E,EAAAx4E,GA8CA8T,KAAAH,OA1CA,SAAAsiC,EAAA5J,GAEA/7B,EAAAooE,WAAAF,EAAAviC,EAAA5J,GAEAksC,EAAA3/D,OAAAyzB,EAAAmsC,IAuCA1kE,KAAA6kE,gBAnCA,SAAAjsC,EAAAuJ,EAAA5J,EAAAusC,GAEA,GAAA,IAAAA,EAAA,CAEA,IAAAxyE,EAAAyyE,EAEA,GAAAjQ,EAEAxiE,EAAAkK,EACAuoE,EAAA,2BAOA,GAFAA,EAAA,2BAEA,QAHAzyE,EAAAy5D,EAAAhsD,IAAA,2BAMA,YADA7I,QAAAkK,MAAA,kIAOA9O,EAAAyyE,GAAAL,EAAAviC,EAAA5J,EAAAusC,GAEAL,EAAA3/D,OAAAyzB,EAAAmsC,EAAAI,KAgBA,SAAAE,GAAAxoE,EAAAuvD,EAAAlzB,GAEA,IAAAosC,EAsBA,SAAAC,EAAArsE,GAEA,GAAA,UAAAA,EAAA,CAEA,GAAA2D,EAAA2oE,yBAAA,MAAA,OAAAtsE,UAAA,GACA2D,EAAA2oE,yBAAA,MAAA,OAAAtsE,UAAA,EAEA,MAAA,QAIAA,EAAA,UAIA,MAAA,YAAAA,GAEA2D,EAAA2oE,yBAAA,MAAA,OAAAtsE,UAAA,GACA2D,EAAA2oE,yBAAA,MAAA,OAAAtsE,UAAA,EAEA,UAMA,OAKA,IAAAi8D,EAAA,oBAAAsQ,wBAAA5oE,aAAA4oE,wBACA,oBAAAC,+BAAA7oE,aAAA6oE,8BAGAxsE,OAAA/L,IAAA+rC,EAAAhgC,UAAAggC,EAAAhgC,UAAA,QACAysE,EAAAJ,EAAArsE,GAEAysE,IAAAzsE,IAEA3B,QAAAC,KAAA,uBAAA0B,EAAA,uBAAAysE,EAAA,YACAzsE,EAAAysE,GAIA,IAAAC,GAAA,IAAA1sC,EAAA0sC,uBAEAC,EAAAhpE,EAAAsgC,aAAA,OACA2oC,EAAAjpE,EAAAsgC,aAAA,OACA4oC,EAAAlpE,EAAAsgC,aAAA,MACA6oC,EAAAnpE,EAAAsgC,aAAA,OAEA8oC,EAAAppE,EAAAsgC,aAAA,OACA+oC,EAAArpE,EAAAsgC,aAAA,OACAgpC,EAAAtpE,EAAAsgC,aAAA,OACAipC,EAAAvpE,EAAAsgC,aAAA,OAEAkpC,EAAAP,EAAA,EACAQ,EAAAnR,KAAA/I,EAAAhsD,IAAA,qBAKA,MAAA,CAEA+0D,SAAAA,EAEAoR,iBAvFA,WAEA,QAAAp5E,IAAAm4E,EAAA,OAAAA,EAEA,IAAA3yE,EAAAy5D,EAAAhsD,IAAA,kCAYA,OARAklE,EAFA,OAAA3yE,EAEAkK,EAAAsgC,aAAAxqC,EAAA6zE,gCAIA,GA4EAjB,gBAAAA,EAEArsE,UAAAA,EACA0sE,uBAAAA,EAEAC,YAAAA,EACAC,kBAAAA,EACAC,eAAAA,EACAC,eAAAA,EAEAC,cAAAA,EACAC,kBAAAA,EACAC,YAAAA,EACAC,oBAAAA,EAEAC,eAAAA,EACAC,sBAAAA,EACAG,oBA1BAJ,GAAAC,EA4BAI,WA1BAvR,EAAAt4D,EAAAsgC,aAAA,OAAA,GAoCA,SAAAwpC,KAEA,IAAAliB,EAAApkD,KAEAumE,EAAA,KACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EAEAtpC,EAAA,IAAAoE,GACAmlC,EAAA,IAAAjvD,GAEAkvD,EAAA,CAAA16E,MAAA,KAAAmxD,aAAA,GAmFA,SAAAwpB,IAEAD,EAAA16E,QAAAq6E,IAEAK,EAAA16E,MAAAq6E,EACAK,EAAAvpB,YAAAmpB,EAAA,GAIApiB,EAAA0iB,UAAAN,EACApiB,EAAA2iB,gBAAA,EAIA,SAAAC,EAAApX,EAAAtlC,EAAA9E,EAAAyhD,GAEA,IAAAC,EAAA,OAAAtX,EAAAA,EAAAzoE,OAAA,EACAggF,EAAA,KAEA,GAAA,IAAAD,EAAA,CAIA,GAFAC,EAAAP,EAAA16E,OAEA,IAAA+6E,GAAA,OAAAE,EAAA,CAEA,IAAAC,EAAA5hD,EAAA,EAAA0hD,EACAG,EAAA/8C,EAAAC,mBAEAo8C,EAAAhoD,gBAAA0oD,IAEA,OAAAF,GAAAA,EAAAhgF,OAAAigF,KAEAD,EAAA,IAAAxuB,aAAAyuB,IAIA,IAAA,IAAA5gF,EAAA,EAAA8gF,EAAA9hD,EAAAh/B,IAAA0gF,IAAA1gF,EAAA8gF,GAAA,EAEAlqC,EAAAhxC,KAAAwjE,EAAAppE,IAAAm9B,aAAA0jD,EAAAV,GAEAvpC,EAAA3R,OAAA1Q,QAAAosD,EAAAG,GACAH,EAAAG,EAAA,GAAAlqC,EAAAC,SAMAupC,EAAA16E,MAAAi7E,EACAP,EAAAvpB,aAAA,EAOA,OAHA+G,EAAA0iB,UAAAI,EACA9iB,EAAA2iB,gBAAA,EAEAI,EAxIAnnE,KAAA4mE,QAAAA,EACA5mE,KAAA8mE,UAAA,EACA9mE,KAAA+mE,gBAAA,EAEA/mE,KAAAunE,KAAA,SAAA3X,EAAA4X,EAAAl9C,GAEA,IAAApsB,EACA,IAAA0xD,EAAAzoE,QACAqgF,GAGA,IAAAhB,GACAC,EAOA,OALAA,EAAAe,EAEAjB,EAAAS,EAAApX,EAAAtlC,EAAA,GACAk8C,EAAA5W,EAAAzoE,OAEA+W,GAIA8B,KAAAynE,aAAA,WAEAf,GAAA,EACAM,EAAA,OAIAhnE,KAAA0nE,WAAA,WAEAhB,GAAA,EACAG,KAIA7mE,KAAA2nE,SAAA,SAAA/X,EAAA3c,EAAAC,EAAA5oB,EAAA7/B,EAAAm9E,GAEA,IAAAnB,GAAA,OAAA7W,GAAA,IAAAA,EAAAzoE,QAAAu/E,IAAAxzB,EAIAwzB,EAIAM,EAAA,MAIAH,QAIA,CAEA,IAAAgB,EAAAnB,EAAA,EAAAF,EACAsB,EAAA,EAAAD,EAEAV,EAAA18E,EAAAs9E,eAAA,KAEAnB,EAAA16E,MAAAi7E,EAEAA,EAAAH,EAAApX,EAAAtlC,EAAAw9C,EAAAF,GAEA,IAAA,IAAAphF,EAAA,EAAAA,IAAAshF,IAAAthF,EAEA2gF,EAAA3gF,GAAA+/E,EAAA//E,GAIAiE,EAAAs9E,cAAAZ,EACAnnE,KAAA+mE,gBAAA9zB,EAAAjzC,KAAA8mE,UAAA,EACA9mE,KAAA8mE,WAAAe,IAwEA,SAAAG,GAAAxrE,GAEA,IAAAuvD,EAAA,GAEA,MAAA,CAEAhsD,IAAA,SAAA5J,GAEA,QAAArJ,IAAAi/D,EAAA51D,GAEA,OAAA41D,EAAA51D,GAIA,IAAA7D,EAEA,OAAA6D,GAEA,IAAA,sBACA7D,EAAAkK,EAAAyrE,aAAA,wBAAAzrE,EAAAyrE,aAAA,4BAAAzrE,EAAAyrE,aAAA,8BACA,MAEA,IAAA,iCACA31E,EAAAkK,EAAAyrE,aAAA,mCAAAzrE,EAAAyrE,aAAA,uCAAAzrE,EAAAyrE,aAAA,yCACA,MAEA,IAAA,gCACA31E,EAAAkK,EAAAyrE,aAAA,kCAAAzrE,EAAAyrE,aAAA,sCAAAzrE,EAAAyrE,aAAA,wCACA,MAEA,IAAA,iCACA31E,EAAAkK,EAAAyrE,aAAA,mCAAAzrE,EAAAyrE,aAAA,yCACA,MAEA,QACA31E,EAAAkK,EAAAyrE,aAAA9xE,GAYA,OARA,OAAA7D,GAEA4E,QAAAC,KAAA,wBAAAhB,EAAA,6BAIA41D,EAAA51D,GAAA7D,EAEAA,IAYA,SAAA41E,GAAA1rE,EAAAS,EAAAwnE,EAAA1D,GAEA,IAAAhpC,EAAA,IAAAi9B,QACAmT,EAAA,IAAAnT,QAEA,SAAAoT,EAAAj0D,GAEA,IAAAykB,EAAAzkB,EAAAvrB,OACAy/E,EAAAtwC,EAAAh4B,IAAA64B,GAQA,IAAA,IAAAziC,KANA,OAAAkyE,EAAAh+D,OAEApN,EAAA85B,OAAAsxC,EAAAh+D,OAIAg+D,EAAAprE,WAEAA,EAAA85B,OAAAsxC,EAAAprE,WAAA9G,IAIAyiC,EAAAh6B,oBAAA,UAAAwpE,GAEArwC,EAAAq9B,OAAAx8B,GAEA,IAAA3d,EAAAktD,EAAApoE,IAAAsoE,GAEAptD,IAEAhe,EAAA85B,OAAA9b,GACAktD,EAAA/S,OAAAiT,IAIAtH,EAAAuD,wBAAA1rC,IAEA,IAAAA,EAAAyqC,kCAEAzqC,EAAA+qC,kBAMAc,EAAA6D,OAAAvwC,aAkEA,SAAAwwC,EAAA3vC,GAEA,IAAAmnB,EAAA,GAEAyoB,EAAA5vC,EAAAvuB,MACAo+D,EAAA7vC,EAAA37B,WAAA0zB,SACArP,EAAA,EAEA,GAAA,OAAAknD,EAAA,CAEA,IAAAp0D,EAAAo0D,EAAAp0D,MACAkN,EAAAknD,EAAAlnD,QAEA,IAAA,IAAA96B,EAAA,EAAAyJ,EAAAmkB,EAAAjtB,OAAAX,EAAAyJ,EAAAzJ,GAAA,EAAA,CAEA,IAAAK,EAAAutB,EAAA5tB,EAAA,GACAkF,EAAA0oB,EAAA5tB,EAAA,GACAE,EAAA0tB,EAAA5tB,EAAA,GAEAu5D,EAAAp1D,KAAA9D,EAAA6E,EAAAA,EAAAhF,EAAAA,EAAAG,QAIA,CAGAy6B,EAAAmnD,EAAAnnD,QAEA,IAAA,IAAA0X,EAAA,EAAAC,EAHAwvC,EAAAr0D,MAGAjtB,OAAA,EAAA,EAAA6xC,EAAAC,EAAAD,GAAA,EAAA,CAEA,IAAA+pB,EAAA/pB,EAAA,EACAgqB,EAAAhqB,EAAA,EACAiqB,EAAAjqB,EAAA,EAEA+mB,EAAAp1D,KAAAo4D,EAAAC,EAAAA,EAAAC,EAAAA,EAAAF,IAMA,IAAA9nC,EAAA,IAAA4+B,GAAAkG,GAAA,MAAAvH,GAAAJ,IAAA2H,EAAA,GACA9kC,EAAAqG,QAAAA,EAMA,IAAAonD,EAAAP,EAAApoE,IAAA64B,GAEA8vC,GAAAzrE,EAAA85B,OAAA2xC,GAIAP,EAAA3wD,IAAAohB,EAAA3d,GAkCA,MAAA,CAEAlb,IAvJA,SAAAhV,EAAA6tC,GAEA,IAAAyvC,EAAAtwC,EAAAh4B,IAAA64B,GAEA,OAAAyvC,IAEAzvC,EAAAj6B,iBAAA,UAAAypE,GAEAxvC,EAAAgkB,iBAEAyrB,EAAAzvC,EAEAA,EAAA8kB,kBAEA5wD,IAAA8rC,EAAA+vC,kBAEA/vC,EAAA+vC,iBAAA,IAAAnsB,IAAAxgB,cAAAjxC,IAIAs9E,EAAAzvC,EAAA+vC,iBAIA5wC,EAAAvgB,IAAAohB,EAAAyvC,GAEA5D,EAAA6D,OAAAvwC,aAEAswC,IA4HAvjE,OAxHA,SAAA8zB,GAEA,IAAAqqC,EAAArqC,EAAA37B,WAIA,IAAA,IAAA9G,KAAA8sE,EAEAhmE,EAAA6H,OAAAm+D,EAAA9sE,GAAA,OAMA,IAAAsmD,EAAA7jB,EAAA6jB,gBAEA,IAAA,IAAA0D,KAAA1D,EAIA,IAFA,IAAAroC,EAAAqoC,EAAA0D,GAEA35D,EAAA,EAAAyJ,EAAAmkB,EAAAjtB,OAAAX,EAAAyJ,EAAAzJ,IAEAyW,EAAA6H,OAAAsP,EAAA5tB,GAAA,QAoGAoiF,sBAnCA,SAAAhwC,GAEA,IAAAiwC,EAAAV,EAAApoE,IAAA64B,GAEA,GAAAiwC,EAAA,CAEA,IAAAL,EAAA5vC,EAAAvuB,MAEA,OAAAm+D,GAIAK,EAAAvnD,QAAAknD,EAAAlnD,SAEAinD,EAAA3vC,QAQA2vC,EAAA3vC,GAIA,OAAAuvC,EAAApoE,IAAA64B,KAmBA,SAAAkwC,GAAAtsE,EAAAuvD,EAAA0Y,EAAA5P,GAEA,IAEA6P,EAQA7wE,EAAA2hE,EAVAV,EAAAD,EAAAC,SA4DA90D,KAAA2kE,QAxDA,SAAAz4E,GAEAw4E,EAAAx4E,GAuDA8T,KAAA88C,SAjDA,SAAA5wD,GAEA2H,EAAA3H,EAAA2H,KACA2hE,EAAAtpE,EAAAspE,iBA+CAx1D,KAAAH,OA3CA,SAAAsiC,EAAA5J,GAEA/7B,EAAAusE,aAAArE,EAAAnsC,EAAA1kC,EAAAsuC,EAAAqzB,GAEAiP,EAAA3/D,OAAAyzB,EAAAmsC,IAwCA1kE,KAAA6kE,gBApCA,SAAAjsC,EAAAuJ,EAAA5J,EAAAusC,GAEA,GAAA,IAAAA,EAAA,CAEA,IAAAxyE,EAAAyyE,EAEA,GAAAjQ,EAEAxiE,EAAAkK,EACAuoE,EAAA,6BAOA,GAFAA,EAAA,6BAEA,QAHAzyE,EAAAy5D,EAAAhsD,IAAA,2BAMA,YADA7I,QAAAkK,MAAA,yIAOA9O,EAAAyyE,GAAAL,EAAAnsC,EAAA1kC,EAAAsuC,EAAAqzB,EAAAsP,GAEAL,EAAA3/D,OAAAyzB,EAAAmsC,EAAAI,KAiBA,SAAAkE,GAAAxsE,GAEA,IAKAqD,EAAA,CACA5M,MAAA,EACAg2E,MAAA,EACAC,UAAA,EACAztC,OAAA,EACA0tC,MAAA,GAiDA,MAAA,CACAb,OA5DA,CACAvwC,WAAA,EACA/U,SAAA,GA2DAnjB,OAAAA,EACAupE,SAAA,KACAC,WAAA,EACA7G,MAfA,WAEA3iE,EAAA5M,QACA4M,EAAAopE,MAAA,EACAppE,EAAAqpE,UAAA,EACArpE,EAAA47B,OAAA,EACA57B,EAAAspE,MAAA,GAUArkE,OApDA,SAAAyzB,EAAAmsC,EAAA4E,GAMA,OAJAA,EAAAA,GAAA,EAEAzpE,EAAAopE,QAEAvE,GAEA,KAAA,EACA7kE,EAAAqpE,WAAAI,GAAA/wC,EAAA,GACA,MAEA,KAAA,EACA14B,EAAAspE,OAAAG,GAAA/wC,EAAA,GACA,MAEA,KAAA,EACA14B,EAAAspE,OAAAG,GAAA/wC,EAAA,GACA,MAEA,KAAA,EACA14B,EAAAspE,OAAAG,EAAA/wC,EACA,MAEA,KAAA,EACA14B,EAAA47B,QAAA6tC,EAAA/wC,EACA,MAEA,QACArhC,QAAAkK,MAAA,sCAAAsjE,MAgCA,SAAA6E,GAAA1iF,EAAA6E,GAEA,OAAA7E,EAAA,GAAA6E,EAAA,GAIA,SAAA89E,GAAA3iF,EAAA6E,GAEA,OAAA+C,KAAAkC,IAAAjF,EAAA,IAAA+C,KAAAkC,IAAA9J,EAAA,IAIA,SAAA4iF,GAAAjtE,GAOA,IALA,IAAAktE,EAAA,GACAtnB,EAAA,IAAAzJ,aAAA,GAEAgxB,EAAA,GAEAnjF,EAAA,EAAAA,EAAA,EAAAA,IAEAmjF,EAAAnjF,GAAA,CAAAA,EAAA,GAwHA,MAAA,CAEAse,OAtHA,SAAA/Z,EAAA6tC,EAAAE,EAAA+oC,GAEA,IAAA+H,EAAA7+E,EAAAs3D,sBAKAl7D,OAAA2F,IAAA88E,EAAA,EAAAA,EAAAziF,OAEA0iF,EAAAH,EAAA9wC,EAAAtvB,IAEA,QAAAxc,IAAA+8E,EAAA,CAIAA,EAAA,GAEA,IAAA,IAAArjF,EAAA,EAAAA,EAAAW,EAAAX,IAEAqjF,EAAArjF,GAAA,CAAAA,EAAA,GAIAkjF,EAAA9wC,EAAAtvB,IAAAugE,EAMA,IAAA,IAAA7wC,EAAA,EAAAA,EAAA7xC,EAAA6xC,IAAA,CAEA,IAAAspB,EAAAunB,EAAA7wC,GAEAspB,EAAA,GAAAtpB,EACAspB,EAAA,GAAAsnB,EAAA5wC,GAIA6wC,EAAA79E,KAAAw9E,IAEA,IAAA,IAAAtwC,EAAA,EAAAA,EAAA,EAAAA,IAEAA,EAAA/xC,GAAA0iF,EAAA3wC,GAAA,IAEAywC,EAAAzwC,GAAA,GAAA2wC,EAAA3wC,GAAA,GACAywC,EAAAzwC,GAAA,GAAA2wC,EAAA3wC,GAAA,KAIAywC,EAAAzwC,GAAA,GAAA3/B,OAAAuwE,iBACAH,EAAAzwC,GAAA,GAAA,GAMAywC,EAAA39E,KAAAu9E,IAOA,IALA,IAAA30B,EAAA9b,EAAA8b,cAAAhc,EAAA6jB,gBAAA9rB,SACAwmB,EAAAre,EAAAqe,cAAAve,EAAA6jB,gBAAAhxB,OAEAs+C,EAAA,EAEA1mB,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAEA,IAAA2mB,EAAAL,EAAAtmB,GACAh5C,EAAA2/D,EAAA,GACA99E,EAAA89E,EAAA,GAEA3/D,IAAA9Q,OAAAuwE,kBAAA59E,GAEA0oD,GAAAhc,EAAAmkB,aAAA,cAAAsG,KAAAzO,EAAAvqC,IAEAuuB,EAAAokB,aAAA,cAAAqG,EAAAzO,EAAAvqC,IAIA8sC,GAAAve,EAAAmkB,aAAA,cAAAsG,KAAAlM,EAAA9sC,IAEAuuB,EAAAokB,aAAA,cAAAqG,EAAAlM,EAAA9sC,IAIA+3C,EAAAiB,GAAAn3D,EACA69E,GAAA79E,IAIA0oD,QAAA9nD,IAAA8rC,EAAAmkB,aAAA,cAAAsG,IAEAzqB,EAAAqkB,gBAAA,cAAAoG,GAIAlM,QAAArqD,IAAA8rC,EAAAmkB,aAAA,cAAAsG,IAEAzqB,EAAAqkB,gBAAA,cAAAoG,GAIAjB,EAAAiB,GAAA,GASA,IAAA4mB,EAAArxC,EAAA8jB,qBAAA,EAAA,EAAAqtB,EAEAlI,EAAAqI,cAAAC,SAAA3tE,EAAA,2BAAAytE,GACApI,EAAAqI,cAAAC,SAAA3tE,EAAA,wBAAA4lD,KAgBA,SAAAgoB,GAAA5tE,EAAAu7B,EAAA96B,EAAAwnE,GAEA,IAAA4F,EAAA,IAAArV,QAyCA,MAAA,CAEAlwD,OAzCA,SAAA/Z,GAEA,IAAAkI,EAAAwxE,EAAA5kE,OAAA5M,MAEA2lC,EAAA7tC,EAAA6tC,SACAyvC,EAAAtwC,EAAAh4B,IAAAhV,EAAA6tC,GAwBA,OApBAyxC,EAAAtqE,IAAAsoE,KAAAp1E,IAEA2lC,EAAA8kB,YAEA2qB,EAAA1qB,iBAAA5yD,GAIAgtC,EAAAjzB,OAAAujE,GAEAgC,EAAA7yD,IAAA6wD,EAAAp1E,IAIAlI,EAAAutC,iBAEAr7B,EAAA6H,OAAA/Z,EAAAytC,eAAA,OAIA6vC,GAaAznE,QATA,WAEAypE,EAAA,IAAArV,UAiBA,SAAAsV,GAAAlnD,EAAAhD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5sB,EAAA6sB,EAAAte,GAMA+d,GAAAj5B,KAAA8Y,KAJAojB,OAAAt2B,IAAAs2B,EAAAA,EAAA,GACAhD,OAAAtzB,IAAAszB,EAAAA,EAAA7S,EAGA8S,EAAAC,EAAAC,EAAAC,EAFAC,OAAA3zB,IAAA2zB,EAAAA,EAAAtR,GAEAtb,EAAA6sB,EAAAte,GAEApC,KAAAohB,OAAA,EA6BA,SAAAmpD,GAAAznE,EAAAjJ,EAAAC,EAAA2vD,GAEAtpC,GAAAj5B,KAAA8Y,KAAA,MAEAA,KAAA2f,MAAA,CAAA7c,KAAAA,GAAA,KAAAjJ,MAAAA,GAAA,EAAAC,OAAAA,GAAA,EAAA2vD,MAAAA,GAAA,GAEAzpD,KAAAugB,UAAAvS,GACAhO,KAAAwgB,UAAAxS,GAEAhO,KAAAwqE,MAAA18D,GAEA9N,KAAAkhB,iBAAA,EACAlhB,KAAAohB,OAAA,EAEAphB,KAAAq9C,aAAA,EAYA,SAAAotB,GAAA3nE,EAAAjJ,EAAAC,EAAA2vD,GAUAtpC,GAAAj5B,KAAA8Y,KAAA,MAEAA,KAAA2f,MAAA,CAAA7c,KAAAA,GAAA,KAAAjJ,MAAAA,GAAA,EAAAC,OAAAA,GAAA,EAAA2vD,MAAAA,GAAA,GAEAzpD,KAAAugB,UAAAvS,GACAhO,KAAAwgB,UAAAxS,GAEAhO,KAAAwqE,MAAA18D,GAEA9N,KAAAkhB,iBAAA,EACAlhB,KAAAohB,OAAA,EAEAphB,KAAAq9C,aAAA,EAh0DA6gB,GAAAwM,SAAA,CAEAtf,SAAAD,GAAA,CACA+S,GAAAI,SAAAlT,SACA,CACAzV,UAAA,CAAAzpD,MAAA,GACA2pD,aAAA,CAAA3pD,MAAA,MACA0pD,mBAAA,CAAA1pD,MAAA,GACA4pD,sBAAA,CAAA5pD,MAAA,MACA8pD,qBAAA,CAAA9pD,MAAA,IAAAurB,GAAA,EAAA,IACAs+B,mBAAA,CAAA7pD,MAAA,MACAopD,MAAA,CAAAppD,MAAA,IAAAuiD,GAAA,IACAk8B,aAAA,CAAAz+E,MAAA,MAIAy/D,aAAAwK,GAAAsH,kBACA7R,eAAAuK,GAAAqH,oBAsuDA8M,GAAA7iF,UAAAF,OAAAm7B,OAAAvC,GAAA14B,YACA4wB,YAAAiyD,GAEAA,GAAA7iF,UAAAg5E,eAAA,EAEAl5E,OAAA6iB,eAAAkgE,GAAA7iF,UAAA,SAAA,CAEAsY,IAAA,WAEA,OAAAC,KAAA2f,OAIAnI,IAAA,SAAAtrB,GAEA8T,KAAA2f,MAAAzzB,MA4BAq+E,GAAA9iF,UAAAF,OAAAm7B,OAAAvC,GAAA14B,YACA4wB,YAAAkyD,GACAA,GAAA9iF,UAAAmjF,sBAAA,GAiCAH,GAAAhjF,UAAAF,OAAAm7B,OAAAvC,GAAA14B,YACA4wB,YAAAoyD,GACAA,GAAAhjF,UAAAojF,iBAAA,EAiDA,IAAAC,GAAA,IAAA3qD,GACA4qD,GAAA,IAAAR,GACAS,GAAA,IAAAP,GACAQ,GAAA,IAAAX,GAMAY,GAAA,GACAC,GAAA,GAIAC,GAAA,IAAAzyB,aAAA,IACA0yB,GAAA,IAAA1yB,aAAA,GACA2yB,GAAA,IAAA3yB,aAAA,GAIA,SAAA4yB,GAAAn3D,EAAAo3D,EAAAC,GAEA,IAAAC,EAAAt3D,EAAA,GAEA,GAAAs3D,GAAA,GAAAA,EAAA,EAAA,OAAAt3D,EAIA,IAAA/tB,EAAAmlF,EAAAC,EACAtlF,EAAA+kF,GAAA7kF,GASA,QAPAyG,IAAA3G,IAEAA,EAAA,IAAAwyD,aAAAtyD,GACA6kF,GAAA7kF,GAAAF,GAIA,IAAAqlF,EAAA,CAEAE,EAAA3wD,QAAA50B,EAAA,GAEA,IAAA,IAAAK,EAAA,EAAAs0B,EAAA,EAAAt0B,IAAAglF,IAAAhlF,EAGA4tB,EAAA5tB,GAAAu0B,QAAA50B,EADA20B,GAAA2wD,GAOA,OAAAtlF,EAIA,SAAAwlF,GAAA9kF,EAAA6E,GAEA,GAAA7E,EAAAM,SAAAuE,EAAAvE,OAAA,OAAA,EAEA,IAAA,IAAAX,EAAA,EAAAyJ,EAAApJ,EAAAM,OAAAX,EAAAyJ,EAAAzJ,IAEA,GAAAK,EAAAL,KAAAkF,EAAAlF,GAAA,OAAA,EAIA,OAAA,EAIA,SAAA4zD,GAAAvzD,EAAA6E,GAEA,IAAA,IAAAlF,EAAA,EAAAyJ,EAAAvE,EAAAvE,OAAAX,EAAAyJ,EAAAzJ,IAEAK,EAAAL,GAAAkF,EAAAlF,GAQA,SAAAolF,GAAA5oD,EAAA38B,GAEA,IAAAF,EAAAglF,GAAA9kF,QAEAyG,IAAA3G,IAEAA,EAAA,IAAAoyD,WAAAlyD,GACA8kF,GAAA9kF,GAAAF,GAIA,IAAA,IAAAK,EAAA,EAAAA,IAAAH,IAAAG,EAEAL,EAAAK,GAAAw8B,EAAA6oD,sBAIA,OAAA1lF,EAWA,SAAA2lF,GAAAtvE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MAEAA,EAAA,KAAA6tB,IAEA9b,EAAAuvE,UAAA/rE,KAAAgsE,KAAA1zD,GAEA7tB,EAAA,GAAA6tB,GAMA,SAAA2zD,GAAAzvE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MAEA,QAAAqC,IAAAwrB,EAAAnsB,EAEA1B,EAAA,KAAA6tB,EAAAnsB,GAAA1B,EAAA,KAAA6tB,EAAA7qB,IAEA+O,EAAA0vE,UAAAlsE,KAAAgsE,KAAA1zD,EAAAnsB,EAAAmsB,EAAA7qB,GAEAhD,EAAA,GAAA6tB,EAAAnsB,EACA1B,EAAA,GAAA6tB,EAAA7qB,OAIA,CAEA,GAAAk+E,GAAAlhF,EAAA6tB,GAAA,OAEA9b,EAAA2vE,WAAAnsE,KAAAgsE,KAAA1zD,GAEA8hC,GAAA3vD,EAAA6tB,IAMA,SAAA8zD,GAAA5vE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MAEA,QAAAqC,IAAAwrB,EAAAnsB,EAEA1B,EAAA,KAAA6tB,EAAAnsB,GAAA1B,EAAA,KAAA6tB,EAAA7qB,GAAAhD,EAAA,KAAA6tB,EAAAmJ,IAEAjlB,EAAA6vE,UAAArsE,KAAAgsE,KAAA1zD,EAAAnsB,EAAAmsB,EAAA7qB,EAAA6qB,EAAAmJ,GAEAh3B,EAAA,GAAA6tB,EAAAnsB,EACA1B,EAAA,GAAA6tB,EAAA7qB,EACAhD,EAAA,GAAA6tB,EAAAmJ,QAIA,QAAA30B,IAAAwrB,EAAAnyB,EAEAsE,EAAA,KAAA6tB,EAAAnyB,GAAAsE,EAAA,KAAA6tB,EAAA0F,GAAAvzB,EAAA,KAAA6tB,EAAA5sB,IAEA8Q,EAAA6vE,UAAArsE,KAAAgsE,KAAA1zD,EAAAnyB,EAAAmyB,EAAA0F,EAAA1F,EAAA5sB,GAEAjB,EAAA,GAAA6tB,EAAAnyB,EACAsE,EAAA,GAAA6tB,EAAA0F,EACAvzB,EAAA,GAAA6tB,EAAA5sB,OAIA,CAEA,GAAAigF,GAAAlhF,EAAA6tB,GAAA,OAEA9b,EAAA8vE,WAAAtsE,KAAAgsE,KAAA1zD,GAEA8hC,GAAA3vD,EAAA6tB,IAMA,SAAAi0D,GAAA/vE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MAEA,QAAAqC,IAAAwrB,EAAAnsB,EAEA1B,EAAA,KAAA6tB,EAAAnsB,GAAA1B,EAAA,KAAA6tB,EAAA7qB,GAAAhD,EAAA,KAAA6tB,EAAAmJ,GAAAh3B,EAAA,KAAA6tB,EAAAE,IAEAhc,EAAAgwE,UAAAxsE,KAAAgsE,KAAA1zD,EAAAnsB,EAAAmsB,EAAA7qB,EAAA6qB,EAAAmJ,EAAAnJ,EAAAE,GAEA/tB,EAAA,GAAA6tB,EAAAnsB,EACA1B,EAAA,GAAA6tB,EAAA7qB,EACAhD,EAAA,GAAA6tB,EAAAmJ,EACAh3B,EAAA,GAAA6tB,EAAAE,OAIA,CAEA,GAAAmzD,GAAAlhF,EAAA6tB,GAAA,OAEA9b,EAAAiwE,WAAAzsE,KAAAgsE,KAAA1zD,GAEA8hC,GAAA3vD,EAAA6tB,IAQA,SAAAo0D,GAAAlwE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MACAktB,EAAAW,EAAAX,SAEA,QAAA7qB,IAAA6qB,EAAA,CAEA,GAAAg0D,GAAAlhF,EAAA6tB,GAAA,OAEA9b,EAAAmwE,iBAAA3sE,KAAAgsE,MAAA,EAAA1zD,GAEA8hC,GAAA3vD,EAAA6tB,OAEA,CAEA,GAAAqzD,GAAAlhF,EAAAktB,GAAA,OAEA2zD,GAAA9zD,IAAAG,GAEAnb,EAAAmwE,iBAAA3sE,KAAAgsE,MAAA,EAAAV,IAEAlxB,GAAA3vD,EAAAktB,IAMA,SAAAi1D,GAAApwE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MACAktB,EAAAW,EAAAX,SAEA,QAAA7qB,IAAA6qB,EAAA,CAEA,GAAAg0D,GAAAlhF,EAAA6tB,GAAA,OAEA9b,EAAAqwE,iBAAA7sE,KAAAgsE,MAAA,EAAA1zD,GAEA8hC,GAAA3vD,EAAA6tB,OAEA,CAEA,GAAAqzD,GAAAlhF,EAAAktB,GAAA,OAEA0zD,GAAA7zD,IAAAG,GAEAnb,EAAAqwE,iBAAA7sE,KAAAgsE,MAAA,EAAAX,IAEAjxB,GAAA3vD,EAAAktB,IAMA,SAAAm1D,GAAAtwE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MACAktB,EAAAW,EAAAX,SAEA,QAAA7qB,IAAA6qB,EAAA,CAEA,GAAAg0D,GAAAlhF,EAAA6tB,GAAA,OAEA9b,EAAAuwE,iBAAA/sE,KAAAgsE,MAAA,EAAA1zD,GAEA8hC,GAAA3vD,EAAA6tB,OAEA,CAEA,GAAAqzD,GAAAlhF,EAAAktB,GAAA,OAEAyzD,GAAA5zD,IAAAG,GAEAnb,EAAAuwE,iBAAA/sE,KAAAgsE,MAAA,EAAAZ,IAEAhxB,GAAA3vD,EAAAktB,IAQA,SAAAq1D,GAAAxwE,EAAA8b,EAAA0K,GAEA,IAAAv4B,EAAAuV,KAAAvV,MACAiM,EAAAssB,EAAA6oD,sBAEAphF,EAAA,KAAAiM,IAEA8F,EAAAywE,UAAAjtE,KAAAgsE,KAAAt1E,GACAjM,EAAA,GAAAiM,GAIAssB,EAAAkqD,iBAAA50D,GAAAwyD,GAAAp0E,GAIA,SAAAy2E,GAAA3wE,EAAA8b,EAAA0K,GAEA,IAAAv4B,EAAAuV,KAAAvV,MACAiM,EAAAssB,EAAA6oD,sBAEAphF,EAAA,KAAAiM,IAEA8F,EAAAywE,UAAAjtE,KAAAgsE,KAAAt1E,GACAjM,EAAA,GAAAiM,GAIAssB,EAAAoqD,kBAAA90D,GAAAyyD,GAAAr0E,GAIA,SAAA22E,GAAA7wE,EAAA8b,EAAA0K,GAEA,IAAAv4B,EAAAuV,KAAAvV,MACAiM,EAAAssB,EAAA6oD,sBAEAphF,EAAA,KAAAiM,IAEA8F,EAAAywE,UAAAjtE,KAAAgsE,KAAAt1E,GACAjM,EAAA,GAAAiM,GAIAssB,EAAAsqD,aAAAh1D,GAAA0yD,GAAAt0E,GAIA,SAAA62E,GAAA/wE,EAAA8b,EAAA0K,GAEA,IAAAv4B,EAAAuV,KAAAvV,MACAiM,EAAAssB,EAAA6oD,sBAEAphF,EAAA,KAAAiM,IAEA8F,EAAAywE,UAAAjtE,KAAAgsE,KAAAt1E,GACAjM,EAAA,GAAAiM,GAIAssB,EAAAwqD,mBAAAl1D,GAAA2yD,GAAAv0E,GAMA,SAAA+2E,GAAAjxE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MAEAA,EAAA,KAAA6tB,IAEA9b,EAAAywE,UAAAjtE,KAAAgsE,KAAA1zD,GAEA7tB,EAAA,GAAA6tB,GAIA,SAAAo1D,GAAAlxE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MAEAkhF,GAAAlhF,EAAA6tB,KAEA9b,EAAAmxE,WAAA3tE,KAAAgsE,KAAA1zD,GAEA8hC,GAAA3vD,EAAA6tB,IAIA,SAAAs1D,GAAApxE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MAEAkhF,GAAAlhF,EAAA6tB,KAEA9b,EAAAqxE,WAAA7tE,KAAAgsE,KAAA1zD,GAEA8hC,GAAA3vD,EAAA6tB,IAIA,SAAAw1D,GAAAtxE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MAEAkhF,GAAAlhF,EAAA6tB,KAEA9b,EAAAuxE,WAAA/tE,KAAAgsE,KAAA1zD,GAEA8hC,GAAA3vD,EAAA6tB,IAMA,SAAA01D,GAAAxxE,EAAA8b,GAEA,IAAA7tB,EAAAuV,KAAAvV,MAEAA,EAAA,KAAA6tB,IAEA9b,EAAAyxE,WAAAjuE,KAAAgsE,KAAA1zD,GAEA7tB,EAAA,GAAA6tB,GAuDA,SAAA41D,GAAA1xE,EAAA8b,GAEA9b,EAAA2xE,WAAAnuE,KAAAgsE,KAAA1zD,GAKA,SAAA81D,GAAA5xE,EAAA8b,GAEA9b,EAAA6xE,WAAAruE,KAAAgsE,KAAA1zD,GAIA,SAAAg2D,GAAA9xE,EAAA8b,GAEA9b,EAAAmxE,WAAA3tE,KAAAgsE,KAAA1zD,GAIA,SAAAi2D,GAAA/xE,EAAA8b,GAEA9b,EAAAqxE,WAAA7tE,KAAAgsE,KAAA1zD,GAIA,SAAAk2D,GAAAhyE,EAAA8b,GAEA9b,EAAAuxE,WAAA/tE,KAAAgsE,KAAA1zD,GAOA,SAAAm2D,GAAAjyE,EAAA8b,GAEA,IAAAxV,EAAAyoE,GAAAjzD,EAAAtY,KAAA87B,KAAA,GAEAt/B,EAAA2vE,WAAAnsE,KAAAgsE,KAAAlpE,GAIA,SAAA4rE,GAAAlyE,EAAA8b,GAEA,IAAAxV,EAAAyoE,GAAAjzD,EAAAtY,KAAA87B,KAAA,GAEAt/B,EAAA8vE,WAAAtsE,KAAAgsE,KAAAlpE,GAIA,SAAA6rE,GAAAnyE,EAAA8b,GAEA,IAAAxV,EAAAyoE,GAAAjzD,EAAAtY,KAAA87B,KAAA,GAEAt/B,EAAAiwE,WAAAzsE,KAAAgsE,KAAAlpE,GAMA,SAAA8rE,GAAApyE,EAAA8b,GAEA,IAAAxV,EAAAyoE,GAAAjzD,EAAAtY,KAAA87B,KAAA,GAEAt/B,EAAAmwE,iBAAA3sE,KAAAgsE,MAAA,EAAAlpE,GAIA,SAAA+rE,GAAAryE,EAAA8b,GAEA,IAAAxV,EAAAyoE,GAAAjzD,EAAAtY,KAAA87B,KAAA,GAEAt/B,EAAAqwE,iBAAA7sE,KAAAgsE,MAAA,EAAAlpE,GAIA,SAAAgsE,GAAAtyE,EAAA8b,GAEA,IAAAxV,EAAAyoE,GAAAjzD,EAAAtY,KAAA87B,KAAA,IAEAt/B,EAAAuwE,iBAAA/sE,KAAAgsE,MAAA,EAAAlpE,GAMA,SAAAisE,GAAAvyE,EAAA8b,EAAA0K,GAEA,IAAA38B,EAAAiyB,EAAAnxB,OAEAuQ,EAAAk0E,GAAA5oD,EAAA38B,GAEAmW,EAAA6xE,WAAAruE,KAAAgsE,KAAAt0E,GAEA,IAAA,IAAAlR,EAAA,EAAAA,IAAAH,IAAAG,EAEAw8B,EAAAkqD,iBAAA50D,EAAA9xB,IAAAskF,GAAApzE,EAAAlR,IAMA,SAAAwoF,GAAAxyE,EAAA8b,EAAA0K,GAEA,IAAA38B,EAAAiyB,EAAAnxB,OAEAuQ,EAAAk0E,GAAA5oD,EAAA38B,GAEAmW,EAAA6xE,WAAAruE,KAAAgsE,KAAAt0E,GAEA,IAAA,IAAAlR,EAAA,EAAAA,IAAAH,IAAAG,EAEAw8B,EAAAwqD,mBAAAl1D,EAAA9xB,IAAAykF,GAAAvzE,EAAAlR,IA6CA,SAAAyoF,GAAA3lE,EAAA4lE,EAAAlD,GAEAhsE,KAAAsJ,GAAAA,EACAtJ,KAAAgsE,KAAAA,EACAhsE,KAAAvV,MAAA,GACAuV,KAAAmqE,SAnNA,SAAAt2E,GAEA,OAAAA,GAEA,KAAA,KAAA,OAAAi4E,GACA,KAAA,MAAA,OAAAG,GACA,KAAA,MAAA,OAAAG,GACA,KAAA,MAAA,OAAAG,GAEA,KAAA,MAAA,OAAAG,GACA,KAAA,MAAA,OAAAE,GACA,KAAA,MAAA,OAAAE,GAEA,KAAA,KAAA,KAAA,MAAA,OAAAW,GACA,KAAA,MAAA,KAAA,MAAA,OAAAC,GACA,KAAA,MAAA,KAAA,MAAA,OAAAE,GACA,KAAA,MAAA,KAAA,MAAA,OAAAE,GAEA,KAAA,KAAA,OAAAE,GAEA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,OAAAhB,GAEA,KAAA,MACA,KAAA,MACA,KAAA,MACA,OAAAK,GAEA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,OAAAE,GAEA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,OAAAJ,IAyKAgC,CAAAD,EAAAr7E,MAMA,SAAAu7E,GAAA9lE,EAAA4lE,EAAAlD,GAEAhsE,KAAAsJ,GAAAA,EACAtJ,KAAAgsE,KAAAA,EACAhsE,KAAAvV,MAAA,GACAuV,KAAA87B,KAAAozC,EAAApzC,KACA97B,KAAAmqE,SAtDA,SAAAt2E,GAEA,OAAAA,GAEA,KAAA,KAAA,OAAAq6E,GACA,KAAA,MAAA,OAAAO,GACA,KAAA,MAAA,OAAAC,GACA,KAAA,MAAA,OAAAC,GAEA,KAAA,MAAA,OAAAC,GACA,KAAA,MAAA,OAAAC,GACA,KAAA,MAAA,OAAAC,GAEA,KAAA,KAAA,KAAA,MAAA,OAAAV,GACA,KAAA,MAAA,KAAA,MAAA,OAAAE,GACA,KAAA,MAAA,KAAA,MAAA,OAAAC,GACA,KAAA,MAAA,KAAA,MAAA,OAAAC,GAEA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,OAAAO,GAEA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,OAAAC,IAyBAK,CAAAH,EAAAr7E,MAoBA,SAAAy7E,GAAAhmE,GAEAtJ,KAAAsJ,GAAAA,EAEAtJ,KAAAuvE,IAAA,GACAvvE,KAAA7X,IAAA,GAnBAinF,GAAA3nF,UAAA+nF,YAAA,SAAA1sE,GAEA,IAAArY,EAAAuV,KAAAvV,MAEAqY,aAAA61C,cAAAluD,EAAAtD,SAAA2b,EAAA3b,SAEA6Y,KAAAvV,MAAA,IAAAkuD,aAAA71C,EAAA3b,SAIAizD,GAAA3vD,EAAAqY,IAaAwsE,GAAA7nF,UAAA0iF,SAAA,SAAA3tE,EAAAtQ,EAAA82B,GAIA,IAFA,IAAAusD,EAAAvvE,KAAAuvE,IAEA/oF,EAAA,EAAAH,EAAAkpF,EAAApoF,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAAI,EAAA2oF,EAAA/oF,GACAI,EAAAujF,SAAA3tE,EAAAtQ,EAAAtF,EAAA0iB,IAAA0Z,KAUA,IAAAysD,GAAA,2BAWA,SAAAC,GAAAC,EAAAC,GAEAD,EAAAJ,IAAA5kF,KAAAilF,GACAD,EAAAxnF,IAAAynF,EAAAtmE,IAAAsmE,EAIA,SAAAC,GAAAX,EAAAlD,EAAA2D,GAEA,IAAAG,EAAAZ,EAAA/4E,KACA45E,EAAAD,EAAA3oF,OAKA,IAFAsoF,GAAAO,UAAA,IAEA,CAEA,IAAAx/E,EAAAi/E,GAAA17E,KAAA+7E,GAGAxmE,EAAA9Y,EAAA,GAEAy/E,EAAAz/E,EAAA,GAIA,GALA,MAAAA,EAAA,KAGA8Y,GAAA,QAEAxc,IAAAmjF,GAAA,MAAAA,GARAR,GAAAO,UAQA,IAAAD,EAAA,CAIAL,GAAAC,OAAA7iF,IAAAmjF,EACA,IAAAhB,GAAA3lE,EAAA4lE,EAAAlD,GACA,IAAAoD,GAAA9lE,EAAA4lE,EAAAlD,IAEA,MAMA,IACAtiE,EADAimE,EAAAxnF,IACAmhB,QAEAxc,IAAA4c,GAGAgmE,GAAAC,EADAjmE,EAAA,IAAA4lE,GAAAhmE,IAKAqmE,EAAAjmE,GAUA,SAAAwmE,GAAA1zE,EAAAqlE,GAEA7hE,KAAAuvE,IAAA,GACAvvE,KAAA7X,IAAA,GAIA,IAFA,IAAA9B,EAAAmW,EAAA2zE,oBAAAtO,EAAA,OAEAr7E,EAAA,EAAAA,EAAAH,IAAAG,EAAA,CAEA,IAAAi+E,EAAAjoE,EAAA4zE,iBAAAvO,EAAAr7E,GAGAqpF,GAAApL,EAFAjoE,EAAA6zE,mBAAAxO,EAAA4C,EAAAtuE,MAEA6J,OA8DA,SAAAswE,GAAA9zE,EAAA3I,EAAA47C,GAEA,IAAA4f,EAAA7yD,EAAA+zE,aAAA18E,GAKA,OAHA2I,EAAAg0E,aAAAnhB,EAAA5f,GACAjzC,EAAAi0E,cAAAphB,GAEAA,EA/DA6gB,GAAAzoF,UAAA0iF,SAAA,SAAA3tE,EAAArG,EAAAjK,EAAA82B,GAEA,IAAAp8B,EAAAoZ,KAAA7X,IAAAgO,QAEArJ,IAAAlG,GAAAA,EAAAujF,SAAA3tE,EAAAtQ,EAAA82B,IAIAktD,GAAAzoF,UAAAipF,YAAA,SAAAl0E,EAAAzR,EAAAoL,GAEA,IAAAmiB,EAAAvtB,EAAAoL,QAEArJ,IAAAwrB,GAAAtY,KAAAmqE,SAAA3tE,EAAArG,EAAAmiB,IAOA43D,GAAAS,OAAA,SAAAn0E,EAAA+yE,EAAAl2C,EAAArW,GAEA,IAAA,IAAAx8B,EAAA,EAAAH,EAAAkpF,EAAApoF,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAAI,EAAA2oF,EAAA/oF,GACA8xB,EAAA+gB,EAAAzyC,EAAA0iB,KAEA,IAAAgP,EAAA+kC,aAGAz2D,EAAAujF,SAAA3tE,EAAA8b,EAAApsB,MAAA82B,KAQAktD,GAAAU,aAAA,SAAArB,EAAAl2C,GAIA,IAFA,IAAAlzC,EAAA,GAEAK,EAAA,EAAAH,EAAAkpF,EAAApoF,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAAI,EAAA2oF,EAAA/oF,GACAI,EAAA0iB,MAAA+vB,GAAAlzC,EAAAwE,KAAA/D,GAIA,OAAAT,GAuBA,IAAA0qF,GAAA,EAgBA,SAAAC,GAAA1uE,GAEA,OAAAA,GAEA,KAAAuQ,GACA,MAAA,CAAA,SAAA,aACA,KAAAC,GACA,MAAA,CAAA,OAAA,aACA,KAAAE,GACA,MAAA,CAAA,OAAA,aACA,KAAAE,GACA,MAAA,CAAA,OAAA,kBACA,KAAAC,GACA,MAAA,CAAA,OAAA,mBACA,KAAAC,GACA,MAAA,CAAA,OAAA,oBACA,KAAAL,GACA,MAAA,CAAA,QAAA,oCACA,KAAAE,GACA,MAAA,CAAA,SAAA,aACA,QAEA,OADA7b,QAAAC,KAAA,4CAAAiL,GACA,CAAA,SAAA,cAMA,SAAA2uE,GAAAv0E,EAAA6yD,EAAAx7D,GAEA,IAAAm9E,EAAAx0E,EAAAy0E,mBAAA5hB,EAAA,OACA3tD,EAAAlF,EAAA00E,iBAAA7hB,GAAA8hB,OAEA,OAAAH,GAAA,KAAAtvE,EAAA,GAOA,4CAAA7N,EAAA,KAAA6N,EAtDA,SAAA+tC,GAIA,IAFA,IAAA05B,EAAA15B,EAAAnnD,MAAA,MAEA9B,EAAA,EAAAA,EAAA2iF,EAAAhiF,OAAAX,IAEA2iF,EAAA3iF,GAAAA,EAAA,EAAA,KAAA2iF,EAAA3iF,GAIA,OAAA2iF,EAAA/gF,KAAA,MA4CAgpF,CAFA50E,EAAA60E,gBAAAhiB,IAMA,SAAAiiB,GAAAC,EAAAnvE,GAEA,IAAAutC,EAAAmhC,GAAA1uE,GACA,MAAA,QAAAmvE,EAAA,2BAAA5hC,EAAA,GAAA,WAAAA,EAAA,GAAA,MAWA,SAAA6hC,GAAAD,EAAA7Q,GAEA,IAAA+Q,EAEA,OAAA/Q,GAEA,KAAAxzD,EACAukE,EAAA,SACA,MAEA,KAAAtkE,EACAskE,EAAA,WACA,MAEA,KAAArkE,EACAqkE,EAAA,kBACA,MAEA,KAAApkE,EACAokE,EAAA,aACA,MAEA,KAAAnkE,EACAmkE,EAAA,SACA,MAEA,QACAv6E,QAAAC,KAAA,+CAAAupE,GACA+Q,EAAA,SAIA,MAAA,QAAAF,EAAA,2BAAAE,EAAA,0BAwDA,SAAAC,GAAAjiC,GAEA,MAAA,KAAAA,EAIA,SAAAkiC,GAAAliC,EAAA5W,GAEA,OAAA4W,EACA/+C,QAAA,kBAAAmoC,EAAA+4C,cACAlhF,QAAA,mBAAAmoC,EAAAg5C,eACAnhF,QAAA,wBAAAmoC,EAAAi5C,mBACAphF,QAAA,oBAAAmoC,EAAAk5C,gBACArhF,QAAA,mBAAAmoC,EAAAm5C,eACAthF,QAAA,yBAAAmoC,EAAAo5C,oBACAvhF,QAAA,0BAAAmoC,EAAAq5C,qBACAxhF,QAAA,2BAAAmoC,EAAAs5C,sBAIA,SAAAC,GAAA3iC,EAAA5W,GAEA,OAAA4W,EACA/+C,QAAA,uBAAAmoC,EAAAw5C,mBACA3hF,QAAA,yBAAAmoC,EAAAw5C,kBAAAx5C,EAAAy5C,qBAMA,IAAAC,GAAA,mCAEA,SAAAC,GAAA/iC,GAEA,OAAAA,EAAA/+C,QAAA6hF,GAAAE,IAIA,SAAAA,GAAAjiF,EAAAkiF,GAEA,IAAAjjC,EAAA0mB,GAAAuc,GAEA,QAAA5lF,IAAA2iD,EAEA,MAAA,IAAA3oD,MAAA,6BAAA4rF,EAAA,KAIA,OAAAF,GAAA/iC,GAMA,IAAAkjC,GAAA,+FACAC,GAAA,kIAEA,SAAAC,GAAApjC,GAEA,OAAAA,EACA/+C,QAAAkiF,GAAAE,IACApiF,QAAAiiF,GAAAI,IAIA,SAAAA,GAAAviF,EAAA2xC,EAAAlgC,EAAA+wE,GAGA,OADA97E,QAAAC,KAAA,uHACA27E,GAAAtiF,EAAA2xC,EAAAlgC,EAAA+wE,GAIA,SAAAF,GAAAtiF,EAAA2xC,EAAAlgC,EAAA+wE,GAIA,IAFA,IAAAvjC,EAAA,GAEAjpD,EAAAopD,SAAAzN,GAAA37C,EAAAopD,SAAA3tC,GAAAzb,IAEAipD,GAAAujC,EACAtiF,QAAA,WAAA,KAAAlK,EAAA,MACAkK,QAAA,uBAAAlK,GAIA,OAAAipD,EAMA,SAAAwjC,GAAAp6C,GAEA,IAAAq6C,EAAA,aAAAr6C,EAAAhgC,UAAA,sBAAAggC,EAAAhgC,UAAA,QAgBA,MAdA,UAAAggC,EAAAhgC,UAEAq6E,GAAA,2BAEA,YAAAr6C,EAAAhgC,UAEAq6E,GAAA,6BAEA,SAAAr6C,EAAAhgC,YAEAq6E,GAAA,2BAIAA,EA0GA,SAAAC,GAAA5qE,EAAA6qE,EAAAv6C,EAAAkoC,GAEA,IAqBAsS,EAAAC,EA5UA/B,EAAAnvE,EAEAutC,EAqTAnzC,EAAA+L,EAAA5L,aAEA+uD,EAAA7yB,EAAA6yB,QAEAC,EAAA9yB,EAAA8yB,aACAC,EAAA/yB,EAAA+yB,eAEA2nB,EA/GA,SAAA16C,GAEA,IAAA06C,EAAA,uBAgBA,OAdA16C,EAAA26C,gBAAA9oE,EAEA6oE,EAAA,qBAEA16C,EAAA26C,gBAAA7oE,EAEA4oE,EAAA,0BAEA16C,EAAA26C,gBAAA5oE,IAEA2oE,EAAA,sBAIAA,EA6FAE,CAAA56C,GACA66C,EA1FA,SAAA76C,GAEA,IAAA66C,EAAA,mBAEA,GAAA76C,EAAAsb,OAEA,OAAAtb,EAAA86C,YAEA,KAAApmE,EACA,KAAAC,EACAkmE,EAAA,mBACA,MAEA,KAAA/lE,EACA,KAAAC,GACA8lE,EAAA,sBACA,MAEA,KAAAjmE,EACA,KAAAC,EACAgmE,EAAA,sBAOA,OAAAA,EA+DAE,CAAA/6C,GACAg7C,EA5DA,SAAAh7C,GAEA,IAAAg7C,EAAA,yBAEA,GAAAh7C,EAAAsb,OAEA,OAAAtb,EAAA86C,YAEA,KAAAnmE,EACA,KAAAE,EACAmmE,EAAA,yBAOA,OAAAA,EA2CAC,CAAAj7C,GACAk7C,EAxCA,SAAAl7C,GAEA,IAAAk7C,EAAA,uBAEA,GAAAl7C,EAAAsb,OAEA,OAAAtb,EAAAub,SAEA,KAAAtnC,EACAinE,EAAA,2BACA,MAEA,KAAAhnE,EACAgnE,EAAA,sBACA,MAEA,KAAA/mE,EACA+mE,EAAA,sBAOA,OAAAA,EAgBAC,CAAAn7C,GAGAo7C,EAAA1rE,EAAAynC,YAAA,EAAAznC,EAAAynC,YAAA,EAEAkkC,EAAAr7C,EAAAi8B,SAAA,GA3RA,SAAAj8B,GASA,MAPA,CACAA,EAAAs7C,sBAAAt7C,EAAAu7C,cAAAv7C,EAAAqd,SAAArd,EAAAw7C,uBAAAx7C,EAAAkd,oBAAAld,EAAA+Y,aAAA,aAAA/Y,EAAAy7C,SAAA,kDAAA,IACAz7C,EAAA07C,oBAAA17C,EAAA0sC,yBAAA1sC,EAAA27C,2BAAA,wCAAA,GACA37C,EAAA47C,sBAAA57C,EAAA67C,6BAAA,2CAAA,IACA77C,EAAA87C,2BAAA97C,EAAAsb,SAAAtb,EAAA+7C,kCAAA,gDAAA,IAGA3+E,OAAAy7E,IAAAtpF,KAAA,MAkRAysF,CAAAh8C,GAEAi8C,EAhRA,SAAAppB,GAEA,IAAAqpB,EAAA,GAEA,IAAA,IAAA5+E,KAAAu1D,EAAA,CAEA,IAAAx/D,EAAAw/D,EAAAv1D,IAEA,IAAAjK,GAEA6oF,EAAApqF,KAAA,WAAAwL,EAAA,IAAAjK,GAIA,OAAA6oF,EAAA3sF,KAAA,MAkQA4sF,CAAAtpB,GAEAmW,EAAArlE,EAAAy4E,gBAoQA,GAhQAp8C,EAAAq8C,sBAEA7B,EAAA,CAEAyB,GAEA7+E,OAAAy7E,IAAAtpF,KAAA,OAEAjB,OAAA,IAEAksF,GAAA,OAIAC,EAAA,CAEAY,EACAY,GAEA7+E,OAAAy7E,IAAAtpF,KAAA,OAEAjB,OAAA,IAEAmsF,GAAA,QAMAD,EAAA,CAEAJ,GAAAp6C,GAEA,uBAAAA,EAAAs8C,WAEAL,EAEAj8C,EAAAu8C,WAAA,yBAAA,GACAv8C,EAAAw8C,uBAAA,0BAAA,GAEA,wBAAApB,EAEA,qBAAAp7C,EAAAy8C,SACAz8C,EAAA08C,QAAA18C,EAAA3D,IAAA,kBAAA,GACA2D,EAAA08C,QAAA18C,EAAA28C,QAAA,mBAAA,GAEA38C,EAAA1wC,IAAA,kBAAA,GACA0wC,EAAAsb,OAAA,qBAAA,GACAtb,EAAAsb,OAAA,WAAA0/B,EAAA,GACAh7C,EAAAgb,SAAA,uBAAA,GACAhb,EAAAkb,MAAA,oBAAA,GACAlb,EAAA+d,YAAA,0BAAA,GACA/d,EAAAqd,QAAA,sBAAA,GACArd,EAAAud,UAAA,wBAAA,GACAvd,EAAAud,WAAAvd,EAAA48C,qBAAA,gCAAA,GACA58C,EAAAud,WAAAvd,EAAAw7C,sBAAA,iCAAA,GAEAx7C,EAAAgd,aAAA,2BAAA,GACAhd,EAAAid,sBAAA,qCAAA,GACAjd,EAAAkd,mBAAA,kCAAA,GACAld,EAAA0d,iBAAA1d,EAAAw8C,uBAAA,8BAAA,GACAx8C,EAAAob,YAAA,0BAAA,GACApb,EAAA6d,aAAA,2BAAA,GACA7d,EAAA8d,aAAA,2BAAA,GACA9d,EAAAqb,SAAA,uBAAA,GAEArb,EAAA68C,eAAA,sBAAA,GACA78C,EAAAsW,aAAA,oBAAA,GACAtW,EAAA+iB,UAAA,iBAAA,GACA/iB,EAAA88C,cAAA,0BAAA,GAEA98C,EAAA+Y,YAAA,sBAAA,GAEA/Y,EAAA8b,SAAA,uBAAA,GACA9b,EAAA+8C,iBAAA,uBAAA,GAEA/8C,EAAA+b,aAAA,2BAAA,GACA/b,EAAAse,eAAA,IAAAte,EAAA+Y,YAAA,2BAAA,GACA/Y,EAAAg9C,YAAA,uBAAA,GACAh9C,EAAAi9C,UAAA,qBAAA,GAEAj9C,EAAAk9C,iBAAA,wBAAA,GACAl9C,EAAAk9C,iBAAA,WAAAxC,EAAA,GAEA16C,EAAAke,gBAAA,8BAAA,GAEAle,EAAA0sC,uBAAA,0BAAA,GACA1sC,EAAA0sC,wBAAA1sC,EAAA27C,2BAAA,8BAAA,GAEA,4BACA,gCACA,iCACA,2BACA,6BACA,+BACA,+BAEA,wBAEA,kCAEA,SAEA,2BACA,yBACA,qBAEA,qBAEA,4BAEA,SAEA,mBAEA,0BAEA,SAEA,0BAEA,iCACA,iCACA,iCACA,iCAEA,4BAEA,mCACA,mCACA,mCACA,mCAEA,UAEA,mCACA,mCACA,mCACA,mCAEA,WAEA,SAEA,sBAEA,8BACA,+BAEA,SAEA,MAEAv+E,OAAAy7E,IAAAtpF,KAAA,MAEAkrF,EAAA,CAEAY,EAEAjB,GAAAp6C,GAEA,uBAAAA,EAAAs8C,WAEAL,EAEAj8C,EAAA4a,UAAA,qBAAA5a,EAAA4a,WAAA5a,EAAA4a,UAAA,EAAA,GAAA,MAAA,GAEA,wBAAAwgC,EAEAp7C,EAAA08C,QAAA18C,EAAA3D,IAAA,kBAAA,GACA2D,EAAA08C,QAAA18C,EAAA28C,QAAA,mBAAA,GAEA38C,EAAA1wC,IAAA,kBAAA,GACA0wC,EAAAod,OAAA,qBAAA,GACApd,EAAAsb,OAAA,qBAAA,GACAtb,EAAAsb,OAAA,WAAAu/B,EAAA,GACA76C,EAAAsb,OAAA,WAAA0/B,EAAA,GACAh7C,EAAAsb,OAAA,WAAA4/B,EAAA,GACAl7C,EAAAgb,SAAA,uBAAA,GACAhb,EAAAkb,MAAA,oBAAA,GACAlb,EAAA+d,YAAA,0BAAA,GACA/d,EAAAqd,QAAA,sBAAA,GACArd,EAAAud,UAAA,wBAAA,GACAvd,EAAAud,WAAAvd,EAAA48C,qBAAA,gCAAA,GACA58C,EAAAud,WAAAvd,EAAAw7C,sBAAA,iCAAA,GACAx7C,EAAAgd,aAAA,2BAAA,GACAhd,EAAAid,sBAAA,qCAAA,GACAjd,EAAAkd,mBAAA,kCAAA,GACAld,EAAAob,YAAA,0BAAA,GACApb,EAAA6d,aAAA,2BAAA,GACA7d,EAAA8d,aAAA,2BAAA,GACA9d,EAAAqb,SAAA,uBAAA,GAEArb,EAAAyc,MAAA,oBAAA,GAEAzc,EAAA68C,eAAA,sBAAA,GACA78C,EAAAsW,aAAA,oBAAA,GACAtW,EAAA+iB,UAAA,iBAAA,GACA/iB,EAAA88C,cAAA,0BAAA,GAEA98C,EAAAie,YAAA,0BAAA,GAEAje,EAAA+Y,YAAA,sBAAA,GAEA/Y,EAAAg9C,YAAA,uBAAA,GACAh9C,EAAAi9C,UAAA,qBAAA,GAEAj9C,EAAAk9C,iBAAA,wBAAA,GACAl9C,EAAAk9C,iBAAA,WAAAxC,EAAA,GAEA16C,EAAA6a,mBAAA,8BAAA,GAEA7a,EAAAm9C,wBAAA,oCAAA,GAEAn9C,EAAA0sC,uBAAA,0BAAA,GACA1sC,EAAA0sC,wBAAA1sC,EAAA27C,2BAAA,8BAAA,IAEA37C,EAAA87C,2BAAA97C,EAAAsb,SAAAtb,EAAA+7C,kCAAA,0BAAA,GAEA,2BACA,+BACA,+BAEA/7C,EAAA6nC,cAAAzzD,EAAA,uBAAA,GACA4rB,EAAA6nC,cAAAzzD,EAAAkpD,GAAA,0BAAA,GACAt9B,EAAA6nC,cAAAzzD,EAAAukE,GAAA,cAAA34C,EAAA6nC,aAAA,GAEA7nC,EAAA2a,UAAA,oBAAA,GAEA2iB,GAAA,wBACAt9B,EAAA1wC,IAAAmpF,GAAA,mBAAAz4C,EAAAo9C,aAAA,GACAp9C,EAAAod,OAAAq7B,GAAA,sBAAAz4C,EAAAq9C,gBAAA,GACAr9C,EAAAsb,OAAAm9B,GAAA,sBAAAz4C,EAAAs9C,gBAAA,GACAt9C,EAAA+d,YAAA06B,GAAA,2BAAAz4C,EAAAu9C,qBAAA,GACAv9C,EAAAgb,SAAAy9B,GAAA,wBAAAz4C,EAAAw9C,kBAAA,IAxjBA9E,EAyjBA,sBAzjBAnvE,EAyjBAy2B,EAAAy9C,eAvjBA3mC,EAAAmhC,GAAA1uE,GACA,QAAAmvE,EAAA,mCAAA5hC,EAAA,GAAAA,EAAA,GAAA,OAwjBA9W,EAAA09C,aAAA,yBAAA19C,EAAA09C,aAAA,GAEA,MAEAtgF,OAAAy7E,IAAAtpF,KAAA,OAMAujE,EAAAymB,GADAzmB,EAAAgmB,GADAhmB,EAAA6mB,GAAA7mB,GACA9yB,GACAA,GAIA+yB,EAAAwmB,GADAxmB,EAAA+lB,GADA/lB,EAAA4mB,GAAA5mB,GACA/yB,GACAA,GAEA8yB,EAAAknB,GAAAlnB,GACAC,EAAAinB,GAAAjnB,GAEA/yB,EAAAi8B,WAAAj8B,EAAAq8C,oBAAA,CAEA,IAAAsB,GAAA,EAEAC,EAAA,+BAEA59C,EAAAm0B,kBACA,OAAArB,EAAAn7D,MAAAimF,IACA,OAAA7qB,EAAAp7D,MAAAimF,KAEAD,GAAA,EAEA7qB,EAAAA,EAAAj7D,QAAA+lF,EAAA,IACA7qB,EAAAA,EAAAl7D,QAAA+lF,EAAA,KAMApD,EAAA,CACA,oBACA,uBACA,sBACA,6BACAjrF,KAAA,MAAA,KAAAirF,EAEAC,EAAA,CACA,oBACA,qBACAkD,EAAA,GAAA,+BACAA,EAAA,GAAA,oCACA,uCACA,4BACA,8BACA,oCACA,qCACA,6CACA,uCACA,uCACA,+CACA,0CACApuF,KAAA,MAAA,KAAAkrF,EAIA,IA+FAoD,EAgBA1T,EA9GA2T,EAAArD,EAAA1nB,EAKAgrB,EAAAtG,GAAA9zE,EAAA,MANA62E,EAAA1nB,GAOAkrB,EAAAvG,GAAA9zE,EAAA,MAAAm6E,GAqBA,GAnBAn6E,EAAAs6E,aAAAjV,EAAA+U,GACAp6E,EAAAs6E,aAAAjV,EAAAgV,QAIA/pF,IAAA+rC,EAAAwzB,oBAEA7vD,EAAAu6E,mBAAAlV,EAAA,EAAAhpC,EAAAwzB,sBAEA,IAAAxzB,EAAA+b,cAGAp4C,EAAAu6E,mBAAAlV,EAAA,EAAA,YAIArlE,EAAAw6E,YAAAnV,GAGAt5D,EAAA0uE,MAAAC,kBAAA,CAEA,IAAAC,EAAA36E,EAAA46E,kBAAAvV,GAAAsP,OACAkG,EAAA76E,EAAA00E,iBAAA0F,GAAAzF,OACAmG,EAAA96E,EAAA00E,iBAAA2F,GAAA1F,OAEAoG,GAAA,EACAC,GAAA,EAEA,IAAA,IAAAh7E,EAAA2zE,oBAAAtO,EAAA,OAAA,CAEA0V,GAAA,EAEA,IAAAE,EAAA1G,GAAAv0E,EAAAo6E,EAAA,UACAc,EAAA3G,GAAAv0E,EAAAq6E,EAAA,YAEA3/E,QAAAkK,MAAA,qCAAA5E,EAAAm7E,WAAA,QAAAn7E,EAAA2zE,oBAAAtO,EAAA,OAAA,uBAAAsV,EAAAM,EAAAC,OAEA,KAAAP,EAEAjgF,QAAAC,KAAA,6CAAAggF,GAEA,KAAAE,GAAA,KAAAC,IAEAE,GAAA,GAIAA,IAEAx3E,KAAA43E,YAAA,CAEAL,SAAAA,EAEAJ,WAAAA,EAEAxrB,aAAA,CAEAjqD,IAAA21E,EACA9kF,OAAA8gF,GAIAznB,eAAA,CAEAlqD,IAAA41E,EACA/kF,OAAA+gF,KAwEA,OAxDA92E,EAAAq7E,aAAAjB,GACAp6E,EAAAq7E,aAAAhB,GAMA72E,KAAAkqE,YAAA,WAQA,YANAp9E,IAAA4pF,IAEAA,EAAA,IAAAxG,GAAA1zE,EAAAqlE,IAIA6U,GAQA12E,KAAAujE,cAAA,WAQA,YANAz2E,IAAAk2E,IAEAA,EAtqBA,SAAAxmE,EAAAqlE,GAMA,IAJA,IAAA5kE,EAAA,GAEA5W,EAAAmW,EAAA2zE,oBAAAtO,EAAA,OAEAr7E,EAAA,EAAAA,EAAAH,EAAAG,IAAA,CAEA,IACA2P,EADAqG,EAAAs7E,gBAAAjW,EAAAr7E,GACA2P,KAIA8G,EAAA9G,GAAAqG,EAAAu7E,kBAAAlW,EAAA1rE,GAIA,OAAA8G,EAqpBA+6E,CAAAx7E,EAAAqlE,IAIAmB,GAMAhjE,KAAAiI,QAAA,WAEA84D,EAAAwD,uBAAAvkE,MAEAxD,EAAAy7E,cAAApW,GACA7hE,KAAA6hE,aAAA/0E,GAMAkT,KAAA7J,KAAA0iC,EAAAs8C,WACAn1E,KAAAsJ,GAAAunE,KACA7wE,KAAAozE,SAAAA,EACApzE,KAAAk4E,UAAA,EACAl4E,KAAA6hE,QAAAA,EACA7hE,KAAA2rD,aAAAirB,EACA52E,KAAA4rD,eAAAirB,EAEA72E,KAQA,SAAAm4E,GAAA5vE,EAAAwjD,EAAA8I,EAAAkM,GAEA,IAAAqI,EAAA,GAEAtU,EAAAD,EAAAC,SACAyQ,EAAA1Q,EAAA0Q,uBACAa,EAAAvR,EAAAuR,oBACAP,EAAAhR,EAAAgR,kBACAG,EAAAnR,EAAAmR,eAEAntE,EAAAg8D,EAAAh8D,UAEAu/E,EAAA,CACAC,kBAAA,QACAC,qBAAA,eACAC,mBAAA,SACA3kC,kBAAA,QACA4kC,oBAAA,UACAC,kBAAA,QACAC,iBAAA,OACAC,qBAAA,WACAC,qBAAA,WACAC,mBAAA,SACAC,kBAAA,QACAC,mBAAA,SACAC,eAAA,SACAC,eAAA,SACAC,eAAA,UAGAC,EAAA,CACA,YAAA,WAAA,yBAAA,iBAAA,aACA,MAAA,cAAA,SAAA,iBAAA,SAAA,aAAA,iBAAA,eACA,WAAA,mBAAA,QAAA,cAAA,sBAAA,UAAA,YAAA,uBAAA,wBAAA,eAAA,wBAAA,qBAAA,kBAAA,cACA,eAAA,eAAA,cACA,WAAA,UAAA,eAAA,iBAAA,YAAA,gBAAA,MAAA,SAAA,UACA,cAAA,kBAAA,yBAAA,WACA,WAAA,mBAAA,eAAA,eACA,kBAAA,kBAAA,qBACA,eAAA,iBAAA,gBAAA,gBAAA,oBACA,qBAAA,uBAAA,sBACA,mBAAA,gBAAA,cAAA,0BACA,YAAA,cAAA,YAAA,oBAAA,sBAAA,eAAA,YACA,SAqEA,SAAAC,EAAAjxF,GAEA,IAAAia,EAiBA,OAfAja,EAIAA,EAAAw6B,UAEAvgB,EAAAja,EAAAia,SAEAja,EAAA48B,sBAEA7tB,QAAAC,KAAA,6HACAiL,EAAAja,EAAA45B,QAAA3f,UATAA,EAAAuQ,GAaAvQ,EA2PA,MAAA,CACAi3E,cAxPA,SAAAvgD,EAAA+yB,EAAAytB,EAAA5qB,EAAA6qB,EAAAC,EAAAzuF,GAEA,IAAAmqC,EAAAw5B,EAAAx5B,IAGAif,EAAArb,EAAAqb,SAFArb,EAAA2gD,uBAAA/qB,EAAAz5B,YAAA,MAIAq/C,EAAA8D,EAAAt/C,EAAAjlC,MAKAyhF,EAAAvqF,EAAAw3D,cAvEA,SAAAx3D,GAEA,IACA2uF,EADA3uF,EAAA4uF,SACAD,MAEA,GAAAtT,EAEA,OAAA,KAWA,IACAwT,EAAAnrF,KAAAC,OADAm3E,EACA,IAAA,GAEAyP,EAAA7mF,KAAAqM,IAAA8+E,EAAAF,EAAAvyF,QAEA,OAAAmuF,EAAAoE,EAAAvyF,QAEA+P,QAAAC,KAAA,qCAAAuiF,EAAAvyF,OAAA,6BAAAmuF,EAAA,KACA,GAIAA,EAyCAuE,CAAA9uF,GAAA,EAEA,OAAA+tC,EAAAjgC,YAEAA,EAAAg8D,EAAAqQ,gBAAApsC,EAAAjgC,cAEAigC,EAAAjgC,WAEA3B,QAAAC,KAAA,oCAAA2hC,EAAAjgC,UAAA,uBAAAA,EAAA,YAMA,IAAAihF,EAnHA,SAAAhhD,EAAAw7C,GAEA,IAAAwF,EAEA,GAAAxF,EAAA,CAEA,IAAAjlB,EAAA6O,GAAAoW,GAEAwF,EAAA,CACA3jF,KAAA2iC,EAAA3iC,MAAA2iC,EAAAjlC,KACAu3D,SAAAE,GAAAlzC,MAAAi3C,EAAAjE,UACAO,aAAA0D,EAAA1D,aACAC,eAAAyD,EAAAzD,qBAKAkuB,EAAA,CACA3jF,KAAA2iC,EAAA3iC,MAAA2iC,EAAAjlC,KACAu3D,SAAAtyB,EAAAsyB,SACAO,aAAA7yB,EAAA6yB,aACAC,eAAA9yB,EAAA8yB,gBAKA,OAAAkuB,EAyFAC,CAAAjhD,EAAAw7C,GACAx7C,EAAAic,gBAAA+kC,EAAAvxE,GAEA,IAAAsmD,EAAAtmD,EAAAumD,kBA0HA,MAxHA,CAEAgG,SAAAA,EAEAwf,SAAAA,EACAa,WAAA2E,EAAA3jF,KAEAi1D,SAAA0uB,EAAA1uB,SACAO,aAAAmuB,EAAAnuB,aACAC,eAAAkuB,EAAAluB,eACAF,QAAA5yB,EAAA4yB,QAEAwpB,oBAAAp8C,EAAAo8C,oBACAloB,iBAAAl0B,EAAAk0B,iBAEAn0D,UAAAA,EAEAu8E,YAAA,IAAArqF,EAAAutC,gBAEA+8C,uBAAArP,EACAsQ,eAAA,OAAAznB,EAAAuqB,EAAAvqB,EAAA9sC,SAAAxZ,EAAA+tE,eACAnuF,MAAA2wC,EAAA3wC,IACA8tF,YAAAmD,EAAAtgD,EAAA3wC,KACA8tD,SAAAnd,EAAAmd,OACAigC,eAAAkD,EAAAtgD,EAAAmd,QACA9B,SAAAA,EACAw/B,WAAAx/B,GAAAA,EAAA/zB,QACA+1D,eAAAiD,EAAAjlC,GACAigC,eAAAjgC,IAAAA,EAAA/zB,UAAAzS,GAAAwmC,EAAA/zB,UAAAxS,IACAimC,WAAA/a,EAAA+a,SACAwiC,iBAAA+C,EAAAtgD,EAAA+a,UACAE,QAAAjb,EAAAib,MACA6C,cAAA9d,EAAA8d,YACAw/B,oBAAAgD,EAAAtgD,EAAA8d,aACAV,UAAApd,EAAAod,QACAE,YAAAtd,EAAAsd,UACAq/B,qBAAA38C,EAAAud,gBAAA/iC,GACA+gE,sBAAAv7C,EAAAud,gBAAAhjC,GACAwiC,eAAA/c,EAAA+c,aACAC,wBAAAhd,EAAAgd,sBACAC,qBAAAjd,EAAAid,mBACAQ,kBAAAzd,EAAAyd,gBACAG,eAAA5d,EAAA4d,aACAC,eAAA7d,EAAA6d,aACA1C,cAAAnb,EAAAmb,YACAC,WAAApb,EAAAob,SAEA4C,cAAAhe,EAAAge,YAEAxB,QAAAxc,EAAAwc,MAEAlB,QAAAtb,EAAAsb,QAEAshC,eAAA58C,EAAAsd,WAAAtd,EAAA48C,eACAvmC,aAAArW,EAAAqW,aACAyM,aAAA9iB,EAAA3wC,KAAA2wC,EAAAod,SAAApd,EAAAsd,WAAAtd,EAAAmb,aAAAnb,EAAAob,UAAApb,EAAA8d,aAAA9d,EAAA4d,cAAA5d,EAAA6d,cAAA7d,EAAA+c,cAAA/c,EAAAgd,uBAAAhd,EAAAid,oBAAAjd,EAAAyd,iBACAo/B,gBAAA78C,EAAA3wC,KAAA2wC,EAAAod,SAAApd,EAAAsd,WAAAtd,EAAAmb,aAAAnb,EAAAob,UAAApb,EAAA8d,aAAA9d,EAAA4d,cAAA5d,EAAA6d,cAAA7d,EAAAid,qBAAAjd,EAAAyd,iBAEArhB,MAAAA,EACAqgD,OAAAz8C,EAAA5D,IACAsgD,QAAAtgD,GAAAA,EAAA8kD,UAEApoC,YAAA9Y,EAAA8Y,YAEAmF,gBAAAje,EAAAie,gBACAwuB,uBAAAA,EAEA5wB,SAAA7b,EAAA6b,UAAA2gC,EAAA,EACAA,SAAAA,EACAM,iBAAAxP,EAEAxxB,aAAA9b,EAAA8b,aACAuC,aAAAre,EAAAqe,aACA8iC,gBAAA1xE,EAAA0xE,gBACAC,gBAAA3xE,EAAA2xE,gBAEAtI,aAAA/lB,EAAAsuB,YAAAhzF,OACA4qF,eAAAlmB,EAAAvvB,MAAAn1C,OACA0qF,cAAAhmB,EAAAuuB,KAAAjzF,OACA2qF,kBAAAjmB,EAAAwuB,SAAAlzF,OACA6qF,cAAAnmB,EAAAyuB,KAAAnzF,OAEA8qF,mBAAApmB,EAAAqH,qBAAA/rE,OACAgrF,qBAAAtmB,EAAAkI,eAAA5sE,OACA+qF,oBAAArmB,EAAA4H,cAAAtsE,OAEAkrF,kBAAAkH,EACAjH,oBAAAkH,EAEAhmC,UAAA1a,EAAA0a,UAEAuiC,iBAAAxtE,EAAAgyE,UAAAr8E,SAAAo7E,EAAAnyF,OAAA,EACAqsF,cAAAjrE,EAAAgyE,UAAA1mF,KAEA6sE,YAAA5nC,EAAA6a,WAAAprC,EAAAm4D,YAAAzzD,EACA+oE,wBAAAztE,EAAAytE,wBAEAtiC,mBAAA5a,EAAA4a,mBAEAD,UAAA3a,EAAA2a,UACAoiC,YAAA/8C,EAAA6Y,OAAA5mC,EACA+qE,UAAAh9C,EAAA6Y,OAAA7mC,EAEAyrE,kBAAAzpF,IAAAgsC,EAAAy9C,cAAAz9C,EAAAy9C,aAEAlqB,oBAAAvzB,EAAAuzB,oBAEA8nB,qBAAAr7C,EAAAizB,YAAAjzB,EAAAizB,WAAAC,YACAuoB,mBAAAz7C,EAAAizB,YAAAjzB,EAAAizB,WAAAE,UACAwoB,qBAAA37C,EAAAizB,YAAAjzB,EAAAizB,WAAAG,YACAyoB,0BAAA77C,EAAAizB,YAAAjzB,EAAAizB,WAAAI,iBAEAqoB,2BAAA1f,GAAA,OAAA/I,EAAAhsD,IAAA,kBACA20E,6BAAA5f,GAAA,OAAA/I,EAAAhsD,IAAA,sBACA60E,kCAAA9f,GAAA,OAAA/I,EAAAhsD,IAAA,0BAEAi1C,sBAAAlc,EAAAkc,0BAsGAwlC,mBA9FA,SAAA3hD,GAEA,IAAAzkB,EAAA,GAaA,GAXAykB,EAAAy7C,SAEAlgE,EAAAzpB,KAAAkuC,EAAAy7C,WAIAlgE,EAAAzpB,KAAAkuC,EAAA+yB,gBACAx3C,EAAAzpB,KAAAkuC,EAAA8yB,oBAIA7+D,IAAA+rC,EAAA6yB,QAEA,IAAA,IAAAv1D,KAAA0iC,EAAA6yB,QAEAt3C,EAAAzpB,KAAAwL,GACAie,EAAAzpB,KAAAkuC,EAAA6yB,QAAAv1D,IAMA,QAAArJ,IAAA+rC,EAAAq8C,oBAAA,CAEA,IAAA,IAAA1uF,EAAA,EAAAA,EAAA2yF,EAAAhyF,OAAAX,IAEA4tB,EAAAzpB,KAAAkuC,EAAAsgD,EAAA3yF,KAIA4tB,EAAAzpB,KAAA4d,EAAA+tE,gBACAliE,EAAAzpB,KAAA4d,EAAAynC,aAMA,OAFA57B,EAAAzpB,KAAAkuC,EAAAmc,uBAEA5gC,EAAAhsB,QAsDAqyF,eAlDA,SAAA5hD,EAAAu6C,GAKA,IAHA,IAAAvR,EAGA76E,EAAA,EAAA0zF,EAAAtR,EAAAjiF,OAAAH,EAAA0zF,EAAA1zF,IAAA,CAEA,IAAA2zF,EAAAvR,EAAApiF,GAEA,GAAA2zF,EAAAvH,WAAAA,EAAA,IAEAvR,EAAA8Y,GACAzC,UAEA,OAaA,YAPAprF,IAAA+0E,IAEAA,EAAA,IAAAsR,GAAA5qE,EAAA6qE,EAAAv6C,EAAAkoC,GACAqI,EAAAz+E,KAAAk3E,IAIAA,GAwBA+Y,eApBA,SAAA/Y,GAEA,GAAA,KAAAA,EAAAqW,UAAA,CAGA,IAAA1xF,EAAA4iF,EAAA31E,QAAAouE,GACAuH,EAAA5iF,GAAA4iF,EAAAA,EAAAjiF,OAAA,GACAiiF,EAAA34E,MAGAoxE,EAAA55D,YAYAmhE,SAAAA,GASA,SAAAyR,KAEA,IAAAjoB,EAAA,IAAAoC,QAmCA,MAAA,CACAj1D,IAlCA,SAAAhV,GAEA,IAAA5C,EAAAyqE,EAAA7yD,IAAAhV,GASA,YAPA+B,IAAA3E,GAGAyqE,EAAAp7C,IAAAzsB,EADA5C,EAAA,IAKAA,GAwBA4uC,OApBA,SAAAhsC,GAEA6nE,EAAAwC,OAAArqE,IAmBA+Z,OAfA,SAAA/Z,EAAAzB,EAAA4C,GAEA0mE,EAAA7yD,IAAAhV,GAAAzB,GAAA4C,GAcA0U,QAVA,WAEAgyD,EAAA,IAAAoC,UAiBA,SAAA8lB,GAAAj0F,EAAA6E,GAEA,OAAA7E,EAAAk0F,aAAArvF,EAAAqvF,WAEAl0F,EAAAk0F,WAAArvF,EAAAqvF,WAEAl0F,EAAAguC,cAAAnpC,EAAAmpC,YAEAhuC,EAAAguC,YAAAnpC,EAAAmpC,YAEAhuC,EAAAg7E,UAAAn2E,EAAAm2E,QAEAh7E,EAAAg7E,QAAAv4D,GAAA5d,EAAAm2E,QAAAv4D,GAEAziB,EAAAiyC,SAAAxvB,KAAA5d,EAAAotC,SAAAxvB,GAEAziB,EAAAiyC,SAAAxvB,GAAA5d,EAAAotC,SAAAxvB,GAEAziB,EAAA46B,IAAA/1B,EAAA+1B,EAEA56B,EAAA46B,EAAA/1B,EAAA+1B,EAIA56B,EAAAyiB,GAAA5d,EAAA4d,GAMA,SAAA0xE,GAAAn0F,EAAA6E,GAEA,OAAA7E,EAAAk0F,aAAArvF,EAAAqvF,WAEAl0F,EAAAk0F,WAAArvF,EAAAqvF,WAEAl0F,EAAAguC,cAAAnpC,EAAAmpC,YAEAhuC,EAAAguC,YAAAnpC,EAAAmpC,YAEAhuC,EAAA46B,IAAA/1B,EAAA+1B,EAEA/1B,EAAA+1B,EAAA56B,EAAA46B,EAIA56B,EAAAyiB,GAAA5d,EAAA4d,GAOA,SAAA2xE,KAEA,IAAAC,EAAA,GACAC,EAAA,EAEAC,EAAA,GACAtpC,EAAA,GAEAupC,EAAA,CAAA/xE,IAAA,GAWA,SAAAgyE,EAAAvwF,EAAA6tC,EAAAE,EAAAiiD,EAAAt5D,EAAAs5B,GAEA,IAAAwgC,EAAAL,EAAAC,GAkCA,YAhCAruF,IAAAyuF,EAcAL,EAAAC,GAZAI,EAAA,CACAjyE,GAAAve,EAAAue,GACAve,OAAAA,EACA6tC,SAAAA,EACAE,SAAAA,EACA+oC,QAAA/oC,EAAA+oC,SAAAwZ,EACAN,WAAAA,EACAlmD,YAAA9pC,EAAA8pC,YACApT,EAAAA,EACAs5B,MAAAA,IAOAwgC,EAAAjyE,GAAAve,EAAAue,GACAiyE,EAAAxwF,OAAAA,EACAwwF,EAAA3iD,SAAAA,EACA2iD,EAAAziD,SAAAA,EACAyiD,EAAA1Z,QAAA/oC,EAAA+oC,SAAAwZ,EACAE,EAAAR,WAAAA,EACAQ,EAAA1mD,YAAA9pC,EAAA8pC,YACA0mD,EAAA95D,EAAAA,EACA85D,EAAAxgC,MAAAA,GAIAogC,IAEAI,EAgDA,MAAA,CACAH,OAAAA,EACAtpC,YAAAA,EAEAy1B,KAjGA,WAEA4T,EAAA,EAEAC,EAAAj0F,OAAA,EACA2qD,EAAA3qD,OAAA,GA6FAwD,KAjDA,SAAAI,EAAA6tC,EAAAE,EAAAiiD,EAAAt5D,EAAAs5B,GAEA,IAAAwgC,EAAAD,EAAAvwF,EAAA6tC,EAAAE,EAAAiiD,EAAAt5D,EAAAs5B,KAEA,IAAAjiB,EAAAgZ,YAAAA,EAAAspC,GAAAzwF,KAAA4wF,IA8CA5a,QA1CA,SAAA51E,EAAA6tC,EAAAE,EAAAiiD,EAAAt5D,EAAAs5B,GAEA,IAAAwgC,EAAAD,EAAAvwF,EAAA6tC,EAAAE,EAAAiiD,EAAAt5D,EAAAs5B,KAEA,IAAAjiB,EAAAgZ,YAAAA,EAAAspC,GAAAza,QAAA4a,IAuCAC,OA5BA,WAIA,IAAA,IAAAh1F,EAAA20F,EAAAx/C,EAAAu/C,EAAA/zF,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAA+0F,EAAAL,EAAA10F,GAEA,GAAA,OAAA+0F,EAAAjyE,GAAA,MAEAiyE,EAAAjyE,GAAA,KACAiyE,EAAAxwF,OAAA,KACAwwF,EAAA3iD,SAAA,KACA2iD,EAAAziD,SAAA,KACAyiD,EAAA1Z,QAAA,KACA0Z,EAAAxgC,MAAA,OAeA/uD,KArCA,SAAAyvF,EAAAC,GAEAN,EAAAj0F,OAAA,GAAAi0F,EAAApvF,KAAAyvF,GAAAX,IACAhpC,EAAA3qD,OAAA,GAAA2qD,EAAA9lD,KAAA0vF,GAAAV,MAuCA,SAAAW,KAEA,IAAAC,EAAA,IAAA5mB,QAEA,SAAA6mB,EAAA1nE,GAEA,IAAAu6C,EAAAv6C,EAAAvrB,OAEA8lE,EAAA9vD,oBAAA,UAAAi9E,GAEAD,EAAAxmB,OAAA1G,GAuCA,MAAA,CACA3uD,IApCA,SAAA2uD,EAAApkC,GAEA,IACAwxD,EADAC,EAAAH,EAAA77E,IAAA2uD,GAuBA,YApBA5hE,IAAAivF,GAEAD,EAAA,IAAAb,GACAW,EAAApkE,IAAAk3C,EAAA,IAAAsG,SACA4mB,EAAA77E,IAAA2uD,GAAAl3C,IAAA8S,EAAAwxD,GAEAptB,EAAA/vD,iBAAA,UAAAk9E,SAKA/uF,KADAgvF,EAAAC,EAAAh8E,IAAAuqB,MAGAwxD,EAAA,IAAAb,GACAc,EAAAvkE,IAAA8S,EAAAwxD,IAMAA,GAYAl7E,QARA,WAEAg7E,EAAA,IAAA5mB,UAeA,SAAAgnB,KAEA,IAAAnwB,EAAA,GAEA,MAAA,CAEA9rD,IAAA,SAAAk8E,GAEA,QAAAnvF,IAAA++D,EAAAowB,EAAA3yE,IAEA,OAAAuiD,EAAAowB,EAAA3yE,IAIA,IAAA8hD,EAEA,OAAA6wB,EAAApoF,MAEA,IAAA,mBACAu3D,EAAA,CACAzsB,UAAA,IAAAtV,GACA0lB,MAAA,IAAAN,IAEA,MAEA,IAAA,YACA2c,EAAA,CACAz6B,SAAA,IAAAtH,GACAsV,UAAA,IAAAtV,GACA0lB,MAAA,IAAAN,GACApY,SAAA,EACAg9B,QAAA,EACAC,YAAA,EACAC,MAAA,GAEA,MAEA,IAAA,aACAnI,EAAA,CACAz6B,SAAA,IAAAtH,GACA0lB,MAAA,IAAAN,GACApY,SAAA,EACAk9B,MAAA,GAEA,MAEA,IAAA,kBACAnI,EAAA,CACAzsB,UAAA,IAAAtV,GACA6qC,SAAA,IAAAzlB,GACA0lB,YAAA,IAAA1lB,IAEA,MAEA,IAAA,gBACA2c,EAAA,CACArc,MAAA,IAAAN,GACA9d,SAAA,IAAAtH,GACA6yD,UAAA,IAAA7yD,GACA8yD,WAAA,IAAA9yD,IAQA,OAFAwiC,EAAAowB,EAAA3yE,IAAA8hD,EAEAA,IAuEA,IAAAgxB,GAAA,EAEA,SAAAC,GAAAC,EAAAC,GAEA,OAAAA,EAAA7nD,WAAA,EAAA,IAAA4nD,EAAA5nD,WAAA,EAAA,GAIA,SAAA8nD,KAyCA,IAvCA,IAvEA3wB,EAuEAphE,EAAA,IAAAuxF,GAEAS,GAzEA5wB,EAAA,GAEA,CAEA9rD,IAAA,SAAAk8E,GAEA,QAAAnvF,IAAA++D,EAAAowB,EAAA3yE,IAEA,OAAAuiD,EAAAowB,EAAA3yE,IAIA,IAAA8hD,EAEA,OAAA6wB,EAAApoF,MAEA,IAAA,mBASA,IAAA,YACAu3D,EAAA,CACA0H,WAAA,EACAC,iBAAA,EACAC,aAAA,EACAC,cAAA,IAAAx7C,IAEA,MAEA,IAAA,aACA2zC,EAAA,CACA0H,WAAA,EACAC,iBAAA,EACAC,aAAA,EACAC,cAAA,IAAAx7C,GACAo8C,iBAAA,EACAC,gBAAA,KAUA,OAFAjI,EAAAowB,EAAA3yE,IAAA8hD,EAEAA,KAwBA+T,EAAA,CAEA79C,QAAA,EAEAjrB,KAAA,CACAqmF,mBAAA,EACAC,aAAA,EACAC,YAAA,EACAC,gBAAA,EACAC,YAAA,EAEAC,uBAAA,EACAC,iBAAA,EACAC,gBAAA,GAGAC,QAAA,CAAA,EAAA,EAAA,GACAC,MAAA,GACAhD,YAAA,GACAiD,kBAAA,GACAlqB,qBAAA,GACAC,wBAAA,GACAinB,KAAA,GACAiD,WAAA,GACA5pB,cAAA,GACAC,iBAAA,GACA2mB,SAAA,GACA/9C,MAAA,GACAghD,YAAA,GACAvpB,eAAA,GACAC,kBAAA,GACAsmB,KAAA,IAIA9zF,EAAA,EAAAA,EAAA,EAAAA,IAAA24E,EAAAge,MAAAxyF,KAAA,IAAA0+B,IAEA,IAAAk0D,EAAA,IAAAl0D,GACAzK,EAAA,IAAA4N,GACAgxD,EAAA,IAAAhxD,GA+PA,MAAA,CACA7kB,MA9PA,SAAAkkD,EAAAytB,EAAAhvD,GAIA,IAFA,IAAAnkC,EAAA,EAAA63B,EAAA,EAAAtyB,EAAA,EAEAlF,EAAA,EAAAA,EAAA,EAAAA,IAAA24E,EAAAge,MAAA32F,GAAAgxB,IAAA,EAAA,EAAA,GAEA,IAAAklE,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA5V,EAAA/8C,EAAAC,mBAEAshC,EAAA7/D,KAAAqwF,IAEA,IAAA,IAAArjD,EAAA,EAAA/oC,EAAA47D,EAAA1kE,OAAA6xC,EAAA/oC,EAAA+oC,IAAA,CAEA,IAAAijD,EAAApwB,EAAA7yB,GAEA+V,EAAAktC,EAAAltC,MACA0uC,EAAAxB,EAAAwB,UACApnD,EAAA4lD,EAAA5lD,SAEAkkD,EAAA0B,EAAAhd,QAAAgd,EAAAhd,OAAA92E,IAAA8zF,EAAAhd,OAAA92E,IAAA45B,QAAA,KAEA,GAAAk6D,EAAAyB,eAEAv3F,GAAA4oD,EAAA5oD,EAAAs3F,EACAz/D,GAAA+wB,EAAA/wB,EAAAy/D,EACA/xF,GAAAqjD,EAAArjD,EAAA+xF,OAEA,GAAAxB,EAAA0B,aAEA,IAAA,IAAAhjD,EAAA,EAAAA,EAAA,EAAAA,IAEAwkC,EAAAge,MAAAxiD,GAAAhiB,gBAAAsjE,EAAA2B,GAAAC,aAAAljD,GAAA8iD,QAIA,GAAAxB,EAAA6B,mBAAA,CAEA,IAAA1yB,EAAA3gE,EAAAsV,IAAAk8E,GAQA,GANA7wB,EAAArc,MAAA3iD,KAAA6vF,EAAAltC,OAAA/1B,eAAAijE,EAAAwB,WACAryB,EAAAzsB,UAAAzS,sBAAA+vD,EAAAtxD,aACA4yD,EAAArxD,sBAAA+vD,EAAArzF,OAAA+hC,aACAygC,EAAAzsB,UAAA/lB,IAAA2kE,GACAnyB,EAAAzsB,UAAA/T,mBAAAy8C,GAEA4U,EAAAvnD,WAAA,CAEA,IAAAuqC,EAAAgd,EAAAhd,OAEA8e,EAAAtB,EAAA18E,IAAAk8E,GAEA8B,EAAAjrB,WAAAmM,EAAA+e,KACAD,EAAAhrB,iBAAAkM,EAAAgf,WACAF,EAAA/qB,aAAAiM,EAAApzC,OACAkyD,EAAA9qB,cAAAgM,EAAAif,QAEA/e,EAAAie,kBAAAV,GAAAqB,EACA5e,EAAAjM,qBAAAwpB,GAAAnC,EACApb,EAAAhM,wBAAAupB,GAAAT,EAAAhd,OAAA/gD,OAEA6+D,IAIA5d,EAAAgb,YAAAuC,GAAAtxB,EAEAsxB,SAEA,GAAAT,EAAAkC,YAAA,CAEA,IAAAC,EAAA3zF,EAAAsV,IAAAk8E,GAiBA,GAfAmC,EAAAztD,SAAAzE,sBAAA+vD,EAAAtxD,aACAyzD,EAAAztD,SAAAhN,aAAA0jD,GAEA+W,EAAArvC,MAAA3iD,KAAA2iD,GAAA/1B,eAAAykE,GACAW,EAAA/nD,SAAAA,EAEA+nD,EAAAz/C,UAAAzS,sBAAA+vD,EAAAtxD,aACA4yD,EAAArxD,sBAAA+vD,EAAArzF,OAAA+hC,aACAyzD,EAAAz/C,UAAA/lB,IAAA2kE,GACAa,EAAAz/C,UAAA/T,mBAAAy8C,GAEA+W,EAAA/qB,QAAA5kE,KAAAqoB,IAAAmlE,EAAAjiE,OACAokE,EAAA9qB,YAAA7kE,KAAAqoB,IAAAmlE,EAAAjiE,OAAA,EAAAiiE,EAAAoC,WACAD,EAAA7qB,MAAA0oB,EAAA1oB,MAEA0oB,EAAAvnD,WAAA,CAEA,IAAA4pD,EAAArC,EAAAhd,OAEAsf,EAAA9B,EAAA18E,IAAAk8E,GAEAsC,EAAAzrB,WAAAwrB,EAAAN,KACAO,EAAAxrB,iBAAAurB,EAAAL,WACAM,EAAAvrB,aAAAsrB,EAAAzyD,OACA0yD,EAAAtrB,cAAAqrB,EAAAJ,QAEA/e,EAAAke,WAAAT,GAAA2B,EACApf,EAAA1L,cAAAmpB,GAAArC,EACApb,EAAAzL,iBAAAkpB,GAAAX,EAAAhd,OAAA/gD,OAEA++D,IAIA9d,EAAAib,KAAAwC,GAAAwB,EAEAxB,SAEA,GAAAX,EAAAuC,gBAAA,CAEA,IAAAC,EAAAh0F,EAAAsV,IAAAk8E,GAMAwC,EAAA1vC,MAAA3iD,KAAA2iD,GAAA/1B,eAAAykE,GAEAgB,EAAA9tD,SAAAzE,sBAAA+vD,EAAAtxD,aACA8zD,EAAA9tD,SAAAhN,aAAA0jD,GAGAmW,EAAAvhE,WACA2C,EAAAxyB,KAAA6vF,EAAAtxD,aACA/L,EAAAlC,YAAA2qD,GACAmW,EAAAnwD,gBAAAzO,GAEA6/D,EAAAvC,UAAA1kE,IAAA,GAAAykE,EAAApiF,MAAA,EAAA,GACA4kF,EAAAtC,WAAA3kE,IAAA,EAAA,GAAAykE,EAAAniF,OAAA,GAEA2kF,EAAAvC,UAAAv4D,aAAA65D,GACAiB,EAAAtC,WAAAx4D,aAAA65D,GAKAre,EAAAkb,SAAAwC,GAAA4B,EAEA5B,SAEA,GAAAZ,EAAAyC,aAAA,CAEA,IAAAC,EAAAl0F,EAAAsV,IAAAk8E,GASA,GAPA0C,EAAAhuD,SAAAzE,sBAAA+vD,EAAAtxD,aACAg0D,EAAAhuD,SAAAhN,aAAA0jD,GAEAsX,EAAA5vC,MAAA3iD,KAAA6vF,EAAAltC,OAAA/1B,eAAAijE,EAAAwB,WACAkB,EAAAtoD,SAAA4lD,EAAA5lD,SACAsoD,EAAAprB,MAAA0oB,EAAA1oB,MAEA0oB,EAAAvnD,WAAA,CAEA,IAAAkqD,EAAA3C,EAAAhd,OAEA4f,EAAApC,EAAA18E,IAAAk8E,GAEA4C,EAAA/rB,WAAA8rB,EAAAZ,KACAa,EAAA9rB,iBAAA6rB,EAAAX,WACAY,EAAA7rB,aAAA4rB,EAAA/yD,OACAgzD,EAAA5rB,cAAA2rB,EAAAV,QACAW,EAAAhrB,iBAAA+qB,EAAAt0D,OAAAqH,KACAktD,EAAA/qB,gBAAA8qB,EAAAt0D,OAAAsH,IAEAutC,EAAAme,YAAAX,GAAAkC,EACA1f,EAAApL,eAAA4oB,GAAApC,EACApb,EAAAnL,kBAAA2oB,GAAAV,EAAAhd,OAAA/gD,OAEA8+D,IAIA7d,EAAA7iC,MAAAqgD,GAAAgC,EAEAhC,SAEA,GAAAV,EAAA6C,kBAAA,CAEA,IAAAC,EAAAt0F,EAAAsV,IAAAk8E,GAEA8C,EAAApgD,UAAAzS,sBAAA+vD,EAAAtxD,aACAo0D,EAAApgD,UAAA/T,mBAAAy8C,GACA0X,EAAApgD,UAAA5kB,YAEAglE,EAAA7qB,SAAA9nE,KAAA6vF,EAAAltC,OAAA/1B,eAAAykE,GACAsB,EAAA5qB,YAAA/nE,KAAA6vF,EAAA9nB,aAAAn7C,eAAAykE,GAEAte,EAAAmb,KAAAwC,GAAAiC,EAEAjC,KAMA3d,EAAA+d,QAAA,GAAA/2F,EACAg5E,EAAA+d,QAAA,GAAAl/D,EACAmhD,EAAA+d,QAAA,GAAAxxF,EAEA,IAAA2K,EAAA8oE,EAAA9oE,KAEAA,EAAAqmF,oBAAAA,GACArmF,EAAAsmF,cAAAA,GACAtmF,EAAAumF,aAAAA,GACAvmF,EAAAwmF,iBAAAA,GACAxmF,EAAAymF,aAAAA,GACAzmF,EAAA0mF,wBAAAA,GACA1mF,EAAA2mF,kBAAAA,GACA3mF,EAAA4mF,iBAAAA,IAEA9d,EAAAgb,YAAAhzF,OAAAu1F,EACAvd,EAAAib,KAAAjzF,OAAAy1F,EACAzd,EAAAkb,SAAAlzF,OAAA01F,EACA1d,EAAA7iC,MAAAn1C,OAAAw1F,EACAxd,EAAAmb,KAAAnzF,OAAA21F,EAEA3d,EAAAie,kBAAAj2F,OAAA41F,EACA5d,EAAAjM,qBAAA/rE,OAAA41F,EACA5d,EAAAme,YAAAn2F,OAAA61F,EACA7d,EAAApL,eAAA5sE,OAAA61F,EACA7d,EAAAke,WAAAl2F,OAAA81F,EACA9d,EAAA1L,cAAAtsE,OAAA81F,EACA9d,EAAAhM,wBAAAhsE,OAAA41F,EACA5d,EAAAnL,kBAAA7sE,OAAA61F,EACA7d,EAAAzL,iBAAAvsE,OAAA81F,EAEA5mF,EAAAqmF,kBAAAA,EACArmF,EAAAsmF,YAAAA,EACAtmF,EAAAumF,WAAAA,EACAvmF,EAAAwmF,eAAAA,EACAxmF,EAAAymF,WAAAA,EAEAzmF,EAAA0mF,sBAAAA,EACA1mF,EAAA2mF,gBAAAA,EACA3mF,EAAA4mF,eAAAA,EAEA9d,EAAA79C,QAAA86D,OAQAjd,MAAAA,GASA,SAAA6f,KAEA,IAAAnzB,EAAA,IAAA2wB,GAEAyC,EAAA,GACAC,EAAA,GAkCA,MAAA,CACA3X,KAjCA,WAEA0X,EAAA93F,OAAA,EACA+3F,EAAA/3F,OAAA,GA+BAg4E,MATA,CACA8f,YAAAA,EACAC,aAAAA,EAEArzB,OAAAA,GAMAszB,YAhBA,SAAA70D,GAEAuhC,EAAAlkD,MAAAs3E,EAAAC,EAAA50D,IAgBA80D,UA9BA,SAAAnD,GAEAgD,EAAAt0F,KAAAsxF,IA6BAoD,WAzBA,SAAAC,GAEAJ,EAAAv0F,KAAA20F,KA4BA,SAAAC,KAEA,IAAAC,EAAA,IAAAxqB,QAEA,SAAA6mB,EAAA1nE,GAEA,IAAAu6C,EAAAv6C,EAAAvrB,OAEA8lE,EAAA9vD,oBAAA,UAAAi9E,GAEA2D,EAAApqB,OAAA1G,GAyCA,MAAA,CACA3uD,IAtCA,SAAA2uD,EAAApkC,GAEA,IAAAm1D,EAyBA,OAvBA,IAAAD,EAAAE,IAAAhxB,IAEA+wB,EAAA,IAAAT,GACAQ,EAAAhoE,IAAAk3C,EAAA,IAAAsG,SACAwqB,EAAAz/E,IAAA2uD,GAAAl3C,IAAA8S,EAAAm1D,GAEA/wB,EAAA/vD,iBAAA,UAAAk9E,KAIA,IAAA2D,EAAAz/E,IAAA2uD,GAAAgxB,IAAAp1D,IAEAm1D,EAAA,IAAAT,GACAQ,EAAAz/E,IAAA2uD,GAAAl3C,IAAA8S,EAAAm1D,IAIAA,EAAAD,EAAAz/E,IAAA2uD,GAAA3uD,IAAAuqB,GAMAm1D,GAYA7+E,QARA,WAEA4+E,EAAA,IAAAxqB,UAkCA,SAAAqjB,GAAAx/C,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,oBAEAmM,KAAAu2E,aAAApjE,GAEAnT,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EAEA50C,KAAA7X,IAAA,KAEA6X,KAAAk0C,SAAA,KAEAl0C,KAAAu2C,gBAAA,KACAv2C,KAAAw2C,kBAAA,EACAx2C,KAAAy2C,iBAAA,EAEAz2C,KAAAu0C,WAAA,EACAv0C,KAAAw0C,mBAAA,EAEAx0C,KAAAk1B,KAAA,EAEAl1B,KAAA60C,UAAAhc,GAwDA,SAAAy/C,GAAAz/C,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,uBAEAmM,KAAA8+D,kBAAA,IAAAz1C,GACArpB,KAAA++D,aAAA,EACA/+D,KAAAg/D,YAAA,IAEAh/D,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EAEA50C,KAAA7X,IAAA,KAEA6X,KAAAk0C,SAAA,KAEAl0C,KAAAu2C,gBAAA,KACAv2C,KAAAw2C,kBAAA,EACAx2C,KAAAy2C,iBAAA,EAEAz2C,KAAAk1B,KAAA,EAEAl1B,KAAA60C,UAAAhc,IA3EAw/C,GAAA5wF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAggE,GAEAA,GAAA5wF,UAAAk4F,qBAAA,EAEAtH,GAAA5wF,UAAA2E,KAAA,SAAAvD,GAoBA,OAlBA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAu2E,aAAA1tF,EAAA0tF,aAEAv2E,KAAA20C,SAAA9rD,EAAA8rD,SACA30C,KAAA40C,aAAA/rD,EAAA+rD,aAEA50C,KAAA7X,IAAAU,EAAAV,IAEA6X,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAAu2C,gBAAA1tD,EAAA0tD,gBACAv2C,KAAAw2C,kBAAA3tD,EAAA2tD,kBACAx2C,KAAAy2C,iBAAA5tD,EAAA4tD,iBAEAz2C,KAAAu0C,UAAA1rD,EAAA0rD,UACAv0C,KAAAw0C,mBAAA3rD,EAAA2rD,mBAEAx0C,OAsDAs4E,GAAA7wF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAigE,GAEAA,GAAA7wF,UAAAm4F,wBAAA,EAEAtH,GAAA7wF,UAAA2E,KAAA,SAAAvD,GAmBA,OAjBA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA8+D,kBAAA1yE,KAAAvD,EAAAi2E,mBACA9+D,KAAA++D,aAAAl2E,EAAAk2E,aACA/+D,KAAAg/D,YAAAn2E,EAAAm2E,YAEAh/D,KAAA20C,SAAA9rD,EAAA8rD,SACA30C,KAAA40C,aAAA/rD,EAAA+rD,aAEA50C,KAAA7X,IAAAU,EAAAV,IAEA6X,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAAu2C,gBAAA1tD,EAAA0tD,gBACAv2C,KAAAw2C,kBAAA3tD,EAAA2tD,kBACAx2C,KAAAy2C,iBAAA5tD,EAAA4tD,iBAEAz2C,MAIA,IAAA6/E,GAAA,igCAEAC,GAAA,2DAOA,SAAAC,GAAAn3E,EAAAo3E,EAAAta,GAEA,IAAAua,EAAA,IAAAvwB,GAEAwwB,EAAA,IAAAzoE,GACA0oE,EAAA,IAAA1oE,GAEA2oE,EAAA,IAAA5+D,GAEA6+D,EAAA,GACAC,EAAA,GAEAC,EAAA,GAEAptC,EAAA,CAAAqtC,EAAA11E,EAAA1jB,EAAAyjB,EAAA41E,EAAA11E,GAEA21E,EAAA,IAAAj1B,GAAA,CAEAC,QAAA,CACAi1B,YAAA,IACAC,iBAAA,EAAA,GAGAx1B,SAAA,CACAy1B,YAAA,CAAA30F,MAAA,MACA40F,WAAA,CAAA50F,MAAA,IAAAurB,IACAoU,OAAA,CAAA3/B,MAAA,IAGAy/D,aAAAm0B,GAEAl0B,eAAAi0B,KAIAkB,EAAAL,EAAAtoE,QACA2oE,EAAAr1B,QAAAs1B,eAAA,EAEA,IAAAC,EAAA,IAAAzkC,GACAykC,EAAAjkC,aACA,WACA,IAAAvF,GACA,IAAAkB,aAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,EAAA,KACA,IAIA,IAAAuoC,EAAA,IAAAp/B,GAAAm/B,EAAAP,GAEAt8B,EAAApkD,KA4IA,SAAAmhF,EAAAliB,EAAA30C,GAEA,IAAAsO,EAAAonD,EAAAl7E,OAAAo8E,GAIAR,EAAAt1B,SAAAy1B,YAAA30F,MAAA+yE,EAAA92E,IAAA45B,QACA2+D,EAAAt1B,SAAA01B,WAAA50F,MAAA+yE,EAAAif,QACAwC,EAAAt1B,SAAAv/B,OAAA3/B,MAAA+yE,EAAApzC,OACAjjB,EAAAmmD,gBAAAkQ,EAAAmiB,SACAx4E,EAAA5B,QACA4B,EAAAy4E,mBAAA/2D,EAAA,KAAAsO,EAAA8nD,EAAAQ,EAAA,MAIAH,EAAA31B,SAAAy1B,YAAA30F,MAAA+yE,EAAAmiB,QAAAr/D,QACAg/D,EAAA31B,SAAA01B,WAAA50F,MAAA+yE,EAAAif,QACA6C,EAAA31B,SAAAv/B,OAAA3/B,MAAA+yE,EAAApzC,OACAjjB,EAAAmmD,gBAAAkQ,EAAA92E,KACAygB,EAAA5B,QACA4B,EAAAy4E,mBAAA/2D,EAAA,KAAAsO,EAAAmoD,EAAAG,EAAA,MAIA,SAAAI,EAAAC,EAAAC,EAAAC,GAEA,IAAAp3E,EAAAk3E,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAEA3oD,EAAAunD,EAAAh2E,GAiBA,YAfAvd,IAAAgsC,IAEAA,EAAA,IAAAu/C,GAAA,CAEA9B,aAAAnjE,GAEAwhC,aAAA2sC,EACA5sC,SAAA6sC,IAIAnB,EAAAh2E,GAAAyuB,GAIAA,EAIA,SAAA4oD,EAAAH,EAAAC,EAAAC,GAEA,IAAAp3E,EAAAk3E,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAEA3oD,EAAAwnD,EAAAj2E,GAeA,YAbAvd,IAAAgsC,IAEAA,EAAA,IAAAw/C,GAAA,CAEA1jC,aAAA2sC,EACA5sC,SAAA6sC,IAIAlB,EAAAj2E,GAAAyuB,GAIAA,EAIA,SAAA6oD,EAAA52F,EAAA6tC,EAAAE,EAAAmjD,EAAApoB,EAAAC,EAAAjgE,GAEA,IAAAwF,EAAA,KAEAuoF,EAAAN,EACAO,EAAA92F,EAAA+2F,oBASA,IAPA,IAAA7F,EAAAyC,eAEAkD,EAAAF,EACAG,EAAA92F,EAAAg3F,6BAIAj1F,IAAA+0F,EAAA,CAEA,IAAAN,GAAA,GAEA,IAAAzoD,EAAA8b,eAEA2sC,EAAA3oD,EAAA6jB,iBAAA7jB,EAAA6jB,gBAAA9rB,UAAAiI,EAAA6jB,gBAAA9rB,SAAAxpC,OAAA,GAIA,IAAAq6F,GAAA,GAEA,IAAAz2F,EAAAw3D,iBAEA,IAAAzpB,EAAA6b,SAEA6sC,GAAA,EAIAtqF,QAAAC,KAAA,+EAAApM,IAQAsO,EAAAuoF,EAAAL,EAAAC,GAFA,IAAAz2F,EAAAutC,sBAMAj/B,EAAAwoF,EAIA,GAAAj5E,EAAA69D,uBACA,IAAA3tC,EAAAoa,aACA,IAAApa,EAAAka,eAAA7rD,OAAA,CAKA,IAAA66F,EAAA3oF,EAAAsnB,KAAAshE,EAAAnpD,EAAAnY,KAEAuhE,EAAA3B,EAAAyB,QAEAl1F,IAAAo1F,IAGA3B,EAAAyB,GADAE,EAAA,IAKA,IAAAC,EAAAD,EAAAD,QAEAn1F,IAAAq1F,IAEAA,EAAA9oF,EAAA+e,QACA8pE,EAAAD,GAAAE,GAIA9oF,EAAA8oF,EAgCA,OA5BA9oF,EAAAo7B,QAAAqE,EAAArE,QACAp7B,EAAAk7C,UAAAzb,EAAAyb,UAIAl7C,EAAAs4C,KAFA99C,IAAA+W,EAEA,OAAAkuB,EAAAqa,WAAAra,EAAAqa,WAAAra,EAAA6Y,KAIA,OAAA7Y,EAAAqa,WAAAra,EAAAqa,WAAAA,EAAAra,EAAA6Y,MAIAt4C,EAAA65C,YAAApa,EAAAoa,YACA75C,EAAA25C,eAAAla,EAAAka,eACA35C,EAAA45C,iBAAAna,EAAAma,iBAEA55C,EAAAm7C,mBAAA1b,EAAA0b,mBACAn7C,EAAA29C,UAAAle,EAAAke,WAEA,IAAAilC,EAAAyC,eAAA,IAAArlF,EAAAumF,yBAEAvmF,EAAAylE,kBAAA5yC,sBAAA+vD,EAAAtxD,aACAtxB,EAAA0lE,aAAAlL,EACAx6D,EAAA2lE,YAAAlL,GAIAz6D,EAIA,SAAA+oF,EAAAr3F,EAAAu/B,EAAA+3D,EAAApG,EAAApoF,GAEA,IAAA,IAAA9I,EAAA0pC,QAAA,CAIA,GAFA1pC,EAAAmoC,OAAAjmC,KAAAq9B,EAAA4I,UAEAnoC,EAAA0tC,QAAA1tC,EAAA2tC,QAAA3tC,EAAA4tC,YAEA5tC,EAAA2pC,YAAA3pC,EAAA4pC,eAAA9gC,IAAA+W,MAAA7f,EAAA6pC,eAAAqrD,EAAAlvB,iBAAAhmE,IAAA,CAEAA,EAAAspC,gBAAA5X,iBAAA4lE,EAAA93D,mBAAAx/B,EAAA4/B,aAEA,IAAAiO,EAAAonD,EAAAl7E,OAAA/Z,GACA+tC,EAAA/tC,EAAA+tC,SAEA,GAAA5tC,MAAA6B,QAAA+rC,GAIA,IAFA,IAAAsgB,EAAAxgB,EAAAwgB,OAEAh2C,EAAA,EAAAwjD,EAAAxN,EAAAjyD,OAAAic,EAAAwjD,EAAAxjD,IAAA,CAEA,IAAA23C,EAAA3B,EAAAh2C,GACAy/C,EAAA/pB,EAAAiiB,EAAA/L,eAEA,GAAA6T,GAAAA,EAAApuB,QAAA,CAEA,IAAA6tD,EAAAX,EAAA52F,EAAA6tC,EAAAiqB,EAAAo5B,EAAAoG,EAAA1wD,KAAA0wD,EAAAzwD,IAAA/9B,GAEA+U,EAAAy4E,mBAAAgB,EAAA,KAAAzpD,EAAA0pD,EAAAv3F,EAAAgwD,SAMA,GAAAjiB,EAAArE,QAAA,CAEA,IAAA8tD,EAAAZ,EAAA52F,EAAA6tC,EAAAE,EAAAmjD,EAAAoG,EAAA1wD,KAAA0wD,EAAAzwD,IAAA/9B,GAEA+U,EAAAy4E,mBAAAgB,EAAA,KAAAzpD,EAAA2pD,EAAAx3F,EAAA,OAUA,IAFA,IAAAkpC,EAAAlpC,EAAAkpC,SAEAztC,EAAA,EAAAyJ,EAAAgkC,EAAA9sC,OAAAX,EAAAyJ,EAAAzJ,IAEA47F,EAAAnuD,EAAAztC,GAAA8jC,EAAA+3D,EAAApG,EAAApoF,IArXAmM,KAAA9B,SAAA,EAEA8B,KAAAo1B,YAAA,EACAp1B,KAAAq9C,aAAA,EAEAr9C,KAAAnM,KAAA6W,EAEA1K,KAAAH,OAAA,SAAAgsD,EAAA6C,EAAApkC,GAEA,IAAA,IAAA85B,EAAAlmD,WACA,IAAAkmD,EAAAhvB,aAAA,IAAAgvB,EAAA/G,cAEA,IAAAwO,EAAA1kE,OAAA,CAEA,IAAA0nE,EAAAjmD,EAAAkmD,kBACA0zB,EAAA55E,EAAA65E,oBACAC,EAAA95E,EAAA+5E,uBAEAC,EAAAh6E,EAAAu2D,MAGAyjB,EAAAC,YAAA73E,GACA43E,EAAA7tB,QAAAhmB,MAAA4wB,SAAA,EAAA,EAAA,EAAA,GACAijB,EAAA7tB,QAAAtL,MAAAq5B,SAAA,GACAF,EAAAG,gBAAA,GAIA,IAAA,IAAAv8F,EAAA,EAAAm1C,EAAAkwB,EAAA1kE,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAAy1F,EAAApwB,EAAArlE,GACAy4E,EAAAgd,EAAAhd,OAEA,IAAA,IAAAA,EAAA7pC,aAAA,IAAA6pC,EAAA5hB,YAEA,QAAAvwD,IAAAmyE,EAAA,CAOAihB,EAAA9zF,KAAA6yE,EAAAif,SAEA,IAAA8E,EAAA/jB,EAAAgkB,kBA0BA,GAxBA/C,EAAAnnE,SAAAiqE,GAEA7C,EAAA/zF,KAAA6yE,EAAAif,UAEAgC,EAAA/zF,EAAAu5E,GAAAwa,EAAAzyF,EAAAi4E,KAEAwa,EAAA/zF,EAAAu5E,IAEAya,EAAAh0F,EAAAsC,KAAAC,MAAAg3E,EAAAsd,EAAA72F,GACA+zF,EAAA/zF,EAAAg0F,EAAAh0F,EAAA62F,EAAA72F,EACA8yE,EAAAif,QAAA/xF,EAAAg0F,EAAAh0F,GAIA+zF,EAAAzyF,EAAAi4E,IAEAya,EAAA1yF,EAAAgB,KAAAC,MAAAg3E,EAAAsd,EAAAv1F,GACAyyF,EAAAzyF,EAAA0yF,EAAA1yF,EAAAu1F,EAAAv1F,EACAwxE,EAAAif,QAAAzwF,EAAA0yF,EAAA1yF,IAMA,OAAAwxE,EAAA92E,MAAA82E,EAAAikB,oBAAAljF,KAAAnM,OAAA+W,EAAA,CAEA,IAAAu4E,EAAA,CAAA3iE,UAAArS,GAAAoS,UAAApS,GAAAsS,OAAArR,IAEA6vD,EAAA92E,IAAA,IAAAu5B,GAAAw+D,EAAA/zF,EAAA+zF,EAAAzyF,EAAA01F,GACAlkB,EAAA92E,IAAA45B,QAAA5rB,KAAA8lF,EAAA9lF,KAAA,aAEA8oE,EAAAmiB,QAAA,IAAA1/D,GAAAw+D,EAAA/zF,EAAA+zF,EAAAzyF,EAAA01F,GAEAlkB,EAAA30C,OAAAyiC,yBAIA,GAAA,OAAAkS,EAAA92E,IAIA82E,EAAA92E,IAAA,IAAAu5B,GAAAw+D,EAAA/zF,EAAA+zF,EAAAzyF,EAFA,CAAA+yB,UAAAxS,GAAAuS,UAAAvS,GAAAyS,OAAArR,KAGA6vD,EAAA92E,IAAA45B,QAAA5rB,KAAA8lF,EAAA9lF,KAAA,aAEA8oE,EAAA30C,OAAAyiC,yBAIAnkD,EAAAmmD,gBAAAkQ,EAAA92E,KACAygB,EAAA5B,QAIA,IAFA,IAAAo8E,EAAAnkB,EAAAokB,mBAEAC,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CAEA,IAAAxhE,EAAAm9C,EAAAskB,YAAAD,GAEAlD,EAAA5oE,IACA2oE,EAAAh0F,EAAA21B,EAAA31B,EACAg0F,EAAA1yF,EAAAq0B,EAAAr0B,EACA0yF,EAAAh0F,EAAA21B,EAAAL,EACA0+D,EAAA1yF,EAAAq0B,EAAAtJ,GAGAoqE,EAAA9gE,SAAAs+D,GAEAnhB,EAAAukB,eAAAvH,EAAAqH,GAEArD,EAAAhhB,EAAAwkB,aAEArB,EAAA1zB,EAAApkC,EAAA20C,EAAA30C,OAAA2xD,EAAAj8E,KAAAnM,MAMAorE,EAAAikB,oBAAAljF,KAAAnM,OAAA+W,GAEAu2E,EAAAliB,EAAA30C,GAIA20C,EAAA5hB,aAAA,OA3FAnmD,QAAAC,KAAA,wBAAA8kF,EAAA,kBA+FA73B,EAAA/G,aAAA,EAEAz0C,EAAAmmD,gBAAAF,EAAA2zB,EAAAE,KA2PA,SAAAgB,GAAAlnF,EAAAuvD,EAAA8I,GAEA,IAAAC,EAAAD,EAAAC,SAmTA,IAAA6uB,EAAA,IAjTA,WAEA,IAAAC,GAAA,EAEA70C,EAAA,IAAAvtB,GACAqiE,EAAA,KACAC,EAAA,IAAAtiE,GAAA,EAAA,EAAA,EAAA,GAEA,MAAA,CAEAuiE,QAAA,SAAAC,GAEAH,IAAAG,GAAAJ,IAEApnF,EAAAwnF,UAAAA,EAAAA,EAAAA,EAAAA,GACAH,EAAAG,IAMAC,UAAA,SAAAC,GAEAN,EAAAM,GAIAvkB,SAAA,SAAAx5E,EAAA63B,EAAAtyB,EAAA7E,EAAA6sD,IAEA,IAAAA,IAEAvtD,GAAAU,EAAAm3B,GAAAn3B,EAAA6E,GAAA7E,GAIAkoD,EAAAv3B,IAAArxB,EAAA63B,EAAAtyB,EAAA7E,IAEA,IAAAi9F,EAAAlpE,OAAAm0B,KAEAvyC,EAAAyK,WAAA9gB,EAAA63B,EAAAtyB,EAAA7E,GACAi9F,EAAA13F,KAAA2iD,KAMAyzB,MAAA,WAEAohB,GAAA,EAEAC,EAAA,KACAC,EAAAtsE,KAAA,EAAA,EAAA,EAAA,MA+PAwK,EAAA,IAvPA,WAEA,IAAA4hE,GAAA,EAEAO,EAAA,KACAC,EAAA,KACAC,EAAA,KAEA,MAAA,CAEAvB,QAAA,SAAAxwC,GAEAA,EAEAzf,GAAA,MAIAG,GAAA,OAMA+wD,QAAA,SAAAO,GAEAH,IAAAG,GAAAV,IAEApnF,EAAA8nF,UAAAA,GACAH,EAAAG,IAMAC,QAAA,SAAAlyC,GAEA,GAAA+xC,IAAA/xC,EAAA,CAEA,GAAAA,EAEA,OAAAA,GAEA,KAAA/lC,EAEA9P,EAAA61C,UAAA,KACA,MAEA,KAAA9lC,EAEA/P,EAAA61C,UAAA,KACA,MAEA,KAAA7lC,EAEAhQ,EAAA61C,UAAA,KACA,MAEA,KAAA5lC,EAEAjQ,EAAA61C,UAAA,KACA,MAEA,KAAA3lC,EAEAlQ,EAAA61C,UAAA,KACA,MAEA,KAAA1lC,EAEAnQ,EAAA61C,UAAA,KACA,MAEA,KAAAzlC,EAEApQ,EAAA61C,UAAA,KACA,MAEA,KAAAxlC,EAEArQ,EAAA61C,UAAA,KACA,MAEA,QAEA71C,EAAA61C,UAAA,UAMA71C,EAAA61C,UAAA,KAIA+xC,EAAA/xC,IAMA4xC,UAAA,SAAAC,GAEAN,EAAAM,GAIAvkB,SAAA,SAAAlW,GAEA46B,IAAA56B,IAEAjtD,EAAAgoF,WAAA/6B,GACA46B,EAAA56B,IAMA+Y,MAAA,WAEAohB,GAAA,EAEAO,EAAA,KACAC,EAAA,KACAC,EAAA,QA4HApiE,EAAA,IApHA,WAEA,IAAA2hE,GAAA,EAEAa,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KAEA,MAAA,CAEAlC,QAAA,SAAAmC,GAEArB,IAEAqB,EAEApyD,GAAA,MAIAG,GAAA,QAQA+wD,QAAA,SAAAmB,GAEAT,IAAAS,GAAAtB,IAEApnF,EAAA0oF,YAAAA,GACAT,EAAAS,IAMAX,QAAA,SAAA9xC,EAAAC,EAAAwyC,GAEAR,IAAAjyC,GACAkyC,IAAAjyC,GACAkyC,IAAAM,IAEA1oF,EAAAi2C,YAAAA,EAAAC,EAAAwyC,GAEAR,EAAAjyC,EACAkyC,EAAAjyC,EACAkyC,EAAAM,IAMAC,MAAA,SAAAvyC,EAAAC,EAAAC,GAEA+xC,IAAAjyC,GACAkyC,IAAAjyC,GACAkyC,IAAAjyC,IAEAt2C,EAAA4oF,UAAAxyC,EAAAC,EAAAC,GAEA+xC,EAAAjyC,EACAkyC,EAAAjyC,EACAkyC,EAAAjyC,IAMAmxC,UAAA,SAAAC,GAEAN,EAAAM,GAIAvkB,SAAA,SAAA3Q,GAEAg2B,IAAAh2B,IAEAxyD,EAAA6oF,aAAAr2B,GACAg2B,EAAAh2B,IAMAwT,MAAA,WAEAohB,GAAA,EAEAa,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,QAcAM,EAAA,GAEAC,EAAA,KAEAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,GAAA,EAEAC,EAAA,KACAC,GAAA,KAEAC,GAAA,KAEAC,GAAA,KACAC,GAAA,KAEA7gB,GAAAhpE,EAAAsgC,aAAA,OAEAwpD,IAAA,EACAhlE,GAAA,EACAilE,GAAA/pF,EAAAsgC,aAAA,OAEA,IAAAypD,GAAA9yF,QAAA,UAEA6tB,GAAAouB,WAAA,kBAAA37C,KAAAwyF,IAAA,IACAD,GAAAhlE,IAAA,IAEA,IAAAilE,GAAA9yF,QAAA,eAEA6tB,GAAAouB,WAAA,uBAAA37C,KAAAwyF,IAAA,IACAD,GAAAhlE,IAAA,GAIA,IAAAklE,GAAA,KACAC,GAAA,GAEAC,GAAA,IAAAllE,GACAmlE,GAAA,IAAAnlE,GAEA,SAAAolE,GAAA/yF,EAAAjL,EAAA2vC,GAEA,IAAAz1B,EAAA,IAAA1O,WAAA,GACA2tB,EAAAvlB,EAAAoqF,gBAEApqF,EAAAqqF,YAAAhzF,EAAAkuB,GACAvlB,EAAAsqF,cAAAjzF,EAAA,MAAA,MACA2I,EAAAsqF,cAAAjzF,EAAA,MAAA,MAEA,IAAA,IAAArN,EAAA,EAAAA,EAAA+xC,EAAA/xC,IAEAgW,EAAAuqF,WAAAn+F,EAAApC,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,KAAAsc,GAIA,OAAAif,EAIA,IAAAilE,GAAA,GAqBA,SAAAn0D,GAAAvpB,IAEA,IAAAg8E,EAAAh8E,KAEA9M,EAAAq2B,OAAAvpB,GACAg8E,EAAAh8E,IAAA,GAMA,SAAA0pB,GAAA1pB,IAEA,IAAAg8E,EAAAh8E,KAEA9M,EAAAw2B,QAAA1pB,GACAg8E,EAAAh8E,IAAA,GApCA09E,GAAA,MAAAJ,GAAA,KAAA,KAAA,GACAI,GAAA,OAAAJ,GAAA,MAAA,MAAA,GAIAjD,EAAAhkB,SAAA,EAAA,EAAA,EAAA,GACA39C,EAAA29C,SAAA,GACA19C,EAAA09C,SAAA,GAEA9sC,GAAA,MACA7Q,EAAAuiE,QAAA93E,GAEAw6E,IAAA,GACAC,GAAA18E,GACAqoB,GAAA,MAEAgwD,GAAA73E,GA0CA,IAAAm8E,GAAA,GAKA,GAJAA,GAAA77E,GAAA,MACA67E,GAAA57E,GAAA,MACA47E,GAAA37E,GAAA,MAEAspD,EAEAqyB,GAAA17E,GAAA,MACA07E,GAAAz7E,GAAA,UAEA,CAEA,IAAApZ,GAAAy5D,EAAAhsD,IAAA,oBAEA,OAAAzN,KAEA60F,GAAA17E,GAAAnZ,GAAA80F,QACAD,GAAAz7E,GAAApZ,GAAA+0F,SAMA,IAAAC,GAAA,GAaA,SAAAzE,GAAAnxC,EAAAO,EAAAF,EAAAC,EAAAI,EAAAF,EAAAC,EAAAuB,GAEA,GAAAhC,IAAA1mC,GAoBA,GAPAw6E,IAEA3yD,GAAA,MACA2yD,GAAA,GAIA9zC,IAAArmC,EAmFA+mC,EAAAA,GAAAH,EACAC,EAAAA,GAAAH,EACAI,EAAAA,GAAAH,EAEAC,IAAAyzC,GAAAtzC,IAAAyzC,IAEArpF,EAAA+qF,sBAAAJ,GAAAl1C,GAAAk1C,GAAA/0C,IAEAszC,EAAAzzC,EACA4zC,EAAAzzC,GAIAL,IAAA4zC,GAAA3zC,IAAA4zC,GAAA1zC,IAAA4zC,GAAA3zC,IAAA4zC,IAEAvpF,EAAAgrF,kBAAAF,GAAAv1C,GAAAu1C,GAAAt1C,GAAAs1C,GAAAp1C,GAAAo1C,GAAAn1C,IAEAwzC,EAAA5zC,EACA6zC,EAAA5zC,EACA8zC,EAAA5zC,EACA6zC,EAAA5zC,GAIAszC,EAAA/zC,EACAs0C,EAAA,UA1GA,GAAAt0C,IAAA+zC,GAAA/xC,IAAAsyC,EAAA,CAWA,GATAN,IAAAp6E,GAAAu6E,IAAAv6E,IAEA9O,EAAAy1C,cAAA,OAEAyzC,EAAAp6E,EACAu6E,EAAAv6E,GAIAooC,EAEA,OAAAhC,GAEA,KAAAzmC,EACAzO,EAAAgrF,kBAAA,EAAA,IAAA,EAAA,KACA,MAEA,KAAAt8E,EACA1O,EAAAirF,UAAA,EAAA,GACA,MAEA,KAAAt8E,EACA3O,EAAAgrF,kBAAA,EAAA,EAAA,IAAA,KACA,MAEA,KAAAp8E,EACA5O,EAAAgrF,kBAAA,EAAA,IAAA,EAAA,KACA,MAEA,QACAtwF,QAAAkK,MAAA,uCAAAswC,QAOA,OAAAA,GAEA,KAAAzmC,EACAzO,EAAAgrF,kBAAA,IAAA,IAAA,EAAA,KACA,MAEA,KAAAt8E,EACA1O,EAAAirF,UAAA,IAAA,GACA,MAEA,KAAAt8E,EACA3O,EAAAirF,UAAA,EAAA,KACA,MAEA,KAAAr8E,EACA5O,EAAAirF,UAAA,EAAA,KACA,MAEA,QACAvwF,QAAAkK,MAAA,uCAAAswC,GAOAi0C,EAAA,KACAC,EAAA,KACAE,EAAA,KACAC,EAAA,KAEAN,EAAA/zC,EACAs0C,EAAAtyC,QA3FA8xC,IAEAxyD,GAAA,MACAwyD,GAAA,GAmKA,SAAAyB,GAAAnR,GAEAmQ,IAAAnQ,IAIAt5E,EAAAkrF,UAFA5R,EAEA,KAIA,MAIAmQ,EAAAnQ,GAMA,SAAAoR,GAAAS,GAEAA,IAAAp9E,GAEAsoB,GAAA,MAEA80D,IAAAzB,IAIA1pF,EAAAmrF,SAFAA,IAAAn9E,EAEA,KAEAm9E,IAAAl9E,EAEA,KAIA,OAQAuoB,GAAA,MAIAkzD,GAAAyB,EAgBA,SAAAC,GAAAv0C,EAAAt7C,EAAAL,GAEA27C,GAEAxgB,GAAA,OAEAuzD,KAAAruF,GAAAsuF,KAAA3uF,IAEA8E,EAAA62C,cAAAt7C,EAAAL,GAEA0uF,GAAAruF,EACAsuF,GAAA3uF,IAMAs7B,GAAA,OAsBA,SAAA60D,GAAAC,QAEAh7F,IAAAg7F,IAAAA,EAAA,MAAAtiB,GAAA,GAEAghB,KAAAsB,IAEAtrF,EAAAqrF,cAAAC,GACAtB,GAAAsB,GAyIA,OA/aAR,GAAA37E,GAAA,EACA27E,GAAA17E,GAAA,EACA07E,GAAAz7E,GAAA,IACAy7E,GAAAv7E,GAAA,IACAu7E,GAAAj7E,GAAA,IACAi7E,GAAAn7E,GAAA,IACAm7E,GAAAr7E,GAAA,IACAq7E,GAAAx7E,GAAA,IACAw7E,GAAAt7E,GAAA,IACAs7E,GAAAl7E,GAAA,IACAk7E,GAAAp7E,GAAA,IAqaA,CAEA6oD,QAAA,CACAhmB,MAAA40C,EACAl6B,MAAAznC,EACAgtC,QAAA/sC,GAGA4Q,OAAAA,GACAG,QAAAA,GAEA+0D,WAleA,SAAAlmB,GAEA,OAAA0jB,IAAA1jB,IAEArlE,EAAAurF,WAAAlmB,GAEA0jB,EAAA1jB,GAEA,IA4dAghB,YAAAA,GACAmF,YA3SA,SAAAlvD,EAAAmvD,GAEAnvD,EAAA6Y,OAAA5mC,EACAioB,GAAA,MACAH,GAAA,MAEA,IAAAijD,EAAAh9C,EAAA6Y,OAAA7mC,EACAm9E,IAAAnS,GAAAA,GAEAmR,GAAAnR,GAEAh9C,EAAA4Y,WAAAzmC,IAAA,IAAA6tB,EAAAgZ,YACA+wC,GAAA73E,GACA63E,GAAA/pD,EAAA4Y,SAAA5Y,EAAAmZ,cAAAnZ,EAAAiZ,SAAAjZ,EAAAkZ,SAAAlZ,EAAAsZ,mBAAAtZ,EAAAoZ,cAAApZ,EAAAqZ,cAAArZ,EAAA4a,oBAEA1xB,EAAAuiE,QAAAzrD,EAAAuZ,WACArwB,EAAA8gE,QAAAhqD,EAAAwZ,WACAtwB,EAAA+hE,QAAAjrD,EAAAyZ,YACAoxC,EAAAI,QAAAjrD,EAAAsa,YAEA,IAAAL,EAAAja,EAAAia,aACA9wB,EAAA6gE,QAAA/vC,GACAA,IAEA9wB,EAAA8hE,QAAAjrD,EAAA0Z,kBACAvwB,EAAAsiE,QAAAzrD,EAAA2Z,YAAA3Z,EAAA4Z,WAAA5Z,EAAA6Z,iBACA1wB,EAAAkjE,MAAArsD,EAAA8Z,YAAA9Z,EAAA+Z,aAAA/Z,EAAAga,eAIA80C,GAAA9uD,EAAAua,cAAAva,EAAAwa,oBAAAxa,EAAAya,qBA+QA0zC,aAAAA,GACAC,YAAAA,GAEAgB,aAtNA,SAAAruF,GAEAA,IAAAssF,KAEAG,IAAA9pF,EAAA2rF,UAAAtuF,GAEAssF,GAAAtsF,IAiNA+tF,iBAAAA,GAEA7E,eAtLA,SAAAlhE,GAEAA,EAEAgR,GAAA,MAIAG,GAAA,OAgLA60D,cAAAA,GACAhB,YA5JA,SAAAuB,EAAAC,GAEA,OAAA7B,IAEAqB,KAIA,IAAAS,EAAA7B,GAAAD,SAEA15F,IAAAw7F,IAGA7B,GAAAD,IADA8B,EAAA,CAAAz0F,UAAA/G,EAAAi1B,aAAAj1B,IAKAw7F,EAAAz0F,OAAAu0F,GAAAE,EAAAvmE,UAAAsmE,IAEA7rF,EAAAqqF,YAAAuB,EAAAC,GAAArB,GAAAoB,IAEAE,EAAAz0F,KAAAu0F,EACAE,EAAAvmE,QAAAsmE,IAuIAE,cAjIA,WAEA,IAAAD,EAAA7B,GAAAD,SAEA15F,IAAAw7F,QAAAx7F,IAAAw7F,EAAAz0F,OAEA2I,EAAAqqF,YAAAyB,EAAAz0F,KAAA,MAEAy0F,EAAAz0F,UAAA/G,EACAw7F,EAAAvmE,aAAAj1B,IAyHA07F,qBAnHA,WAEA,IAEAhsF,EAAAgsF,qBAAAC,MAAAjsF,EAAAnT,WAEA,MAAA+X,GAEAlK,QAAAkK,MAAA,oBAAAA,KA4GA2lF,WAtGA,WAEA,IAEAvqF,EAAAuqF,WAAA0B,MAAAjsF,EAAAnT,WAEA,MAAA+X,GAEAlK,QAAAkK,MAAA,oBAAAA,KA+FAsnF,WAzFA,WAEA,IAEAlsF,EAAAksF,WAAAD,MAAAjsF,EAAAnT,WAEA,MAAA+X,GAEAlK,QAAAkK,MAAA,oBAAAA,KAmFAwgB,QA3EA,SAAAA,IAEA,IAAA8kE,GAAA9rE,OAAAgH,KAEAplB,EAAAolB,QAAAA,EAAAz1B,EAAAy1B,EAAAn0B,EAAAm0B,EAAAH,EAAAG,EAAApJ,GACAkuE,GAAAt6F,KAAAw1B,KAuEAE,SAjEA,SAAAA,IAEA,IAAA6kE,GAAA/rE,OAAAkH,KAEAtlB,EAAAslB,SAAAA,EAAA31B,EAAA21B,EAAAr0B,EAAAq0B,EAAAL,EAAAK,EAAAtJ,GACAmuE,GAAAv6F,KAAA01B,KA8DA0gD,MAtDA,WAEA8iB,EAAA,GAEAkB,GAAA,KACAC,GAAA,GAEAlB,EAAA,KAEAE,EAAA,KAEAQ,EAAA,KACAC,GAAA,KAEAvC,EAAAnhB,QACAxgD,EAAAwgD,QACAvgD,EAAAugD,UAgDA,SAAAmmB,GAAAC,EAAA78B,EAAAoT,EAAAvM,EAAAiC,EAAAg0B,EAAApkB,GAEA,IAOAnwD,EAPAwgD,EAAAD,EAAAC,SACA0Q,EAAA3Q,EAAA2Q,YACAG,EAAA9Q,EAAA8Q,eACAD,EAAA7Q,EAAA6Q,eACAW,EAAAxR,EAAAwR,WAEAyiB,EAAA,IAAA9zB,QAOA+zB,GAAA,EAEA,IAEAA,EAAA,oBAAAC,iBACA,OAAA,IAAAA,gBAAA,EAAA,GAAArsF,WAAA,MAEA,MAAAjU,IAMA,SAAAkU,EAAA/C,EAAAC,GAIA,OAAAivF,EACA,IAAAC,gBAAAnvF,EAAAC,GACAtP,SAAAs1B,gBAAA,+BAAA,UAIA,SAAAmpE,EAAAtpE,EAAAupE,EAAAC,EAAAC,GAEA,IAAA9kF,EAAA,EAYA,IARAqb,EAAA9lB,MAAAuvF,GAAAzpE,EAAA7lB,OAAAsvF,KAEA9kF,EAAA8kF,EAAA36F,KAAAsD,IAAA4tB,EAAA9lB,MAAA8lB,EAAA7lB,SAMAwK,EAAA,IAAA,IAAA4kF,EAAA,CAIA,GAAA,oBAAAG,kBAAA1pE,aAAA0pE,kBACA,oBAAAxpE,mBAAAF,aAAAE,mBACA,oBAAAypE,aAAA3pE,aAAA2pE,YAAA,CAEA,IAAA56F,EAAAw6F,EAAA30E,GAAAmC,gBAAAjoB,KAAAC,MAEAmL,EAAAnL,EAAA4V,EAAAqb,EAAA9lB,OACAC,EAAApL,EAAA4V,EAAAqb,EAAA7lB,aAEAhN,IAAAwnB,IAAAA,EAAA1X,EAAA/C,EAAAC,IAIA,IAAAyC,EAAA4sF,EAAAvsF,EAAA/C,EAAAC,GAAAwa,EAUA,OARA/X,EAAA1C,MAAAA,EACA0C,EAAAzC,OAAAA,EAEAyC,EAAAI,WAAA,MACAsjB,UAAAN,EAAA,EAAA,EAAA9lB,EAAAC,GAEA5C,QAAAC,KAAA,uDAAAwoB,EAAA9lB,MAAA,IAAA8lB,EAAA7lB,OAAA,SAAAD,EAAA,IAAAC,EAAA,MAEAyC,EAUA,MANA,SAAAojB,GAEAzoB,QAAAC,KAAA,yDAAAwoB,EAAA9lB,MAAA,IAAA8lB,EAAA7lB,OAAA,MAIA6lB,EAMA,OAAAA,EAIA,SAAArJ,EAAAqJ,GAEA,OAAApL,GAAA+B,aAAAqJ,EAAA9lB,QAAA0a,GAAA+B,aAAAqJ,EAAA7lB,QAaA,SAAAyvF,EAAAxnE,EAAAynE,GAEA,OAAAznE,EAAAb,iBAAAsoE,GACAznE,EAAAvB,YAAAxS,IAAA+T,EAAAvB,YAAArS,GAIA,SAAAs7E,EAAA7gG,EAAAm5B,EAAAloB,EAAAC,GAEA8uF,EAAAa,eAAA7gG,GAEAgqE,EAAA7yD,IAAAgiB,GAGA2nE,cAAAj7F,KAAAiT,IAAAjT,KAAAsD,IAAA8H,EAAAC,IAAArL,KAAAk7F,MAIA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAA,IAAAj1B,EAAA,OAAAg1B,EAEA,GAAA,OAAAD,EAAA,CAEA,QAAA/8F,IAAA87F,EAAAiB,GAAA,OAAAjB,EAAAiB,GAEA3yF,QAAAC,KAAA,2EAAA0yF,EAAA,KAIA,IAAA9oE,EAAA+oE,EAiCA,OA/BA,OAAAA,IAEA,OAAAC,IAAAhpE,EAAA,OACA,OAAAgpE,IAAAhpE,EAAA,OACA,OAAAgpE,IAAAhpE,EAAA,QAIA,OAAA+oE,IAEA,OAAAC,IAAAhpE,EAAA,OACA,OAAAgpE,IAAAhpE,EAAA,OACA,OAAAgpE,IAAAhpE,EAAA,QAIA,OAAA+oE,IAEA,OAAAC,IAAAhpE,EAAA,OACA,OAAAgpE,IAAAhpE,EAAA,OACA,OAAAgpE,IAAAhpE,EAAA,QAIA,QAAAA,GAAA,QAAAA,GACA,QAAAA,GAAA,QAAAA,GAEAgrC,EAAAhsD,IAAA,0BAIAghB,EAMA,SAAAipE,EAAAvjG,GAEA,OAAAA,IAAAunB,IAAAvnB,IAAAwnB,IAAAxnB,IAAAynB,GAEA,KAIA,KAMA,SAAA+7E,EAAA91E,GAEA,IAAA4N,EAAA5N,EAAAvrB,OAEAm5B,EAAAnjB,oBAAA,UAAAqrF,GA4BA,SAAAloE,GAEA,IAAAmoE,EAAAt3B,EAAA7yD,IAAAgiB,GAEA,QAAAj1B,IAAAo9F,EAAAC,YAAA,OAEAvB,EAAAwB,cAAAF,EAAAG,gBAEAz3B,EAAA77B,OAAAhV,GAlCAuoE,CAAAvoE,GAEAA,EAAAwoE,gBAEAzB,EAAA1zB,OAAArzC,GAIA0iD,EAAA6D,OAAAtlD,WAIA,SAAAwnE,EAAAr2E,GAEA,IAAA+5C,EAAA/5C,EAAAvrB,OAEAslE,EAAAtvD,oBAAA,UAAA4rF,GAsBA,SAAAt8B,GAEA,IAAAu8B,EAAA73B,EAAA7yD,IAAAmuD,GACAg8B,EAAAt3B,EAAA7yD,IAAAmuD,EAAAnsC,SAEA,IAAAmsC,EAAA,YAEAphE,IAAAo9F,EAAAG,gBAEAzB,EAAAwB,cAAAF,EAAAG,gBAIAn8B,EAAAhsC,cAEAgsC,EAAAhsC,aAAAthB,UAIA,GAAAstD,EAAAC,wBAEA,IAAA,IAAA3nE,EAAA,EAAAA,EAAA,EAAAA,IAEAoiG,EAAA8B,kBAAAD,EAAAE,mBAAAnkG,IACAikG,EAAAG,oBAAAhC,EAAAiC,mBAAAJ,EAAAG,mBAAApkG,SAMAoiG,EAAA8B,kBAAAD,EAAAE,oBACAF,EAAAG,oBAAAhC,EAAAiC,mBAAAJ,EAAAG,oBACAH,EAAAK,gCAAAlC,EAAA8B,kBAAAD,EAAAK,gCACAL,EAAAM,0BAAAnC,EAAAiC,mBAAAJ,EAAAM,0BACAN,EAAAO,0BAAApC,EAAAiC,mBAAAJ,EAAAO,0BAIAp4B,EAAA77B,OAAAm3B,EAAAnsC,SACA6wC,EAAA77B,OAAAm3B,GA3DA+8B,CAAA/8B,GAEAuW,EAAA6D,OAAAtlD,WA+DA,IAAAkoE,EAAA,EA0BA,SAAAC,EAAAppE,EAAAqpE,GAEA,IAAAlB,EAAAt3B,EAAA7yD,IAAAgiB,GAIA,GAFAA,EAAAwoE,gBAy2BA,SAAAxoE,GAEA,IAAA9uB,EAAAwxE,EAAA5kE,OAAA5M,MAIA61F,EAAA/oF,IAAAgiB,KAAA9uB,IAEA61F,EAAAtxE,IAAAuK,EAAA9uB,GACA8uB,EAAAjd,UAl3BAumF,CAAAtpE,GAEAA,EAAAT,QAAA,GAAA4oE,EAAAoB,YAAAvpE,EAAAT,QAAA,CAEA,IAAA3B,EAAAoC,EAAApC,MAEA,QAAA7yB,IAAA6yB,EAEAzoB,QAAAC,KAAA,6EAEA,CAAA,IAAA,IAAAwoB,EAAA4rE,SAOA,YADAC,EAAAtB,EAAAnoE,EAAAqpE,GAJAl0F,QAAAC,KAAA,2EAWAgoE,EAAA0oB,cAAA,MAAAuD,GACAjsB,EAAA0nB,YAAA,KAAAqD,EAAAG,gBAoCA,SAAAoB,EAAA1pE,EAAAqpE,GAEA,GAAA,IAAArpE,EAAApC,MAAAx4B,OAAA,CAEA,IAAA+iG,EAAAt3B,EAAA7yD,IAAAgiB,GAEA,GAAAA,EAAAT,QAAA,GAAA4oE,EAAAoB,YAAAvpE,EAAAT,QAAA,CAEAoqE,EAAAxB,EAAAnoE,GAEAo9C,EAAA0oB,cAAA,MAAAuD,GACAjsB,EAAA0nB,YAAA,MAAAqD,EAAAG,gBAEAzB,EAAA+C,YAAA,MAAA5pE,EAAAX,OAOA,IALA,IAAAwqE,EAAA7pE,IAAAA,EAAA8pE,qBAAA9pE,EAAApC,MAAA,GAAAksE,qBACAt8B,EAAAxtC,EAAApC,MAAA,IAAAoC,EAAApC,MAAA,GAAA4vC,cAEAu8B,EAAA,GAEAtlG,EAAA,EAAAA,EAAA,EAAAA,IAQAslG,EAAAtlG,GANAolG,GAAAr8B,EAMAA,EAAAxtC,EAAApC,MAAAn5B,GAAAm5B,MAAAoC,EAAApC,MAAAn5B,GAJAyiG,EAAAlnE,EAAApC,MAAAn5B,IAAA,GAAA,EAAAm/E,GAUA,IAQA9kD,EARAlB,EAAAmsE,EAAA,GACAtC,EAAAlzE,EAAAqJ,IAAAm1C,EACAg1B,EAAAjB,EAAAkD,QAAAhqE,EAAAtB,QACAspE,EAAAlB,EAAAkD,QAAAhqE,EAAAluB,MACAm4F,EAAApC,EAAA7nE,EAAAhB,eAAA+oE,EAAAC,GAMA,GAJAkC,EAAA,MAAAlqE,EAAAynE,GAIAoC,EAAA,CAEA,IAAA,IAAA5yD,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAEAnY,EAAAirE,EAAA9yD,GAAAnY,QAEA,IAAA,IAAA8Z,EAAA,EAAAA,EAAA9Z,EAAA15B,OAAAwzC,IAAA,CAEA,IAAAuxD,EAAArrE,EAAA8Z,GAEA5Y,EAAAtB,SAAArR,IAAA2S,EAAAtB,SAAAtR,GAEA,OAAA26E,EAEA3qB,EAAAqpB,qBAAA,MAAAxvD,EAAA2B,EAAAqxD,EAAAE,EAAAryF,MAAAqyF,EAAApyF,OAAA,EAAAoyF,EAAAppF,MAIA5L,QAAAC,KAAA,mGAMAgoE,EAAA4nB,WAAA,MAAA/tD,EAAA2B,EAAAqxD,EAAAE,EAAAryF,MAAAqyF,EAAApyF,OAAA,EAAAgwF,EAAAC,EAAAmC,EAAAppF,OAQAonF,EAAAR,cAAA7oE,EAAA15B,OAAA,MAEA,CAEA05B,EAAAkB,EAAAlB,QAEA,IAAA,IAAAqY,EAAA,EAAAA,EAAA,EAAAA,IAEA,GAAAq2B,EAAA,CAEA4P,EAAA4nB,WAAA,MAAA7tD,EAAA,EAAA8yD,EAAAF,EAAA5yD,GAAAr/B,MAAAiyF,EAAA5yD,GAAAp/B,OAAA,EAAAgwF,EAAAC,EAAA+B,EAAA5yD,GAAAp2B,MAEA,IAAA,IAAAi5C,EAAA,EAAAA,EAAAl7B,EAAA15B,OAAA40D,IAAA,CAEA,IACAowC,EADAtrE,EAAAk7B,GACAp8B,MAAAuZ,GAAAvZ,MAEAw/C,EAAA4nB,WAAA,MAAA7tD,EAAA6iB,EAAA,EAAAiwC,EAAAG,EAAAtyF,MAAAsyF,EAAAryF,OAAA,EAAAgwF,EAAAC,EAAAoC,EAAArpF,WAIA,CAEAq8D,EAAA4nB,WAAA,MAAA7tD,EAAA,EAAA8yD,EAAAlC,EAAAC,EAAA+B,EAAA5yD,IAEA,IAAA,IAAAutB,EAAA,EAAAA,EAAA5lC,EAAA15B,OAAAs/D,IAAA,CAIA0Y,EAAA4nB,WAAA,MAAA7tD,EAAAutB,EAAA,EAAAulC,EAAAlC,EAAAC,EAFAlpE,EAAA4lC,GAEA9mC,MAAAuZ,KAQAgxD,EAAAR,cAAA7oE,EAAA15B,OAIAoiG,EAAAxnE,EAAAynE,IAGAC,EAAA,MAAA1nE,EAAApC,EAAA9lB,MAAA8lB,EAAA7lB,QAIAowF,EAAAoB,UAAAvpE,EAAAT,QAEAS,EAAAR,UAAAQ,EAAAR,SAAAQ,QAIAo9C,EAAA0oB,cAAA,MAAAuD,GACAjsB,EAAA0nB,YAAA,MAAAqD,EAAAG,iBAMA,SAAA+B,EAAArqE,EAAAqpE,GAEAjsB,EAAA0oB,cAAA,MAAAuD,GACAjsB,EAAA0nB,YAAA,MAAAj0B,EAAA7yD,IAAAgiB,GAAAsoE,gBAIA,IAAAgC,EAAA,GACAA,EAAAx+E,IAAA,MACAw+E,EAAAv+E,IAAA,MACAu+E,EAAAt+E,IAAA,MAEA,IAAAu+E,EAAA,GAQA,SAAAL,EAAAM,EAAAxqE,EAAAynE,GAEAA,GAEAZ,EAAA9B,cAAAyF,EAAA,MAAAF,EAAAtqE,EAAA1B,QACAuoE,EAAA9B,cAAAyF,EAAA,MAAAF,EAAAtqE,EAAAzB,QAEA,QAAAisE,GAAA,QAAAA,GAEA3D,EAAA9B,cAAAyF,EAAA,MAAAF,EAAAtqE,EAAAyoD,QAIAoe,EAAA9B,cAAAyF,EAAA,MAAAD,EAAAvqE,EAAAxB,YACAqoE,EAAA9B,cAAAyF,EAAA,MAAAD,EAAAvqE,EAAAvB,cAIAooE,EAAA9B,cAAAyF,EAAA,MAAA,OACA3D,EAAA9B,cAAAyF,EAAA,MAAA,OAEA,QAAAA,GAAA,QAAAA,GAEA3D,EAAA9B,cAAAyF,EAAA,MAAA,OAIAxqE,EAAA1B,QAAAvS,IAAAiU,EAAAzB,QAAAxS,IAEA5W,QAAAC,KAAA,iIAIAyxF,EAAA9B,cAAAyF,EAAA,MAAAvC,EAAAjoE,EAAAxB,YACAqoE,EAAA9B,cAAAyF,EAAA,MAAAvC,EAAAjoE,EAAAvB,YAEAuB,EAAAvB,YAAAxS,IAAA+T,EAAAvB,YAAArS,IAEAjX,QAAAC,KAAA,oIAMA,IAAA7E,EAAAy5D,EAAAhsD,IAAA,kCAEA,GAAAzN,EAAA,CAEA,GAAAyvB,EAAAluB,OAAA+a,IAAA,OAAAm9C,EAAAhsD,IAAA,4BAAA,OACA,GAAAgiB,EAAAluB,OAAAgb,IAAA,QAAAimD,GAAA/I,EAAAhsD,IAAA,kCAAA,QAEAgiB,EAAArB,WAAA,GAAAkyC,EAAA7yD,IAAAgiB,GAAAyqE,uBAEA5D,EAAA6D,cAAAF,EAAAj6F,EAAAo6F,2BAAAj+F,KAAAqM,IAAAinB,EAAArB,WAAAm0C,EAAAqR,qBACAtT,EAAA7yD,IAAAgiB,GAAAyqE,oBAAAzqE,EAAArB,aAQA,SAAAgrE,EAAAxB,EAAAnoE,QAEAj1B,IAAAo9F,EAAAC,cAEAD,EAAAC,aAAA,EAEApoE,EAAApjB,iBAAA,UAAAsrF,GAEAC,EAAAG,eAAAzB,EAAAhC,gBAEAniB,EAAA6D,OAAAtlD,YAMA,SAAAwoE,EAAAtB,EAAAnoE,EAAAqpE,GAEA,IAAAmB,EAAA,KAEAxqE,EAAA6oD,uBAAA2hB,EAAA,OACAxqE,EAAA8oD,kBAAA0hB,EAAA,OAEAb,EAAAxB,EAAAnoE,GAEAo9C,EAAA0oB,cAAA,MAAAuD,GACAjsB,EAAA0nB,YAAA0F,EAAArC,EAAAG,gBAEAzB,EAAA+C,YAAA,MAAA5pE,EAAAX,OACAwnE,EAAA+C,YAAA,MAAA5pE,EAAAZ,kBACAynE,EAAA+C,YAAA,KAAA5pE,EAAAV,iBAEA,IAWA6qE,EAXAhD,EA1gBA,SAAAnnE,GAEA,OAAA+yC,IAEA/yC,EAAA1B,QAAAvS,IAAAiU,EAAAzB,QAAAxS,IACAiU,EAAAvB,YAAAxS,IAAA+T,EAAAvB,YAAArS,IAqgBAw+E,CAAA5qE,KAAA,IAAAzL,EAAAyL,EAAApC,OACAA,EAAAspE,EAAAlnE,EAAApC,MAAAupE,GAAA,EAAAxjB,GAEA8jB,EAAAlzE,EAAAqJ,IAAAm1C,EACAg1B,EAAAjB,EAAAkD,QAAAhqE,EAAAtB,QAEAspE,EAAAlB,EAAAkD,QAAAhqE,EAAAluB,MACAm4F,EAAApC,EAAA7nE,EAAAhB,eAAA+oE,EAAAC,GAEAkC,EAAAM,EAAAxqE,EAAAynE,GAGA,IAAA3oE,EAAAkB,EAAAlB,QAEA,GAAAkB,EAAA6qE,eAIAZ,EAAA,KAEAl3B,EAIAk3B,EAFAjqE,EAAAluB,OAAA+a,GAEA,MAEAmT,EAAAluB,OAAA8a,GAEA,MAEAoT,EAAAluB,OAAAob,GAEA,MAIA,MAMA8S,EAAAluB,OAAA+a,IAEA1X,QAAAkK,MAAA,gEAQA2gB,EAAAtB,SAAAjR,IAAA,OAAAw8E,GAKAjqE,EAAAluB,OAAA4a,IAAAsT,EAAAluB,OAAA8a,KAEAzX,QAAAC,KAAA,+FAEA4qB,EAAAluB,KAAA4a,GACAs7E,EAAAlB,EAAAkD,QAAAhqE,EAAAluB,OAMAkuB,EAAAtB,SAAAhR,IAAA,OAAAu8E,IAIAA,EAAA,MAKAjqE,EAAAluB,OAAAob,KAEA/X,QAAAC,KAAA,oFAEA4qB,EAAAluB,KAAAob,GACA86E,EAAAlB,EAAAkD,QAAAhqE,EAAAluB,QAQAsrE,EAAA4nB,WAAA,KAAA,EAAAiF,EAAArsE,EAAA9lB,MAAA8lB,EAAA7lB,OAAA,EAAAgwF,EAAAC,EAAA,WAEA,GAAAhoE,EAAAwtC,cAMA,GAAA1uC,EAAA15B,OAAA,GAAAqiG,EAAA,CAEA,IAAA,IAAAhjG,EAAA,EAAAm1C,EAAA9a,EAAA15B,OAAAX,EAAAm1C,EAAAn1C,IAGA24E,EAAA4nB,WAAA,KAAAvgG,EAAAwlG,GADAE,EAAArrE,EAAAr6B,IACAqT,MAAAqyF,EAAApyF,OAAA,EAAAgwF,EAAAC,EAAAmC,EAAAppF,MAIAif,EAAAb,iBAAA,EACAgpE,EAAAR,cAAA7oE,EAAA15B,OAAA,OAIAg4E,EAAA4nB,WAAA,KAAA,EAAAiF,EAAArsE,EAAA9lB,MAAA8lB,EAAA7lB,OAAA,EAAAgwF,EAAAC,EAAApqE,EAAA7c,MACAonF,EAAAR,cAAA,OAIA,GAAA3nE,EAAA8pE,oBAAA,CAEA,IAAA,IAAA7yD,EAAA,EAAAuY,EAAA1wB,EAAA15B,OAAA6xC,EAAAuY,EAAAvY,IAEAkzD,EAAArrE,EAAAmY,GAEAjX,EAAAtB,SAAArR,IAAA2S,EAAAtB,SAAAtR,GAEA,OAAA26E,EAEA3qB,EAAAqpB,qBAAA,KAAAxvD,EAAAgzD,EAAAE,EAAAryF,MAAAqyF,EAAApyF,OAAA,EAAAoyF,EAAAppF,MAIA5L,QAAAC,KAAA,kGAMAgoE,EAAA4nB,WAAA,KAAA/tD,EAAAgzD,EAAAE,EAAAryF,MAAAqyF,EAAApyF,OAAA,EAAAgwF,EAAAC,EAAAmC,EAAAppF,MAMAonF,EAAAR,cAAA7oE,EAAA15B,OAAA,OAEA,GAAA46B,EAAA6oD,qBAEAzL,EAAAupB,WAAA,MAAA,EAAAsD,EAAArsE,EAAA9lB,MAAA8lB,EAAA7lB,OAAA6lB,EAAA8pC,MAAA,EAAAqgC,EAAAC,EAAApqE,EAAA7c,MACAonF,EAAAR,cAAA,OAEA,GAAA3nE,EAAA8oD,gBAEA1L,EAAAupB,WAAA,MAAA,EAAAsD,EAAArsE,EAAA9lB,MAAA8lB,EAAA7lB,OAAA6lB,EAAA8pC,MAAA,EAAAqgC,EAAAC,EAAApqE,EAAA7c,MACAonF,EAAAR,cAAA,OAUA,GAAA7oE,EAAA15B,OAAA,GAAAqiG,EAAA,CAEA,IAAA,IAAAtwD,EAAA,EAAAqlB,EAAA19B,EAAA15B,OAAA+xC,EAAAqlB,EAAArlB,IAGAimC,EAAA4nB,WAAA,KAAA7tD,EAAA8yD,EAAAlC,EAAAC,EADAmC,EAAArrE,EAAAqY,IAKAnX,EAAAb,iBAAA,EACAgpE,EAAAR,cAAA7oE,EAAA15B,OAAA,OAIAg4E,EAAA4nB,WAAA,KAAA,EAAAiF,EAAAlC,EAAAC,EAAApqE,GACAuqE,EAAAR,cAAA,EAMAH,EAAAxnE,EAAAynE,IAEAC,EAAA8C,EAAAxqE,EAAApC,EAAA9lB,MAAA8lB,EAAA7lB,QAIAowF,EAAAoB,UAAAvpE,EAAAT,QAEAS,EAAAR,UAAAQ,EAAAR,SAAAQ,GAOA,SAAA8qE,EAAAC,EAAA5+B,EAAA6+B,EAAAC,GAEA,IAAAlD,EAAAjB,EAAAkD,QAAA79B,EAAAnsC,QAAAtB,QACAspE,EAAAlB,EAAAkD,QAAA79B,EAAAnsC,QAAAluB,MACAm4F,EAAApC,EAAA17B,EAAAnsC,QAAAhB,eAAA+oE,EAAAC,GACA5qB,EAAA4nB,WAAAiG,EAAA,EAAAhB,EAAA99B,EAAAr0D,MAAAq0D,EAAAp0D,OAAA,EAAAgwF,EAAAC,EAAA,MACAnB,EAAAqE,gBAAA,MAAAH,GACAlE,EAAAsE,qBAAA,MAAAH,EAAAC,EAAAp6B,EAAA7yD,IAAAmuD,EAAAnsC,SAAAsoE,eAAA,GACAzB,EAAAqE,gBAAA,MAAA,MAKA,SAAAE,EAAAC,EAAAl/B,EAAAm/B,GAIA,GAFAzE,EAAA0E,iBAAA,MAAAF,GAEAl/B,EAAAlsC,cAAAksC,EAAAjsC,cAAA,CAEA,IAAA+pE,EAAA,MAEA,GAAAqB,EAAA,CAEA,IAAAnrE,EAAAgsC,EAAAhsC,aAEAA,GAAAA,EAAA0qE,iBAEA1qE,EAAAruB,OAAA+a,GAEAo9E,EAAA,MAEA9pE,EAAAruB,OAAA8a,KAEAq9E,EAAA,QAMA,IAAA5pE,EAAAmrE,EAAAr/B,GAEA06B,EAAA4E,+BAAA,MAAAprE,EAAA4pE,EAAA99B,EAAAr0D,MAAAq0D,EAAAp0D,aAIA8uF,EAAA6E,oBAAA,MAAAzB,EAAA99B,EAAAr0D,MAAAq0D,EAAAp0D,QAIA8uF,EAAA8E,wBAAA,MAAA,MAAA,MAAAN,QAEA,GAAAl/B,EAAAlsC,aAAAksC,EAAAjsC,cAAA,CAEA,GAAAorE,EAAA,CAEA,IAAAM,EAAAJ,EAAAr/B,GAEA06B,EAAA4E,+BAAA,MAAAG,EAAA,MAAAz/B,EAAAr0D,MAAAq0D,EAAAp0D,aAIA8uF,EAAA6E,oBAAA,MAAA,MAAAv/B,EAAAr0D,MAAAq0D,EAAAp0D,QAKA8uF,EAAA8E,wBAAA,MAAA,MAAA,MAAAN,OAEA,CAEA,IAAAtD,EAAAjB,EAAAkD,QAAA79B,EAAAnsC,QAAAtB,QACAspE,EAAAlB,EAAAkD,QAAA79B,EAAAnsC,QAAAluB,MACA+5F,EAAAhE,EAAA17B,EAAAnsC,QAAAhB,eAAA+oE,EAAAC,GAEA,GAAAsD,EAAA,CAEA,IAAAQ,EAAAN,EAAAr/B,GAEA06B,EAAA4E,+BAAA,MAAAK,EAAAD,EAAA1/B,EAAAr0D,MAAAq0D,EAAAp0D,aAIA8uF,EAAA6E,oBAAA,MAAAG,EAAA1/B,EAAAr0D,MAAAq0D,EAAAp0D,QAMA8uF,EAAA0E,iBAAA,MAAA,MAkDA,SAAAQ,EAAA5/B,GAEA,IAAAu8B,EAAA73B,EAAA7yD,IAAAmuD,GAEA6/B,GAAA,IAAA7/B,EAAAC,wBAEA,GAAAD,EAAAhsC,aAAA,CAEA,GAAA6rE,EAAA,MAAA,IAAAjnG,MAAA,6DArDA,SAAAgmG,EAAA5+B,GAGA,GADAA,GAAAA,EAAAC,wBACA,MAAA,IAAArnE,MAAA,2DAIA,GAFA8hG,EAAAqE,gBAAA,MAAAH,IAEA5+B,EAAAhsC,eAAAgsC,EAAAhsC,aAAA0qE,eAEA,MAAA,IAAA9lG,MAAA,uEAKA8rE,EAAA7yD,IAAAmuD,EAAAhsC,cAAAmoE,gBACAn8B,EAAAhsC,aAAAvC,MAAA9lB,QAAAq0D,EAAAr0D,OACAq0D,EAAAhsC,aAAAvC,MAAA7lB,SAAAo0D,EAAAp0D,SAEAo0D,EAAAhsC,aAAAvC,MAAA9lB,MAAAq0D,EAAAr0D,MACAq0D,EAAAhsC,aAAAvC,MAAA7lB,OAAAo0D,EAAAp0D,OACAo0D,EAAAhsC,aAAAm7B,aAAA,GAIA8tC,EAAAj9B,EAAAhsC,aAAA,GAEA,IAAA8rE,EAAAp7B,EAAA7yD,IAAAmuD,EAAAhsC,cAAAmoE,eAEA,GAAAn8B,EAAAhsC,aAAAzB,SAAAjR,GAEAo5E,EAAAsE,qBAAA,MAAA,MAAA,KAAAc,EAAA,OAEA,CAAA,GAAA9/B,EAAAhsC,aAAAzB,SAAAhR,GAMA,MAAA,IAAA3oB,MAAA,+BAJA8hG,EAAAsE,qBAAA,MAAA,MAAA,KAAAc,EAAA,IAqBAC,CAAAxD,EAAAE,mBAAAz8B,QAIA,GAAA6/B,EAAA,CAEAtD,EAAAG,mBAAA,GAEA,IAAA,IAAApkG,EAAA,EAAAA,EAAA,EAAAA,IAEAoiG,EAAAqE,gBAAA,MAAAxC,EAAAE,mBAAAnkG,IACAikG,EAAAG,mBAAApkG,GAAAoiG,EAAAsF,qBACAf,EAAA1C,EAAAG,mBAAApkG,GAAA0nE,GAAA,QAMA06B,EAAAqE,gBAAA,MAAAxC,EAAAE,oBACAF,EAAAG,mBAAAhC,EAAAsF,qBACAf,EAAA1C,EAAAG,mBAAA18B,GAAA,GAMA06B,EAAAqE,gBAAA,MAAA,MAsLA,SAAAM,EAAAr/B,GAEA,OAAA4G,GAAA5G,EAAAjpC,+BACAx2B,KAAAqM,IAAAurE,EAAAnY,EAAA9rC,SAAA,EAnpBAkqE,EAAAt+E,IAAA,KACAs+E,EAAAr+E,IAAA,KACAq+E,EAAAp+E,IAAA,KACAo+E,EAAAn+E,IAAA,KACAm+E,EAAAl+E,IAAA,KACAk+E,EAAAj+E,IAAA,KAmqBA,IAAA8/E,GAAA,EACAC,GAAA,EAyDApuF,KAAA6rE,oBA18BA,WAEA,IAAAwiB,EAAAnD,EAUA,OARAmD,GAAA7oB,GAEAtuE,QAAAC,KAAA,sCAAAk3F,EAAA,+CAAA7oB,GAIA0lB,GAAA,EAEAmD,GA+7BAruF,KAAAsuF,kBAj9BA,WAEApD,EAAA,GAi9BAlrF,KAAAmrF,aAAAA,EACAnrF,KAAAotE,kBA55BA,SAAArrD,EAAAqpE,GAEA,IAAAlB,EAAAt3B,EAAA7yD,IAAAgiB,GAEAA,EAAAT,QAAA,GAAA4oE,EAAAoB,YAAAvpE,EAAAT,QAEAkqE,EAAAtB,EAAAnoE,EAAAqpE,IAKAjsB,EAAA0oB,cAAA,MAAAuD,GACAjsB,EAAA0nB,YAAA,MAAAqD,EAAAG,kBAi5BArqF,KAAAstE,aA74BA,SAAAvrD,EAAAqpE,GAEA,IAAAlB,EAAAt3B,EAAA7yD,IAAAgiB,GAEAA,EAAAT,QAAA,GAAA4oE,EAAAoB,YAAAvpE,EAAAT,QAEAkqE,EAAAtB,EAAAnoE,EAAAqpE,IAKAjsB,EAAA0oB,cAAA,MAAAuD,GACAjsB,EAAA0nB,YAAA,MAAAqD,EAAAG,kBAk4BArqF,KAAAyrF,eAAAA,EACAzrF,KAAAosF,sBAAAA,EACApsF,KAAAuuF,kBA3QA,SAAArgC,GAEA,IAAAu8B,EAAA73B,EAAA7yD,IAAAmuD,GACAg8B,EAAAt3B,EAAA7yD,IAAAmuD,EAAAnsC,SAEAmsC,EAAAvvD,iBAAA,UAAA6rF,GAEAN,EAAAG,eAAAzB,EAAAhC,gBAEAniB,EAAA6D,OAAAtlD,WAEA,IAAA+qE,GAAA,IAAA7/B,EAAAC,wBACAk/B,GAAA,IAAAn/B,EAAAjpC,+BACAukE,EAAAlzE,EAAA43C,IAAA4G,EAcA,IAVAA,GAAA5G,EAAAnsC,QAAAtB,SAAAtR,IAAA++C,EAAAnsC,QAAAluB,OAAA+a,IAAAs/C,EAAAnsC,QAAAluB,OAAAgb,KAEAq/C,EAAAnsC,QAAAtB,OAAArR,GAEAlY,QAAAC,KAAA,4GAMA42F,EAAA,CAEAtD,EAAAE,mBAAA,GAEA,IAAA,IAAAnkG,EAAA,EAAAA,EAAA,EAAAA,IAEAikG,EAAAE,mBAAAnkG,GAAAoiG,EAAA4F,yBAQA,GAFA/D,EAAAE,mBAAA/B,EAAA4F,oBAEAnB,EAEA,GAAAv4B,EAAA,CAEA21B,EAAAK,+BAAAlC,EAAA4F,oBACA/D,EAAAM,yBAAAnC,EAAAsF,qBAEAtF,EAAA0E,iBAAA,MAAA7C,EAAAM,0BAEA,IAAAjB,EAAAjB,EAAAkD,QAAA79B,EAAAnsC,QAAAtB,QACAspE,EAAAlB,EAAAkD,QAAA79B,EAAAnsC,QAAAluB,MACAm4F,EAAApC,EAAA17B,EAAAnsC,QAAAhB,eAAA+oE,EAAAC,GACA3nE,EAAAmrE,EAAAr/B,GACA06B,EAAA4E,+BAAA,MAAAprE,EAAA4pE,EAAA99B,EAAAr0D,MAAAq0D,EAAAp0D,QAEA8uF,EAAAqE,gBAAA,MAAAxC,EAAAK,gCACAlC,EAAA8E,wBAAA,MAAA,MAAA,MAAAjD,EAAAM,0BACAnC,EAAA0E,iBAAA,MAAA,MAEAp/B,EAAAlsC,cAEAyoE,EAAAO,yBAAApC,EAAAsF,qBACAf,EAAA1C,EAAAO,yBAAA98B,GAAA,IAIA06B,EAAAqE,gBAAA,MAAA,WAKA/1F,QAAAC,KAAA,mFAUA,GAAA42F,EAAA,CAEA5uB,EAAA0nB,YAAA,MAAAqD,EAAAG,gBACA4B,EAAA,MAAA/9B,EAAAnsC,QAAAynE,GAEA,IAAA,IAAAxwD,EAAA,EAAAA,EAAA,EAAAA,IAEA6zD,EAAApC,EAAAE,mBAAA3xD,GAAAk1B,EAAA,MAAA,MAAAl1B,GAIAuwD,EAAAr7B,EAAAnsC,QAAAynE,IAEAC,EAAA,MAAAv7B,EAAAnsC,QAAAmsC,EAAAr0D,MAAAq0D,EAAAp0D,QAIAqlE,EAAA0nB,YAAA,MAAA,WAIA1nB,EAAA0nB,YAAA,KAAAqD,EAAAG,gBACA4B,EAAA,KAAA/9B,EAAAnsC,QAAAynE,GACAqD,EAAApC,EAAAE,mBAAAz8B,EAAA,MAAA,MAEAq7B,EAAAr7B,EAAAnsC,QAAAynE,IAEAC,EAAA,KAAAv7B,EAAAnsC,QAAAmsC,EAAAr0D,MAAAq0D,EAAAp0D,QAIAqlE,EAAA0nB,YAAA,KAAA,MAMA34B,EAAAlsC,aAEA8rE,EAAA5/B,IAmJAluD,KAAAyuF,yBA7IA,SAAAvgC,GAEA,IAAAnsC,EAAAmsC,EAAAnsC,QAGA,GAAAwnE,EAAAxnE,EAFAzL,EAAA43C,IAAA4G,GAEA,CAEA,IAAAlsE,EAAAslE,EAAAC,wBAAA,MAAA,KACAk6B,EAAAz1B,EAAA7yD,IAAAgiB,GAAAsoE,eAEAlrB,EAAA0nB,YAAAj+F,EAAAy/F,GACAoB,EAAA7gG,EAAAm5B,EAAAmsC,EAAAr0D,MAAAq0D,EAAAp0D,QACAqlE,EAAA0nB,YAAAj+F,EAAA,QAkIAoX,KAAA0uF,8BA5HA,SAAAxgC,GAEA,GAAAA,EAAAjpC,+BAEA,GAAA6vC,EAAA,CAEA,IAAA21B,EAAA73B,EAAA7yD,IAAAmuD,GAEA06B,EAAAqE,gBAAA,MAAAxC,EAAAK,gCACAlC,EAAAqE,gBAAA,MAAAxC,EAAAE,oBAEA,IAAA9wF,EAAAq0D,EAAAr0D,MACAC,EAAAo0D,EAAAp0D,OACAnN,EAAA,MAEAuhE,EAAAlsC,cAAAr1B,GAAA,KACAuhE,EAAAjsC,gBAAAt1B,GAAA,MAEAi8F,EAAA+F,gBAAA,EAAA,EAAA90F,EAAAC,EAAA,EAAA,EAAAD,EAAAC,EAAAnN,EAAA,MAEAi8F,EAAAqE,gBAAA,MAAAxC,EAAAK,qCAIA5zF,QAAAC,KAAA,oFAsGA6I,KAAAktE,iBAnEA,SAAAnrD,EAAAqpE,GAEArpE,GAAAA,EAAAgD,uBAEA,IAAAopE,IAEAj3F,QAAAC,KAAA,oHACAg3F,GAAA,GAIApsE,EAAAA,EAAAA,SAIAopE,EAAAppE,EAAAqpE,IAqDAprF,KAAAwtE,mBAjDA,SAAAzrD,EAAAqpE,GAEArpE,GAAAA,EAAAosC,2BAEA,IAAAigC,IAEAl3F,QAAAC,KAAA,2HACAi3F,GAAA,GAIArsE,EAAAA,EAAAA,SAMAA,GAAAA,EAAA0+C,eACAv1E,MAAA6B,QAAAg1B,EAAApC,QAAA,IAAAoC,EAAApC,MAAAx4B,OAKAskG,EAAA1pE,EAAAqpE,GAKAgB,EAAArqE,EAAAqpE,IA6BA,SAAAwD,GAAApyF,EAAAuvD,EAAA8I,GAEA,IAAAC,EAAAD,EAAAC,SA2LA,MAAA,CAAAi3B,QAzLA,SAAA/kG,GAEA,IAAAsL,EAEA,GAAAtL,IAAAsnB,GAAA,OAAA,KACA,GAAAtnB,IAAA8nB,GAAA,OAAA,MACA,GAAA9nB,IAAA+nB,GAAA,OAAA,MACA,GAAA/nB,IAAAgoB,GAAA,OAAA,MAEA,GAAAhoB,IAAAunB,GAAA,OAAA,KACA,GAAAvnB,IAAAwnB,GAAA,OAAA,KACA,GAAAxnB,IAAAynB,GAAA,OAAA,KACA,GAAAznB,IAAA0nB,GAAA,OAAA,KACA,GAAA1nB,IAAA2nB,GAAA,OAAA,KACA,GAAA3nB,IAAA4nB,GAAA,OAAA,KAEA,GAAA5nB,IAAA6nB,GAEA,OAAAimD,EAAA,KAIA,QAFAxiE,EAAAy5D,EAAAhsD,IAAA,2BAIAzN,EAAAu8F,eAIA,KAMA,GAAA7nG,IAAAkoB,GAAA,OAAA,KACA,GAAAloB,IAAAmoB,GAAA,OAAA,KACA,GAAAnoB,IAAAooB,GAAA,OAAA,KACA,GAAApoB,IAAAqoB,GAAA,OAAA,KACA,GAAAroB,IAAAsoB,GAAA,OAAA,KACA,GAAAtoB,IAAAwoB,GAAA,OAAA,KACA,GAAAxoB,IAAAyoB,GAAA,OAAA,MACA,GAAAzoB,IAAA0oB,GAAA,OAAA,KAIA,GAAA1oB,IAAA2oB,GAAA,OAAA,MACA,GAAA3oB,IAAA4oB,GAAA,OAAA,MACA,GAAA5oB,IAAA6oB,GAAA,OAAA,MACA,GAAA7oB,IAAA8oB,GAAA,OAAA,MACA,GAAA9oB,IAAA+oB,GAAA,OAAA,MAEA,GAAA/oB,IAAAgpB,IAAAhpB,IAAAipB,IACAjpB,IAAAkpB,IAAAlpB,IAAAmpB,GAAA,CAIA,GAAA,QAFA7d,EAAAy5D,EAAAhsD,IAAA,kCAWA,OAAA,KAPA,GAAA/Y,IAAAgpB,GAAA,OAAA1d,EAAAw8F,6BACA,GAAA9nG,IAAAipB,GAAA,OAAA3d,EAAAy8F,8BACA,GAAA/nG,IAAAkpB,GAAA,OAAA5d,EAAA08F,8BACA,GAAAhoG,IAAAmpB,GAAA,OAAA7d,EAAA28F,8BAUA,GAAAjoG,IAAAopB,IAAAppB,IAAAqpB,IACArpB,IAAAspB,IAAAtpB,IAAAupB,GAAA,CAIA,GAAA,QAFAje,EAAAy5D,EAAAhsD,IAAA,mCAWA,OAAA,KAPA,GAAA/Y,IAAAopB,GAAA,OAAA9d,EAAA48F,gCACA,GAAAloG,IAAAqpB,GAAA,OAAA/d,EAAA68F,gCACA,GAAAnoG,IAAAspB,GAAA,OAAAhe,EAAA88F,iCACA,GAAApoG,IAAAupB,GAAA,OAAAje,EAAA+8F,iCAUA,GAAAroG,IAAAwpB,GAIA,OAAA,QAFAle,EAAAy5D,EAAAhsD,IAAA,kCAIAzN,EAAAg9F,0BAIA,KAMA,IAAAtoG,IAAAypB,IAAAzpB,IAAA0pB,KAIA,QAFApe,EAAAy5D,EAAAhsD,IAAA,iCAEA,CAEA,GAAA/Y,IAAAypB,GAAA,OAAAne,EAAAi9F,qBACA,GAAAvoG,IAAA0pB,GAAA,OAAApe,EAAAk9F,0BAMA,OAAAxoG,IAAA2pB,IAAA3pB,IAAA4pB,IAAA5pB,IAAA6pB,IACA7pB,IAAA8pB,IAAA9pB,IAAA+pB,IAAA/pB,IAAAgqB,IACAhqB,IAAAiqB,IAAAjqB,IAAAkqB,IAAAlqB,IAAAmqB,IACAnqB,IAAAoqB,IAAApqB,IAAAqqB,IAAArqB,IAAAsqB,IACAtqB,IAAAuqB,IAAAvqB,IAAAwqB,IACAxqB,IAAA0qB,IAAA1qB,IAAA2qB,IAAA3qB,IAAA4qB,IACA5qB,IAAA6qB,IAAA7qB,IAAA8qB,IAAA9qB,IAAA+qB,IACA/qB,IAAAgrB,IAAAhrB,IAAAirB,IAAAjrB,IAAAkrB,IACAlrB,IAAAmrB,IAAAnrB,IAAAorB,IAAAprB,IAAAqrB,IACArrB,IAAAsrB,IAAAtrB,IAAAurB,GAIA,QAFAjgB,EAAAy5D,EAAAhsD,IAAA,kCAMA/Y,EAIA,KAMAA,IAAAyqB,GAIA,QAFAnf,EAAAy5D,EAAAhsD,IAAA,iCAMA/Y,EAIA,KAMAA,IAAAioB,GAEA6lD,EAAA,MAIA,QAFAxiE,EAAAy5D,EAAAhsD,IAAA,wBAIAzN,EAAAm9F,wBAIA,UAZA,IA4BA,SAAAC,GAAAt7E,GAEAo4C,GAAAtlE,KAAA8Y,MAEAA,KAAA+7E,QAAA3nE,GAAA,GAgBA,SAAAu7E,KAEA37D,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,QAgBA,SAAA+7F,KAEA5vF,KAAA6vF,WAAA,KACA7vF,KAAA8vF,MAAA,KAsIA,SAAAC,GAAAxnF,EAAA/L,GAEA,IAAA4nD,EAAApkD,KAEAkgE,EAAA,KAEA8vB,EAAA,EAEAC,EAAA,KACAC,EAAA,cAEAC,EAAA,KAEAC,EAAA,GACAC,EAAA,IAAAC,IAIAC,EAAA,IAAA/jC,GACA+jC,EAAAr9D,OAAAL,OAAA,GACA09D,EAAAzuE,SAAA,IAAAN,GAEA,IAAAgvE,EAAA,IAAAhkC,GACAgkC,EAAAt9D,OAAAL,OAAA,GACA29D,EAAA1uE,SAAA,IAAAN,GAEA,IAAAu6D,EAAA,CAAAwU,EAAAC,GAEAC,EAAA,IAAAf,GACAe,EAAAv9D,OAAAL,OAAA,GACA49D,EAAAv9D,OAAAL,OAAA,GAEA,IAAA69D,EAAA,KACAC,EAAA,KAwCA,SAAAC,EAAAz8E,GAEA,IAAA08E,EAAAR,EAAAtwF,IAAAoU,EAAA28E,aAEAD,GAEAA,EAAA38E,cAAA,CAAArgB,KAAAsgB,EAAAtgB,OAMA,SAAAk9F,IAEAV,EAAA9nG,QAAA,SAAAsoG,EAAAC,GAEAD,EAAAG,WAAAF,KAIAT,EAAArpF,QAIAuB,EAAA0oF,eAAA,MACA1oF,EAAAwmD,gBAAAxmD,EAAAumD,mBACAoiC,EAAA7vF,OAEA+iD,EAAA+sC,cAAA,EAEA/sC,EAAAlwC,cAAA,CAAArgB,KAAA,eAIA,SAAAu9F,EAAAllG,GAEA+jG,EAAA/jG,EAEAglG,EAAAv8B,WAAAuL,GACAgxB,EAAA/uD,QAEAiiB,EAAA+sC,cAAA,EAEA/sC,EAAAlwC,cAAA,CAAArgB,KAAA,iBAqFA,SAAAw9F,EAAAl9E,GAMA,IAJA,IAAAm9E,EAAApxB,EAAAoxB,aAIA9qG,EAAA,EAAAA,EAAA4pG,EAAAjpG,OAAAX,IAEA6pG,EAAA74E,IAAA85E,EAAA9qG,GAAA4pG,EAAA5pG,IAMA,IAAA,IAAAwyC,EAAA,EAAAA,EAAA7kB,EAAAo9E,QAAApqG,OAAA6xC,IAAA,CAEA,IAAA83D,EAAA38E,EAAAo9E,QAAAv4D,GACA63D,EAAAR,EAAAtwF,IAAA+wF,GAEAD,IAEAA,EAAA38E,cAAA,CAAArgB,KAAA,eAAAiP,KAAAguF,IACAT,EAAAj7B,OAAA07B,IAQA,IAAA,IAAA53D,EAAA,EAAAA,EAAA/kB,EAAAq9E,MAAArqG,OAAA+xC,IAAA,CAEA,IAAAu4D,EAAAt9E,EAAAq9E,MAAAt4D,GACAw4D,EAAArB,EAAAtwF,IAAA0xF,GAEAC,GAEAA,EAAAx9E,cAAA,CAAArgB,KAAA,YAAAiP,KAAA2uF,KAzMAzxF,KAAA9B,SAAA,EAEA8B,KAAAmxF,cAAA,EAEAnxF,KAAA2xF,cAAA,SAAAtnF,GAEA,IAAAwmF,EAAAT,EAAA/lF,GASA,YAPAvd,IAAA+jG,IAEAA,EAAA,IAAAjB,GACAQ,EAAA/lF,GAAAwmF,GAIAA,EAAAe,qBAIA5xF,KAAA6xF,kBAAA,SAAAxnF,GAEA,IAAAwmF,EAAAT,EAAA/lF,GASA,YAPAvd,IAAA+jG,IAEAA,EAAA,IAAAjB,GACAQ,EAAA/lF,GAAAwmF,GAIAA,EAAAiB,gBAqDA9xF,KAAA+xF,0BAAA,SAAA7lG,GAEA8jG,EAAA9jG,GAEA,IAAAk4D,EAAA+sC,cAEAj6F,QAAAC,KAAA,0EAMA6I,KAAAgyF,sBAAA,SAAA9lG,GAEAgkG,EAAAhkG,GAEA,IAAAk4D,EAAA+sC,cAEAj6F,QAAAC,KAAA,6EAMA6I,KAAAiyF,kBAAA,WAEA,OAAAhC,GAIAjwF,KAAAmgE,WAAA,WAEA,OAAAD,GAIAlgE,KAAAkyF,WAAA,SAAAhmG,GAIA,GAAA,QAFAg0E,EAAAh0E,GAEA,CAEAg0E,EAAAvhE,iBAAA,SAAAiyF,GACA1wB,EAAAvhE,iBAAA,cAAAiyF,GACA1wB,EAAAvhE,iBAAA,YAAAiyF,GACA1wB,EAAAvhE,iBAAA,UAAAiyF,GACA1wB,EAAAvhE,iBAAA,eAAAiyF,GACA1wB,EAAAvhE,iBAAA,aAAAiyF,GACA1wB,EAAAvhE,iBAAA,MAAAoyF,GAEA,IAAA9zF,EAAAT,EAAA21F,wBAEA,IAAAl1F,EAAAm1F,cAEA51F,EAAA61F,mBAIA,IASAC,EAAA,IAAAC,aAAAryB,EAAA1jE,EATA,CACAg2F,UAAAv1F,EAAAu1F,UACAh4E,MAAAvd,EAAAud,MACAivC,MAAAxsD,EAAAwsD,MACAuF,QAAA/xD,EAAA+xD,QACAghC,uBAAAA,IAMA9vB,EAAAuyB,kBAAA,CAAAH,UAAAA,IAEApyB,EAAAwyB,sBAAAxC,GAAApmG,KAAAsnG,GAIAlxB,EAAAvhE,iBAAA,qBAAA0yF,KAqDA,IAAAsB,EAAA,IAAAtpE,GACAupE,EAAA,IAAAvpE,GA2DA,SAAAwpE,EAAAvoE,EAAAnvB,GAEA,OAAAA,EAEAmvB,EAAAK,YAAAv+B,KAAAk+B,EAAApM,QAIAoM,EAAAK,YAAAlO,iBAAAthB,EAAAwvB,YAAAL,EAAApM,QAIAoM,EAAAC,mBAAAtM,WAAAqM,EAAAK,aAIA3qB,KAAA8yF,UAAA,SAAAxoE,GAEAmmE,EAAA9+D,KAAA6+D,EAAA7+D,KAAA4+D,EAAA5+D,KAAArH,EAAAqH,KACA8+D,EAAA7+D,IAAA4+D,EAAA5+D,IAAA2+D,EAAA3+D,IAAAtH,EAAAsH,IAEA8+D,IAAAD,EAAA9+D,MAAAg/D,IAAAF,EAAA7+D,MAIAsuC,EAAAuyB,kBAAA,CACAM,UAAAtC,EAAA9+D,KACAqhE,SAAAvC,EAAA7+D,MAGA8+D,EAAAD,EAAA9+D,KACAg/D,EAAAF,EAAA7+D,KAIA,IAAAz2B,EAAAmvB,EAAAnvB,OACA4gF,EAAA0U,EAAA1U,QAEA8W,EAAApC,EAAAt1F,GAEA,IAAA,IAAA3U,EAAA,EAAAA,EAAAu1F,EAAA50F,OAAAX,IAEAqsG,EAAA9W,EAAAv1F,GAAA2U,GAMAmvB,EAAAK,YAAAv+B,KAAAqkG,EAAA9lE,aAIA,IAFA,IAAAsJ,EAAA3J,EAAA2J,SAEA+E,EAAA,EAAA/oC,EAAAgkC,EAAA9sC,OAAA6xC,EAAA/oC,EAAA+oC,IAEA/E,EAAA+E,GAAA5B,mBAAA,GAkBA,OAZA,IAAA2kD,EAAA50F,OA7GA,SAAAmjC,EAAAimE,EAAAC,GAEAmC,EAAAzmE,sBAAAqkE,EAAA5lE,aACAioE,EAAA1mE,sBAAAskE,EAAA7lE,aAEA,IAAAsoE,EAAAN,EAAAz4E,WAAA04E,GAEAM,EAAA3C,EAAA/lE,iBAAA7S,SACAw7E,EAAA3C,EAAAhmE,iBAAA7S,SAKAga,EAAAuhE,EAAA,KAAAA,EAAA,IAAA,GACAthE,EAAAshE,EAAA,KAAAA,EAAA,IAAA,GACAE,GAAAF,EAAA,GAAA,GAAAA,EAAA,GACAG,GAAAH,EAAA,GAAA,GAAAA,EAAA,GAEAI,GAAAJ,EAAA,GAAA,GAAAA,EAAA,GACAK,GAAAJ,EAAA,GAAA,GAAAA,EAAA,GACA5hE,EAAAI,EAAA2hE,EACA9hE,EAAAG,EAAA4hE,EAIAC,EAAAP,IAAAK,EAAAC,GACAE,EAAAD,GAAAF,EAGA/C,EAAA5lE,YAAAuG,UAAA5G,EAAAqG,SAAArG,EAAA3D,WAAA2D,EAAAhmB,OACAgmB,EAAAgM,WAAAm9D,GACAnpE,EAAAkM,WAAAg9D,GACAlpE,EAAAK,YAAAoE,QAAAzE,EAAAqG,SAAArG,EAAA3D,WAAA2D,EAAAhmB,OACAgmB,EAAAC,mBAAAtM,WAAAqM,EAAAK,aAKA,IAAA+oE,EAAA/hE,EAAA6hE,EACAG,EAAA/hE,EAAA4hE,EAMAlpE,EAAAE,iBAAA8G,gBALAC,EAAAkiE,EACAjiE,GAAAyhE,EAAAQ,GACAL,EAAAxhE,EAAA+hE,EAAAD,EACAL,EAAAzhE,EAAA+hE,EAAAD,EAEAA,EAAAC,GAkEAC,CAAAnD,EAAAF,EAAAC,GAMAC,EAAAjmE,iBAAAp+B,KAAAmkG,EAAA/lE,kBAIAimE,GAMA,IAAAoD,EAAA,KAmEA,IAAA3C,EAAA,IAAA78B,GACA68B,EAAAx8B,iBAlEA,SAAAp0D,EAAArN,GAIA,GAAA,QAFAk9F,EAAAl9F,EAAA6gG,cAAA7D,IAEA,CAEA,IAAA8D,EAAA5D,EAAA4D,MACAzB,EAAApyB,EAAAuf,YAAA6S,UAEA/pF,EAAA0oF,eAAAqB,EAAAxF,aAEA,IAAAkH,GAAA,EAIAD,EAAA5sG,SAAAspG,EAAA1U,QAAA50F,SAEAspG,EAAA1U,QAAA50F,OAAA,EACA6sG,GAAA,GAIA,IAAA,IAAAxtG,EAAA,EAAAA,EAAAutG,EAAA5sG,OAAAX,IAAA,CAEA,IAAAomE,EAAAmnC,EAAAvtG,GACAs7B,EAAAwwE,EAAA/O,YAAA32B,GAEAtiC,EAAAyxD,EAAAv1F,GACA8jC,EAAApM,OAAArD,UAAA+xC,EAAAqnC,UAAA/1E,QACAoM,EAAAE,iBAAA3P,UAAA+xC,EAAApiC,kBACAF,EAAAxI,SAAAtK,IAAAsK,EAAA31B,EAAA21B,EAAAr0B,EAAAq0B,EAAAjoB,MAAAioB,EAAAhoB,QAEA,IAAAtT,GAEAiqG,EAAAvyE,OAAA9xB,KAAAk+B,EAAApM,SAIA,IAAA81E,GAEAvD,EAAA1U,QAAApxF,KAAA2/B,IAYA,IAFA,IAAAgnE,EAAApxB,EAAAoxB,aAEAt4D,EAAA,EAAAA,EAAAo3D,EAAAjpG,OAAA6xC,IAEAo3D,EAAAp3D,GAGAl0B,OAFAwsF,EAAAt4D,GAEA/lC,EAAAg9F,GAIA4D,GAAAA,EAAAvzF,EAAArN,KAOA+M,KAAA00D,iBAAA,SAAAvrC,GAEA0qE,EAAA1qE,GAIAnpB,KAAAY,QAAA,aAUA,SAAAszF,GAAAthC,GAyGA,SAAAuhC,EAAA/oC,EAAAtyB,EAAA7D,GAEAm2B,EAAAvZ,QAAA3lD,MAAA4sC,EAAA+Y,QAEA/Y,EAAAiW,OAEAqc,EAAAiG,QAAAnlE,MAAAE,KAAA0sC,EAAAiW,OAIAjW,EAAAyc,UAEA6V,EAAA7V,SAAArpD,MAAAE,KAAA0sC,EAAAyc,UAAAv8B,eAAA8f,EAAA0c,mBAIA1c,EAAA3wC,MAEAijE,EAAAjjE,IAAA+D,MAAA4sC,EAAA3wC,KAIA2wC,EAAAob,WAEAkX,EAAAlX,SAAAhoD,MAAA4sC,EAAAob,UAIApb,EAAAmb,cAEAmX,EAAAnX,YAAA/nD,MAAA4sC,EAAAmb,aAIA,IAqCAmgD,EA+DAC,EApGAlgD,EAAArb,EAAAqb,QAAAlf,EAEAkf,IAEAiX,EAAAjX,OAAAjoD,MAAAioD,EAEAiX,EAAAsG,WAAAxlE,MAAAioD,EAAAssB,eAAA,EAAA,EAEArV,EAAA/W,aAAAnoD,MAAA4sC,EAAAub,aACA+W,EAAA9W,gBAAApoD,MAAA4sC,EAAAwb,gBAEA8W,EAAAuG,YAAAzlE,MAAA0mE,EAAA7yD,IAAAo0C,GAAAu1C,eAIA5wD,EAAA+a,WAEAuX,EAAAvX,SAAA3nD,MAAA4sC,EAAA+a,SACAuX,EAAAtX,kBAAA5nD,MAAA4sC,EAAAgb,mBAIAhb,EAAAib,QAEAqX,EAAArX,MAAA7nD,MAAA4sC,EAAAib,MACAqX,EAAApX,eAAA9nD,MAAA4sC,EAAAkb,gBAcAlb,EAAA3wC,IAEAisG,EAAAt7D,EAAA3wC,IAEA2wC,EAAAmb,YAEAmgD,EAAAt7D,EAAAmb,YAEAnb,EAAAyd,gBAEA69C,EAAAt7D,EAAAyd,gBAEAzd,EAAAsd,UAEAg+C,EAAAt7D,EAAAsd,UAEAtd,EAAAod,QAEAk+C,EAAAt7D,EAAAod,QAEApd,EAAA4d,aAEA09C,EAAAt7D,EAAA4d,aAEA5d,EAAA6d,aAEAy9C,EAAAt7D,EAAA6d,aAEA7d,EAAAob,SAEAkgD,EAAAt7D,EAAAob,SAEApb,EAAA8d,cAEAw9C,EAAAt7D,EAAA8d,kBAIA9pD,IAAAsnG,IAGAA,EAAArvE,sBAEAqvE,EAAAA,EAAAryE,UAIA,IAAAqyE,EAAAnzE,kBAEAmzE,EAAAxxE,eAIAwoC,EAAAkG,YAAAplE,MAAAE,KAAAgoG,EAAAl2E,SAUA4a,EAAAib,MAEAsgD,EAAAv7D,EAAAib,MAEAjb,EAAA+a,WAEAwgD,EAAAv7D,EAAA+a,eAIA/mD,IAAAunG,IAGAA,EAAAtvE,sBAEAsvE,EAAAA,EAAAtyE,UAIA,IAAAsyE,EAAApzE,kBAEAozE,EAAAzxE,eAIAwoC,EAAAmG,aAAArlE,MAAAE,KAAAioG,EAAAn2E,SA6MA,SAAAo2E,EAAAlpC,EAAAtyB,EAAA7D,GAEAm2B,EAAAhW,UAAAlpD,MAAA4sC,EAAAsc,UACAgW,EAAA/V,UAAAnpD,MAAA4sC,EAAAuc,UAEAvc,EAAA4d,eAEA0U,EAAA1U,aAAAxqD,MAAA4sC,EAAA4d,cAIA5d,EAAA6d,eAEAyU,EAAAzU,aAAAzqD,MAAA4sC,EAAA6d,cAIA7d,EAAA8d,cAEAwU,EAAAxU,YAAA1qD,MAAA4sC,EAAA8d,aAIA9d,EAAAod,UAEAkV,EAAAlV,QAAAhqD,MAAA4sC,EAAAod,QACAkV,EAAAjV,UAAAjqD,MAAA4sC,EAAAqd,UACArd,EAAA6Y,OAAA7mC,IAAAsgD,EAAAjV,UAAAjqD,QAAA,IAIA4sC,EAAAsd,YAEAgV,EAAAhV,UAAAlqD,MAAA4sC,EAAAsd,UACAgV,EAAA9U,YAAApqD,MAAAE,KAAA0sC,EAAAwd,aACAxd,EAAA6Y,OAAA7mC,GAAAsgD,EAAA9U,YAAApqD,MAAAutB,UAIAqf,EAAAyd,kBAEA6U,EAAA7U,gBAAArqD,MAAA4sC,EAAAyd,gBACA6U,EAAA5U,kBAAAtqD,MAAA4sC,EAAA0d,kBACA4U,EAAA3U,iBAAAvqD,MAAA4sC,EAAA2d,mBAIA3d,EAAAqb,QAAAlf,KAGAm2B,EAAAvU,gBAAA3qD,MAAA4sC,EAAA+d,iBAuIA,MAAA,CACA09C,mBA/oBA,SAAAnpC,EAAAl2B,GAEAk2B,EAAAoH,SAAAtmE,MAAAE,KAAA8oC,EAAA6Z,OAEA7Z,EAAAs/D,OAEAppC,EAAAkH,QAAApmE,MAAAgpC,EAAAvD,KACAy5B,EAAAmH,OAAArmE,MAAAgpC,EAAAtD,KAEAsD,EAAA8kD,YAEA5uB,EAAAiH,WAAAnmE,MAAAgpC,EAAAu/D,UAqoBAC,wBA/nBA,SAAAtpC,EAAAtyB,EAAA7D,EAAAz6B,EAAAV,GAEAg/B,EAAAwe,oBAEA68C,EAAA/oC,EAAAtyB,GAEAA,EAAA67D,uBAEAR,EAAA/oC,EAAAtyB,GAqWA,SAAAsyB,EAAAtyB,GAEAA,EAAA8d,cAEAwU,EAAAxU,YAAA1qD,MAAA4sC,EAAA8d,aAxWAg+C,CAAAxpC,EAAAtyB,IAEAA,EAAA+7D,oBAEAV,EAAA/oC,EAAAtyB,GA+YA,SAAAsyB,EAAAtyB,GAEAA,EAAAge,cAEAsU,EAAAtU,YAAA5qD,MAAA4sC,EAAAge,aAIAhe,EAAA8d,cAEAwU,EAAAxU,YAAA1qD,MAAA4sC,EAAA8d,aAIA9d,EAAAod,UAEAkV,EAAAlV,QAAAhqD,MAAA4sC,EAAAod,QACAkV,EAAAjV,UAAAjqD,MAAA4sC,EAAAqd,UACArd,EAAA6Y,OAAA7mC,IAAAsgD,EAAAjV,UAAAjqD,QAAA,IAIA4sC,EAAAsd,YAEAgV,EAAAhV,UAAAlqD,MAAA4sC,EAAAsd,UACAgV,EAAA9U,YAAApqD,MAAAE,KAAA0sC,EAAAwd,aACAxd,EAAA6Y,OAAA7mC,GAAAsgD,EAAA9U,YAAApqD,MAAAutB,UAIAqf,EAAAyd,kBAEA6U,EAAA7U,gBAAArqD,MAAA4sC,EAAAyd,gBACA6U,EAAA5U,kBAAAtqD,MAAA4sC,EAAA0d,kBACA4U,EAAA3U,iBAAAvqD,MAAA4sC,EAAA2d,kBAhbAq+C,CAAA1pC,EAAAtyB,IAEAA,EAAAi8D,qBAEAZ,EAAA/oC,EAAAtyB,GAqWA,SAAAsyB,EAAAtyB,GAEAsyB,EAAA3V,SAAAvpD,MAAAE,KAAA0sC,EAAA2c,UACA2V,EAAA1V,UAAAxpD,MAAAuC,KAAAsD,IAAA+mC,EAAA4c,UAAA,MAEA5c,EAAA8d,cAEAwU,EAAAxU,YAAA1qD,MAAA4sC,EAAA8d,aAIA9d,EAAAod,UAEAkV,EAAAlV,QAAAhqD,MAAA4sC,EAAAod,QACAkV,EAAAjV,UAAAjqD,MAAA4sC,EAAAqd,UACArd,EAAA6Y,OAAA7mC,IAAAsgD,EAAAjV,UAAAjqD,QAAA,IAIA4sC,EAAAsd,YAEAgV,EAAAhV,UAAAlqD,MAAA4sC,EAAAsd,UACAgV,EAAA9U,YAAApqD,MAAAE,KAAA0sC,EAAAwd,aACAxd,EAAA6Y,OAAA7mC,GAAAsgD,EAAA9U,YAAApqD,MAAAutB,UAIAqf,EAAAyd,kBAEA6U,EAAA7U,gBAAArqD,MAAA4sC,EAAAyd,gBACA6U,EAAA5U,kBAAAtqD,MAAA4sC,EAAA0d,kBACA4U,EAAA3U,iBAAAvqD,MAAA4sC,EAAA2d,kBAnYAu+C,CAAA5pC,EAAAtyB,IAEAA,EAAA2gD,wBAEA0a,EAAA/oC,EAAAtyB,EAAA7D,GAEA6D,EAAAm8D,uBAmeA,SAAA7pC,EAAAtyB,EAAA7D,GAEAq/D,EAAAlpC,EAAAtyB,EAAA7D,GAEAm2B,EAAA/W,aAAAnoD,MAAA4sC,EAAAub,aAEA+W,EAAAzV,UAAAzpD,MAAA4sC,EAAA6c,UACAyV,EAAAxV,mBAAA1pD,MAAA4sC,EAAA8c,mBACA9c,EAAAwc,OAAA8V,EAAA9V,MAAAppD,MAAAE,KAAA0sC,EAAAwc,OAEAxc,EAAA+c,eAEAuV,EAAAvV,aAAA3pD,MAAA4sC,EAAA+c,cAIA/c,EAAAgd,wBAEAsV,EAAAtV,sBAAA5pD,MAAA4sC,EAAAgd,uBAIAhd,EAAAid,qBAEAqV,EAAApV,qBAAA9pD,MAAAE,KAAA0sC,EAAAkd,sBACAoV,EAAArV,mBAAA7pD,MAAA4sC,EAAAid,mBAEAjd,EAAA6Y,OAAA7mC,GAEAsgD,EAAApV,qBAAA9pD,MAAAutB,UAMA2xC,EAAAuf,aAAAz+E,MAAA4sC,EAAA6xC,aApgBAuqB,CAAA9pC,EAAAtyB,EAAA7D,GAIAq/D,EAAAlpC,EAAAtyB,EAAA7D,IAIA6D,EAAAq8D,sBAEAhB,EAAA/oC,EAAAtyB,GA8fA,SAAAsyB,EAAAtyB,GAEAA,EAAAmd,SAEAmV,EAAAnV,OAAA/pD,MAAA4sC,EAAAmd,QAIAnd,EAAAod,UAEAkV,EAAAlV,QAAAhqD,MAAA4sC,EAAAod,QACAkV,EAAAjV,UAAAjqD,MAAA4sC,EAAAqd,UACArd,EAAA6Y,OAAA7mC,IAAAsgD,EAAAjV,UAAAjqD,QAAA,IAIA4sC,EAAAsd,YAEAgV,EAAAhV,UAAAlqD,MAAA4sC,EAAAsd,UACAgV,EAAA9U,YAAApqD,MAAAE,KAAA0sC,EAAAwd,aACAxd,EAAA6Y,OAAA7mC,GAAAsgD,EAAA9U,YAAApqD,MAAAutB,UAIAqf,EAAAyd,kBAEA6U,EAAA7U,gBAAArqD,MAAA4sC,EAAAyd,gBACA6U,EAAA5U,kBAAAtqD,MAAA4sC,EAAA0d,kBACA4U,EAAA3U,iBAAAvqD,MAAA4sC,EAAA2d,kBAzhBA2+C,CAAAhqC,EAAAtyB,IAEAA,EAAA6mD,qBAEAwU,EAAA/oC,EAAAtyB,GA2hBA,SAAAsyB,EAAAtyB,GAEAA,EAAAyd,kBAEA6U,EAAA7U,gBAAArqD,MAAA4sC,EAAAyd,gBACA6U,EAAA5U,kBAAAtqD,MAAA4sC,EAAA0d,kBACA4U,EAAA3U,iBAAAvqD,MAAA4sC,EAAA2d,kBAhiBA4+C,CAAAjqC,EAAAtyB,IAEAA,EAAA8mD,wBAEAuU,EAAA/oC,EAAAtyB,GAkiBA,SAAAsyB,EAAAtyB,GAEAA,EAAAyd,kBAEA6U,EAAA7U,gBAAArqD,MAAA4sC,EAAAyd,gBACA6U,EAAA5U,kBAAAtqD,MAAA4sC,EAAA0d,kBACA4U,EAAA3U,iBAAAvqD,MAAA4sC,EAAA2d,kBAIA2U,EAAA0T,kBAAA5yE,MAAAE,KAAA0sC,EAAAgmC,mBACA1T,EAAA2T,aAAA7yE,MAAA4sC,EAAAimC,aACA3T,EAAA4T,YAAA9yE,MAAA4sC,EAAAkmC,YA7iBAs2B,CAAAlqC,EAAAtyB,IAEAA,EAAAy8D,sBAEApB,EAAA/oC,EAAAtyB,GA6iBA,SAAAsyB,EAAAtyB,GAEAA,EAAAod,UAEAkV,EAAAlV,QAAAhqD,MAAA4sC,EAAAod,QACAkV,EAAAjV,UAAAjqD,MAAA4sC,EAAAqd,UACArd,EAAA6Y,OAAA7mC,IAAAsgD,EAAAjV,UAAAjqD,QAAA,IAIA4sC,EAAAsd,YAEAgV,EAAAhV,UAAAlqD,MAAA4sC,EAAAsd,UACAgV,EAAA9U,YAAApqD,MAAAE,KAAA0sC,EAAAwd,aACAxd,EAAA6Y,OAAA7mC,GAAAsgD,EAAA9U,YAAApqD,MAAAutB,UAIAqf,EAAAyd,kBAEA6U,EAAA7U,gBAAArqD,MAAA4sC,EAAAyd,gBACA6U,EAAA5U,kBAAAtqD,MAAA4sC,EAAA0d,kBACA4U,EAAA3U,iBAAAvqD,MAAA4sC,EAAA2d,kBAlkBA++C,CAAApqC,EAAAtyB,IAEAA,EAAA28D,qBAsMA,SAAArqC,EAAAtyB,GAEAsyB,EAAAiG,QAAAnlE,MAAAE,KAAA0sC,EAAAiW,OACAqc,EAAAvZ,QAAA3lD,MAAA4sC,EAAA+Y,QAvMA6jD,CAAAtqC,EAAAtyB,GAEAA,EAAA68D,sBAyMA,SAAAvqC,EAAAtyB,GAEAsyB,EAAAnU,SAAA/qD,MAAA4sC,EAAAme,SACAmU,EAAAqT,UAAAvyE,MAAA4sC,EAAAme,SAAAne,EAAAoe,QACAkU,EAAA9mD,MAAApY,MAAA4sC,EAAAx0B,MA3MAsxF,CAAAxqC,EAAAtyB,IAIAA,EAAA+8D,iBA2MA,SAAAzqC,EAAAtyB,EAAAt+B,EAAAV,GAuBA,IAAAs6F,EArBAhpC,EAAAiG,QAAAnlE,MAAAE,KAAA0sC,EAAAiW,OACAqc,EAAAvZ,QAAA3lD,MAAA4sC,EAAA+Y,QACAuZ,EAAAtvB,KAAA5vC,MAAA4sC,EAAAgD,KAAAthC,EACA4wD,EAAA9mD,MAAApY,MAAA,GAAA4N,EAEAg/B,EAAA3wC,MAEAijE,EAAAjjE,IAAA+D,MAAA4sC,EAAA3wC,KAIA2wC,EAAAob,WAEAkX,EAAAlX,SAAAhoD,MAAA4sC,EAAAob,UAUApb,EAAA3wC,IAEAisG,EAAAt7D,EAAA3wC,IAEA2wC,EAAAob,WAEAkgD,EAAAt7D,EAAAob,eAIApnD,IAAAsnG,KAEA,IAAAA,EAAAnzE,kBAEAmzE,EAAAxxE,eAIAwoC,EAAAkG,YAAAplE,MAAAE,KAAAgoG,EAAAl2E,SApPA43E,CAAA1qC,EAAAtyB,EAAAt+B,EAAAV,GAEAg/B,EAAAi9D,iBAwPA,SAAA3qC,EAAAtyB,GAsBA,IAAAs7D,EApBAhpC,EAAAiG,QAAAnlE,MAAAE,KAAA0sC,EAAAiW,OACAqc,EAAAvZ,QAAA3lD,MAAA4sC,EAAA+Y,QACAuZ,EAAAjsC,SAAAjzB,MAAA4sC,EAAA3Z,SAEA2Z,EAAA3wC,MAEAijE,EAAAjjE,IAAA+D,MAAA4sC,EAAA3wC,KAIA2wC,EAAAob,WAEAkX,EAAAlX,SAAAhoD,MAAA4sC,EAAAob,UAUApb,EAAA3wC,IAEAisG,EAAAt7D,EAAA3wC,IAEA2wC,EAAAob,WAEAkgD,EAAAt7D,EAAAob,eAIApnD,IAAAsnG,KAEA,IAAAA,EAAAnzE,kBAEAmzE,EAAAxxE,eAIAwoC,EAAAkG,YAAAplE,MAAAE,KAAAgoG,EAAAl2E,SAhSA83E,CAAA5qC,EAAAtyB,GAEAA,EAAAm9D,kBAEA7qC,EAAArc,MAAA7iD,MAAAE,KAAA0sC,EAAAiW,OACAqc,EAAAvZ,QAAA3lD,MAAA4sC,EAAA+Y,SAEA/Y,EAAAk0B,mBAEAl0B,EAAAwzB,oBAAA,KA4jBA,SAAA4pC,GAAAr9D,GAIA,IAAAvkB,OAAAxnB,KAFA+rC,EAAAA,GAAA,IAEAt8B,OAAAs8B,EAAAt8B,OAAA/R,SAAAs1B,gBAAA,+BAAA,UACAq2E,OAAArpG,IAAA+rC,EAAAh8B,QAAAg8B,EAAAh8B,QAAA,KAEAu5F,OAAAtpG,IAAA+rC,EAAAre,OAAAqe,EAAAre,MACA67E,OAAAvpG,IAAA+rC,EAAA4wB,OAAA5wB,EAAA4wB,MACA6sC,OAAAxpG,IAAA+rC,EAAAm2B,SAAAn2B,EAAAm2B,QACAunC,OAAAzpG,IAAA+rC,EAAA25D,WAAA35D,EAAA25D,UACAgE,OAAA1pG,IAAA+rC,EAAA6a,oBAAA7a,EAAA6a,mBACA+iD,OAAA3pG,IAAA+rC,EAAA69D,uBAAA79D,EAAA69D,sBACAC,OAAA7pG,IAAA+rC,EAAA+9D,gBAAA/9D,EAAA+9D,gBAAA,UACAC,OAAA/pG,IAAA+rC,EAAAi+D,8BAAAj+D,EAAAi+D,6BAEAC,EAAA,KACAC,EAAA,KAIAh3F,KAAAi3F,WAAA3iF,EAGAtU,KAAAi3E,MAAA,CAMAC,mBAAA,GAKAl3E,KAAAqgE,WAAA,EACArgE,KAAAsgE,gBAAA,EACAtgE,KAAAugE,gBAAA,EACAvgE,KAAAwgE,kBAAA,EAIAxgE,KAAAk3F,aAAA,EAIAl3F,KAAAgzC,eAAA,GACAhzC,KAAAymE,sBAAA,EAIAzmE,KAAAgwC,YAAA,EACAhwC,KAAAs2E,eAAA3jE,GAIA3S,KAAAg2E,yBAAA,EAIAh2E,KAAA0gE,YAAAzzD,EACAjN,KAAAm3F,oBAAA,EAIAn3F,KAAAi6E,gBAAA,EACAj6E,KAAAk6E,gBAAA,EAIA,IAAAkd,EAAAp3F,KAEAq3F,GAAA,EAIAC,EAAA,KAEAC,EAAA,EACAC,EAAA,EACAC,EAAA,KACAC,EAAA,KACAC,GAAA,EAEAC,EAAA,KACAC,EAAA,KAEAC,EAAA,IAAAt2E,GACAu2E,EAAA,IAAAv2E,GACAw2E,EAAA,KAIAC,EAAA3jF,EAAAza,MACAq+F,EAAA5jF,EAAAxa,OAEAq+F,EAAA,EACAC,EAAA,KACAC,EAAA,KAEAjY,EAAA,IAAA5+D,GAAA,EAAA,EAAAy2E,EAAAC,GACAI,EAAA,IAAA92E,GAAA,EAAA,EAAAy2E,EAAAC,GACAK,GAAA,EAIAtY,EAAA,IAAAvwB,GAIA8oC,EAAA,IAAAlyB,GACAmyB,GAAA,EACAC,GAAA,EAIAC,EAAA,IAAAnsE,GAEAosE,EAAA,IAAAvvE,GAEAwvE,EAAA,CAAA7jE,WAAA,KAAAE,IAAA,KAAAD,YAAA,KAAAE,iBAAA,KAAAqE,SAAA,GAEA,SAAAs/D,IAEA,OAAA,OAAArB,EAAAU,EAAA,EAMA,IAiFApsC,EAAA8I,EAAAsK,EAAAsF,EACA7R,EAAA5vC,EAAA/lB,EAAA86B,EAAAqnC,EACA25B,EAAA/gE,EAAAghE,GAAAxZ,GAEAxqD,GAAAikE,GAAAC,GAAAC,GAEAtQ,GAAA9nB,GAvFA6nB,GAAAuN,EAEA,SAAAx5F,GAAAy8F,EAAAC,GAEA,IAAA,IAAA7yG,EAAA,EAAAA,EAAA4yG,EAAAjyG,OAAAX,IAAA,CAEA,IACAqW,EAAAyX,EAAA3X,WADAy8F,EAAA5yG,GACA6yG,GACA,GAAA,OAAAx8F,EAAA,OAAAA,EAIA,OAAA,KAIA,IAEA,IAAAw8F,GAAA,CACA7+E,MAAA47E,EACA3sC,MAAA4sC,EACArnC,QAAAsnC,EACA9D,UAAA+D,EACA7iD,mBAAA8iD,EACAE,sBAAAD,EACAG,gBAAAD,EACAG,6BAAAD,GAQA,GAHAviF,EAAA3V,iBAAA,mBAAA26F,IAAA,GACAhlF,EAAA3V,iBAAA,uBAAA46F,IAAA,GAEA,OAAA3Q,GAAA,CAEA,IAAAwQ,GAAA,CAAA,SAAA,QAAA,sBAUA,IARA,IAAAhC,EAAAoC,kBAEAJ,GAAAK,QAMA,QAFA7Q,GAAAjsF,GAAAy8F,GAAAC,KAIA,MAAA18F,GAAAy8F,IAEA,IAAAtyG,MAAA,+DAIA,IAAAA,MAAA,sCAUAgG,IAAA87F,GAAAzjB,2BAEAyjB,GAAAzjB,yBAAA,WAEA,MAAA,CAAAu0B,SAAA,EAAAC,SAAA,EAAA9gG,UAAA,KAMA,MAAAuI,GAGA,MADAlK,QAAAkK,MAAA,wBAAAA,EAAA4H,SACA5H,EAYA,SAAAw4F,KAEA7tC,EAAA,IAAAic,GAAA4gB,KAIA,KAFA/zB,EAAA,IAAAmQ,GAAA4jB,GAAA78B,EAAAlzB,IAEAi8B,WAEA/I,EAAAhsD,IAAA,uBACAgsD,EAAAhsD,IAAA,qBACAgsD,EAAAhsD,IAAA,0BACAgsD,EAAAhsD,IAAA,iCACAgsD,EAAAhsD,IAAA,4BACAgsD,EAAAhsD,IAAA,0BACAgsD,EAAAhsD,IAAA,2BACAgsD,EAAAhsD,IAAA,2BAIAgsD,EAAAhsD,IAAA,4BAEA8oF,GAAA,IAAA+F,GAAAhG,GAAA78B,EAAA8I,IAEAsK,EAAA,IAAAukB,GAAAkF,GAAA78B,EAAA8I,IACAjzC,QAAAm2E,EAAA3rG,KAAAksG,GAAAt/E,eAAAm/E,GAAAzpG,SACAywE,EAAAr9C,SAAAg2E,EAAA1rG,KAAAg0F,GAAApnE,eAAAm/E,GAAAzpG,SAEA+1E,EAAA,IAAAuE,GAAA4f,IACAh2B,EAAA,IAAAioB,GACA73D,EAAA,IAAA2lE,GAAAC,GAAA78B,EAAAoT,EAAAvM,EAAAiC,EAAAg0B,GAAApkB,GACAxnE,EAAA,IAAA23D,GAAAg0B,GAAA/zB,GACAkM,GAAA,IAAAH,GAAAgoB,GAAA78B,EAAA9uD,EAAA43D,GACA98B,EAAA,IAAAmwC,GAAA0gB,GAAA3rF,EAAAwnE,EAAA1D,IACA3B,EAAA,IAAAgL,GAAAwe,GAAA7wD,EAAA96B,EAAAwnE,GACAw0B,GAAA,IAAAxvB,GAAAmf,IACAmQ,EAAA,IAAA5gB,GAAAif,EAAArrC,EAAA8I,EAAAkM,IACA/oC,EAAA,IAAAk8D,GAAAthC,GACAomC,GAAA,IAAArd,GACA6D,GAAA,IAAAD,GAEAvqD,GAAA,IAAAkqC,GAAAk4B,EAAAj4B,EAAAC,EAAAo3B,GAEA0C,GAAA,IAAA10B,GAAAokB,GAAA78B,EAAA0Y,EAAA5P,GACAskC,GAAA,IAAArwB,GAAA8f,GAAA78B,EAAA0Y,EAAA5P,GAEA4P,EAAA2E,SAAA2vB,EAAA3vB,SAEAguB,EAAAviC,aAAAA,EACAuiC,EAAArrC,WAAAA,EACAqrC,EAAAxkC,WAAAA,EACAwkC,EAAA4B,YAAAA,GACA5B,EAAAj4B,MAAAA,EACAi4B,EAAA3yB,KAAAA,EAIAm1B,KAIA,IAAAhrC,GAAA,IAAAmhC,GAAAqH,EAAAxO,IAEA5oF,KAAA4uD,GAAAA,GAIA,IAAA2rB,GAAA,IAAAwF,GAAAqX,EAAAh4B,EAAAvK,EAAA6Q,gBAmRA,SAAA4zB,GAAAnlF,GAEAA,EAAA3V,iBAEAtH,QAAAwK,IAAA,sCAEA21F,GAAA,EAIA,SAAAkC,KAEAriG,QAAAwK,IAAA,0CAEA21F,GAAA,EAEAuC,KAIA,SAAAC,GAAA1lF,GAEA,IAAA2kB,EAAA3kB,EAAAvrB,OAEAkwC,EAAAl6B,oBAAA,UAAAi7F,IAQA,SAAA/gE,GAEAghE,GAAAhhE,GAEA85B,EAAA77B,OAAA+B,GAVAihE,CAAAjhE,GAeA,SAAAghE,GAAAhhE,GAEA,IAAAkhE,EAAApnC,EAAA7yD,IAAA+4B,GAAA+oC,QAEA/oC,EAAA+oC,aAAA/0E,OAEAA,IAAAktG,GAEAjB,EAAAne,eAAAof,GAlUAh6F,KAAAu6E,UAAAA,GAIAv6E,KAAArD,WAAA,WAEA,OAAAisF,IAIA5oF,KAAAmyF,qBAAA,WAEA,OAAAvJ,GAAAuJ,wBAIAnyF,KAAAi6F,iBAAA,WAEA,IAAA3nG,EAAAy5D,EAAAhsD,IAAA,sBACAzN,GAAAA,EAAA4nG,eAIAl6F,KAAAm6F,oBAAA,WAEA,IAAA7nG,EAAAy5D,EAAAhsD,IAAA,sBACAzN,GAAAA,EAAA8nG,kBAIAp6F,KAAAq6F,cAAA,WAEA,OAAAlC,GAIAn4F,KAAAs6F,cAAA,SAAApuG,QAEAY,IAAAZ,IAEAisG,EAAAjsG,EAEA8T,KAAAglB,QAAAizE,EAAAC,GAAA,KAIAl4F,KAAAq8B,QAAA,SAAAzzC,GAUA,YARAkE,IAAAlE,IAEAsO,QAAAC,KAAA,mEAEAvO,EAAA,IAAA6uB,IAIA7uB,EAAA4uB,IAAAygF,EAAAC,IAIAl4F,KAAAglB,QAAA,SAAAnrB,EAAAC,EAAAygG,GAEA3rC,GAAAuiC,aAEAj6F,QAAAC,KAAA,0EAKA8gG,EAAAp+F,EACAq+F,EAAAp+F,EAEAwa,EAAAza,MAAApL,KAAAC,MAAAmL,EAAAs+F,GACA7jF,EAAAxa,OAAArL,KAAAC,MAAAoL,EAAAq+F,IAEA,IAAAoC,IAEAjmF,EAAA3f,MAAAkF,MAAAA,EAAA,KACAya,EAAA3f,MAAAmF,OAAAA,EAAA,MAIAkG,KAAAw6F,YAAA,EAAA,EAAA3gG,EAAAC,KAIAkG,KAAAy6F,qBAAA,SAAA7xG,GAUA,YARAkE,IAAAlE,IAEAsO,QAAAC,KAAA,gFAEAvO,EAAA,IAAA6uB,IAIA7uB,EAAA4uB,IAAAygF,EAAAE,EAAAD,EAAAC,GAAAzpG,SAIAsR,KAAA06F,qBAAA,SAAA7gG,EAAAC,EAAAU,GAEAy9F,EAAAp+F,EACAq+F,EAAAp+F,EAEAq+F,EAAA39F,EAEA8Z,EAAAza,MAAApL,KAAAC,MAAAmL,EAAAW,GACA8Z,EAAAxa,OAAArL,KAAAC,MAAAoL,EAAAU,GAEAwF,KAAAw6F,YAAA,EAAA,EAAA3gG,EAAAC,IAIAkG,KAAA26F,mBAAA,SAAA/xG,GAUA,YARAkE,IAAAlE,IAEAsO,QAAAC,KAAA,8EAEAvO,EAAA,IAAA44B,IAIA54B,EAAAwD,KAAA0rG,IAIA93F,KAAAujF,YAAA,SAAA36F,GAEA,OAAAA,EAAAwD,KAAAg0F,IAIApgF,KAAAw6F,YAAA,SAAAruG,EAAAsB,EAAAoM,EAAAC,GAEA3N,EAAAq3B,UAEA48D,EAAA5oE,IAAArrB,EAAAA,EAAAA,EAAAsB,EAAAtB,EAAAs1B,EAAAt1B,EAAAqsB,GAIA4nE,EAAA5oE,IAAArrB,EAAAsB,EAAAoM,EAAAC,GAIAqlE,EAAAr9C,SAAAg2E,EAAA1rG,KAAAg0F,GAAApnE,eAAAm/E,GAAAzpG,UAIAsR,KAAA46F,WAAA,SAAAhyG,GAEA,OAAAA,EAAAwD,KAAAksG,IAIAt4F,KAAA66F,WAAA,SAAA1uG,EAAAsB,EAAAoM,EAAAC,GAEA3N,EAAAq3B,UAEA80E,EAAA9gF,IAAArrB,EAAAA,EAAAA,EAAAsB,EAAAtB,EAAAs1B,EAAAt1B,EAAAqsB,GAIA8/E,EAAA9gF,IAAArrB,EAAAsB,EAAAoM,EAAAC,GAIAqlE,EAAAv9C,QAAAm2E,EAAA3rG,KAAAksG,GAAAt/E,eAAAm/E,GAAAzpG,UAIAsR,KAAA86F,eAAA,WAEA,OAAAvC,GAIAv4F,KAAA+iF,eAAA,SAAAgY,GAEA57B,EAAA4jB,eAAAwV,EAAAwC,IAIA/6F,KAAAg7F,cAAA,SAAAC,GAEA7C,EAAA6C,GAIAj7F,KAAAk7F,mBAAA,SAAAD,GAEA5C,EAAA4C,GAMAj7F,KAAA4/D,cAAA,WAEA,OAAA5qC,GAAA4qC,iBAIA5/D,KAAA6/D,cAAA,WAEA7qC,GAAA6qC,cAAA4oB,MAAAzzD,GAAA3rC,YAIA2W,KAAA8/D,cAAA,WAEA,OAAA9qC,GAAA8qC,iBAIA9/D,KAAA+/D,cAAA,WAEA/qC,GAAA+qC,cAAA0oB,MAAAzzD,GAAA3rC,YAIA2W,KAAAgH,MAAA,SAAA+nC,EAAA0a,EAAAuF,GAEA,IAAAmsC,EAAA,QAEAruG,IAAAiiD,GAAAA,KAAAosD,GAAA,aACAruG,IAAA28D,GAAAA,KAAA0xC,GAAA,WACAruG,IAAAkiE,GAAAA,KAAAmsC,GAAA,MAEAvS,GAAA5hF,MAAAm0F,IAIAn7F,KAAAiH,WAAA,WAEAjH,KAAAgH,OAAA,GAAA,GAAA,IAIAhH,KAAAwkF,WAAA,WAEAxkF,KAAAgH,OAAA,GAAA,GAAA,IAIAhH,KAAAqlF,aAAA,WAEArlF,KAAAgH,OAAA,GAAA,GAAA,IAMAhH,KAAAY,QAAA,WAEA0T,EAAA1V,oBAAA,mBAAA06F,IAAA,GACAhlF,EAAA1V,oBAAA,uBAAA26F,IAAA,GAEAP,GAAAp4F,UACA4+E,GAAA5+E,UACAgyD,EAAAhyD,UACAw+D,EAAAx+D,UACAmgE,GAAAngE,UAEAguD,GAAAhuD,UAEAswF,GAAA7vF,QAyEArB,KAAAo7F,sBAAA,SAAArwG,EAAA82E,GAEAd,GAAAe,iBAEA,IAAA/M,EAAAnC,EAAA7yD,IAAAhV,GAEAA,EAAAswG,eAAAtmC,EAAApkC,WAAAokC,EAAApkC,SAAAi4D,GAAAtzB,gBACAvqE,EAAAuwG,aAAAvmC,EAAAtpC,SAAAspC,EAAAtpC,OAAAm9D,GAAAtzB,gBACAvqE,EAAAwwG,SAAAxmC,EAAAxxC,KAAAwxC,EAAAxxC,GAAAqlE,GAAAtzB,gBACAvqE,EAAAywG,YAAAzmC,EAAAhmB,QAAAgmB,EAAAhmB,MAAA65C,GAAAtzB,gBAEA,IAAAgO,EAAAzB,EAAA0B,gBAEAx4E,EAAAswG,eAEAzS,GAAArzB,WAAA,MAAAR,EAAApkC,UACAi4D,GAAA1hF,WAAA,MAAAnc,EAAA0wG,cAAA,OAEA16B,GAAAgB,gBAAAuB,EAAA3yC,UACAi4D,GAAAvmB,oBAAAiB,EAAA3yC,SAAA,EAAA,MAAA,EAAA,EAAA,IAIA5lC,EAAAuwG,aAEA1S,GAAArzB,WAAA,MAAAR,EAAAtpC,QACAm9D,GAAA1hF,WAAA,MAAAnc,EAAA2wG,YAAA,OAEA36B,GAAAgB,gBAAAuB,EAAA73C,QACAm9D,GAAAvmB,oBAAAiB,EAAA73C,OAAA,EAAA,MAAA,EAAA,EAAA,IAIA1gC,EAAAwwG,SAEA3S,GAAArzB,WAAA,MAAAR,EAAAxxC,IACAqlE,GAAA1hF,WAAA,MAAAnc,EAAA4wG,QAAA,OAEA56B,GAAAgB,gBAAAuB,EAAA//C,IACAqlE,GAAAvmB,oBAAAiB,EAAA//C,GAAA,EAAA,MAAA,EAAA,EAAA,IAIAx4B,EAAAywG,YAEA5S,GAAArzB,WAAA,MAAAR,EAAAhmB,OACA65C,GAAA1hF,WAAA,MAAAnc,EAAA6wG,WAAA,OAEA76B,GAAAgB,gBAAAuB,EAAAv0B,OACA65C,GAAAvmB,oBAAAiB,EAAAv0B,MAAA,EAAA,MAAA,EAAA,EAAA,IAIAgyB,GAAAoB,0BAEAymB,GAAAhkB,WAAA,EAAA,EAAA75E,EAAAwtC,OAEAxtC,EAAAwtC,MAAA,GAIAv4B,KAAAqhF,mBAAA,SAAA/2D,EAAAokC,EAAA91B,EAAAE,EAAA/tC,EAAAgwD,GAEA,OAAA2T,IAAAA,EAAAmqC,GAEA,IAAA5Q,EAAAl9F,EAAA0tC,QAAA1tC,EAAA4/B,YAAA5M,cAAA,EAEA8jD,EAAAg6B,GAAAvxE,EAAAokC,EAAA51B,EAAA/tC,GAEAo0E,EAAA6oB,YAAAlvD,EAAAmvD,GAIA,IAAA59E,EAAAuuB,EAAAvuB,MACAsmB,EAAAiI,EAAA37B,WAAA0zB,SAIA,GAAA,OAAAtmB,GAEA,QAAAvd,IAAA6jC,GAAA,IAAAA,EAAA4H,MAAA,YAEA,GAAA,IAAAluB,EAAAkuB,MAEA,OAMA,IAiBAtd,EAjBA6gF,EAAA,GAEA,IAAAhjE,EAAAyb,YAEAlqC,EAAA0tB,EAAA6wC,sBAAAhwC,GACAkjE,EAAA,IAIAhjE,EAAA8b,cAAA9b,EAAAqe,eAEA8hD,GAAAn0F,OAAA/Z,EAAA6tC,EAAAE,EAAA+oC,GAIAd,GAAAp5D,MAAA5c,EAAA+tC,EAAA+oC,EAAAjpC,EAAAvuB,GAGA,IAAA9B,EAAA2wF,GAEA,OAAA7uF,IAEA4Q,EAAAhe,EAAA8C,IAAAsK,IAEA9B,EAAA4wF,IACAr8C,SAAA7hC,IAMA,IAAA8gF,EAAA,OAAA1xF,EAAAA,EAAAkuB,MAAA5H,EAAA4H,MAEAyjE,EAAApjE,EAAA+jB,UAAAxa,MAAA25D,EACAG,EAAArjE,EAAA+jB,UAAApkB,MAAAujE,EAEA9xC,EAAA,OAAAjP,EAAAA,EAAA5Y,MAAA25D,EAAA,EACAhxC,EAAA,OAAA/P,EAAAA,EAAAxiB,MAAAujE,EAAAx0F,SAEA40F,EAAAztG,KAAAsD,IAAAiqG,EAAAhyC,GACAmyC,EAAA1tG,KAAAqM,IAAAihG,EAAAC,EAAAC,EAAAjyC,EAAAc,GAAA,EAEAsxC,EAAA3tG,KAAAsD,IAAA,EAAAoqG,EAAAD,EAAA,GAEA,GAAA,IAAAE,EAAA,CAIA,GAAArxG,EAAA0tC,QAEA,IAAAK,EAAAyb,WAEA4qB,EAAA+oB,aAAApvD,EAAA0b,mBAAAskD,KACAvwF,EAAAo8D,QAAA,IAIAp8D,EAAAo8D,QAAA,QAIA,GAAA55E,EAAA2tC,OAAA,CAEA,IAAAyvD,EAAArvD,EAAAke,eAEAlqD,IAAAq7F,IAAAA,EAAA,GAEAhpB,EAAA+oB,aAAAC,EAAA2Q,KAIAvwF,EAAAo8D,QAFA55E,EAAAsxG,eAEA,EAEAtxG,EAAAuxG,WAEA,EAIA,QAIAvxG,EAAA4tC,SAEApwB,EAAAo8D,QAAA,GAEA55E,EAAAwxG,UAEAh0F,EAAAo8D,QAAA,GAIA,GAAA55E,EAAAutC,gBAEA/vB,EAAAs8D,gBAAAjsC,EAAAsjE,EAAAE,EAAArxG,EAAAwtC,YAEA,GAAAK,EAAAyqC,0BAAA,CAEA,IAAAiG,EAAA76E,KAAAqM,IAAA89B,EAAA0wC,cAAA1wC,EAAA+qC,mBAEAp7D,EAAAs8D,gBAAAjsC,EAAAsjE,EAAAE,EAAA9yB,QAIA/gE,EAAA1I,OAAAq8F,EAAAE,KAQAp8F,KAAAw8F,QAAA,SAAA9tC,EAAApkC,IAEA0sE,EAAAxX,GAAAz/E,IAAA2uD,EAAApkC,IACAi9C,OAEA7Y,EAAAj3B,SAAA,SAAA1sC,GAEAA,EAAA+rC,UAEAkgE,EAAA5X,UAAAr0F,GAEAA,EAAA2pC,YAEAsiE,EAAA3X,WAAAt0F,MAQAisG,EAAA7X,YAAA70D,GAEA,IAAAmyE,EAAA,IAAAznC,QAEAtG,EAAAj3B,SAAA,SAAA1sC,GAEA,IAAA+tC,EAAA/tC,EAAA+tC,SAEA,GAAAA,EAEA,GAAA5tC,MAAA6B,QAAA+rC,GAEA,IAAA,IAAAtyC,EAAA,EAAAA,EAAAsyC,EAAA3xC,OAAAX,IAAA,CAEA,IAAAk2G,EAAA5jE,EAAAtyC,IAEA,IAAAi2G,EAAA/c,IAAAgd,KAEAC,GAAAD,EAAAhuC,EAAA3jE,GACA0xG,EAAAjlF,IAAAklF,SAMA,IAAAD,EAAA/c,IAAA5mD,KAEA6jE,GAAA7jE,EAAA41B,EAAA3jE,GACA0xG,EAAAjlF,IAAAshB,OAYA,IAAA+6D,GAAA,KASA,IAAA3C,GAAA,IAAA78B,GAwRA,SAAAuoC,GAAA58B,EAAAtR,EAAApkC,GAIA,IAFA,IAAA6K,GAAA,IAAAu5B,EAAAl1B,QAAAk1B,EAAAv5B,iBAAA,KAEA3uC,EAAA,EAAAyJ,EAAA+vE,EAAA74E,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAA+0F,EAAAvb,EAAAx5E,GAEAuE,EAAAwwF,EAAAxwF,OACA6tC,EAAA2iD,EAAA3iD,SACAE,EAAA,OAAA3D,EAAAomD,EAAAziD,SAAA3D,EACA4lB,EAAAwgC,EAAAxgC,MAEA,GAAAzwB,EAAAuyE,cAAA,CAEAhF,EAAAvtE,EAIA,IAFA,IAAAyxD,EAAAzxD,EAAAyxD,QAEAphD,EAAA,EAAA8jB,EAAAs9B,EAAA50F,OAAAwzC,EAAA8jB,EAAA9jB,IAAA,CAEA,IAAAmiE,EAAA/gB,EAAAphD,GAEA5vC,EAAAmoC,OAAAjmC,KAAA6vG,EAAA5pE,UAEAisC,EAAAr9C,SAAAg2E,EAAA1rG,KAAA0wG,EAAAh7E,WAEAk1E,EAAA7X,YAAA2d,GAEA1a,GAAAr3F,EAAA2jE,EAAAouC,EAAAlkE,EAAAE,EAAAiiB,UAQA88C,EAAA,KAEAzV,GAAAr3F,EAAA2jE,EAAApkC,EAAAsO,EAAAE,EAAAiiB,IAQA,SAAAqnC,GAAAr3F,EAAA2jE,EAAApkC,EAAAsO,EAAAE,EAAAiiB,GAQA,GANAhwD,EAAA0qC,eAAA2hE,EAAA1oC,EAAApkC,EAAAsO,EAAAE,EAAAiiB,GACAi8C,EAAAxX,GAAAz/E,IAAA2uD,EAAAmpC,GAAAvtE,GAEAv/B,EAAAspC,gBAAA5X,iBAAA6N,EAAAC,mBAAAx/B,EAAA4/B,aACA5/B,EAAAupC,aAAA3V,gBAAA5zB,EAAAspC,iBAEAtpC,EAAAgyG,wBAAA,CAEA,IAAAl7B,EAAAg6B,GAAAvxE,EAAAokC,EAAA51B,EAAA/tC,GAEAo0E,EAAA6oB,YAAAlvD,GAEAioC,GAAAyB,QAhnBA,SAAAz3E,EAAA82E,GAEA92E,EAAA8U,OAAA,SAAA9U,GAEAqsG,EAAAgE,sBAAArwG,EAAA82E,KA8mBAm7B,CAAAjyG,EAAA82E,QAIAu1B,EAAA/V,mBAAA/2D,EAAAokC,EAAA91B,EAAAE,EAAA/tC,EAAAgwD,GAIAhwD,EAAA2qC,cAAA0hE,EAAA1oC,EAAApkC,EAAAsO,EAAAE,EAAAiiB,GACAi8C,EAAAxX,GAAAz/E,IAAA2uD,EAAAmpC,GAAAvtE,GAIA,SAAAqyE,GAAA7jE,EAAA41B,EAAA3jE,IAEA,IAAA2jE,EAAAl1B,UAAAk1B,EAAAmqC,GAEA,IAAAoE,EAAArqC,EAAA7yD,IAAA+4B,GAEA+yB,EAAAmrC,EAAA73B,MAAAtT,OAGAqxC,EAAArxC,EAAAsT,MAAA79C,QAEAuX,EAAAkgE,EAAA1f,cAAAvgD,EAAA+yB,EAAAsT,MAJA63B,EAAA73B,MAAA+f,aAIAxwB,EAAA8pC,EAAA1xB,UAAA0xB,EAAAzxB,gBAAAh8E,GACAoyG,EAAApE,EAAAve,mBAAA3hD,GAEAgpC,EAAAo7B,EAAAp7B,QACAu7B,GAAA,EAEA,QAAAtwG,IAAA+0E,EAGA/oC,EAAAn6B,iBAAA,UAAAk7F,SAEA,GAAAh4B,EAAAuR,WAAA+pB,EAGArD,GAAAhhE,QAEA,GAAAmkE,EAAAC,qBAAAA,EAEAD,EAAAC,mBAAAA,EAEAE,GAAA,MAEA,CAAA,QAAAtwG,IAAA+rC,EAAAy7C,SAGA,OAKA8oB,GAAA,EAIAA,IAEAv7B,EAAAk3B,EAAAte,eAAA5hD,EAAAskE,GAEAF,EAAAp7B,QAAAA,EACAo7B,EAAA7xC,SAAAvyB,EAAAuyB,SACA6xC,EAAA3mB,eAAAz9C,EAAAy9C,eACAx9C,EAAA+oC,QAAAA,GAIA,IAAAyB,EAAAzB,EAAA0B,gBAEA,GAAAzqC,EAAA8b,aAAA,CAEA9b,EAAAukE,yBAAA,EAEA,IAAA,IAAA72G,EAAA,EAAAA,EAAA4wG,EAAAnd,gBAAAzzF,IAEA88E,EAAA,cAAA98E,IAAA,GAEAsyC,EAAAukE,2BAQA,GAAAvkE,EAAAqe,aAAA,CAEAre,EAAAwkE,yBAAA,EAEA,IAAA,IAAAtkE,EAAA,EAAAA,EAAAo+D,EAAAld,gBAAAlhD,IAEAsqC,EAAA,cAAAtqC,IAAA,GAEAF,EAAAwkE,2BAQA,IAAAlyC,EAAA6xC,EAAA7xC,UAEAtyB,EAAAk0B,kBACAl0B,EAAAo8C,uBACA,IAAAp8C,EAAAgzB,WAEAmxC,EAAA5qB,kBAAAmmB,EAAA1xB,UACAm2B,EAAAl2B,gBAAAyxB,EAAAzxB,gBACA3b,EAAApY,eAAAwlD,EAAA5xB,SAIAq2B,EAAAhoE,YAAA6D,EAAA2gD,uBAAA/qB,EAAAz5B,YAAA,KACAgoE,EAAA/nE,IAAAw5B,EAAAx5B,IAIA+nE,EAAAM,YAqVA,SAAAzkE,GAEA,OAAAA,EAAA67D,uBAAA77D,EAAA+7D,oBAAA/7D,EAAAi8D,qBACAj8D,EAAA2gD,wBAAA3gD,EAAAm9D,kBACAn9D,EAAAk0B,mBAAA,IAAAl0B,EAAA+yB,OAzVA2xC,CAAA1kE,GACAmkE,EAAAC,mBAAAA,EAEAD,EAAAM,cAIAnyC,EAAAqH,kBAAAvmE,MAAA2/D,EAAAsT,MAAA+d,QACA9xB,EAAAsH,WAAAxmE,MAAA2/D,EAAAsT,MAAAge,MACA/xB,EAAAuH,kBAAAzmE,MAAA2/D,EAAAsT,MAAAgb,YACA/uB,EAAAyH,wBAAA3mE,MAAA2/D,EAAAsT,MAAAie,kBACAhyB,EAAAgI,WAAAlnE,MAAA2/D,EAAAsT,MAAAib,KACAhvB,EAAAoI,iBAAAtnE,MAAA2/D,EAAAsT,MAAAke,WACAjyB,EAAAgJ,eAAAloE,MAAA2/D,EAAAsT,MAAAkb,SACAjvB,EAAAuI,YAAAznE,MAAA2/D,EAAAsT,MAAA7iC,MACA8uB,EAAAwI,kBAAA1nE,MAAA2/D,EAAAsT,MAAAme,YACAlyB,EAAA6I,iBAAA/nE,MAAA2/D,EAAAsT,MAAAmb,KAEAlvB,EAAA8H,qBAAAhnE,MAAA2/D,EAAAsT,MAAAjM,qBACA9H,EAAA+H,wBAAAjnE,MAAA2/D,EAAAsT,MAAAhM,wBACA/H,EAAAqI,cAAAvnE,MAAA2/D,EAAAsT,MAAA1L,cACArI,EAAAsI,iBAAAxnE,MAAA2/D,EAAAsT,MAAAzL,iBACAtI,EAAA2I,eAAA7nE,MAAA2/D,EAAAsT,MAAApL,eACA3I,EAAA4I,kBAAA9nE,MAAA2/D,EAAAsT,MAAAnL,mBAKA,IAAAypC,EAAAR,EAAAp7B,QAAAqI,cACAwzB,EACAxtB,GAAAU,aAAA6sB,EAAAluB,IAAAnkB,GAEA6xC,EAAAS,aAAAA,EAIA,SAAA7B,GAAAvxE,EAAAokC,EAAA51B,EAAA/tC,IAEA,IAAA2jE,EAAAl1B,UAAAk1B,EAAAmqC,GAEA71E,EAAAsrE,oBAEA,IAAAp5D,EAAAw5B,EAAAx5B,IACAD,EAAA6D,EAAA2gD,uBAAA/qB,EAAAz5B,YAAA,KACA7yB,EAAA,OAAAq1F,EAAAL,EAAA9gB,eAAAmhB,EAAA11E,QAAA3f,SAEA66F,EAAArqC,EAAA7yD,IAAA+4B,GACA+yB,EAAAmrC,EAAA73B,MAAAtT,QAEA,IAAA4sC,KAEA,IAAAC,GAAApuE,IAAAstE,GASAY,EAAA7wB,SACA7uC,EAAAka,eAAAla,EAAAma,iBAAAna,EAAAoa,YACA5oB,EAAA2yE,EARA3yE,IAAAstE,GACA9+D,EAAAxvB,KAAAquF,IAaA7+D,EAAAxX,UAAA27E,EAAA3R,eAEAx+F,IAAAmwG,EAAAp7B,QAEA86B,GAAA7jE,EAAA41B,EAAA3jE,GAEA+tC,EAAA5D,KAAA+nE,EAAA/nE,MAAAA,EAEAynE,GAAA7jE,EAAA41B,EAAA3jE,GAEAkyG,EAAAhoE,cAAAA,EAEA0nE,GAAA7jE,EAAA41B,EAAA3jE,GAEAkyG,EAAAM,aAAAN,EAAAC,qBAAArxC,EAAAsT,MAAA79C,QAEAq7E,GAAA7jE,EAAA41B,EAAA3jE,QAEA+B,IAAAmwG,EAAA5qB,mBACA4qB,EAAA5qB,oBAAAmmB,EAAA1xB,WACAm2B,EAAAl2B,kBAAAyxB,EAAAzxB,gBAIAk2B,EAAA3mB,iBAAAl0E,GAEAu6F,GAAA7jE,EAAA41B,EAAA3jE,GAJA4xG,GAAA7jE,EAAA41B,EAAA3jE,IAUA4xG,GAAA7jE,EAAA41B,EAAA3jE,GACAkyG,EAAA3R,UAAAxyD,EAAAxX,SAIA,IA4NA8pC,EAAAl/D,EA5NAyxG,GAAA,EACAC,GAAA,EACAC,GAAA,EAEAh8B,EAAAo7B,EAAAp7B,QACAi8B,EAAAj8B,EAAAqI,cACA6zB,EAAAd,EAAA7xC,SAkBA,GAhBA+T,EAAA4oB,WAAAlmB,EAAAA,WAEA87B,GAAA,EACAC,GAAA,EACAC,GAAA,GAIA/kE,EAAAxvB,KAAAquF,IAEAA,EAAA7+D,EAAAxvB,GAEAs0F,GAAA,GAIAD,GAAA/F,IAAAttE,EAAA,CA2BA,GAzBAwzE,EAAA3zB,SAAAye,GAAA,mBAAAt+D,EAAAE,kBAEAqqC,EAAA0Q,wBAEAu4B,EAAA3zB,SAAAye,GAAA,gBACA,GAAAn6F,KAAAiT,IAAA4oB,EAAAsH,IAAA,GAAAnjC,KAAAgoB,MAIAmhF,IAAAttE,IAEAstE,EAAAttE,EAMAszE,GAAA,EACAC,GAAA,GAOA/kE,EAAAk0B,kBACAl0B,EAAAi8D,qBACAj8D,EAAA+7D,oBACA/7D,EAAA2gD,wBACA3gD,EAAAqb,OAAA,CAEA,IAAA6pD,EAAAF,EAAA31G,IAAA81G,oBAEAnxG,IAAAkxG,GAEAA,EAAA7zB,SAAAye,GACAgQ,EAAA1sE,sBAAA5B,EAAAK,eAMAmO,EAAAi8D,qBACAj8D,EAAA+7D,oBACA/7D,EAAA67D,uBACA77D,EAAAwe,qBACAxe,EAAA2gD,wBACA3gD,EAAAk0B,mBAEA8wC,EAAA3zB,SAAAye,GAAA,kBAAA,IAAAt+D,EAAA4zE,uBAIAplE,EAAAi8D,qBACAj8D,EAAA+7D,oBACA/7D,EAAA67D,uBACA77D,EAAAwe,qBACAxe,EAAA2gD,wBACA3gD,EAAAk0B,kBACAl0B,EAAAm9D,kBACAn9D,EAAA6b,WAEAmpD,EAAA3zB,SAAAye,GAAA,aAAAt+D,EAAAC,oBAUA,GAAAuO,EAAA6b,SAAA,CAEAmpD,EAAAptB,YAAAkY,GAAA79F,EAAA,cACA+yG,EAAAptB,YAAAkY,GAAA79F,EAAA,qBAEA,IAAA4uF,EAAA5uF,EAAA4uF,SAEA,GAAAA,EAIA,GAAA9kB,EAAAuR,oBAAA,CAEA,QAAAt5E,IAAA6sF,EAAAwkB,YAAA,CAUA,IAAAriE,EAAArtC,KAAAorB,KAAA,EAdA8/D,EAAAD,MAcAvyF,QACA20C,EAAAvnB,GAAAgC,eAAAulB,GACAA,EAAArtC,KAAAsD,IAAA+pC,EAAA,GAEA,IAAAsiE,EAAA,IAAAzlD,aAAA7c,EAAAA,EAAA,GACAsiE,EAAA5mF,IAAAmiE,EAAAykB,cAEA,IAAAD,EAAA,IAAAhvC,GAAAivC,EAAAtiE,EAAAA,EAAA1sB,GAAAR,IAEA+qE,EAAAykB,aAAAA,EACAzkB,EAAAwkB,YAAAA,EACAxkB,EAAA0kB,gBAAAviE,EAIAgiE,EAAA3zB,SAAAye,GAAA,cAAAjP,EAAAwkB,YAAAn7E,GACA86E,EAAA3zB,SAAAye,GAAA,kBAAAjP,EAAA0kB,sBAIAP,EAAAptB,YAAAkY,GAAAjP,EAAA,gBAyEA,OAjEAikB,GAAAX,EAAAtoE,gBAAA5pC,EAAA4pC,iBAEAsoE,EAAAtoE,cAAA5pC,EAAA4pC,cACAmpE,EAAA3zB,SAAAye,GAAA,gBAAA79F,EAAA4pC,gBAIAipE,IAEAE,EAAA3zB,SAAAye,GAAA,sBAAAwO,EAAAD,qBAEA8F,EAAAM,eA4DAnyC,EAjDA2yC,GAmDAtrC,kBAAApV,YAFAnxD,EAjDA2xG,EAoDAzyC,EAAAsH,WAAArV,YAAAnxD,EAEAk/D,EAAAuH,kBAAAtV,YAAAnxD,EACAk/D,EAAAyH,wBAAAxV,YAAAnxD,EACAk/D,EAAAuI,YAAAtW,YAAAnxD,EACAk/D,EAAAwI,kBAAAvW,YAAAnxD,EACAk/D,EAAAgI,WAAA/V,YAAAnxD,EACAk/D,EAAAoI,iBAAAnW,YAAAnxD,EACAk/D,EAAAgJ,eAAA/W,YAAAnxD,EACAk/D,EAAA6I,iBAAA5W,YAAAnxD,GAvDAgpC,GAAA4D,EAAA5D,KAEA8C,EAAAu8D,mBAAAwJ,EAAA7oE,GAIA8C,EAAA08D,wBAAAqJ,EAAAjlE,EAAA7D,EAAAkjE,EAAAD,QAKAprG,IAAAixG,EAAAO,QAAAP,EAAAO,MAAApyG,MAAAilE,GAAAotC,YACAzxG,IAAAixG,EAAAS,QAAAT,EAAAS,MAAAtyG,MAAAilE,GAAAstC,OAEAvuB,GAAAS,OAAAiY,GAAAqU,EAAAS,aAAAK,EAAA/6E,IAIA8V,EAAAk0B,mBAAA,IAAAl0B,EAAAwzB,qBAEA4jB,GAAAS,OAAAiY,GAAAqU,EAAAS,aAAAK,EAAA/6E,GACA8V,EAAAwzB,oBAAA,GAIAxzB,EAAAi9D,kBAEA+H,EAAA3zB,SAAAye,GAAA,SAAA79F,EAAAswB,QAMAyiF,EAAA3zB,SAAAye,GAAA,kBAAA79F,EAAAspC,iBACAypE,EAAA3zB,SAAAye,GAAA,eAAA79F,EAAAupC,cACAwpE,EAAA3zB,SAAAye,GAAA,cAAA79F,EAAA4/B,aAEAk3C,EA7wBAqvB,GAAAx8B,iBARA,SAAAp0D,GAEAsuD,GAAAuiC,cACA0C,IAAAA,GAAAvzF,KAOA,oBAAAtW,QAAAknG,GAAAv8B,WAAA3qE,QAEAgW,KAAA00D,iBAAA,SAAAvrC,GAEA0qE,GAAA1qE,EACAylC,GAAA8F,iBAAAvrC,GAEA,OAAAA,EAAA+nE,GAAA7vF,OAAA6vF,GAAA/uD,SAMAniC,KAAAH,OAAA,SAAA6uD,EAAApkC,GAEA,IAAA4jC,EAAA+R,EAgBA,QAdAnzE,IAAAzD,UAAA,KAEA6N,QAAAC,KAAA,6GACA+2D,EAAA7kE,UAAA,SAIAyD,IAAAzD,UAAA,KAEA6N,QAAAC,KAAA,iGACA8oE,EAAA52E,UAAA,SAIAyD,IAAAw9B,IAAA,IAAAA,EAAAuM,UAOA,IAAA,IAAAwgE,EAAA,CAIAt2B,GAAA0B,oBACAk1B,GAAA,EACAC,EAAA,MAIA,IAAAlpC,EAAAt5B,YAAAs5B,EAAAt3B,oBAIA,OAAA9M,EAAAnvB,QAAAmvB,EAAA8M,qBAEA,IAAAw3B,GAAA1wD,UAAA,IAAA0wD,GAAAuiC,eAEA7mE,EAAAskC,GAAAkkC,UAAAxoE,KAKA,IAAAokC,EAAAl1B,SAAAk1B,EAAAj5B,eAAA2hE,EAAA1oC,EAAApkC,EAAA4jC,GAAAupC,IAEAT,EAAAxX,GAAAz/E,IAAA2uD,EAAApkC,IACAi9C,OAEAoxB,EAAAl8E,iBAAA6N,EAAAE,iBAAAF,EAAAC,oBACA01D,EAAAnwB,wBAAA6oC,GAGAF,EAAAD,EAAAjxB,KAAAvnE,KAAAgzC,eADA0lD,EAAA14F,KAAAymE,qBACAn8C,IAEAysE,EAAAiC,GAAAj5F,IAAA2uD,EAAApkC,IACAi9C,OA+EA,SAAAm3B,EAAA3zG,EAAAu/B,EAAAywD,EAAAmc,GAEA,IAAA,IAAAnsG,EAAA0pC,QAAA,OAEA,IAAAA,EAAA1pC,EAAAmoC,OAAAjmC,KAAAq9B,EAAA4I,QAEA,GAAAuB,EAEA,GAAA1pC,EAAA4zG,QAEA5jB,EAAAhwF,EAAA8pC,iBAEA,GAAA9pC,EAAA6zG,OAEA,IAAA7zG,EAAAqqC,YAAArqC,EAAA+Z,OAAAwlB,QAEA,GAAAv/B,EAAA+rC,QAEAkgE,EAAA5X,UAAAr0F,GAEAA,EAAA2pC,YAEAsiE,EAAA3X,WAAAt0F,QAIA,GAAAA,EAAAwxG,UAEA,IAAAxxG,EAAA6pC,eAAAqrD,EAAAjvB,iBAAAjmE,GAAA,CAEAmsG,GAEA0B,EAAA1sE,sBAAAnhC,EAAA4/B,aACAhH,aAAAg1E,GAIA,IAAA//D,EAAAwmC,EAAAt6D,OAAA/Z,GACA+tC,EAAA/tC,EAAA+tC,SAEAA,EAAArE,SAEAsiE,EAAApsG,KAAAI,EAAA6tC,EAAAE,EAAAiiD,EAAA6d,EAAAn3E,EAAA,YAMA,GAAA12B,EAAAgyG,wBAEA7F,GAEA0B,EAAA1sE,sBAAAnhC,EAAA4/B,aACAhH,aAAAg1E,GAIA5B,EAAApsG,KAAAI,EAAA,KAAAA,EAAA+tC,SAAAiiD,EAAA6d,EAAAn3E,EAAA,WAEA,IAAA12B,EAAA0tC,QAAA1tC,EAAA2tC,QAAA3tC,EAAA4tC,YAEA5tC,EAAAw3D,eAIAx3D,EAAA4uF,SAAA1mF,QAAAwxE,EAAA5kE,OAAA5M,QAEAlI,EAAA4uF,SAAA70E,SACA/Z,EAAA4uF,SAAA1mF,MAAAwxE,EAAA5kE,OAAA5M,QAMAlI,EAAA6pC,eAAAqrD,EAAAlvB,iBAAAhmE,IAAA,CAEAmsG,GAEA0B,EAAA1sE,sBAAAnhC,EAAA4/B,aACAhH,aAAAg1E,GAIA,IAAAkG,EAAAz/B,EAAAt6D,OAAA/Z,GACA+zG,EAAA/zG,EAAA+tC,SAEA,GAAA5tC,MAAA6B,QAAA+xG,GAIA,IAFA,IAAA1lD,EAAAylD,EAAAzlD,OAEA5yD,EAAA,EAAAyJ,EAAAmpD,EAAAjyD,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAu0D,EAAA3B,EAAA5yD,GACAq8D,EAAAi8C,EAAA/jD,EAAA/L,eAEA6T,GAAAA,EAAApuB,SAEAsiE,EAAApsG,KAAAI,EAAA8zG,EAAAh8C,EAAAk4B,EAAA6d,EAAAn3E,EAAAs5B,QAMA+jD,EAAArqE,SAEAsiE,EAAApsG,KAAAI,EAAA8zG,EAAAC,EAAA/jB,EAAA6d,EAAAn3E,EAAA,MAUA,IAAAwS,EAAAlpC,EAAAkpC,SAEA,IAAA,IAAA+E,EAAA,EAAAC,EAAAhF,EAAA9sC,OAAA6xC,EAAAC,EAAAD,IAEA0lE,EAAAzqE,EAAA+E,GAAA1O,EAAAywD,EAAAmc,GApMAwH,CAAAhwC,EAAApkC,EAAA,EAAA8sE,EAAAF,aAEAH,EAAAvb,UAEA,IAAA4b,EAAAF,aAEAH,EAAA/qG,KAAAosG,EAAAC,IAMA,IAAAI,GAAAD,EAAA/wB,eAIA8S,GAAA16E,OAFAm3F,EAAA73B,MAAA+f,aAEAxwB,EAAApkC,GAEA0sE,EAAA7X,YAAA70D,IAEA,IAAAmuE,GAAAD,EAAA9wB,cAIA,IAAA1nE,KAAAykE,KAAA4E,WAAArpE,KAAAykE,KAAAjC,aAEA11E,IAAAohE,GAEAluD,KAAA+uD,gBAAAb,GAMAl5B,GAAAn1B,OAAAk3F,EAAAroC,EAAApkC,EAAA21C,GAIA,IAAA8+B,EAAAhI,EAAA3b,OACA4jB,EAAAjI,EAAAjlD,YAEAitD,EAAA53G,OAAA,GAAAy1G,GAAAmC,EAAArwC,EAAApkC,GACA00E,EAAA73G,OAAA,GAAAy1G,GAAAoC,EAAAtwC,EAAApkC,IAIA,IAAAokC,EAAAl1B,SAAAk1B,EAAAh5B,cAAA0hE,EAAA1oC,EAAApkC,GAIA,OAAAmtE,IAIAz0E,EAAAyrE,yBAAAgJ,GAIAz0E,EAAA0rE,8BAAA+I,IAMAt4B,EAAApK,QAAAtL,MAAAq5B,SAAA,GACA3jB,EAAApK,QAAAtL,MAAAs6B,SAAA,GACA5kB,EAAApK,QAAAhmB,MAAAg1C,SAAA,GAEA5kB,EAAAyoB,kBAAA,GAIAmP,EAAA,KACAC,EAAA,WAnHA9/F,QAAAkK,MAAA,2EAywBApB,KAAAixF,eAAA,SAAA/kG,GAEAorG,IAAAprG,GAAA,OAAAurG,GAAA7O,GAAAqE,gBAAA,MAAA/gG,GAEAorG,EAAAprG,GAIA8T,KAAAyiF,kBAAA,WAEA,OAAA8U,GAIAv3F,KAAA2iF,qBAAA,WAEA,OAAA6U,GAIAx3F,KAAA8uD,gBAAA,WAEA,OAAA2oC,GAIAz3F,KAAA+uD,gBAAA,SAAAb,EAAAs0B,EAAAE,GAEA+U,EAAAvpC,EACAqpC,EAAA/U,EACAgV,EAAA9U,EAEAx0B,QAAAphE,IAAA8lE,EAAA7yD,IAAAmuD,GAAAy8B,oBAEA3nE,EAAAurE,kBAAArgC,GAIA,IAAA4+B,EAAAwK,EACAvJ,GAAA,EAEA,GAAA7/B,EAAA,CAEA,IAAA+wC,EAAArsC,EAAA7yD,IAAAmuD,GAAAy8B,mBAEAz8B,EAAAC,yBAEA2+B,EAAAmS,EAAAzc,GAAA,GACAuL,GAAA,GAIAjB,EAFA5+B,EAAAjpC,+BAEA2tC,EAAA7yD,IAAAmuD,GAAA48B,+BAIAmU,EAIAnH,EAAA1rG,KAAA8hE,EAAApsC,UACAi2E,EAAA3rG,KAAA8hE,EAAAtsC,SACAo2E,EAAA9pC,EAAArsC,iBAIAi2E,EAAA1rG,KAAAg0F,GAAApnE,eAAAm/E,GAAAzpG,QACAqpG,EAAA3rG,KAAAksG,GAAAt/E,eAAAm/E,GAAAzpG,QACAspG,EAAAO,EAeA,GAXAb,IAAA5K,IAEAlE,GAAAqE,gBAAA,MAAAH,GACA4K,EAAA5K,GAIA3tB,EAAAr9C,SAAAg2E,GACA34B,EAAAv9C,QAAAm2E,GACA54B,EAAA4jB,eAAAiV,GAEAjK,EAAA,CAEA,IAAA7D,EAAAt3B,EAAA7yD,IAAAmuD,EAAAnsC,SACA6mE,GAAAsE,qBAAA,MAAA,MAAA,OAAA1K,GAAA,GAAA0H,EAAAG,eAAA3H,GAAA,KAMA1iF,KAAAk/F,uBAAA,SAAAhxC,EAAA/hE,EAAAsB,EAAAoM,EAAAC,EAAAq7D,EAAAgqC,GAEA,GAAAjxC,GAAAA,EAAAnpC,oBAAA,CAOA,IAAA+nE,EAAAl6B,EAAA7yD,IAAAmuD,GAAAy8B,mBAQA,GANAz8B,EAAAC,8BAAArhE,IAAAqyG,IAEArS,EAAAA,EAAAqS,IAIArS,EAAA,CAEA,IAAApoF,GAAA,EAEAooF,IAAA4K,IAEA9O,GAAAqE,gBAAA,MAAAH,GAEApoF,GAAA,GAIA,IAEA,IAAAqd,EAAAmsC,EAAAnsC,QACAq9E,EAAAr9E,EAAAtB,OACA8rE,EAAAxqE,EAAAluB,KAEA,GAAAurG,IAAAhwF,IAAAy5E,GAAAkD,QAAAqT,KAAAxW,GAAA9rD,aAAA,OAGA,YADA5lC,QAAAkK,MAAA,6GAKA,KAAAmrF,IAAAj+E,IAAAu6E,GAAAkD,QAAAQ,KAAA3D,GAAA9rD,aAAA,QACAyvD,IAAA39E,KAAAimD,EAAAC,UAAA/I,EAAAhsD,IAAA,sBAAAgsD,EAAAhsD,IAAA,8BACAwsF,IAAA19E,IAAAk9C,EAAAhsD,IAAA80D,EAAAC,SAAA,yBAAA,gCAGA,YADA59D,QAAAkK,MAAA,uHAKA,QAAAwnF,GAAAyW,uBAAA,OAIAlzG,GAAA,GAAAA,GAAA+hE,EAAAr0D,MAAAA,GAAApM,GAAA,GAAAA,GAAAygE,EAAAp0D,OAAAA,GAEA8uF,GAAA0W,WAAAnzG,EAAAsB,EAAAoM,EAAAC,EAAA+uF,GAAAkD,QAAAqT,GAAAvW,GAAAkD,QAAAQ,GAAAp3B,GAMAj+D,QAAAkK,MAAA,8GAIA,QAEAsD,GAEAkkF,GAAAqE,gBAAA,MAAAyK,UAnEAxgG,QAAAkK,MAAA,6FA6EApB,KAAAu/F,yBAAA,SAAA5uE,EAAA5O,EAAAy9E,QAEA1yG,IAAA0yG,IAAAA,EAAA,GAEA,IAAAC,EAAAhxG,KAAAub,IAAA,GAAAw1F,GACA3lG,EAAApL,KAAAC,MAAAqzB,EAAApC,MAAA9lB,MAAA4lG,GACA3lG,EAAArL,KAAAC,MAAAqzB,EAAApC,MAAA7lB,OAAA2lG,GACA3V,EAAAjB,GAAAkD,QAAAhqE,EAAAtB,QAEAuC,EAAAmoE,aAAAppE,EAAA,GAEA6mE,GAAA8W,eAAA,KAAAF,EAAA1V,EAAAn5D,EAAAxkC,EAAAwkC,EAAAljC,EAAAoM,EAAAC,EAAA,GAEAqlE,EAAAopB,iBAIAvoF,KAAA2/F,qBAAA,SAAAhvE,EAAAivE,EAAAC,EAAAL,QAEA1yG,IAAA0yG,IAAAA,EAAA,GAEA,IAAA3lG,EAAA+lG,EAAAjgF,MAAA9lB,MACAC,EAAA8lG,EAAAjgF,MAAA7lB,OACAgwF,EAAAjB,GAAAkD,QAAA8T,EAAAp/E,QACAspE,EAAAlB,GAAAkD,QAAA8T,EAAAhsG,MAEAmvB,EAAAmoE,aAAA0U,EAAA,GAIAjX,GAAA+C,YAAA,MAAAkU,EAAAz+E,OACAwnE,GAAA+C,YAAA,MAAAkU,EAAA1+E,kBACAynE,GAAA+C,YAAA,KAAAkU,EAAAx+E,iBAEAu+E,EAAArwC,cAEAq5B,GAAAkX,cAAA,KAAAN,EAAA7uE,EAAAxkC,EAAAwkC,EAAAljC,EAAAoM,EAAAC,EAAAgwF,EAAAC,EAAA6V,EAAAjgF,MAAA7c,MAIA88F,EAAA/T,oBAEAjD,GAAAmX,wBAAA,KAAAP,EAAA7uE,EAAAxkC,EAAAwkC,EAAAljC,EAAAmyG,EAAA/+E,QAAA,GAAAhnB,MAAA+lG,EAAA/+E,QAAA,GAAA/mB,OAAAgwF,EAAA8V,EAAA/+E,QAAA,GAAA/d,MAIA8lF,GAAAkX,cAAA,KAAAN,EAAA7uE,EAAAxkC,EAAAwkC,EAAAljC,EAAAq8F,EAAAC,EAAA6V,EAAAjgF,OAOA,IAAA6/E,GAAAK,EAAA3+E,iBAAA0nE,GAAAa,eAAA,MAEAtqB,EAAAopB,iBAIAvoF,KAAA0rF,YAAA,SAAA3pE,GAEAiB,EAAAmoE,aAAAppE,EAAA,GAEAo9C,EAAAopB,iBAIA,oBAAAlzD,oBAEAA,mBAAAnhB,cAAA,IAAAohB,YAAA,UAAA,CAAAC,OAAAv1B,QAUA,SAAAggG,GAAAnnE,GAEAq9D,GAAAhvG,KAAA8Y,KAAA64B,GAiBA,SAAAonE,GAAAlxD,EAAA0lD,GAEAz0F,KAAA7J,KAAA,GAEA6J,KAAA+uC,MAAA,IAAAN,GAAAM,GACA/uC,KAAAy0F,aAAA3nG,IAAA2nG,EAAAA,EAAA,MA+BA,SAAAyL,GAAAnxD,EAAApd,EAAAC,GAEA5xB,KAAA7J,KAAA,GAEA6J,KAAA+uC,MAAA,IAAAN,GAAAM,GAEA/uC,KAAA2xB,UAAA7kC,IAAA6kC,EAAAA,EAAA,EACA3xB,KAAA4xB,SAAA9kC,IAAA8kC,EAAAA,EAAA,IA+BA,SAAAuuE,GAAA/rF,EAAAkuD,GAEAtiE,KAAAoU,MAAAA,EACApU,KAAAsiE,OAAAA,EACAtiE,KAAAu4B,WAAAzrC,IAAAsnB,EAAAA,EAAAjtB,OAAAm7E,EAAA,EAEAtiE,KAAA23C,MAAAlkC,GACAzT,KAAA43C,YAAA,CAAA98B,OAAA,EAAAyd,OAAA,GAEAv4B,KAAAshB,QAAA,EAEAthB,KAAA2gB,KAAApM,GAAAI,eArzGA+6E,GAAAjoG,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8pC,GAAA/kE,WAAA,CAEA4wB,YAAAq3E,GAEAmN,eAAA,IAgBAlN,GAAAloG,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAAs3E,GAEAgP,SAAA,IAeAp3G,OAAAM,OAAA+nG,GAAAnoG,UAAA,CAEA4wB,YAAAu3E,GAEAgC,kBAAA,WAUA,OARA,OAAA5xF,KAAA6vF,aAEA7vF,KAAA6vF,WAAA,IAAAF,GACA3vF,KAAA6vF,WAAA5uE,kBAAA,EACAjhB,KAAA6vF,WAAAp7D,SAAA,GAIAz0B,KAAA6vF,YAIAiC,aAAA,WAUA,OARA,OAAA9xF,KAAA8vF,QAEA9vF,KAAA8vF,MAAA,IAAAH,GACA3vF,KAAA8vF,MAAA7uE,kBAAA,EACAjhB,KAAA8vF,MAAAr7D,SAAA,GAIAz0B,KAAA8vF,OAIA57E,cAAA,SAAAC,GAcA,OAZA,OAAAnU,KAAA6vF,YAEA7vF,KAAA6vF,WAAA37E,cAAAC,GAIA,OAAAnU,KAAA8vF,OAEA9vF,KAAA8vF,MAAA57E,cAAAC,GAIAnU,MAIAgxF,WAAA,SAAAF,GAgBA,OAdA9wF,KAAAkU,cAAA,CAAArgB,KAAA,eAAAiP,KAAAguF,IAEA,OAAA9wF,KAAA6vF,aAEA7vF,KAAA6vF,WAAAp7D,SAAA,GAIA,OAAAz0B,KAAA8vF,QAEA9vF,KAAA8vF,MAAAr7D,SAAA,GAIAz0B,MAIA8E,OAAA,SAAAgsF,EAAA79F,EAAAg9F,GAEA,IAAAmQ,EAAA,KACAC,EAAA,KAEAC,EAAAtgG,KAAA6vF,WACA0Q,EAAAvgG,KAAA8vF,MA4CA,OA1CAgB,IAEA,OAAAwP,GAIA,QAFAF,EAAAntG,EAAAutG,QAAA1P,EAAA2P,eAAAxQ,MAIAqQ,EAAApiF,OAAArD,UAAAulF,EAAAnM,UAAA/1E,QACAoiF,EAAApiF,OAAAgT,UAAAovE,EAAA3vE,SAAA2vE,EAAAnhF,SAAAmhF,EAAAh8F,QAMA,OAAAi8F,GAAAzP,EAAA4P,WAIA,QAFAL,EAAAptG,EAAAutG,QAAA1P,EAAA4P,UAAAzQ,MAIAsQ,EAAAriF,OAAArD,UAAAwlF,EAAApM,UAAA/1E,QACAqiF,EAAAriF,OAAAgT,UAAAqvE,EAAA5vE,SAAA4vE,EAAAphF,SAAAohF,EAAAj8F,SAQA,OAAAg8F,IAEAA,EAAA7rE,QAAA,OAAA2rE,GAIA,OAAAG,IAEAA,EAAA9rE,QAAA,OAAA4rE,GAIArgG,QA4dAzY,OAAAM,OAAAkoG,GAAAtoG,UAAAksB,GAAAlsB,WAwlFAu4G,GAAAv4G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAwzE,GAAAzuG,WAAA,CAEA4wB,YAAA2nF,GAEAxG,kBAAA,IAkBAjyG,OAAAM,OAAAo4G,GAAAx4G,UAAA,CAEAuyF,WAAA,EAEA5hE,MAAA,WAEA,OAAA,IAAA6nF,GAAAjgG,KAAA+uC,MAAA/uC,KAAAy0F,UAIA5xE,OAAA,WAEA,MAAA,CACAhvB,KAAA,UACAk7C,MAAA/uC,KAAA+uC,MAAA0B,SACAgkD,QAAAz0F,KAAAy0F,YAuBAltG,OAAAM,OAAAq4G,GAAAz4G,UAAA,CAEA+sG,OAAA,EAEAp8E,MAAA,WAEA,OAAA,IAAA8nF,GAAAlgG,KAAA+uC,MAAA/uC,KAAA2xB,KAAA3xB,KAAA4xB,MAIA/O,OAAA,WAEA,MAAA,CACAhvB,KAAA,MACAk7C,MAAA/uC,KAAA+uC,MAAA0B,SACA9e,KAAA3xB,KAAA2xB,KACAC,IAAA5xB,KAAA4xB,QA0BArqC,OAAA6iB,eAAA+1F,GAAA14G,UAAA,cAAA,CAEA+vB,IAAA,SAAAtrB,IAEA,IAAAA,GAAA8T,KAAAshB,aAMA/5B,OAAAM,OAAAs4G,GAAA14G,UAAA,CAEAk5G,qBAAA,EAEA5mD,iBAAA,aAEAC,SAAA,SAAA9tD,GAIA,OAFA8T,KAAA23C,MAAAzrD,EAEA8T,MAIA5T,KAAA,SAAAvD,GAOA,OALAmX,KAAAoU,MAAA,IAAAvrB,EAAAurB,MAAAiE,YAAAxvB,EAAAurB,OACApU,KAAAu4B,MAAA1vC,EAAA0vC,MACAv4B,KAAAsiE,OAAAz5E,EAAAy5E,OACAtiE,KAAA23C,MAAA9uD,EAAA8uD,MAEA33C,MAIAi6C,OAAA,SAAAC,EAAAj/B,EAAAk/B,GAEAD,GAAAl6C,KAAAsiE,OACAnoB,GAAAl/B,EAAAqnD,OAEA,IAAA,IAAA97E,EAAA,EAAAyJ,EAAA+P,KAAAsiE,OAAA97E,EAAAyJ,EAAAzJ,IAEAwZ,KAAAoU,MAAA8lC,EAAA1zD,GAAAy0B,EAAA7G,MAAA+lC,EAAA3zD,GAIA,OAAAwZ,MAIAwX,IAAA,SAAAtrB,EAAA4uB,GAMA,YAJAhuB,IAAAguB,IAAAA,EAAA,GAEA9a,KAAAoU,MAAAoD,IAAAtrB,EAAA4uB,GAEA9a,MAIAoY,MAAA,SAAAtV,QAEAhW,IAAAgW,EAAA89F,eAEA99F,EAAA89F,aAAA,SAIA9zG,IAAAkT,KAAAoU,MAAA+gD,OAAA0rC,QAEA7gG,KAAAoU,MAAA+gD,OAAA0rC,MAAAtsF,GAAAI,qBAIA7nB,IAAAgW,EAAA89F,aAAA5gG,KAAAoU,MAAA+gD,OAAA0rC,SAEA/9F,EAAA89F,aAAA5gG,KAAAoU,MAAA+gD,OAAA0rC,OAAA7gG,KAAAoU,MAAAjpB,MAAA,GAAAgqE,QAIA,IAEA2rC,EAAA,IAAAX,GAFA,IAAAngG,KAAAoU,MAAAiE,YAAAvV,EAAA89F,aAAA5gG,KAAAoU,MAAA+gD,OAAA0rC,QAEA7gG,KAAAsiE,QAGA,OAFAw+B,EAAA9mD,SAAAh6C,KAAA23C,OAEAmpD,GAIAjmD,SAAA,SAAA1xB,GAIA,OAFAnpB,KAAA+5C,iBAAA5wB,EAEAnpB,MAIA6iB,OAAA,SAAA/f,GAwBA,YAtBAhW,IAAAgW,EAAA89F,eAEA99F,EAAA89F,aAAA,SAMA9zG,IAAAkT,KAAAoU,MAAA+gD,OAAA0rC,QAEA7gG,KAAAoU,MAAA+gD,OAAA0rC,MAAAtsF,GAAAI,qBAIA7nB,IAAAgW,EAAA89F,aAAA5gG,KAAAoU,MAAA+gD,OAAA0rC,SAEA/9F,EAAA89F,aAAA5gG,KAAAoU,MAAA+gD,OAAA0rC,OAAA31G,MAAAzD,UAAA0D,MAAAjE,KAAA,IAAAuxD,YAAAz4C,KAAAoU,MAAA+gD,UAMA,CACAx0C,KAAA3gB,KAAA2gB,KACAw0C,OAAAn1D,KAAAoU,MAAA+gD,OAAA0rC,MACAhtG,KAAAmM,KAAAoU,MAAAiE,YAAAliB,KACAmsE,OAAAtiE,KAAAsiE,WAWA,IA0TAy+B,GA1TAC,GAAA,IAAA33E,GAEA,SAAA43E,GAAAC,EAAAxpD,EAAA58B,EAAAu2B,GAEArxC,KAAA7J,KAAA,GAEA6J,KAAA8C,KAAAo+F,EACAlhG,KAAA03C,SAAAA,EACA13C,KAAA8a,OAAAA,EAEA9a,KAAAqxC,YAAA,IAAAA,EA+PA,SAAA6nC,GAAArgD,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,iBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,UAEAzuC,KAAA7X,IAAA,KAEA6X,KAAAk0C,SAAA,KAEAl0C,KAAAmf,SAAA,EAEAnf,KAAA+2C,iBAAA,EAEA/2C,KAAA8xC,aAAA,EAEA9xC,KAAA60C,UAAAhc,GA7QAtxC,OAAAqwB,iBAAAqpF,GAAAx5G,UAAA,CAEA8wC,MAAA,CAEAx4B,IAAA,WAEA,OAAAC,KAAA8C,KAAAy1B,QAMAnkB,MAAA,CAEArU,IAAA,WAEA,OAAAC,KAAA8C,KAAAsR,UAQA7sB,OAAAM,OAAAo5G,GAAAx5G,UAAA,CAEAwtE,8BAAA,EAEAtxC,aAAA,SAAAn2B,GAEA,IAAA,IAAAhH,EAAA,EAAAyJ,EAAA+P,KAAA8C,KAAAy1B,MAAA/xC,EAAAyJ,EAAAzJ,IAEAw6G,GAAA70G,EAAA6T,KAAAkb,KAAA10B,GACAw6G,GAAAvzG,EAAAuS,KAAAmb,KAAA30B,GACAw6G,GAAAv/E,EAAAzhB,KAAA6kB,KAAAr+B,GAEAw6G,GAAAr9E,aAAAn2B,GAEAwS,KAAA26C,OAAAn0D,EAAAw6G,GAAA70G,EAAA60G,GAAAvzG,EAAAuzG,GAAAv/E,GAIA,OAAAzhB,MAIAgY,KAAA,SAAA3N,EAAAle,GAIA,OAFA6T,KAAA8C,KAAAsR,MAAA/J,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,QAAA3uB,EAEA6T,MAIAiY,KAAA,SAAA5N,EAAA5c,GAIA,OAFAuS,KAAA8C,KAAAsR,MAAA/J,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,OAAA,GAAArtB,EAEAuS,MAIAyjB,KAAA,SAAApZ,EAAAoX,GAIA,OAFAzhB,KAAA8C,KAAAsR,MAAA/J,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,OAAA,GAAA2G,EAEAzhB,MAIA0jB,KAAA,SAAArZ,EAAAmO,GAIA,OAFAxY,KAAA8C,KAAAsR,MAAA/J,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,OAAA,GAAAtC,EAEAxY,MAIAkb,KAAA,SAAA7Q,GAEA,OAAArK,KAAA8C,KAAAsR,MAAA/J,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,SAIAK,KAAA,SAAA9Q,GAEA,OAAArK,KAAA8C,KAAAsR,MAAA/J,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,OAAA,IAIA+J,KAAA,SAAAxa,GAEA,OAAArK,KAAA8C,KAAAsR,MAAA/J,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,OAAA,IAIAgK,KAAA,SAAAza,GAEA,OAAArK,KAAA8C,KAAAsR,MAAA/J,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,OAAA,IAIA4/B,MAAA,SAAArwC,EAAAle,EAAAsB,GAOA,OAHAuS,KAAA8C,KAAAsR,OAFA/J,EAAAA,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,QAEA,GAAA3uB,EACA6T,KAAA8C,KAAAsR,MAAA/J,EAAA,GAAA5c,EAEAuS,MAIA26C,OAAA,SAAAtwC,EAAAle,EAAAsB,EAAAg0B,GAQA,OAJAzhB,KAAA8C,KAAAsR,OAFA/J,EAAAA,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,QAEA,GAAA3uB,EACA6T,KAAA8C,KAAAsR,MAAA/J,EAAA,GAAA5c,EACAuS,KAAA8C,KAAAsR,MAAA/J,EAAA,GAAAoX,EAEAzhB,MAIA46C,QAAA,SAAAvwC,EAAAle,EAAAsB,EAAAg0B,EAAAjJ,GASA,OALAxY,KAAA8C,KAAAsR,OAFA/J,EAAAA,EAAArK,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,QAEA,GAAA3uB,EACA6T,KAAA8C,KAAAsR,MAAA/J,EAAA,GAAA5c,EACAuS,KAAA8C,KAAAsR,MAAA/J,EAAA,GAAAoX,EACAzhB,KAAA8C,KAAAsR,MAAA/J,EAAA,GAAAmO,EAEAxY,MAIAoY,MAAA,SAAAtV,GAEA,QAAAhW,IAAAgW,EAAA,CAEA5L,QAAAwK,IAAA,mHAIA,IAFA,IAAA0S,EAAA,GAEA5tB,EAAA,EAAAA,EAAAwZ,KAAAu4B,MAAA/xC,IAIA,IAFA,IAAA6jB,EAAA7jB,EAAAwZ,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,OAEA6f,EAAA,EAAAA,EAAA36B,KAAA03C,SAAA/c,IAEAvmB,EAAAzpB,KAAAqV,KAAA8C,KAAAsR,MAAA/J,EAAAswB,IAMA,OAAA,IAAA8c,GAAA,IAAAz3C,KAAAoU,MAAAiE,YAAAjE,GAAApU,KAAA03C,SAAA13C,KAAAqxC,YAgBA,YAZAvkD,IAAAgW,EAAAq+F,qBAEAr+F,EAAAq+F,mBAAA,SAIAr0G,IAAAgW,EAAAq+F,mBAAAnhG,KAAA8C,KAAA6d,QAEA7d,EAAAq+F,mBAAAnhG,KAAA8C,KAAA6d,MAAA3gB,KAAA8C,KAAAsV,MAAAtV,IAIA,IAAAm+F,GAAAn+F,EAAAq+F,mBAAAnhG,KAAA8C,KAAA6d,MAAA3gB,KAAA03C,SAAA13C,KAAA8a,OAAA9a,KAAAqxC,aAMAxuB,OAAA,SAAA/f,GAEA,QAAAhW,IAAAgW,EAAA,CAEA5L,QAAAwK,IAAA,wHAIA,IAFA,IAAA0S,EAAA,GAEA5tB,EAAA,EAAAA,EAAAwZ,KAAAu4B,MAAA/xC,IAIA,IAFA,IAAA6jB,EAAA7jB,EAAAwZ,KAAA8C,KAAAw/D,OAAAtiE,KAAA8a,OAEA6f,EAAA,EAAAA,EAAA36B,KAAA03C,SAAA/c,IAEAvmB,EAAAzpB,KAAAqV,KAAA8C,KAAAsR,MAAA/J,EAAAswB,IAQA,MAAA,CACA+c,SAAA13C,KAAA03C,SACA7jD,KAAAmM,KAAAoU,MAAAiE,YAAAliB,KACAie,MAAAA,EACAi9B,WAAArxC,KAAAqxC,YAmBA,YAZAvkD,IAAAgW,EAAAq+F,qBAEAr+F,EAAAq+F,mBAAA,SAIAr0G,IAAAgW,EAAAq+F,mBAAAnhG,KAAA8C,KAAA6d,QAEA7d,EAAAq+F,mBAAAnhG,KAAA8C,KAAA6d,MAAA3gB,KAAA8C,KAAA+f,OAAA/f,IAIA,CACAmyD,8BAAA,EACAvd,SAAA13C,KAAA03C,SACA50C,KAAA9C,KAAA8C,KAAA6d,KACA7F,OAAA9a,KAAA8a,OACAu2B,WAAArxC,KAAAqxC,gBA2CA6nC,GAAAzxF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAA6gE,GACAA,GAAAzxF,UAAAsuG,kBAAA,EAEA7c,GAAAzxF,UAAA2E,KAAA,SAAAvD,GAcA,OAZA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OAEA/uC,KAAA7X,IAAAU,EAAAV,IAEA6X,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAAmf,SAAAt2B,EAAAs2B,SAEAnf,KAAA+2C,gBAAAluD,EAAAkuD,gBAEA/2C,MAWA,IAAAohG,GAAA,IAAA/3E,GACAg4E,GAAA,IAAAh4E,GACAi4E,GAAA,IAAAj4E,GAEAk4E,GAAA,IAAA9pF,GACA+pF,GAAA,IAAA/pF,GACAgqF,GAAA,IAAAj1E,GAEAk1E,GAAA,IAAAr4E,GACAs4E,GAAA,IAAAt4E,GACAu4E,GAAA,IAAAv4E,GAEAw4E,GAAA,IAAApqF,GACAqqF,GAAA,IAAArqF,GACAsqF,GAAA,IAAAtqF,GAEA,SAAAuqF,GAAAlpE,GAMA,GAJA9E,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,cAEA/G,IAAAi0G,GAAA,CAEAA,GAAA,IAAAvkD,GAEA,IAOA0kD,EAAA,IAAAf,GAPA,IAAAxnD,aAAA,EACA,IAAA,GAAA,EAAA,EAAA,EACA,IAAA,GAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,IAGA,GAEAooD,GAAAjkD,SAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACAikD,GAAA/jD,aAAA,WAAA,IAAAikD,GAAAC,EAAA,EAAA,GAAA,IACAH,GAAA/jD,aAAA,KAAA,IAAAikD,GAAAC,EAAA,EAAA,GAAA,IAIAlhG,KAAA44B,SAAAmoE,GACA/gG,KAAA84B,cAAAhsC,IAAAgsC,EAAAA,EAAA,IAAAogD,GAEAl5E,KAAAqb,OAAA,IAAA5D,GAAA,GAAA,IAmGA,SAAAwqF,GAAAC,EAAAC,EAAA9mF,EAAA/W,EAAAyS,EAAAD,GAGAyqF,GAAA1oF,WAAAqpF,EAAA7mF,GAAA3C,UAAA,IAAAK,SAAAzU,QAGAxX,IAAAiqB,GAEAyqF,GAAAr1G,EAAA2qB,EAAAyqF,GAAAp1G,EAAA4qB,EAAAwqF,GAAA9zG,EACA+zG,GAAA/zG,EAAAspB,EAAAwqF,GAAAp1G,EAAA2qB,EAAAyqF,GAAA9zG,GAIA+zG,GAAAp1G,KAAAm1G,IAKAW,EAAA91G,KAAA+1G,GACAD,EAAA/1G,GAAAq1G,GAAAr1G,EACA+1G,EAAAz0G,GAAA+zG,GAAA/zG,EAGAy0G,EAAAv+E,aAAA89E,IAtHAO,GAAAv6G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAA2pF,GAEAzF,UAAA,EAEA/kE,QAAA,SAAAyqB,EAAAW,GAEA,OAAAX,EAAA33B,QAEApzB,QAAAkK,MAAA,yFAIAigG,GAAAl1E,mBAAAnsB,KAAA2qB,aAEA82E,GAAAr1G,KAAA61D,EAAA33B,OAAAK,aACA3qB,KAAAq0B,gBAAA5X,iBAAAwlC,EAAA33B,OAAAC,mBAAAvqB,KAAA2qB,aAEA22E,GAAAp1E,sBAAAlsB,KAAAq0B,iBAEA4tB,EAAA33B,OAAA2iC,sBAAA,IAAAjtD,KAAA84B,SAAAie,iBAEAsqD,GAAAroF,gBAAAsoF,GAAA7/E,GAIA,IACA1K,EAAAD,EADAqI,EAAAnf,KAAA84B,SAAA3Z,SAGA,IAAAA,IAEArI,EAAAroB,KAAAqoB,IAAAqI,GACApI,EAAAtoB,KAAAsoB,IAAAoI,IAIA,IAAA9D,EAAArb,KAAAqb,OAEA4mF,GAAAP,GAAAlqF,KAAA,IAAA,GAAA,GAAA8pF,GAAAjmF,EAAAgmF,GAAAtqF,EAAAD,GACAmrF,GAAAN,GAAAnqF,IAAA,IAAA,GAAA,GAAA8pF,GAAAjmF,EAAAgmF,GAAAtqF,EAAAD,GACAmrF,GAAAL,GAAApqF,IAAA,GAAA,GAAA,GAAA8pF,GAAAjmF,EAAAgmF,GAAAtqF,EAAAD,GAEA+qF,GAAArqF,IAAA,EAAA,GACAsqF,GAAAtqF,IAAA,EAAA,GACAuqF,GAAAvqF,IAAA,EAAA,GAGA,IAAAkmB,EAAAukB,EAAArjB,IAAAmC,kBAAA2gE,GAAAC,GAAAC,IAAA,EAAAR,IAEA,GAAA,OAAA1jE,IAGAukE,GAAAN,GAAAnqF,KAAA,GAAA,GAAA,GAAA8pF,GAAAjmF,EAAAgmF,GAAAtqF,EAAAD,GACAgrF,GAAAtqF,IAAA,EAAA,GAGA,QADAkmB,EAAAukB,EAAArjB,IAAAmC,kBAAA2gE,GAAAE,GAAAD,IAAA,EAAAP,MANA,CAeA,IAAA/qE,EAAA4rB,EAAArjB,IAAAF,OAAAxkB,WAAAknF,IAEA/qE,EAAA4rB,EAAAtwB,MAAA0E,EAAA4rB,EAAArwB,KAEAgxB,EAAAj4D,KAAA,CAEA0rC,SAAAA,EACAiG,MAAA8kE,GAAAhpF,QACAmL,GAAA6f,GAAAW,MAAAq9D,GAAAM,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAA,IAAAtqF,IACAwjC,KAAA,KACAlwD,OAAAiV,SAMA5T,KAAA,SAAAvD,GAQA,OANAmrC,GAAAvsC,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,QAEAiE,IAAAjE,EAAAwyB,QAAArb,KAAAqb,OAAAjvB,KAAAvD,EAAAwyB,QAEArb,KAAA84B,SAAAjwC,EAAAiwC,SAEA94B,QAuCA,IA2TAoiG,GAEAC,GACAC,GAEA5rE,GACAxY,GAjUAqkF,GAAA,IAAAl5E,GACAm5E,GAAA,IAAAn5E,GAEA,SAAAo5E,KAEAzuE,GAAA9sC,KAAA8Y,MAEAA,KAAA0iG,cAAA,EAEA1iG,KAAAnM,KAAA,MAEAtM,OAAAqwB,iBAAA5X,KAAA,CACA2iG,OAAA,CACAvuE,YAAA,EACAloC,MAAA,MAIA8T,KAAAo1B,YAAA,EAqLA,SAAAwtE,GAAAhqE,EAAAE,GAEAF,GAAAA,EAAA8kB,YAEAxmD,QAAAkK,MAAA,0FAIA0gD,GAAA56D,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAnM,KAAA,cAEAmM,KAAA6iG,SAAA,WACA7iG,KAAA8iG,WAAA,IAAAt2E,GACAxsB,KAAA+iG,kBAAA,IAAAv2E,GA/LAi2E,GAAAh7G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAAoqF,GAEA7D,OAAA,EAEAxyG,KAAA,SAAAvD,GAEAmrC,GAAAvsC,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAAA,GAIA,IAFA,IAAA85G,EAAA95G,EAAA85G,OAEAn8G,EAAA,EAAAyJ,EAAA0yG,EAAAx7G,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAg5G,EAAAmD,EAAAn8G,GAEAwZ,KAAAgjG,SAAAxD,EAAAz0G,OAAAqtB,QAAAonF,EAAAnpE,UAMA,OAFAr2B,KAAAo1B,WAAAvsC,EAAAusC,WAEAp1B,MAIAgjG,SAAA,SAAAj4G,EAAAsrC,QAEAvpC,IAAAupC,IAAAA,EAAA,GAEAA,EAAA5nC,KAAAkC,IAAA0lC,GAEA,IAEApmC,EAFA0yG,EAAA3iG,KAAA2iG,OAIA,IAAA1yG,EAAA,EAAAA,EAAA0yG,EAAAx7G,UAEAkvC,EAAAssE,EAAA1yG,GAAAomC,UAFApmC,KAcA,OAJA0yG,EAAA1uF,OAAAhkB,EAAA,EAAA,CAAAomC,SAAAA,EAAAtrC,OAAAA,IAEAiV,KAAAuY,IAAAxtB,GAEAiV,MAIAijG,gBAAA,WAEA,OAAAjjG,KAAA0iG,eAIAQ,qBAAA,SAAA7sE,GAEA,IAAAssE,EAAA3iG,KAAA2iG,OAEA,GAAAA,EAAAx7G,OAAA,EAAA,CAEA,IAAAX,EAAAyJ,EAEA,IAAAzJ,EAAA,EAAAyJ,EAAA0yG,EAAAx7G,OAAAX,EAAAyJ,KAEAomC,EAAAssE,EAAAn8G,GAAA6vC,UAFA7vC,KAUA,OAAAm8G,EAAAn8G,EAAA,GAAAuE,OAIA,OAAA,MAIAysC,QAAA,SAAAyqB,EAAAW,GAIA,GAFA5iD,KAAA2iG,OAEAx7G,OAAA,EAAA,CAEAo7G,GAAAr2E,sBAAAlsB,KAAA2qB,aAEA,IAAA0L,EAAA4rB,EAAArjB,IAAAF,OAAAxkB,WAAAqoF,IAEAviG,KAAAkjG,qBAAA7sE,GAAAmB,QAAAyqB,EAAAW,KAMA99C,OAAA,SAAAwlB,GAEA,IAAAq4E,EAAA3iG,KAAA2iG,OAEA,GAAAA,EAAAx7G,OAAA,EAAA,CAEAo7G,GAAAr2E,sBAAA5B,EAAAK,aACA63E,GAAAt2E,sBAAAlsB,KAAA2qB,aAEA,IAIAnkC,EAAAyJ,EAJAomC,EAAAksE,GAAAroF,WAAAsoF,IAAAl4E,EAAAoiC,KAMA,IAJAi2C,EAAA,GAAA53G,OAAA0pC,SAAA,EAIAjuC,EAAA,EAAAyJ,EAAA0yG,EAAAx7G,OAAAX,EAAAyJ,GAEAomC,GAAAssE,EAAAn8G,GAAA6vC,SAFA7vC,IAIAm8G,EAAAn8G,EAAA,GAAAuE,OAAA0pC,SAAA,EACAkuE,EAAAn8G,GAAAuE,OAAA0pC,SAAA,EAYA,IAFAz0B,KAAA0iG,cAAAl8G,EAAA,EAEAA,EAAAyJ,EAAAzJ,IAEAm8G,EAAAn8G,GAAAuE,OAAA0pC,SAAA,IAQA5R,OAAA,SAAAC,GAEA,IAAAhgB,EAAAkxB,GAAAvsC,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,IAEA,IAAA9iB,KAAAo1B,aAAAtyB,EAAA/X,OAAAqqC,YAAA,GAEAtyB,EAAA/X,OAAA43G,OAAA,GAIA,IAFA,IAAAA,EAAA3iG,KAAA2iG,OAEAn8G,EAAA,EAAAyJ,EAAA0yG,EAAAx7G,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAg5G,EAAAmD,EAAAn8G,GAEAsc,EAAA/X,OAAA43G,OAAAh4G,KAAA,CACAI,OAAAy0G,EAAAz0G,OAAA41B,KACA0V,SAAAmpE,EAAAnpE,WAKA,OAAAvzB,KA8BA8/F,GAAAn7G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAo/B,GAAAr6D,WAAA,CAEA4wB,YAAAuqF,GAEArgD,eAAA,EAEAn2D,KAAA,SAAAvD,GAUA,OARAi5D,GAAAr6D,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA6iG,SAAAh6G,EAAAg6G,SACA7iG,KAAA8iG,WAAA12G,KAAAvD,EAAAi6G,YACA9iG,KAAA+iG,kBAAA32G,KAAAvD,EAAAk6G,mBAEA/iG,KAAA25E,SAAA9wF,EAAA8wF,SAEA35E,MAIAmjG,KAAA,SAAAxpB,EAAAmpB,GAEA9iG,KAAA25E,SAAAA,OAEA7sF,IAAAg2G,IAEA9iG,KAAAo3B,mBAAA,GAEAp3B,KAAA25E,SAAAypB,oBAEAN,EAAA9iG,KAAA2qB,aAIA3qB,KAAA8iG,WAAA12G,KAAA02G,GACA9iG,KAAA+iG,kBAAA9kF,WAAA6kF,IAIA3S,KAAA,WAEAnwF,KAAA25E,SAAAwW,QAIAkT,qBAAA,WAMA,IAJA,IAAA3sE,EAAA,IAAAlV,GAEA8gF,EAAAtiG,KAAA44B,SAAA37B,WAAAqlG,WAEA97G,EAAA,EAAAyJ,EAAAqyG,EAAA/pE,MAAA/xC,EAAAyJ,EAAAzJ,IAAA,CAEAkwC,EAAAvqC,EAAAm2G,EAAApnF,KAAA10B,GACAkwC,EAAAjpC,EAAA60G,EAAAnnF,KAAA30B,GACAkwC,EAAAjV,EAAA6gF,EAAAz9E,KAAAr+B,GACAkwC,EAAAle,EAAA8pF,EAAAx9E,KAAAt+B,GAEA,IAAA8d,EAAA,EAAAoyB,EAAA5c,kBAEAxS,WAAAhD,EAEAoyB,EAAA1d,eAAA1U,GAIAoyB,EAAAlf,IAAA,EAAA,EAAA,EAAA,GAIA8qF,EAAA1nD,QAAAp0D,EAAAkwC,EAAAvqC,EAAAuqC,EAAAjpC,EAAAipC,EAAAjV,EAAAiV,EAAAle,KAMA4e,kBAAA,SAAAQ,GAEAkqB,GAAAr6D,UAAA2vC,kBAAAlwC,KAAA8Y,KAAA43B,GAEA,aAAA53B,KAAA6iG,SAEA7iG,KAAA+iG,kBAAA9kF,WAAAje,KAAA2qB,aAEA,aAAA3qB,KAAA6iG,SAEA7iG,KAAA+iG,kBAAA9kF,WAAAje,KAAA8iG,YAIA5rG,QAAAC,KAAA,6CAAA6I,KAAA6iG,WAMArgD,eAEA4/C,GAAA,IAAA/4E,GAEAg5E,GAAA,IAAA7gF,GACA8gF,GAAA,IAAA9gF,GAEAkV,GAAA,IAAArN,GACAnL,GAAA,IAAAsO,GAEA,SAAAniB,EAAAzhB,GAEA,IAAA+wF,EAAA35E,KAAA25E,SACA/gD,EAAA54B,KAAA44B,SAEAypE,GAAArnF,oBAAA4d,EAAA37B,WAAAolG,UAAAh4F,GACAi4F,GAAAtnF,oBAAA4d,EAAA37B,WAAAqlG,WAAAj4F,GAEA+3F,GAAApnF,oBAAA4d,EAAA37B,WAAA0zB,SAAAtmB,GAAAsZ,aAAA3jB,KAAA8iG,YAEAl6G,EAAA4uB,IAAA,EAAA,EAAA,GAEA,IAAA,IAAAhxB,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAEA,IAAA88G,EAAAhB,GAAAnqF,aAAA3xB,GAEA,GAAA,IAAA88G,EAAA,CAEA,IAAAC,EAAAlB,GAAAlqF,aAAA3xB,GAEA03B,GAAAzB,iBAAAk9D,EAAAD,MAAA6pB,GAAA54E,YAAAgvD,EAAA6pB,aAAAD,IAEA36G,EAAA+vB,gBAAA+d,GAAAtqC,KAAAg2G,IAAAz+E,aAAAzF,IAAAolF,IAMA,OAAA16G,EAAA+6B,aAAA3jB,KAAA+iG,uBAeA,IAAAU,GAAA,IAAAj3E,GACAk3E,GAAA,IAAAl3E,GAEA,SAAAm3E,GAAAjqB,EAAA8pB,GAaA,GAPAxjG,KAAA05E,OAFAA,EAAAA,GAAA,IAEAvuF,MAAA,GACA6U,KAAAo+F,aAAA,IAAAzlD,aAAA,GAAA34C,KAAA05E,MAAAvyF,QAEA6Y,KAAA/M,OAAA,OAIAnG,IAAA02G,EAEAxjG,KAAAojG,yBAIA,GAAApjG,KAAA05E,MAAAvyF,SAAAq8G,EAAAr8G,OAEA6Y,KAAAwjG,aAAAA,EAAAr4G,MAAA,OAEA,CAEA+L,QAAAC,KAAA,oDAEA6I,KAAAwjG,aAAA,GAEA,IAAA,IAAAh9G,EAAA,EAAAm1C,EAAA37B,KAAA05E,MAAAvyF,OAAAX,EAAAm1C,EAAAn1C,IAEAwZ,KAAAwjG,aAAA74G,KAAA,IAAA6hC,KAmJA,SAAAo3E,KAEA5vE,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,OA7IAtM,OAAAM,OAAA87G,GAAAl8G,UAAA,CAEA27G,kBAAA,WAEApjG,KAAAwjG,aAAA,GAEA,IAAA,IAAAh9G,EAAA,EAAAm1C,EAAA37B,KAAA05E,MAAAvyF,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAAyhC,EAAA,IAAAuE,GAEAxsB,KAAA05E,MAAAlzF,IAEAyhC,EAAAhK,WAAAje,KAAA05E,MAAAlzF,GAAAmkC,aAIA3qB,KAAAwjG,aAAA74G,KAAAs9B,KAMAkoE,KAAA,WAIA,IAAA,IAAA3pG,EAAA,EAAAm1C,EAAA37B,KAAA05E,MAAAvyF,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAAq9G,EAAA7jG,KAAA05E,MAAAlzF,GAEAq9G,GAEAA,EAAAl5E,YAAA1M,WAAAje,KAAAwjG,aAAAh9G,IAQA,IAAA,IAAAwyC,EAAA,EAAAuY,EAAAvxC,KAAA05E,MAAAvyF,OAAA6xC,EAAAuY,EAAAvY,IAAA,CAEA,IAAA8qE,EAAA9jG,KAAA05E,MAAA1gD,GAEA8qE,IAEAA,EAAA3oG,QAAA2oG,EAAA3oG,OAAA4oG,QAEAD,EAAA5lF,OAAAD,WAAA6lF,EAAA3oG,OAAAwvB,aACAm5E,EAAA5lF,OAAAnF,SAAA+qF,EAAAn5E,cAIAm5E,EAAA5lF,OAAA9xB,KAAA03G,EAAAn5E,aAIAm5E,EAAA5lF,OAAAgT,UAAA4yE,EAAAnzE,SAAAmzE,EAAAn9E,WAAAm9E,EAAAx/F,UAQAQ,OAAA,WASA,IAPA,IAAA40E,EAAA15E,KAAA05E,MACA8pB,EAAAxjG,KAAAwjG,aACApF,EAAAp+F,KAAAo+F,aACAD,EAAAn+F,KAAAm+F,YAIA33G,EAAA,EAAAm1C,EAAA+9C,EAAAvyF,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAMAi9G,GAAAhnF,iBAFAi9D,EAAAlzF,GAAAkzF,EAAAlzF,GAAAmkC,YAAA+4E,GAEAF,EAAAh9G,IACAi9G,GAAA1oF,QAAAqjF,EAAA,GAAA53G,QAIAsG,IAAAqxG,IAEAA,EAAA9gD,aAAA,IAMAjlC,MAAA,WAEA,OAAA,IAAAurF,GAAA3jG,KAAA05E,MAAA15E,KAAAwjG,eAIAQ,cAAA,SAAA7tG,GAEA,IAAA,IAAA3P,EAAA,EAAAm1C,EAAA37B,KAAA05E,MAAAvyF,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAAq9G,EAAA7jG,KAAA05E,MAAAlzF,GAEA,GAAAq9G,EAAA1tG,OAAAA,EAEA,OAAA0tG,IAUAjjG,QAAA,WAEAZ,KAAAm+F,cAEAn+F,KAAAm+F,YAAAv9F,UAEAZ,KAAAm+F,iBAAArxG,MAsBA82G,GAAAn8G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAAurF,GAEAG,QAAA,IAQA,IAAAE,GAAA,IAAAz3E,GACA03E,GAAA,IAAA13E,GAEA23E,GAAA,GAEAC,GAAA,IAAAtiD,GAEA,SAAAuiD,GAAAzrE,EAAAE,EAAAP,GAEAupB,GAAA56D,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAw4B,eAAA,IAAAif,GAAA,IAAAkB,aAAA,GAAApgB,GAAA,IAEAv4B,KAAAu4B,MAAAA,EAEAv4B,KAAA40B,eAAA,EA8FA,SAAAkkD,GAAAjgD,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,oBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,UAEAzuC,KAAAg3C,UAAA,EACAh3C,KAAAskG,QAAA,QACAtkG,KAAAukG,SAAA,QAEAvkG,KAAA40C,cAAA,EAEA50C,KAAA60C,UAAAhc,GAxGAwrE,GAAA58G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAo/B,GAAAr6D,WAAA,CAEA4wB,YAAAgsF,GAEA/rE,iBAAA,EAEAlsC,KAAA,SAAAvD,GAOA,OALAi5D,GAAAr6D,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAw4B,eAAApsC,KAAAvD,EAAA2vC,gBACAx4B,KAAAu4B,MAAA1vC,EAAA0vC,MAEAv4B,MAIAwkG,YAAA,SAAAn6F,EAAA6T,GAEAA,EAAArD,UAAA7a,KAAAw4B,eAAApkB,MAAA,GAAA/J,IAIAmtB,QAAA,SAAAyqB,EAAAW,GAEA,IAAAj4B,EAAA3qB,KAAA2qB,YACA85E,EAAAzkG,KAAAu4B,MAKA,GAHA6rE,GAAAxrE,SAAA54B,KAAA44B,SACAwrE,GAAAtrE,SAAA94B,KAAA84B,cAEAhsC,IAAAs3G,GAAAtrE,SAEA,IAAA,IAAA4rE,EAAA,EAAAA,EAAAD,EAAAC,IAAA,CAIA1kG,KAAAwkG,YAAAE,EAAAT,IAEAC,GAAAznF,iBAAAkO,EAAAs5E,IAIAG,GAAAz5E,YAAAu5E,GAEAE,GAAA5sE,QAAAyqB,EAAAkiD,IAIA,IAAA,IAAA39G,EAAA,EAAAyJ,EAAAk0G,GAAAh9G,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAk3C,EAAAymE,GAAA39G,GACAk3C,EAAAgnE,WAAAA,EACAhnE,EAAA3yC,OAAAiV,KACA4iD,EAAAj4D,KAAA+yC,GAIAymE,GAAAh9G,OAAA,IAMAw9G,YAAA,SAAAt6F,EAAA6T,GAEAA,EAAAnD,QAAA/a,KAAAw4B,eAAApkB,MAAA,GAAA/J,IAIA03C,mBAAA,gBAsCA+2B,GAAArxF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAygE,GAEAA,GAAArxF,UAAAguG,qBAAA,EAEA3c,GAAArxF,UAAA2E,KAAA,SAAAvD,GAYA,OAVA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OAEA/uC,KAAAg3C,UAAAnuD,EAAAmuD,UACAh3C,KAAAskG,QAAAz7G,EAAAy7G,QACAtkG,KAAAukG,SAAA17G,EAAA07G,SAEAvkG,KAAA40C,aAAA/rD,EAAA+rD,aAEA50C,MAQA,IAAA4kG,GAAA,IAAAv7E,GACAw7E,GAAA,IAAAx7E,GACAy7E,GAAA,IAAAt4E,GACAu4E,GAAA,IAAAtmE,GACAumE,GAAA,IAAApnE,GAEA,SAAAqnE,GAAArsE,EAAAE,EAAA4rC,GAEA,IAAAA,GAEAxtE,QAAAkK,MAAA,+FAIA4yB,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,OAEAmM,KAAA44B,cAAA9rC,IAAA8rC,EAAAA,EAAA,IAAA4jB,GACAx8C,KAAA84B,cAAAhsC,IAAAgsC,EAAAA,EAAA,IAAAggD,GAEA94E,KAAA+hD,qBAIAkjD,GAAAx9G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAA4sF,GAEAvsE,QAAA,EAEAtsC,KAAA,SAAAvD,GAOA,OALAmrC,GAAAvsC,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA84B,SAAAjwC,EAAAiwC,SACA94B,KAAA44B,SAAA/vC,EAAA+vC,SAEA54B,MAIAklG,qBAAA,WAEA,IAAAtsE,EAAA54B,KAAA44B,SAEA,GAAAA,EAAAgkB,iBAIA,GAAA,OAAAhkB,EAAAvuB,MAAA,CAKA,IAHA,IAAAu0C,EAAAhmB,EAAA37B,WAAA0zB,SACA8sB,EAAA,CAAA,GAEAj3D,EAAA,EAAAyJ,EAAA2uD,EAAArmB,MAAA/xC,EAAAyJ,EAAAzJ,IAEAo+G,GAAA5pF,oBAAA4jC,EAAAp4D,EAAA,GACAq+G,GAAA7pF,oBAAA4jC,EAAAp4D,GAEAi3D,EAAAj3D,GAAAi3D,EAAAj3D,EAAA,GACAi3D,EAAAj3D,IAAAo+G,GAAA1qF,WAAA2qF,IAIAjsE,EAAAokB,aAAA,eAAA,IAAAtE,GAAA+E,EAAA,SAIAvmD,QAAAC,KAAA,sGAIA,GAAAyhC,EAAA8kB,WAAA,CAEA,IAAA3E,EAAAngB,EAAAmgB,SACAosD,EAAAvsE,EAAA6kB,cAEA0nD,EAAA,GAAA,EAEA,IAAA,IAAAnsE,EAAA,EAAAC,EAAA8f,EAAA5xD,OAAA6xC,EAAAC,EAAAD,IAEAmsE,EAAAnsE,GAAAmsE,EAAAnsE,EAAA,GACAmsE,EAAAnsE,IAAA+f,EAAA/f,EAAA,GAAA9e,WAAA6+B,EAAA/f,IAMA,OAAAh5B,MAIAw3B,QAAA,SAAAyqB,EAAAW,GAEA,IAAAhqB,EAAA54B,KAAA44B,SACAjO,EAAA3qB,KAAA2qB,YACAy6E,EAAAnjD,EAAAojD,OAAAJ,KAAAG,UAUA,GANA,OAAAxsE,EAAA2gB,gBAAA3gB,EAAA2kB,wBAEAynD,GAAA54G,KAAAwsC,EAAA2gB,gBACAyrD,GAAArhF,aAAAgH,GACAq6E,GAAAn5E,QAAAu5E,GAEA,IAAAnjD,EAAArjB,IAAA5B,iBAAAgoE,IAAA,CAIAF,GAAA7mF,WAAA0M,GACAo6E,GAAA34G,KAAA61D,EAAArjB,KAAAjb,aAAAmhF,IAEA,IAAAQ,EAAAF,IAAAplG,KAAAsE,MAAAnY,EAAA6T,KAAAsE,MAAA7W,EAAAuS,KAAAsE,MAAAmd,GAAA,GACA8jF,EAAAD,EAAAA,EAEAE,EAAA,IAAAn8E,GACAo8E,EAAA,IAAAp8E,GACAq8E,EAAA,IAAAr8E,GACAs8E,EAAA,IAAAt8E,GACArB,EAAAhoB,MAAAA,KAAAq8F,eAAA,EAAA,EAEA,GAAAzjE,EAAAgkB,iBAAA,CAEA,IAAAvyC,EAAAuuB,EAAAvuB,MAEAmzC,EADA5kB,EAAA37B,WACA0zB,SAAAvc,MAEA,GAAA,OAAA/J,EAIA,IAFA,IAAA01C,EAAA11C,EAAA+J,MAEA5tB,EAAA,EAAAyJ,EAAA8vD,EAAA54D,OAAA,EAAAX,EAAAyJ,EAAAzJ,GAAAwhC,EAAA,CAEA,IACAt8B,EAAAq0D,EAAAv5D,EAAA,GAOA,GALAg/G,EAAA3qF,UAAA2iC,EAAA,EAHAuC,EAAAv5D,IAIAi/G,EAAA5qF,UAAA2iC,EAAA,EAAA9xD,KAEAq5G,GAAA7lE,oBAAAsmE,EAAAC,EAAAE,EAAAD,GAEAH,GAAA,CAEAI,EAAAhiF,aAAA3jB,KAAA2qB,aAEA,IAAA0L,EAAA4rB,EAAArjB,IAAAF,OAAAxkB,WAAAyrF,GAEAtvE,EAAA4rB,EAAAtwB,MAAA0E,EAAA4rB,EAAArwB,KAEAgxB,EAAAj4D,KAAA,CAEA0rC,SAAAA,EAGAiG,MAAAopE,EAAAttF,QAAAuL,aAAA3jB,KAAA2qB,aACAtgB,MAAA7jB,EACAy0D,KAAA,KACA6H,UAAA,KACA/3D,OAAAiV,aAQA,IAAA,IAAAg5B,EAAA,EAAAC,EAAAukB,EAAAr2D,OAAA,EAAA,EAAA6xC,EAAAC,EAAAD,GAAAhR,EAAA,CAOA,GALAw9E,EAAA3qF,UAAA2iC,EAAA,EAAAxkB,GACAysE,EAAA5qF,UAAA2iC,EAAA,EAAAxkB,EAAA,KAEA+rE,GAAA7lE,oBAAAsmE,EAAAC,EAAAE,EAAAD,GAEAH,GAAA,CAEAI,EAAAhiF,aAAA3jB,KAAA2qB,aAEA,IAAAi7E,EAAA3jD,EAAArjB,IAAAF,OAAAxkB,WAAAyrF,GAEAC,EAAA3jD,EAAAtwB,MAAAi0E,EAAA3jD,EAAArwB,KAEAgxB,EAAAj4D,KAAA,CAEA0rC,SAAAuvE,EAGAtpE,MAAAopE,EAAAttF,QAAAuL,aAAA3jB,KAAA2qB,aACAtgB,MAAA2uB,EACAiiB,KAAA,KACA6H,UAAA,KACA/3D,OAAAiV,cAQA,GAAA44B,EAAA8kB,WAKA,IAHA,IAAA3E,EAAAngB,EAAAmgB,SACA8sD,EAAA9sD,EAAA5xD,OAEA+xC,EAAA,EAAAA,EAAA2sE,EAAA,EAAA3sE,GAAAlR,EAAA,CAIA,KAFA+8E,GAAA7lE,oBAAA6Z,EAAA7f,GAAA6f,EAAA7f,EAAA,GAAAysE,EAAAD,GAEAH,GAAA,CAEAI,EAAAhiF,aAAA3jB,KAAA2qB,aAEA,IAAAm7E,EAAA7jD,EAAArjB,IAAAF,OAAAxkB,WAAAyrF,GAEAG,EAAA7jD,EAAAtwB,MAAAm0E,EAAA7jD,EAAArwB,KAEAgxB,EAAAj4D,KAAA,CAEA0rC,SAAAyvE,EAGAxpE,MAAAopE,EAAAttF,QAAAuL,aAAA3jB,KAAA2qB,aACAtgB,MAAA6uB,EACA+hB,KAAA,KACA6H,UAAA,KACA/3D,OAAAiV,WAUA+hD,mBAAA,WAEA,IAAAnpB,EAAA54B,KAAA44B,SAEA,GAAAA,EAAAgkB,iBAAA,CAEA,IAAAH,EAAA7jB,EAAA6jB,gBACAh0D,EAAAlB,OAAAkB,KAAAg0D,GAEA,GAAAh0D,EAAAtB,OAAA,EAAA,CAEA,IAAAk5D,EAAA5D,EAAAh0D,EAAA,IAEA,QAAAqE,IAAAuzD,EAAA,CAEArgD,KAAAqiD,sBAAA,GACAriD,KAAA0iD,sBAAA,GAEA,IAAA,IAAAl1D,EAAA,EAAAm1D,EAAAtC,EAAAl5D,OAAAqG,EAAAm1D,EAAAn1D,IAAA,CAEA,IAAA2I,EAAAkqD,EAAA7yD,GAAA2I,MAAApO,OAAAyF,GAEAwS,KAAAqiD,sBAAA13D,KAAA,GACAqV,KAAA0iD,sBAAAvsD,GAAA3I,SAQA,CAEA,IAAAonD,EAAAhc,EAAAgc,kBAEA9nD,IAAA8nD,GAAAA,EAAAztD,OAAA,GAEA+P,QAAAkK,MAAA,0GAcA,IAAA2kG,GAAA,IAAA18E,GACA28E,GAAA,IAAA38E,GAEA,SAAA48E,GAAArtE,EAAAE,GAEAmsE,GAAA/9G,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAnM,KAAA,eAoEA,SAAAqyG,GAAAttE,EAAAE,GAEAmsE,GAAA/9G,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAnM,KAAA,WA6BA,SAAAmlF,GAAAngD,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,iBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,UAEAzuC,KAAA7X,IAAA,KAEA6X,KAAAk0C,SAAA,KAEAl0C,KAAA87B,KAAA,EACA97B,KAAA+2C,iBAAA,EAEA/2C,KAAA40C,cAAA,EAEA50C,KAAA60C,UAAAhc,GAlHAotE,GAAAx+G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAuiF,GAAAx9G,WAAA,CAEA4wB,YAAA4tF,GAEA5J,gBAAA,EAEA6I,qBAAA,WAEA,IAAAtsE,EAAA54B,KAAA44B,SAEA,GAAAA,EAAAgkB,iBAIA,GAAA,OAAAhkB,EAAAvuB,MAAA,CAKA,IAHA,IAAAu0C,EAAAhmB,EAAA37B,WAAA0zB,SACA8sB,EAAA,GAEAj3D,EAAA,EAAAyJ,EAAA2uD,EAAArmB,MAAA/xC,EAAAyJ,EAAAzJ,GAAA,EAEAu/G,GAAA/qF,oBAAA4jC,EAAAp4D,GACAw/G,GAAAhrF,oBAAA4jC,EAAAp4D,EAAA,GAEAi3D,EAAAj3D,GAAA,IAAAA,EAAA,EAAAi3D,EAAAj3D,EAAA,GACAi3D,EAAAj3D,EAAA,GAAAi3D,EAAAj3D,GAAAu/G,GAAA7rF,WAAA8rF,IAIAptE,EAAAokB,aAAA,eAAA,IAAAtE,GAAA+E,EAAA,SAIAvmD,QAAAC,KAAA,8GAIA,GAAAyhC,EAAA8kB,WAKA,IAHA,IAAA3E,EAAAngB,EAAAmgB,SACAosD,EAAAvsE,EAAA6kB,cAEAzkB,EAAA,EAAAC,EAAA8f,EAAA5xD,OAAA6xC,EAAAC,EAAAD,GAAA,EAEA+sE,GAAA35G,KAAA2sD,EAAA/f,IACAgtE,GAAA55G,KAAA2sD,EAAA/f,EAAA,IAEAmsE,EAAAnsE,GAAA,IAAAA,EAAA,EAAAmsE,EAAAnsE,EAAA,GACAmsE,EAAAnsE,EAAA,GAAAmsE,EAAAnsE,GAAA+sE,GAAA7rF,WAAA8rF,IAMA,OAAAhmG,QAkBAkmG,GAAAz+G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAuiF,GAAAx9G,WAAA,CAEA4wB,YAAA6tF,GAEA5J,YAAA,KA0CAtjB,GAAAvxF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAA2gE,GAEAA,GAAAvxF,UAAAouG,kBAAA,EAEA7c,GAAAvxF,UAAA2E,KAAA,SAAAvD,GAeA,OAbA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OAEA/uC,KAAA7X,IAAAU,EAAAV,IAEA6X,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAA87B,KAAAjzC,EAAAizC,KACA97B,KAAA+2C,gBAAAluD,EAAAkuD,gBAEA/2C,KAAA40C,aAAA/rD,EAAA+rD,aAEA50C,MAQA,IAAAmmG,GAAA,IAAA35E,GACA45E,GAAA,IAAA3nE,GACA4nE,GAAA,IAAAzoE,GACA0oE,GAAA,IAAAj9E,GAEA,SAAAk9E,GAAA3tE,EAAAE,GAEA9E,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,SAEAmM,KAAA44B,cAAA9rC,IAAA8rC,EAAAA,EAAA,IAAA4jB,GACAx8C,KAAA84B,cAAAhsC,IAAAgsC,EAAAA,EAAA,IAAAkgD,GAEAh5E,KAAA+hD,qBA0IA,SAAAykD,GAAAlqE,EAAAjyB,EAAAk7F,EAAA56E,EAAAs3B,EAAAW,EAAA73D,GAEA,IAAA07G,EAAAL,GAAAnnE,kBAAA3C,GAEA,GAAAmqE,EAAAlB,EAAA,CAEA,IAAAmB,EAAA,IAAAr9E,GAEA+8E,GAAArnE,oBAAAzC,EAAAoqE,GACAA,EAAA/iF,aAAAgH,GAEA,IAAA0L,EAAA4rB,EAAArjB,IAAAF,OAAAxkB,WAAAwsF,GAEA,GAAArwE,EAAA4rB,EAAAtwB,MAAA0E,EAAA4rB,EAAArwB,IAAA,OAEAgxB,EAAAj4D,KAAA,CAEA0rC,SAAAA,EACAswE,cAAAl4G,KAAAorB,KAAA4sF,GACAnqE,MAAAoqE,EACAr8F,MAAAA,EACA4wC,KAAA,KACAlwD,OAAAA,KAYA,SAAA67G,GAAAC,EAAAzmF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5sB,EAAA6sB,GAEAP,GAAAj5B,KAAA8Y,KAAA6mG,EAAAzmF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5sB,EAAA6sB,GAEA1gB,KAAAygB,YAAA3zB,IAAA2zB,EAAAA,EAAAtR,GAEAnP,KAAAwgB,eAAA1zB,IAAA0zB,EAAAA,EAAArS,GACAnO,KAAAugB,eAAAzzB,IAAAyzB,EAAAA,EAAApS,GAEAnO,KAAAkhB,iBAAA,EA4BA,SAAA4lF,GAAAjmF,EAAAhnB,EAAAC,EAAA2mB,EAAA5sB,EAAAusB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,EAAAte,GAEA+d,GAAAj5B,KAAA8Y,KAAA,KAAAogB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5sB,EAAA6sB,EAAAte,GAEApC,KAAA2f,MAAA,CAAA9lB,MAAAA,EAAAC,OAAAA,GACAkG,KAAA6gB,QAAAA,EAKA7gB,KAAAohB,OAAA,EAKAphB,KAAAkhB,iBAAA,EAaA,SAAA6lF,GAAAxqG,EAAA6jB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5sB,EAAA6sB,GAEAP,GAAAj5B,KAAA8Y,KAAAzD,EAAA6jB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5sB,EAAA6sB,GAEA1gB,KAAAq9C,aAAA,EAaA,SAAA2pD,GAAAntG,EAAAC,EAAAjG,EAAAusB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,EAAAD,GAIA,IAFAA,OAAA3zB,IAAA2zB,EAAAA,EAAAjR,MAEAA,IAAAiR,IAAAhR,GAEA,MAAA,IAAA3oB,MAAA,yFAIAgG,IAAA+G,GAAA4sB,IAAAjR,KAAA3b,EAAA4a,SACA3hB,IAAA+G,GAAA4sB,IAAAhR,KAAA5b,EAAAob,IAEAkR,GAAAj5B,KAAA8Y,KAAA,KAAAogB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5sB,EAAA6sB,GAEA1gB,KAAA2f,MAAA,CAAA9lB,MAAAA,EAAAC,OAAAA,GAEAkG,KAAAugB,eAAAzzB,IAAAyzB,EAAAA,EAAAvS,GACAhO,KAAAwgB,eAAA1zB,IAAA0zB,EAAAA,EAAAxS,GAEAhO,KAAAohB,OAAA,EACAphB,KAAAkhB,iBAAA,EAaA,SAAA+lF,GAAAruE,GAEA4jB,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,oBAIA,IAAAklD,EAAA,GAIAmuD,EAAA,CAAA,EAAA,GAAAC,EAAA,GACA1+G,EAAA,CAAA,IAAA,IAAA,KAIA,GAAAmwC,GAAAA,EAAA8kB,WAAA,CAMA,IAFA,IAAA1C,EAAApiB,EAAAoiB,MAEAx0D,EAAA,EAAAyJ,EAAA+qD,EAAA7zD,OAAAX,EAAAyJ,EAAAzJ,IAIA,IAFA,IAAAy0D,EAAAD,EAAAx0D,GAEAm0C,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAEA,IAAAysE,EAAAnsD,EAAAxyD,EAAAkyC,IACA0sE,EAAApsD,EAAAxyD,GAAAkyC,EAAA,GAAA,IACAusE,EAAA,GAAAz4G,KAAAqM,IAAAssG,EAAAC,GACAH,EAAA,GAAAz4G,KAAAsD,IAAAq1G,EAAAC,GAEA,IAAA/9G,EAAA49G,EAAA,GAAA,IAAAA,EAAA,QAEAp6G,IAAAq6G,EAAA79G,KAEA69G,EAAA79G,GAAA,CAAA4wD,OAAAgtD,EAAA,GAAA/sD,OAAA+sD,EAAA,KAUA,IAAA,IAAA3mD,KAAA4mD,EAAA,CAEA,IAAA/gH,EAAA+gH,EAAA5mD,GAEAoH,EAAA/uB,EAAAmgB,SAAA3yD,EAAA8zD,QACAnB,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAGAs3B,EAAApuD,MADAg9D,EAAA/uB,EAAAmgB,SAAA3yD,EAAA+zD,SACAhuD,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,SAIA,GAAAmX,GAAAA,EAAAgkB,iBAAA,CAEA,IAAA0qD,EAAA,IAAAj+E,GAEA,GAAA,OAAAuP,EAAAvuB,MAAA,CAIA,IAAAsmB,EAAAiI,EAAA37B,WAAA0zB,SACAovB,EAAAnnB,EAAAvuB,MACA+uC,EAAAxgB,EAAAwgB,OAEA,IAAAA,EAAAjyD,SAEAiyD,EAAA,CAAA,CAAAjX,MAAA,EAAA5J,MAAAwnB,EAAAxnB,MAAAyW,cAAA,KAMA,IAAA,IAAAzoD,EAAA,EAAAghH,EAAAnuD,EAAAjyD,OAAAZ,EAAAghH,IAAAhhH,EAOA,IALA,IAAAw0D,EAAA3B,EAAA7yD,GAEA47C,EAAA4Y,EAAA5Y,MAGAnJ,EAAAmJ,EAAAlJ,EAAAkJ,EAFA4Y,EAAAxiB,MAEAS,EAAAC,EAAAD,GAAA,EAEA,IAAA,IAAA+iB,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAEA,IAAAyrD,EAAAznD,EAAA7kC,KAAA8d,EAAA+iB,GACA0rD,EAAA1nD,EAAA7kC,KAAA8d,GAAA+iB,EAAA,GAAA,GACAmrD,EAAA,GAAAz4G,KAAAqM,IAAA0sG,EAAAC,GACAP,EAAA,GAAAz4G,KAAAsD,IAAAy1G,EAAAC,GAEA,IAAA/mD,EAAAwmD,EAAA,GAAA,IAAAA,EAAA,QAEAp6G,IAAAq6G,EAAAzmD,KAEAymD,EAAAzmD,GAAA,CAAAxG,OAAAgtD,EAAA,GAAA/sD,OAAA+sD,EAAA,KAYA,IAAA,IAAAQ,KAAAP,EAAA,CAEA,IAAAQ,EAAAR,EAAAO,GAEAJ,EAAAtsF,oBAAA2V,EAAAg3E,EAAAztD,QACAnB,EAAApuD,KAAA28G,EAAAn7G,EAAAm7G,EAAA75G,EAAA65G,EAAA7lF,GAEA6lF,EAAAtsF,oBAAA2V,EAAAg3E,EAAAxtD,QACApB,EAAApuD,KAAA28G,EAAAn7G,EAAAm7G,EAAA75G,EAAA65G,EAAA7lF,SAUA,IAFA,IAAAmmF,EAAAhvE,EAAA37B,WAAA0zB,SAEAuI,EAAA,EAAA2uE,EAAAD,EAAArvE,MAAA,EAAAW,EAAA2uE,EAAA3uE,IAEA,IAAA,IAAAutB,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAMA6gD,EAAAtsF,oBAAA4sF,EADA,EAAA1uE,EAAAutB,GAEA1N,EAAApuD,KAAA28G,EAAAn7G,EAAAm7G,EAAA75G,EAAA65G,EAAA7lF,GAGA6lF,EAAAtsF,oBAAA4sF,EADA,EAAA1uE,GAAAutB,EAAA,GAAA,GAEA1N,EAAApuD,KAAA28G,EAAAn7G,EAAAm7G,EAAA75G,EAAA65G,EAAA7lF,IAYAzhB,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IAiBA,SAAA+uD,GAAA50G,EAAA60G,EAAAC,GAEA9jD,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,qBAEAmM,KAAA64B,WAAA,CACA3lC,KAAAA,EACA60G,OAAAA,EACAC,OAAAA,GAGAhoG,KAAAmkD,mBAAA,IAAA8jD,GAAA/0G,EAAA60G,EAAAC,IACAhoG,KAAA+mD,gBASA,SAAAkhD,GAAA/0G,EAAA60G,EAAAC,GAEAxrD,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,2BAEAmM,KAAA64B,WAAA,CACA3lC,KAAAA,EACA60G,OAAAA,EACAC,OAAAA,GAKA,IAAAjoD,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIAztB,EAAA,IAAApC,GAEAuR,EAAA,IAAAvR,GAAAwR,EAAA,IAAAxR,GACA6+E,EAAA,IAAA7+E,GAAA8+E,EAAA,IAAA9+E,GAEAn2B,EAAA/L,OAAA,GAEA+P,QAAAkK,MAAA,oFAQA,IAFA,IAAAgnG,EAAAL,EAAA,EAEAvhH,EAAA,EAAAA,GAAAwhH,EAAAxhH,IAIA,IAFA,IAAA8xB,EAAA9xB,EAAAwhH,EAEArtE,EAAA,EAAAA,GAAAotE,EAAAptE,IAAA,CAEA,IAAA/zC,EAAA+zC,EAAAotE,EAIA70G,EAAAtM,EAAA0xB,EAAAsiB,GACAme,EAAApuD,KAAAiwC,EAAAzuC,EAAAyuC,EAAAntC,EAAAmtC,EAAAnZ,GAMA76B,EAlCA,MAkCA,GAEAsM,EAAAtM,EApCA,KAoCA0xB,EAAAuiB,GACAqtE,EAAArvF,WAAA+hB,EAAAC,KAIA3nC,EAAAtM,EAzCA,KAyCA0xB,EAAAuiB,GACAqtE,EAAArvF,WAAAgiB,EAAAD,IAIAtiB,EA9CA,MA8CA,GAEAplB,EAAAtM,EAAA0xB,EAhDA,KAgDAuiB,GACAstE,EAAAtvF,WAAA+hB,EAAAC,KAIA3nC,EAAAtM,EAAA0xB,EArDA,KAqDAuiB,GACAstE,EAAAtvF,WAAAgiB,EAAAD,IAMAnP,EAAAZ,aAAAq9E,EAAAC,GAAApuF,YACAi/B,EAAAruD,KAAA8gC,EAAAt/B,EAAAs/B,EAAAh+B,EAAAg+B,EAAAhK,GAIAy3B,EAAAvuD,KAAA/D,EAAA0xB,GAQA,IAAA,IAAA0gB,EAAA,EAAAA,EAAAgvE,EAAAhvE,IAEA,IAAA,IAAA+iB,EAAA,EAAAA,EAAAgsD,EAAAhsD,IAAA,CAEA,IACArwD,EAAAstC,EAAAovE,EAAArsD,EAAA,EACAr1D,GAAAsyC,EAAA,GAAAovE,EAAArsD,EAAA,EACAzuD,GAAA0rC,EAAA,GAAAovE,EAAArsD,EAIAgE,EAAAp1D,KAPAquC,EAAAovE,EAAArsD,EAOArwD,EAAA4B,GACAyyD,EAAAp1D,KAAAe,EAAAhF,EAAA4G,GAQA0S,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IAgBA,SAAAmvD,GAAAtvD,EAAAgH,EAAAl0B,EAAA0J,GAEA2uB,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,qBAEAmM,KAAA64B,WAAA,CACAkgB,SAAAA,EACAgH,QAAAA,EACAl0B,OAAAA,EACA0J,OAAAA,GAGAv1B,KAAAmkD,mBAAA,IAAAmkD,GAAAvvD,EAAAgH,EAAAl0B,EAAA0J,IACAv1B,KAAA+mD,gBASA,SAAAuhD,GAAAvvD,EAAAgH,EAAAl0B,EAAA0J,GAEAinB,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,2BAEAmM,KAAA64B,WAAA,CACAkgB,SAAAA,EACAgH,QAAAA,EACAl0B,OAAAA,EACA0J,OAAAA,GAGA1J,EAAAA,GAAA,EAKA,IAAA08E,EAAA,GACAC,EAAA,GAwDA,SAAAC,EAAA5hH,EAAA6E,EAAAhF,EAAA6uC,GAUA,IARA,IAAAmzE,EAAAj6G,KAAAub,IAAA,EAAAurB,GAIAjd,EAAA,GAIA9xB,EAAA,EAAAA,GAAAkiH,EAAAliH,IAAA,CAEA8xB,EAAA9xB,GAAA,GAOA,IALA,IAAAmiH,EAAA9hH,EAAAuxB,QAAA3C,KAAA/uB,EAAAF,EAAAkiH,GACAE,EAAAl9G,EAAA0sB,QAAA3C,KAAA/uB,EAAAF,EAAAkiH,GAEAG,EAAAH,EAAAliH,EAEAm0C,EAAA,EAAAA,GAAAkuE,EAAAluE,IAIAriB,EAAA9xB,GAAAm0C,GAFA,IAAAA,GAAAn0C,IAAAkiH,EAEAC,EAIAA,EAAAvwF,QAAA3C,KAAAmzF,EAAAjuE,EAAAkuE,GAUA,IAAA,IAAA7vE,EAAA,EAAAA,EAAA0vE,EAAA1vE,IAEA,IAAA,IAAA+iB,EAAA,EAAAA,EAAA,GAAA2sD,EAAA1vE,GAAA,EAAA+iB,IAAA,CAEA,IAAA34C,EAAA3U,KAAAC,MAAAqtD,EAAA,GAEAA,EAAA,GAAA,GAEA+sD,EAAAxwF,EAAA0gB,GAAA51B,EAAA,IACA0lG,EAAAxwF,EAAA0gB,EAAA,GAAA51B,IACA0lG,EAAAxwF,EAAA0gB,GAAA51B,MAIA0lG,EAAAxwF,EAAA0gB,GAAA51B,EAAA,IACA0lG,EAAAxwF,EAAA0gB,EAAA,GAAA51B,EAAA,IACA0lG,EAAAxwF,EAAA0gB,EAAA,GAAA51B,MAmFA,SAAA0lG,EAAAnhD,GAEA4gD,EAAA59G,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAIA,SAAAsnF,EAAA1+F,EAAAs9C,GAEA,IAAA2a,EAAA,EAAAj4D,EAEAs9C,EAAAx7D,EAAA4sD,EAAAupB,EAAA,GACA3a,EAAAl6D,EAAAsrD,EAAAupB,EAAA,GACA3a,EAAAlmC,EAAAs3B,EAAAupB,EAAA,GAsCA,SAAA0mC,EAAAzlF,EAAA++C,EAAA5rC,EAAAuyE,GAEAA,EAAA,GAAA,IAAA1lF,EAAAp3B,IAEAq8G,EAAAlmC,GAAA/+C,EAAAp3B,EAAA,GAIA,IAAAuqC,EAAAvqC,GAAA,IAAAuqC,EAAAjV,IAEA+mF,EAAAlmC,GAAA2mC,EAAA,EAAAx6G,KAAAgmB,GAAA,IAQA,SAAAw0F,EAAAvyE,GAEA,OAAAjoC,KAAAwrB,MAAAyc,EAAAjV,GAAAiV,EAAAvqC,IAtOA,SAAAopC,GAQA,IANA,IAAA1uC,EAAA,IAAAwiC,GACA39B,EAAA,IAAA29B,GACA3iC,EAAA,IAAA2iC,GAIA7iC,EAAA,EAAAA,EAAAu5D,EAAA54D,OAAAX,GAAA,EAIAuiH,EAAAhpD,EAAAv5D,EAAA,GAAAK,GACAkiH,EAAAhpD,EAAAv5D,EAAA,GAAAkF,GACAq9G,EAAAhpD,EAAAv5D,EAAA,GAAAE,GAIA+hH,EAAA5hH,EAAA6E,EAAAhF,EAAA6uC,GA9CA2zE,CATA3zE,EAAAA,GAAA,GA4HA,SAAA1J,GAMA,IAJA,IAAA87B,EAAA,IAAAt+B,GAIA7iC,EAAA,EAAAA,EAAA+hH,EAAAphH,OAAAX,GAAA,EAEAmhE,EAAAx7D,EAAAo8G,EAAA/hH,EAAA,GACAmhE,EAAAl6D,EAAA86G,EAAA/hH,EAAA,GACAmhE,EAAAlmC,EAAA8mF,EAAA/hH,EAAA,GAEAmhE,EAAA5tC,YAAAf,eAAA6S,GAEA08E,EAAA/hH,EAAA,GAAAmhE,EAAAx7D,EACAo8G,EAAA/hH,EAAA,GAAAmhE,EAAAl6D,EACA86G,EAAA/hH,EAAA,GAAAmhE,EAAAlmC,EA/HA0nF,CAAAt9E,GAqIA,WAIA,IAFA,IAAA87B,EAAA,IAAAt+B,GAEA7iC,EAAA,EAAAA,EAAA+hH,EAAAphH,OAAAX,GAAA,EAAA,CAEAmhE,EAAAx7D,EAAAo8G,EAAA/hH,EAAA,GACAmhE,EAAAl6D,EAAA86G,EAAA/hH,EAAA,GACAmhE,EAAAlmC,EAAA8mF,EAAA/hH,EAAA,GAEA,IAAAI,EAAAqiH,EAAAthD,GAAA,EAAAl5D,KAAAgmB,GAAA,GACA6D,GAqHAoe,EArHAixB,EAuHAl5D,KAAAwrB,OAAAyc,EAAAjpC,EAAAgB,KAAAorB,KAAA6c,EAAAvqC,EAAAuqC,EAAAvqC,EAAAuqC,EAAAjV,EAAAiV,EAAAjV,IAvHAhzB,KAAAgmB,GAAA,IACA+zF,EAAA79G,KAAA/D,EAAA,EAAA0xB,GAoHA,IAAAoe,GA7DA,WAYA,IAVA,IAAA7vC,EAAA,IAAAwiC,GACA39B,EAAA,IAAA29B,GACA3iC,EAAA,IAAA2iC,GAEA+/E,EAAA,IAAA//E,GAEAggF,EAAA,IAAA5xF,GACA6xF,EAAA,IAAA7xF,GACA8xF,EAAA,IAAA9xF,GAEAjxB,EAAA,EAAAm0C,EAAA,EAAAn0C,EAAA+hH,EAAAphH,OAAAX,GAAA,EAAAm0C,GAAA,EAAA,CAEA9zC,EAAA2wB,IAAA+wF,EAAA/hH,EAAA,GAAA+hH,EAAA/hH,EAAA,GAAA+hH,EAAA/hH,EAAA,IACAkF,EAAA8rB,IAAA+wF,EAAA/hH,EAAA,GAAA+hH,EAAA/hH,EAAA,GAAA+hH,EAAA/hH,EAAA,IACAE,EAAA8wB,IAAA+wF,EAAA/hH,EAAA,GAAA+hH,EAAA/hH,EAAA,GAAA+hH,EAAA/hH,EAAA,IAEA6iH,EAAA7xF,IAAAgxF,EAAA7tE,EAAA,GAAA6tE,EAAA7tE,EAAA,IACA2uE,EAAA9xF,IAAAgxF,EAAA7tE,EAAA,GAAA6tE,EAAA7tE,EAAA,IACA4uE,EAAA/xF,IAAAgxF,EAAA7tE,EAAA,GAAA6tE,EAAA7tE,EAAA,IAEAyuE,EAAAh9G,KAAAvF,GAAA0xB,IAAA7sB,GAAA6sB,IAAA7xB,GAAAwyB,aAAA,GAEA,IAAAswF,EAAAP,EAAAG,GAEAJ,EAAAK,EAAA1uE,EAAA,EAAA9zC,EAAA2iH,GACAR,EAAAM,EAAA3uE,EAAA,EAAAjvC,EAAA89G,GACAR,EAAAO,EAAA5uE,EAAA,EAAAj0C,EAAA8iH,KA/EAC,GAMA,WAIA,IAAA,IAAAjjH,EAAA,EAAAA,EAAAgiH,EAAArhH,OAAAX,GAAA,EAAA,CAIA,IAAAq/B,EAAA2iF,EAAAhiH,EAAA,GACAy/B,EAAAuiF,EAAAhiH,EAAA,GACAoqC,EAAA43E,EAAAhiH,EAAA,GAEAuL,EAAAtD,KAAAsD,IAAA8zB,EAAAI,EAAA2K,GACA91B,EAAArM,KAAAqM,IAAA+qB,EAAAI,EAAA2K,GAIA7+B,EAAA,IAAA+I,EAAA,KAEA+qB,EAAA,KAAA2iF,EAAAhiH,EAAA,IAAA,GACAy/B,EAAA,KAAAuiF,EAAAhiH,EAAA,IAAA,GACAoqC,EAAA,KAAA43E,EAAAhiH,EAAA,IAAA,KAzBAkjH,GAnJAC,GAIA3pG,KAAAg9C,aAAA,WAAA,IAAAtE,GAAA6vD,EAAA,IACAvoG,KAAAg9C,aAAA,SAAA,IAAAtE,GAAA6vD,EAAAp9G,QAAA,IACA6U,KAAAg9C,aAAA,KAAA,IAAAtE,GAAA8vD,EAAA,IAEA,IAAAjzE,EAEAv1B,KAAA2+C,uBAIA3+C,KAAAu/C,mBAqQA,SAAAqqD,GAAA/9E,EAAA0J,GAEA2uB,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,sBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA0J,OAAAA,GAGAv1B,KAAAmkD,mBAAA,IAAA0lD,GAAAh+E,EAAA0J,IACAv1B,KAAA+mD,gBASA,SAAA8iD,GAAAh+E,EAAA0J,GAUA+yE,GAAAphH,KAAA8Y,KARA,CACA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAGA,CACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAGA6rB,EAAA0J,GAEAv1B,KAAAnM,KAAA,4BAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA0J,OAAAA,GAeA,SAAAu0E,GAAAj+E,EAAA0J,GAEA2uB,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,qBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA0J,OAAAA,GAGAv1B,KAAAmkD,mBAAA,IAAA4lD,GAAAl+E,EAAA0J,IACAv1B,KAAA+mD,gBASA,SAAAgjD,GAAAl+E,EAAA0J,GAaA+yE,GAAAphH,KAAA8Y,KAXA,CACA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAGA,CACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,GAGA6rB,EAAA0J,GAEAv1B,KAAAnM,KAAA,2BAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA0J,OAAAA,GAeA,SAAAy0E,GAAAn+E,EAAA0J,GAEA2uB,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,sBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA0J,OAAAA,GAGAv1B,KAAAmkD,mBAAA,IAAA8lD,GAAAp+E,EAAA0J,IACAv1B,KAAA+mD,gBASA,SAAAkjD,GAAAp+E,EAAA0J,GAEA,IAAAjvC,GAAA,EAAAmI,KAAAorB,KAAA,IAAA,EAeAyuF,GAAAphH,KAAA8Y,KAbulC,EAAA0J,GAEAv1B,KAAAnM,KAAA,4BAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA0J,OAAAA,GAeA,SAAA20E,GAAAr+E,EAAA0J,GAEA2uB,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,uBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA0J,OAAAA,GAGAv1B,KAAAmkD,mBAAA,IAAAgmD,GAAAt+E,EAAA0J,IACAv1B,KAAA+mD,gBASA,SAAAojD,GAAAt+E,EAAA0J,GAEA,IAAAjvC,GAAA,EAAAmI,KAAAorB,KAAA,IAAA,EACA1zB,EAAA,EAAAG,EAsCAgiH,GAAAphH,KAAA8Y,KApCA,EAGA,GAAA,GAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,GAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAGA,GAAA7Z,GAAAG,EAAA,GAAAH,EAAAG,EACA,EAAAH,GAAAG,EAAA,EAAAH,EAAAG,GAGAH,GAAAG,EAAA,GAAAH,EAAAG,EAAA,EACAH,GAAAG,EAAA,EAAAH,EAAAG,EAAA,GAGAA,EAAA,GAAAH,EAAAG,EAAA,GAAAH,GACAG,EAAA,EAAAH,EAAAG,EAAA,EAAAH,GAGA,CACA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EACA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EACA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAGA0lC,EAAA0J,GAEAv1B,KAAAnM,KAAA,6BAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA0J,OAAAA,GAoBA,SAAA60E,GAAAt6B,EAAAu6B,EAAAx+E,EAAAy+E,EAAAC,EAAAC,GAEAtmD,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,eAEAmM,KAAA64B,WAAA,CACAi3C,KAAAA,EACAu6B,gBAAAA,EACAx+E,OAAAA,EACAy+E,eAAAA,EACAC,OAAAA,QAGAz9G,IAAA09G,GAAAtzG,QAAAC,KAAA,+CAEA,IAAAszG,EAAA,IAAAC,GAAA56B,EAAAu6B,EAAAx+E,EAAAy+E,EAAAC,GAIAvqG,KAAA2qG,SAAAF,EAAAE,SACA3qG,KAAAg5C,QAAAyxD,EAAAzxD,QACAh5C,KAAA4qG,UAAAH,EAAAG,UAIA5qG,KAAAmkD,mBAAAsmD,GACAzqG,KAAA+mD,gBASA,SAAA2jD,GAAA56B,EAAAu6B,EAAAx+E,EAAAy+E,EAAAC,GAEA/tD,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,qBAEAmM,KAAA64B,WAAA,CACAi3C,KAAAA,EACAu6B,gBAAAA,EACAx+E,OAAAA,EACAy+E,eAAAA,EACAC,OAAAA,GAIA1+E,EAAAA,GAAA,EACAy+E,EAAAA,GAAA,EAGA,IAAAO,EAAA/6B,EAAAg7B,oBALAT,EAAAA,GAAA,GAGAE,EAAAA,IAAA,GAMAvqG,KAAA2qG,SAAAE,EAAAF,SACA3qG,KAAAg5C,QAAA6xD,EAAA7xD,QACAh5C,KAAA4qG,UAAAC,EAAAD,UAIA,IAAAjjD,EAAA,IAAAt+B,GACAoC,EAAA,IAAApC,GACA9F,EAAA,IAAA9L,GACAszF,EAAA,IAAA1hF,GAIA0vB,EAAA,GACAC,EAAA,GACAE,EAAA,GACA6G,EAAA,GAyCA,SAAAirD,EAAAxkH,GAIAukH,EAAAj7B,EAAAm7B,WAAAzkH,EAAA6jH,EAAAU,GASA,IALA,IAAAn8G,EAAAi8G,EAAA7xD,QAAAxyD,GACA0kH,EAAAL,EAAAD,UAAApkH,GAIAm0C,EAAA,EAAAA,GAAA2vE,EAAA3vE,IAAA,CAEA,IAAAriB,EAAAqiB,EAAA2vE,EAAA77G,KAAAgmB,GAAA,EAEAsC,EAAAtoB,KAAAsoB,IAAAuB,GACAxB,GAAAroB,KAAAqoB,IAAAwB,GAIAmT,EAAAt/B,EAAA2qB,EAAAloB,EAAAzC,EAAA4qB,EAAAm0F,EAAA/+G,EACAs/B,EAAAh+B,EAAAqpB,EAAAloB,EAAAnB,EAAAspB,EAAAm0F,EAAAz9G,EACAg+B,EAAAhK,EAAA3K,EAAAloB,EAAA6yB,EAAA1K,EAAAm0F,EAAAzpF,EACAgK,EAAA1R,YAEAi/B,EAAAruD,KAAA8gC,EAAAt/B,EAAAs/B,EAAAh+B,EAAAg+B,EAAAhK,GAIAkmC,EAAAx7D,EAAA4+G,EAAA5+G,EAAA0/B,EAAAJ,EAAAt/B,EACAw7D,EAAAl6D,EAAAs9G,EAAAt9G,EAAAo+B,EAAAJ,EAAAh+B,EACAk6D,EAAAlmC,EAAAspF,EAAAtpF,EAAAoK,EAAAJ,EAAAhK,EAEAs3B,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,KA7DA,WAEA,IAAA,IAAAj7B,EAAA,EAAAA,EAAA6jH,EAAA7jH,IAEAwkH,EAAAxkH,GASAwkH,GAAA,IAAAT,EAAAF,EAAA,GA4EA,WAEA,IAAA,IAAA7jH,EAAA,EAAAA,GAAA6jH,EAAA7jH,IAEA,IAAA,IAAAm0C,EAAA,EAAAA,GAAA2vE,EAAA3vE,IAEApX,EAAAp3B,EAAA3F,EAAA6jH,EACA9mF,EAAA91B,EAAAktC,EAAA2vE,EAEApxD,EAAAvuD,KAAA44B,EAAAp3B,EAAAo3B,EAAA91B,GAhFAk8G,GAiDA,WAEA,IAAA,IAAAhvE,EAAA,EAAAA,GAAA0vE,EAAA1vE,IAEA,IAAA,IAAAn0C,EAAA,EAAAA,GAAA8jH,EAAA9jH,IAAA,CAEA,IAAAK,GAAAyjH,EAAA,IAAA3vE,EAAA,IAAAn0C,EAAA,GACAkF,GAAA4+G,EAAA,GAAA3vE,GAAAn0C,EAAA,GACAE,GAAA4jH,EAAA,GAAA3vE,EAAAn0C,EACA8G,GAAAg9G,EAAA,IAAA3vE,EAAA,GAAAn0C,EAIAu5D,EAAAp1D,KAAA9D,EAAA6E,EAAA4B,GACAyyD,EAAAp1D,KAAAe,EAAAhF,EAAA4G,IA3DA69G,GAjCAC,GAIAprG,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IAsIA,SAAAmyD,GAAAx/E,EAAAy/E,EAAAjB,EAAAC,EAAAtjH,EAAA4vB,EAAA20F,GAEArnD,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,oBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACAy/E,KAAAA,EACAjB,gBAAAA,EACAC,eAAAA,EACAtjH,EAAAA,EACA4vB,EAAAA,QAGA9pB,IAAAy+G,GAAAr0G,QAAAC,KAAA,4FAEA6I,KAAAmkD,mBAAA,IAAAqnD,GAAA3/E,EAAAy/E,EAAAjB,EAAAC,EAAAtjH,EAAA4vB,IACA5W,KAAA+mD,gBASA,SAAAykD,GAAA3/E,EAAAy/E,EAAAjB,EAAAC,EAAAtjH,EAAA4vB,GAEA4lC,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,0BAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACAy/E,KAAAA,EACAjB,gBAAAA,EACAC,eAAAA,EACAtjH,EAAAA,EACA4vB,EAAAA,GAGAiV,EAAAA,GAAA,EACAy/E,EAAAA,GAAA,GACAjB,EAAA57G,KAAAC,MAAA27G,IAAA,GACAC,EAAA77G,KAAAC,MAAA47G,IAAA,EACAtjH,EAAAA,GAAA,EACA4vB,EAAAA,GAAA,EAuBA,IAnBA,IAAAmpC,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIAyO,EAAA,IAAAt+B,GACAoC,EAAA,IAAApC,GAEAoiF,EAAA,IAAApiF,GACAqiF,EAAA,IAAAriF,GAEA6hF,EAAA,IAAA7hF,GACAh5B,EAAA,IAAAg5B,GACAz6B,EAAA,IAAAy6B,GAIA7iC,EAAA,EAAAA,GAAA6jH,IAAA7jH,EAAA,CAIA,IAAAI,EAAAJ,EAAA6jH,EAAArjH,EAAAyH,KAAAgmB,GAAA,EAKAk3F,EAAA/kH,EAAAI,EAAA4vB,EAAAiV,EAAA4/E,GACAE,EAAA/kH,EAAA,IAAAI,EAAA4vB,EAAAiV,EAAA6/E,GAIAr7G,EAAAwoB,WAAA6yF,EAAAD,GACA78G,EAAA6pB,WAAAizF,EAAAD,GACAP,EAAArgF,aAAAx6B,EAAAzB,GACAA,EAAAi8B,aAAAqgF,EAAA76G,GAIA66G,EAAAnxF,YACAnrB,EAAAmrB,YAEA,IAAA,IAAA4gB,EAAA,EAAAA,GAAA2vE,IAAA3vE,EAAA,CAKA,IAAAriB,EAAAqiB,EAAA2vE,EAAA77G,KAAAgmB,GAAA,EACA2K,GAAAksF,EAAA78G,KAAAqoB,IAAAwB,GACA+G,EAAAisF,EAAA78G,KAAAsoB,IAAAuB,GAKAqvC,EAAAx7D,EAAAs/G,EAAAt/G,GAAAizB,EAAAxwB,EAAAzC,EAAAkzB,EAAA6rF,EAAA/+G,GACAw7D,EAAAl6D,EAAAg+G,EAAAh+G,GAAA2xB,EAAAxwB,EAAAnB,EAAA4xB,EAAA6rF,EAAAz9G,GACAk6D,EAAAlmC,EAAAgqF,EAAAhqF,GAAArC,EAAAxwB,EAAA6yB,EAAApC,EAAA6rF,EAAAzpF,GAEAs3B,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAIAgK,EAAA5S,WAAA8uC,EAAA8jD,GAAA1xF,YAEAi/B,EAAAruD,KAAA8gC,EAAAt/B,EAAAs/B,EAAAh+B,EAAAg+B,EAAAhK,GAIAy3B,EAAAvuD,KAAAnE,EAAA6jH,GACAnxD,EAAAvuD,KAAAgwC,EAAA2vE,IAQA,IAAA,IAAAvuD,EAAA,EAAAA,GAAAsuD,EAAAtuD,IAEA,IAAA,IAAA/iB,EAAA,EAAAA,GAAAsxE,EAAAtxE,IAAA,CAIA,IACAttC,GAAA4+G,EAAA,GAAAvuD,GAAA/iB,EAAA,GACAtyC,GAAA4jH,EAAA,GAAAvuD,EAAA/iB,EACA1rC,GAAAg9G,EAAA,IAAAvuD,EAAA,GAAA/iB,EAIA+mB,EAAAp1D,MAPA2/G,EAAA,IAAAvuD,EAAA,IAAA/iB,EAAA,GAOAttC,EAAA4B,GACAyyD,EAAAp1D,KAAAe,EAAAhF,EAAA4G,GAeA,SAAAq+G,EAAA/kH,EAAAI,EAAA4vB,EAAAiV,EAAA8E,GAEA,IAAAi7E,EAAAn9G,KAAAqoB,IAAAlwB,GACAilH,EAAAp9G,KAAAsoB,IAAAnwB,GACAklH,EAAAl1F,EAAA5vB,EAAAJ,EACAmlH,EAAAt9G,KAAAqoB,IAAAg1F,GAEAn7E,EAAAxkC,EAAA0/B,GAAA,EAAAkgF,GAAA,GAAAH,EACAj7E,EAAAljC,EAAAo+B,GAAA,EAAAkgF,GAAAF,EAAA,GACAl7E,EAAAlP,EAAAoK,EAAAp9B,KAAAsoB,IAAA+0F,GAAA,GAhBA9rG,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IA8BA,SAAA8yD,GAAAngF,EAAAy/E,EAAAhB,EAAAD,EAAA4B,GAEA/nD,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,gBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACAy/E,KAAAA,EACAhB,eAAAA,EACAD,gBAAAA,EACA4B,IAAAA,GAGAjsG,KAAAmkD,mBAAA,IAAA+nD,GAAArgF,EAAAy/E,EAAAhB,EAAAD,EAAA4B,IACAjsG,KAAA+mD,gBASA,SAAAmlD,GAAArgF,EAAAy/E,EAAAhB,EAAAD,EAAA4B,GAEAzvD,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,sBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACAy/E,KAAAA,EACAhB,eAAAA,EACAD,gBAAAA,EACA4B,IAAAA,GAGApgF,EAAAA,GAAA,EACAy/E,EAAAA,GAAA,GACAhB,EAAA77G,KAAAC,MAAA47G,IAAA,EACAD,EAAA57G,KAAAC,MAAA27G,IAAA,EACA4B,EAAAA,GAAA,EAAAx9G,KAAAgmB,GAiBA,IAbA,IAAAsrC,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIA79B,EAAA,IAAAgO,GACAs+B,EAAA,IAAAt+B,GACAoC,EAAA,IAAApC,GAIAsR,EAAA,EAAAA,GAAA2vE,EAAA3vE,IAEA,IAAA,IAAAn0C,EAAA,EAAAA,GAAA6jH,EAAA7jH,IAAA,CAEA,IAAAI,EAAAJ,EAAA6jH,EAAA4B,EACA3zF,EAAAqiB,EAAA2vE,EAAA77G,KAAAgmB,GAAA,EAIAkzC,EAAAx7D,GAAA0/B,EAAAy/E,EAAA78G,KAAAqoB,IAAAwB,IAAA7pB,KAAAqoB,IAAAlwB,GACA+gE,EAAAl6D,GAAAo+B,EAAAy/E,EAAA78G,KAAAqoB,IAAAwB,IAAA7pB,KAAAsoB,IAAAnwB,GACA+gE,EAAAlmC,EAAA6pF,EAAA78G,KAAAsoB,IAAAuB,GAEAygC,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAIApG,EAAAlvB,EAAA0/B,EAAAp9B,KAAAqoB,IAAAlwB,GACAy0B,EAAA5tB,EAAAo+B,EAAAp9B,KAAAsoB,IAAAnwB,GACA6kC,EAAA5S,WAAA8uC,EAAAtsC,GAAAtB,YAEAi/B,EAAAruD,KAAA8gC,EAAAt/B,EAAAs/B,EAAAh+B,EAAAg+B,EAAAhK,GAIAy3B,EAAAvuD,KAAAnE,EAAA6jH,GACAnxD,EAAAvuD,KAAAgwC,EAAA2vE,GAQA,IAAA,IAAAvuD,EAAA,EAAAA,GAAAuuD,EAAAvuD,IAEA,IAAA,IAAA/iB,EAAA,EAAAA,GAAAqxE,EAAArxE,IAAA,CAIA,IACAttC,GAAA2+G,EAAA,IAAAtuD,EAAA,GAAA/iB,EAAA,EACAtyC,GAAA2jH,EAAA,IAAAtuD,EAAA,GAAA/iB,EACA1rC,GAAA+8G,EAAA,GAAAtuD,EAAA/iB,EAIA+mB,EAAAp1D,MAPA0/G,EAAA,GAAAtuD,EAAA/iB,EAAA,EAOAttC,EAAA4B,GACAyyD,EAAAp1D,KAAAe,EAAAhF,EAAA4G,GAQA0S,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IAlrDAqtD,GAAA9+G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAAkuF,GAEA5tE,UAAA,EAEAvsC,KAAA,SAAAvD,GAOA,OALAmrC,GAAAvsC,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA84B,SAAAjwC,EAAAiwC,SACA94B,KAAA44B,SAAA/vC,EAAA+vC,SAEA54B,MAIAw3B,QAAA,SAAAyqB,EAAAW,GAEA,IAAAhqB,EAAA54B,KAAA44B,SACAjO,EAAA3qB,KAAA2qB,YACAy6E,EAAAnjD,EAAAojD,OAAAkB,OAAAnB,UAUA,GANA,OAAAxsE,EAAA2gB,gBAAA3gB,EAAA2kB,wBAEA8oD,GAAAj6G,KAAAwsC,EAAA2gB,gBACA8sD,GAAA1iF,aAAAgH,GACA07E,GAAAx6E,QAAAu5E,GAEA,IAAAnjD,EAAArjB,IAAA5B,iBAAAqpE,IAAA,CAIAF,GAAAloF,WAAA0M,GACAy7E,GAAAh6G,KAAA61D,EAAArjB,KAAAjb,aAAAwiF,IAEA,IAAAb,EAAAF,IAAAplG,KAAAsE,MAAAnY,EAAA6T,KAAAsE,MAAA7W,EAAAuS,KAAAsE,MAAAmd,GAAA,GACA8jF,EAAAD,EAAAA,EAEA,GAAA1sE,EAAAgkB,iBAAA,CAEA,IAAAvyC,EAAAuuB,EAAAvuB,MAEAmzC,EADA5kB,EAAA37B,WACA0zB,SAAAvc,MAEA,GAAA,OAAA/J,EAIA,IAFA,IAAA01C,EAAA11C,EAAA+J,MAEA5tB,EAAA,EAAAm1C,EAAAokB,EAAA54D,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAAK,EAAAk5D,EAAAv5D,GAEA8/G,GAAAzrF,UAAA2iC,EAAA,EAAA32D,GAEA2/G,GAAAF,GAAAz/G,EAAA0+G,EAAA56E,EAAAs3B,EAAAW,EAAA5iD,WAMA,IAAA,IAAAg5B,EAAA,EAAA/oC,EAAAutD,EAAAr2D,OAAA,EAAA6xC,EAAA/oC,EAAA+oC,IAEAstE,GAAAzrF,UAAA2iC,EAAA,EAAAxkB,GAEAwtE,GAAAF,GAAAttE,EAAAusE,EAAA56E,EAAAs3B,EAAAW,EAAA5iD,WAUA,IAFA,IAAA+4C,EAAAngB,EAAAmgB,SAEA7f,EAAA,EAAAD,EAAA8f,EAAA5xD,OAAA+xC,EAAAD,EAAAC,IAEAstE,GAAAztD,EAAA7f,GAAAA,EAAAqsE,EAAA56E,EAAAs3B,EAAAW,EAAA5iD,QAQA+hD,mBAAA,WAEA,IAAAnpB,EAAA54B,KAAA44B,SAEA,GAAAA,EAAAgkB,iBAAA,CAEA,IAAAH,EAAA7jB,EAAA6jB,gBACAh0D,EAAAlB,OAAAkB,KAAAg0D,GAEA,GAAAh0D,EAAAtB,OAAA,EAAA,CAEA,IAAAk5D,EAAA5D,EAAAh0D,EAAA,IAEA,QAAAqE,IAAAuzD,EAAA,CAEArgD,KAAAqiD,sBAAA,GACAriD,KAAA0iD,sBAAA,GAEA,IAAA,IAAAl1D,EAAA,EAAAm1D,EAAAtC,EAAAl5D,OAAAqG,EAAAm1D,EAAAn1D,IAAA,CAEA,IAAA2I,EAAAkqD,EAAA7yD,GAAA2I,MAAApO,OAAAyF,GAEAwS,KAAAqiD,sBAAA13D,KAAA,GACAqV,KAAA0iD,sBAAAvsD,GAAA3I,SAQA,CAEA,IAAAonD,EAAAhc,EAAAgc,kBAEA9nD,IAAA8nD,GAAAA,EAAAztD,OAAA,GAEA+P,QAAAkK,MAAA,4GAyDAwlG,GAAAn/G,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAvC,GAAA14B,WAAA,CAEA4wB,YAAAuuF,GAEArc,gBAAA,EAEAzlF,OAAA,WAEA,IAAA+hG,EAAA7mG,KAAA2f,MAEAknF,EAAAsF,YAAAtF,EAAAuF,oBAEApsG,KAAAq9C,aAAA,OA+BAypD,GAAAr/G,UAAAF,OAAAm7B,OAAAvC,GAAA14B,YACA4wB,YAAAyuF,GAEAA,GAAAr/G,UAAAokG,qBAAA,GAcAkb,GAAAt/G,UAAAF,OAAAm7B,OAAAvC,GAAA14B,YACA4wB,YAAA0uF,GACAA,GAAAt/G,UAAA4kH,iBAAA,GAgCArF,GAAAv/G,UAAAF,OAAAm7B,OAAAvC,GAAA14B,YACA4wB,YAAA2uF,GACAA,GAAAv/G,UAAAmlG,gBAAA,GAsKAqa,GAAAx/G,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAA4uF,IA6BAa,GAAArgH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAyvF,IA2HAG,GAAAxgH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAA4vF,IA6BAI,GAAA5gH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAgwF,IA4SAC,GAAA7gH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAiwF,IAyBAsB,GAAAniH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAuxF,IAyBAC,GAAApiH,UAAAF,OAAAm7B,OAAA4lF,GAAA7gH,YACA4wB,YAAAwxF,IAyBAC,GAAAriH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAyxF,IA4BAC,GAAAtiH,UAAAF,OAAAm7B,OAAA4lF,GAAA7gH,YACA4wB,YAAA0xF,IAyBAC,GAAAviH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAA2xF,IAgCAC,GAAAxiH,UAAAF,OAAAm7B,OAAA4lF,GAAA7gH,YACA4wB,YAAA4xF,IAyBAC,GAAAziH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAA6xF,IAwDAC,GAAA1iH,UAAAF,OAAAm7B,OAAA4lF,GAAA7gH,YACA4wB,YAAA8xF,IA6CAC,GAAA3iH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAA+xF,IAsKAM,GAAAjjH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAqyF,GAEAA,GAAAjjH,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA05C,GAAA/0D,UAAAo7B,OAAA37B,KAAA8Y,MAIA,OAFA8C,EAAAgtE,KAAA9vE,KAAA64B,WAAAi3C,KAAAjtD,SAEA/f,IAmCAuoG,GAAA5jH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAgzF,IAsJAG,GAAA/jH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAmzF,IA6BAQ,GAAAvkH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAA2zF,IAsGAE,GAAAzkH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAA6zF,GAOA,IAAAI,GAEA,SAAAxpG,EAAAypG,EAAAC,GAEAA,EAAAA,GAAA,EAEA,IAOAvxE,EAAAC,EAAAE,EAAAC,EAAAlvC,EAAAsB,EAAAg/G,EAPAC,EAAAH,GAAAA,EAAAplH,OACAwlH,EAAAD,EAAAH,EAAA,GAAAC,EAAA1pG,EAAA3b,OACAylH,EAAAC,GAAA/pG,EAAA,EAAA6pG,EAAAH,GAAA,GACAtjC,EAAA,GAEA,IAAA0jC,GAAAA,EAAAljG,OAAAkjG,EAAAE,KAAA,OAAA5jC,EAOA,GAHAwjC,IAAAE,EAqTA,SAAA9pG,EAAAypG,EAAAK,EAAAJ,GAEA,IACAhmH,EAAAqK,EAAAirF,EADAixB,EAAA,GAGA,IAAAvmH,EAAA,EAAAqK,EAAA07G,EAAAplH,OAAAX,EAAAqK,EAAArK,KAIAs1F,EAAA+wB,GAAA/pG,EAFAypG,EAAA/lH,GAAAgmH,EACAhmH,EAAAqK,EAAA,EAAA07G,EAAA/lH,EAAA,GAAAgmH,EAAA1pG,EAAA3b,OACAqlH,GAAA,MACA1wB,EAAApyE,OAAAoyE,EAAAkxB,SAAA,GACAD,EAAApiH,KAAAsiH,GAAAnxB,IAOA,IAHAixB,EAAA/gH,KAAAkhH,IAGA1mH,EAAA,EAAAA,EAAAumH,EAAA5lH,OAAAX,IAEA2mH,GAAAJ,EAAAvmH,GAAAomH,GACAA,EAAAQ,GAAAR,EAAAA,EAAAljG,MAIA,OAAAkjG,EA9UAS,CAAAvqG,EAAAypG,EAAAK,EAAAJ,IAGA1pG,EAAA3b,OAAA,GAAAqlH,EAAA,CAEAvxE,EAAAG,EAAAt4B,EAAA,GACAo4B,EAAAG,EAAAv4B,EAAA,GAEA,IAAA,IAAAtc,EAAAgmH,EAAAhmH,EAAAmmH,EAAAnmH,GAAAgmH,GAEArgH,EAAA2W,EAAAtc,IAEAy0C,IAAAA,EAAA9uC,IADAsB,EAAAqV,EAAAtc,EAAA,IAEA00C,IAAAA,EAAAztC,GACAtB,EAAAivC,IAAAA,EAAAjvC,GACAsB,EAAA4tC,IAAAA,EAAA5tC,GAMAg/G,EAAA,KADAA,EAAAh+G,KAAAsD,IAAAqpC,EAAAH,EAAAI,EAAAH,IACA,EAAAuxE,EAAA,EAMA,OAFAa,GAAAV,EAAA1jC,EAAAsjC,EAAAvxE,EAAAC,EAAAuxE,GAEAvjC,GAOA,SAAA2jC,GAAA/pG,EAAAq/B,EAAAlgC,EAAAuqG,EAAAe,GAEA,IAAA/mH,EAAAgnH,EAEA,GAAAD,IAitBA,SAAAzqG,EAAAq/B,EAAAlgC,EAAAuqG,GAGA,IADA,IAAAiB,EAAA,EACAjnH,EAAA27C,EAAAxH,EAAA14B,EAAAuqG,EAAAhmH,EAAAyb,EAAAzb,GAAAgmH,EAEAiB,IAAA3qG,EAAA63B,GAAA73B,EAAAtc,KAAAsc,EAAAtc,EAAA,GAAAsc,EAAA63B,EAAA,IACAA,EAAAn0C,EAIA,OAAAinH,EA3tBAC,CAAA5qG,EAAAq/B,EAAAlgC,EAAAuqG,GAAA,EAEA,IAAAhmH,EAAA27C,EAAA37C,EAAAyb,EAAAzb,GAAAgmH,EAAAgB,EAAAG,GAAAnnH,EAAAsc,EAAAtc,GAAAsc,EAAAtc,EAAA,GAAAgnH,QAIA,IAAAhnH,EAAAyb,EAAAuqG,EAAAhmH,GAAA27C,EAAA37C,GAAAgmH,EAAAgB,EAAAG,GAAAnnH,EAAAsc,EAAAtc,GAAAsc,EAAAtc,EAAA,GAAAgnH,GAWA,OAPAA,GAAA5yF,GAAA4yF,EAAAA,EAAA9jG,QAEAkkG,GAAAJ,GACAA,EAAAA,EAAA9jG,MAIA8jG,EAKA,SAAAJ,GAAAjrE,EAAAlgC,GAEA,IAAAkgC,EAAA,OAAAA,EACAlgC,IAAAA,EAAAkgC,GAEA,IACA0rE,EADA7mH,EAAAm7C,EAEA,GAIA,GAFA0rE,GAAA,EAEA7mH,EAAAgmH,UAAApyF,GAAA5zB,EAAAA,EAAA0iB,OAAA,IAAAokG,GAAA9mH,EAAA8lH,KAAA9lH,EAAAA,EAAA0iB,MASA1iB,EAAAA,EAAA0iB,SATA,CAIA,GAFAkkG,GAAA5mH,IACAA,EAAAib,EAAAjb,EAAA8lH,QACA9lH,EAAA0iB,KAAA,MACAmkG,GAAA,SAQAA,GAAA7mH,IAAAib,GAEA,OAAAA,EAKA,SAAAqrG,GAAAS,EAAA7kC,EAAAsjC,EAAAvxE,EAAAC,EAAAuxE,EAAAuB,GAEA,GAAAD,EAAA,EAGAC,GAAAvB,GA4VA,SAAAtqE,EAAAlH,EAAAC,EAAAuxE,GAEA,IAAAzlH,EAAAm7C,EACA,GAEA,OAAAn7C,EAAAy6B,IAAAz6B,EAAAy6B,EAAAwsF,GAAAjnH,EAAAmF,EAAAnF,EAAAyG,EAAAwtC,EAAAC,EAAAuxE,IACAzlH,EAAAknH,MAAAlnH,EAAA8lH,KACA9lH,EAAAmnH,MAAAnnH,EAAA0iB,KACA1iB,EAAAA,EAAA0iB,WAEA1iB,IAAAm7C,GAEAn7C,EAAAknH,MAAAC,MAAA,KACAnnH,EAAAknH,MAAA,KAQA,SAAApyB,GAEA,IAAAt1F,EAAAQ,EAAA4vB,EAAAxwB,EAAAgoH,EAAAC,EAAAC,EAAAC,EACAC,EAAA,EAEA,EAAA,CAOA,IALAxnH,EAAA80F,EACAA,EAAA,KACAsyB,EAAA,KACAC,EAAA,EAEArnH,GAAA,CAKA,IAHAqnH,IACAz3F,EAAA5vB,EACAsnH,EAAA,EACA9nH,EAAA,EAAAA,EAAAgoH,IAEAF,IACA13F,EAAAA,EAAAu3F,OAHA3nH,KAUA,IAFA+nH,EAAAC,EAEAF,EAAA,GAAAC,EAAA,GAAA33F,GAEA,IAAA03F,IAAA,IAAAC,IAAA33F,GAAA5vB,EAAAy6B,GAAA7K,EAAA6K,IAEAr7B,EAAAY,EACAA,EAAAA,EAAAmnH,MACAG,MAIAloH,EAAAwwB,EACAA,EAAAA,EAAAu3F,MACAI,KAIAH,EAAAA,EAAAD,MAAA/nH,EACA01F,EAAA11F,EAEAA,EAAA8nH,MAAAE,EACAA,EAAAhoH,EAIAY,EAAA4vB,EAIAw3F,EAAAD,MAAA,KACAK,GAAA,QAEAH,EAAA,GAhEAI,CAAAznH,GA3WA0nH,CAAAX,EAAA9yE,EAAAC,EAAAuxE,GAMA,IAJA,IACAK,EAAApjG,EADArI,EAAA0sG,EAIAA,EAAAjB,OAAAiB,EAAArkG,MAKA,GAHAojG,EAAAiB,EAAAjB,KACApjG,EAAAqkG,EAAArkG,KAEA+iG,EAAAkC,GAAAZ,EAAA9yE,EAAAC,EAAAuxE,GAAAmC,GAAAb,GAGA7kC,EAAAv+E,KAAAmiH,EAAAtmH,EAAAgmH,GACAtjC,EAAAv+E,KAAAojH,EAAAvnH,EAAAgmH,GACAtjC,EAAAv+E,KAAA+e,EAAAljB,EAAAgmH,GAEAoB,GAAAG,GAGAA,EAAArkG,EAAAA,KACArI,EAAAqI,EAAAA,UASA,IAHAqkG,EAAArkG,KAGArI,EAAA,CAGA2sG,EAMA,IAAAA,EAGAV,GADAS,EAAAc,GAAAzB,GAAAW,GAAA7kC,EAAAsjC,GACAtjC,EAAAsjC,EAAAvxE,EAAAC,EAAAuxE,EAAA,GAIA,IAAAuB,GAEAc,GAAAf,EAAA7kC,EAAAsjC,EAAAvxE,EAAAC,EAAAuxE,GAbAa,GAAAF,GAAAW,GAAA7kC,EAAAsjC,EAAAvxE,EAAAC,EAAAuxE,EAAA,GAiBA,QASA,SAAAmC,GAAAb,GAEA,IAAAlnH,EAAAknH,EAAAjB,KACAphH,EAAAqiH,EACArnH,EAAAqnH,EAAArkG,KAEA,GAAAokG,GAAAjnH,EAAA6E,EAAAhF,IAAA,EAAA,OAAA,EAKA,IAFA,IAAAM,EAAA+mH,EAAArkG,KAAAA,KAEA1iB,IAAA+mH,EAAAjB,MAAA,CAEA,GAAAiC,GAAAloH,EAAAsF,EAAAtF,EAAA4G,EAAA/B,EAAAS,EAAAT,EAAA+B,EAAA/G,EAAAyF,EAAAzF,EAAA+G,EAAAzG,EAAAmF,EAAAnF,EAAAyG,IACAqgH,GAAA9mH,EAAA8lH,KAAA9lH,EAAAA,EAAA0iB,OAAA,EAAA,OAAA,EACA1iB,EAAAA,EAAA0iB,KAIA,OAAA,EAIA,SAAAilG,GAAAZ,EAAA9yE,EAAAC,EAAAuxE,GAEA,IAAA5lH,EAAAknH,EAAAjB,KACAphH,EAAAqiH,EACArnH,EAAAqnH,EAAArkG,KAEA,GAAAokG,GAAAjnH,EAAA6E,EAAAhF,IAAA,EAAA,OAAA,EAgBA,IAbA,IAEAsoH,EAAAnoH,EAAAsF,EAAAT,EAAAS,EAAAtF,EAAAsF,EAAAzF,EAAAyF,EAAAtF,EAAAsF,EAAAzF,EAAAyF,EAAAT,EAAAS,EAAAzF,EAAAyF,EAAAT,EAAAS,EAAAzF,EAAAyF,EACA8iH,EAAApoH,EAAA4G,EAAA/B,EAAA+B,EAAA5G,EAAA4G,EAAA/G,EAAA+G,EAAA5G,EAAA4G,EAAA/G,EAAA+G,EAAA/B,EAAA+B,EAAA/G,EAAA+G,EAAA/B,EAAA+B,EAAA/G,EAAA+G,EAGA0tC,EAAA8yE,GANApnH,EAAAsF,EAAAT,EAAAS,EAAAtF,EAAAsF,EAAAzF,EAAAyF,EAAAtF,EAAAsF,EAAAzF,EAAAyF,EAAAT,EAAAS,EAAAzF,EAAAyF,EAAAT,EAAAS,EAAAzF,EAAAyF,EACAtF,EAAA4G,EAAA/B,EAAA+B,EAAA5G,EAAA4G,EAAA/G,EAAA+G,EAAA5G,EAAA4G,EAAA/G,EAAA+G,EAAA/B,EAAA+B,EAAA/G,EAAA+G,EAAA/B,EAAA+B,EAAA/G,EAAA+G,EAKAwtC,EAAAC,EAAAuxE,GACAnxE,EAAA2yE,GAAAe,EAAAC,EAAAh0E,EAAAC,EAAAuxE,GAEAzlH,EAAA+mH,EAAAG,MACA7nH,EAAA0nH,EAAAI,MAGAnnH,GAAAA,EAAAy6B,GAAA0Z,GAAA90C,GAAAA,EAAAo7B,GAAA6Z,GAAA,CAEA,GAAAt0C,IAAA+mH,EAAAjB,MAAA9lH,IAAA+mH,EAAArkG,MACAqlG,GAAAloH,EAAAsF,EAAAtF,EAAA4G,EAAA/B,EAAAS,EAAAT,EAAA+B,EAAA/G,EAAAyF,EAAAzF,EAAA+G,EAAAzG,EAAAmF,EAAAnF,EAAAyG,IACAqgH,GAAA9mH,EAAA8lH,KAAA9lH,EAAAA,EAAA0iB,OAAA,EAAA,OAAA,EAGA,GAFA1iB,EAAAA,EAAAknH,MAEA7nH,IAAA0nH,EAAAjB,MAAAzmH,IAAA0nH,EAAArkG,MACAqlG,GAAAloH,EAAAsF,EAAAtF,EAAA4G,EAAA/B,EAAAS,EAAAT,EAAA+B,EAAA/G,EAAAyF,EAAAzF,EAAA+G,EAAApH,EAAA8F,EAAA9F,EAAAoH,IACAqgH,GAAAznH,EAAAymH,KAAAzmH,EAAAA,EAAAqjB,OAAA,EAAA,OAAA,EACArjB,EAAAA,EAAA8nH,MAKA,KAAAnnH,GAAAA,EAAAy6B,GAAA0Z,GAAA,CAEA,GAAAn0C,IAAA+mH,EAAAjB,MAAA9lH,IAAA+mH,EAAArkG,MACAqlG,GAAAloH,EAAAsF,EAAAtF,EAAA4G,EAAA/B,EAAAS,EAAAT,EAAA+B,EAAA/G,EAAAyF,EAAAzF,EAAA+G,EAAAzG,EAAAmF,EAAAnF,EAAAyG,IACAqgH,GAAA9mH,EAAA8lH,KAAA9lH,EAAAA,EAAA0iB,OAAA,EAAA,OAAA,EACA1iB,EAAAA,EAAAknH,MAKA,KAAA7nH,GAAAA,EAAAo7B,GAAA6Z,GAAA,CAEA,GAAAj1C,IAAA0nH,EAAAjB,MAAAzmH,IAAA0nH,EAAArkG,MACAqlG,GAAAloH,EAAAsF,EAAAtF,EAAA4G,EAAA/B,EAAAS,EAAAT,EAAA+B,EAAA/G,EAAAyF,EAAAzF,EAAA+G,EAAApH,EAAA8F,EAAA9F,EAAAoH,IACAqgH,GAAAznH,EAAAymH,KAAAzmH,EAAAA,EAAAqjB,OAAA,EAAA,OAAA,EACArjB,EAAAA,EAAA8nH,MAIA,OAAA,EAKA,SAAAU,GAAA1sE,EAAA+mC,EAAAsjC,GAEA,IAAAxlH,EAAAm7C,EACA,EAAA,CAEA,IAAAt7C,EAAAG,EAAA8lH,KACAphH,EAAA1E,EAAA0iB,KAAAA,MAEAkR,GAAA/zB,EAAA6E,IAAAk3D,GAAA/7D,EAAAG,EAAAA,EAAA0iB,KAAAhe,IAAAwjH,GAAAroH,EAAA6E,IAAAwjH,GAAAxjH,EAAA7E,KAEAqiF,EAAAv+E,KAAA9D,EAAAL,EAAAgmH,GACAtjC,EAAAv+E,KAAA3D,EAAAR,EAAAgmH,GACAtjC,EAAAv+E,KAAAe,EAAAlF,EAAAgmH,GAGAoB,GAAA5mH,GACA4mH,GAAA5mH,EAAA0iB,MAEA1iB,EAAAm7C,EAAAz2C,GAIA1E,EAAAA,EAAA0iB,WAEA1iB,IAAAm7C,GAEA,OAAAirE,GAAApmH,GAKA,SAAA8nH,GAAA3sE,EAAA+mC,EAAAsjC,EAAAvxE,EAAAC,EAAAuxE,GAGA,IAAA5lH,EAAAs7C,EACA,EAAA,CAGA,IADA,IAAAz2C,EAAA7E,EAAA6iB,KAAAA,KACAhe,IAAA7E,EAAAimH,MAAA,CAEA,GAAAjmH,EAAAL,IAAAkF,EAAAlF,GAAA2oH,GAAAtoH,EAAA6E,GAAA,CAGA,IAAAhF,EAAA0oH,GAAAvoH,EAAA6E,GASA,OANA7E,EAAAumH,GAAAvmH,EAAAA,EAAA6iB,MACAhjB,EAAA0mH,GAAA1mH,EAAAA,EAAAgjB,MAGA4jG,GAAAzmH,EAAAqiF,EAAAsjC,EAAAvxE,EAAAC,EAAAuxE,QACAa,GAAA5mH,EAAAwiF,EAAAsjC,EAAAvxE,EAAAC,EAAAuxE,GAKA/gH,EAAAA,EAAAge,KAIA7iB,EAAAA,EAAA6iB,WAEA7iB,IAAAs7C,GAkCA,SAAA+qE,GAAArmH,EAAA6E,GAEA,OAAA7E,EAAAsF,EAAAT,EAAAS,EAKA,SAAAghH,GAAAkC,EAAAzC,GAGA,GADAA,EAcA,SAAAyC,EAAAzC,GAEA,IAIAp/G,EAJAxG,EAAA4lH,EACA0C,EAAAD,EAAAljH,EACAojH,EAAAF,EAAA5hH,EACAo8B,GAAAviB,SAKA,EAAA,CAEA,GAAAioG,GAAAvoH,EAAAyG,GAAA8hH,GAAAvoH,EAAA0iB,KAAAjc,GAAAzG,EAAA0iB,KAAAjc,IAAAzG,EAAAyG,EAAA,CAEA,IAAAtB,EAAAnF,EAAAmF,GAAAojH,EAAAvoH,EAAAyG,IAAAzG,EAAA0iB,KAAAvd,EAAAnF,EAAAmF,IAAAnF,EAAA0iB,KAAAjc,EAAAzG,EAAAyG,GACA,GAAAtB,GAAAmjH,GAAAnjH,EAAA09B,EAAA,CAGA,GADAA,EAAA19B,EACAA,IAAAmjH,EAAA,CAEA,GAAAC,IAAAvoH,EAAAyG,EAAA,OAAAzG,EACA,GAAAuoH,IAAAvoH,EAAA0iB,KAAAjc,EAAA,OAAAzG,EAAA0iB,KAIAlc,EAAAxG,EAAAmF,EAAAnF,EAAA0iB,KAAAvd,EAAAnF,EAAAA,EAAA0iB,MAMA1iB,EAAAA,EAAA0iB,WAEA1iB,IAAA4lH,GAEA,IAAAp/G,EAAA,OAAA,KAEA,GAAA8hH,IAAAzlF,EAAA,OAAAr8B,EAMA,IAIAogD,EAJAvsC,EAAA7T,EACAgiH,EAAAhiH,EAAArB,EACAsjH,EAAAjiH,EAAAC,EACAiiH,EAAApoG,SAGAtgB,EAAAwG,EAEA,GAEA8hH,GAAAtoH,EAAAmF,GAAAnF,EAAAmF,GAAAqjH,GAAAF,IAAAtoH,EAAAmF,GACA4iH,GAAAQ,EAAAE,EAAAH,EAAAzlF,EAAA0lF,EAAAC,EAAAC,EAAAF,EAAAE,EAAA5lF,EAAAylF,EAAAC,EAAAvoH,EAAAmF,EAAAnF,EAAAyG,KAEAmgD,EAAAn/C,KAAAkC,IAAA4+G,EAAAvoH,EAAAyG,IAAA6hH,EAAAtoH,EAAAmF,GAEA+iH,GAAAloH,EAAAqoH,KAAAzhE,EAAA8hE,GAAA9hE,IAAA8hE,IAAA1oH,EAAAmF,EAAAqB,EAAArB,GAAAnF,EAAAmF,IAAAqB,EAAArB,GAAAwjH,GAAAniH,EAAAxG,OAEAwG,EAAAxG,EACA0oH,EAAA9hE,IAMA5mD,EAAAA,EAAA0iB,WAEA1iB,IAAAqa,GAEA,OAAA7T,EArFAoiH,CAAAP,EAAAzC,GACA,CAEA,IAAAlhH,EAAA0jH,GAAAxC,EAAAyC,GAGAjC,GAAAR,EAAAA,EAAAljG,MACA0jG,GAAA1hH,EAAAA,EAAAge,OAmFA,SAAAimG,GAAAniH,EAAAxG,GAEA,OAAA8mH,GAAAtgH,EAAAs/G,KAAAt/G,EAAAxG,EAAA8lH,MAAA,GAAAgB,GAAA9mH,EAAA0iB,KAAAlc,EAAAA,EAAAkc,MAAA,EA2FA,SAAAukG,GAAA9hH,EAAAsB,EAAAwtC,EAAAC,EAAAuxE,GAgBA,OAPAtgH,EAAA,aADAA,EAAA,YADAA,EAAA,YADAA,EAAA,WAHAA,EAAA,OAAAA,EAAA8uC,GAAAwxE,GAGAtgH,GAAA,IACAA,GAAA,IACAA,GAAA,IACAA,GAAA,KAKAsB,EAAA,aADAA,EAAA,YADAA,EAAA,YADAA,EAAA,WAPAA,EAAA,OAAAA,EAAAytC,GAAAuxE,GAOAh/G,GAAA,IACAA,GAAA,IACAA,GAAA,IACAA,GAAA,KAEA,EAKA,SAAAw/G,GAAA9qE,GAEA,IAAAn7C,EAAAm7C,EACA0tE,EAAA1tE,EACA,IAEAn7C,EAAAmF,EAAA0jH,EAAA1jH,GAAAnF,EAAAmF,IAAA0jH,EAAA1jH,GAAAnF,EAAAyG,EAAAoiH,EAAApiH,KAAAoiH,EAAA7oH,GACAA,EAAAA,EAAA0iB,WAEA1iB,IAAAm7C,GAEA,OAAA0tE,EAKA,SAAAd,GAAAjkF,EAAAC,EAAAE,EAAAC,EAAA9L,EAAAC,EAAAywF,EAAAC,GAEA,OAAA3wF,EAAA0wF,IAAA/kF,EAAAglF,IAAAjlF,EAAAglF,IAAAzwF,EAAA0wF,IAAA,IACAjlF,EAAAglF,IAAA5kF,EAAA6kF,IAAA9kF,EAAA6kF,IAAA/kF,EAAAglF,IAAA,IACA9kF,EAAA6kF,IAAAzwF,EAAA0wF,IAAA3wF,EAAA0wF,IAAA5kF,EAAA6kF,IAAA,EAKA,SAAAZ,GAAAtoH,EAAA6E,GAEA,OAAA7E,EAAA6iB,KAAAljB,IAAAkF,EAAAlF,GAAAK,EAAAimH,KAAAtmH,IAAAkF,EAAAlF,IAsDA,SAAAK,EAAA6E,GAEA,IAAA1E,EAAAH,EACA,EAAA,CAEA,GAAAG,EAAAR,IAAAK,EAAAL,GAAAQ,EAAA0iB,KAAAljB,IAAAK,EAAAL,GAAAQ,EAAAR,IAAAkF,EAAAlF,GAAAQ,EAAA0iB,KAAAljB,IAAAkF,EAAAlF,GACAo8D,GAAA57D,EAAAA,EAAA0iB,KAAA7iB,EAAA6E,GAAA,OAAA,EACA1E,EAAAA,EAAA0iB,WAEA1iB,IAAAH,GAEA,OAAA,EAjEAmpH,CAAAnpH,EAAA6E,KACAwjH,GAAAroH,EAAA6E,IAAAwjH,GAAAxjH,EAAA7E,IA8EA,SAAAA,EAAA6E,GAEA,IAAA1E,EAAAH,EACAopH,GAAA,EACAH,GAAAjpH,EAAAsF,EAAAT,EAAAS,GAAA,EACA4jH,GAAAlpH,EAAA4G,EAAA/B,EAAA+B,GAAA,EACA,GAEAzG,EAAAyG,EAAAsiH,GAAA/oH,EAAA0iB,KAAAjc,EAAAsiH,GAAA/oH,EAAA0iB,KAAAjc,IAAAzG,EAAAyG,GACAqiH,GAAA9oH,EAAA0iB,KAAAvd,EAAAnF,EAAAmF,IAAA4jH,EAAA/oH,EAAAyG,IAAAzG,EAAA0iB,KAAAjc,EAAAzG,EAAAyG,GAAAzG,EAAAmF,IACA8jH,GAAAA,GACAjpH,EAAAA,EAAA0iB,WAEA1iB,IAAAH,GAEA,OAAAopH,EA7FAC,CAAArpH,EAAA6E,KACAoiH,GAAAjnH,EAAAimH,KAAAjmH,EAAA6E,EAAAohH,OAAAgB,GAAAjnH,EAAA6E,EAAAohH,KAAAphH,KACAkvB,GAAA/zB,EAAA6E,IAAAoiH,GAAAjnH,EAAAimH,KAAAjmH,EAAAA,EAAA6iB,MAAA,GAAAokG,GAAApiH,EAAAohH,KAAAphH,EAAAA,EAAAge,MAAA,GAKA,SAAAokG,GAAA9mH,EAAA4vB,EAAAzwB,GAEA,OAAAywB,EAAAnpB,EAAAzG,EAAAyG,IAAAtH,EAAAgG,EAAAyqB,EAAAzqB,IAAAyqB,EAAAzqB,EAAAnF,EAAAmF,IAAAhG,EAAAsH,EAAAmpB,EAAAnpB,GAKA,SAAAmtB,GAAAigB,EAAAC,GAEA,OAAAD,EAAA1uC,IAAA2uC,EAAA3uC,GAAA0uC,EAAAptC,IAAAqtC,EAAArtC,EAKA,SAAAm1D,GAAA/nB,EAAAs1E,EAAAr1E,EAAAs1E,GAEA,IAAAC,EAAAnmG,GAAA4jG,GAAAjzE,EAAAs1E,EAAAr1E,IACAw1E,EAAApmG,GAAA4jG,GAAAjzE,EAAAs1E,EAAAC,IACAG,EAAArmG,GAAA4jG,GAAAhzE,EAAAs1E,EAAAv1E,IACA21E,EAAAtmG,GAAA4jG,GAAAhzE,EAAAs1E,EAAAD,IAEA,OAAAE,IAAAC,GAAAC,IAAAC,MAEA,IAAAH,IAAAI,GAAA51E,EAAAC,EAAAq1E,QACA,IAAAG,IAAAG,GAAA51E,EAAAu1E,EAAAD,QACA,IAAAI,IAAAE,GAAA31E,EAAAD,EAAAu1E,OACA,IAAAI,IAAAC,GAAA31E,EAAAq1E,EAAAC,OAOA,SAAAK,GAAAzpH,EAAA4vB,EAAAzwB,GAEA,OAAAywB,EAAAzqB,GAAAsC,KAAAsD,IAAA/K,EAAAmF,EAAAhG,EAAAgG,IAAAyqB,EAAAzqB,GAAAsC,KAAAqM,IAAA9T,EAAAmF,EAAAhG,EAAAgG,IAAAyqB,EAAAnpB,GAAAgB,KAAAsD,IAAA/K,EAAAyG,EAAAtH,EAAAsH,IAAAmpB,EAAAnpB,GAAAgB,KAAAqM,IAAA9T,EAAAyG,EAAAtH,EAAAsH,GAIA,SAAAyc,GAAApY,GAEA,OAAAA,EAAA,EAAA,EAAAA,EAAA,GAAA,EAAA,EAqBA,SAAAo9G,GAAAroH,EAAA6E,GAEA,OAAAoiH,GAAAjnH,EAAAimH,KAAAjmH,EAAAA,EAAA6iB,MAAA,EACAokG,GAAAjnH,EAAA6E,EAAA7E,EAAA6iB,OAAA,GAAAokG,GAAAjnH,EAAAA,EAAAimH,KAAAphH,IAAA,EACAoiH,GAAAjnH,EAAA6E,EAAA7E,EAAAimH,MAAA,GAAAgB,GAAAjnH,EAAAA,EAAA6iB,KAAAhe,GAAA,EA0BA,SAAA0jH,GAAAvoH,EAAA6E,GAEA,IAAA4pB,EAAA,IAAArrB,GAAApD,EAAAL,EAAAK,EAAAsF,EAAAtF,EAAA4G,GACA+nB,EAAA,IAAAvrB,GAAAyB,EAAAlF,EAAAkF,EAAAS,EAAAT,EAAA+B,GACAijH,EAAA7pH,EAAA6iB,KACAinG,EAAAjlH,EAAAohH,KAcA,OAZAjmH,EAAA6iB,KAAAhe,EACAA,EAAAohH,KAAAjmH,EAEAyuB,EAAA5L,KAAAgnG,EACAA,EAAA5D,KAAAx3F,EAEAE,EAAA9L,KAAA4L,EACAA,EAAAw3F,KAAAt3F,EAEAm7F,EAAAjnG,KAAA8L,EACAA,EAAAs3F,KAAA6D,EAEAn7F,EAKA,SAAAm4F,GAAAnnH,EAAA2F,EAAAsB,EAAA+/G,GAEA,IAAAxmH,EAAA,IAAAiD,GAAAzD,EAAA2F,EAAAsB,GAgBA,OAdA+/G,GAOAxmH,EAAA0iB,KAAA8jG,EAAA9jG,KACA1iB,EAAA8lH,KAAAU,EACAA,EAAA9jG,KAAAojG,KAAA9lH,EACAwmH,EAAA9jG,KAAA1iB,IARAA,EAAA8lH,KAAA9lH,EACAA,EAAA0iB,KAAA1iB,GAWAA,EAIA,SAAA4mH,GAAA5mH,GAEAA,EAAA0iB,KAAAojG,KAAA9lH,EAAA8lH,KACA9lH,EAAA8lH,KAAApjG,KAAA1iB,EAAA0iB,KAEA1iB,EAAAknH,QAAAlnH,EAAAknH,MAAAC,MAAAnnH,EAAAmnH,OACAnnH,EAAAmnH,QAAAnnH,EAAAmnH,MAAAD,MAAAlnH,EAAAknH,OAIA,SAAAjkH,GAAAzD,EAAA2F,EAAAsB,GAGAuS,KAAAxZ,EAAAA,EAGAwZ,KAAA7T,EAAAA,EACA6T,KAAAvS,EAAAA,EAGAuS,KAAA8sG,KAAA,KACA9sG,KAAA0J,KAAA,KAGA1J,KAAAyhB,EAAA,KAGAzhB,KAAAkuG,MAAA,KACAluG,KAAAmuG,MAAA,KAGAnuG,KAAAgtG,SAAA,EAsBA,IAAA4D,GAAA,CAIA9C,KAAA,SAAA+C,GAKA,IAHA,IAAAxqH,EAAAwqH,EAAA1pH,OACAN,EAAA,EAEAG,EAAAX,EAAA,EAAAuwB,EAAA,EAAAA,EAAAvwB,EAAAW,EAAA4vB,IAEA/vB,GAAAgqH,EAAA7pH,GAAAmF,EAAA0kH,EAAAj6F,GAAAnpB,EAAAojH,EAAAj6F,GAAAzqB,EAAA0kH,EAAA7pH,GAAAyG,EAIA,MAAA,GAAA5G,GAIAiqH,YAAA,SAAAC,GAEA,OAAAH,GAAA9C,KAAAiD,GAAA,GAIAC,iBAAA,SAAAH,EAAAI,GAEA,IAAAl4D,EAAA,GACAwzD,EAAA,GACAvxD,EAAA,GAEAk2D,GAAAL,GACAM,GAAAp4D,EAAA83D,GAIA,IAAAO,EAAAP,EAAA1pH,OAEA8pH,EAAA1oH,QAAA2oH,IAEA,IAAA,IAAA1qH,EAAA,EAAAA,EAAAyqH,EAAA9pH,OAAAX,IAEA+lH,EAAA5hH,KAAAymH,GACAA,GAAAH,EAAAzqH,GAAAW,OACAgqH,GAAAp4D,EAAAk4D,EAAAzqH,IAUA,IAJA,IAAA0iF,EAAAojC,GAAAvzD,EAAAwzD,GAIAvzE,EAAA,EAAAA,EAAAkwC,EAAA/hF,OAAA6xC,GAAA,EAEAgiB,EAAArwD,KAAAu+E,EAAA/9E,MAAA6tC,EAAAA,EAAA,IAIA,OAAAgiB,IAMA,SAAAk2D,GAAAz1E,GAEA,IAAAxrC,EAAAwrC,EAAAt0C,OAEA8I,EAAA,GAAAwrC,EAAAxrC,EAAA,GAAA2qB,OAAA6gB,EAAA,KAEAA,EAAAhrC,MAMA,SAAA0gH,GAAAp4D,EAAA83D,GAEA,IAAA,IAAArqH,EAAA,EAAAA,EAAAqqH,EAAA1pH,OAAAX,IAEAuyD,EAAApuD,KAAAkmH,EAAArqH,GAAA2F,GACA4sD,EAAApuD,KAAAkmH,EAAArqH,GAAAiH,GAgCA,SAAA4jH,GAAAp5E,EAAAtW,GAEAuiC,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,kBAEAmM,KAAA64B,WAAA,CACAZ,OAAAA,EACAtW,QAAAA,GAGA3hB,KAAAmkD,mBAAA,IAAAmtD,GAAAr5E,EAAAtW,IACA3hB,KAAA+mD,gBAoBA,SAAAuqD,GAAAr5E,EAAAtW,GAEA66B,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,wBAEAmM,KAAA64B,WAAA,CACAZ,OAAAA,EACAtW,QAAAA,GAGAsW,EAAA/sC,MAAA6B,QAAAkrC,GAAAA,EAAA,CAAAA,GAOA,IALA,IAAAmsB,EAAApkD,KAEAuxG,EAAA,GACA5V,EAAA,GAEAn1G,EAAA,EAAAyJ,EAAAgoC,EAAA9wC,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAGAgrH,EADAv5E,EAAAzxC,IAcA,SAAAgrH,EAAAC,GAEA,IAAAC,EAAA,GAIAC,OAAA7kH,IAAA60B,EAAAgwF,cAAAhwF,EAAAgwF,cAAA,GACAC,OAAA9kH,IAAA60B,EAAAiwF,MAAAjwF,EAAAiwF,MAAA,EACAnoD,OAAA38D,IAAA60B,EAAA8nC,MAAA9nC,EAAA8nC,MAAA,IAEAooD,OAAA/kH,IAAA60B,EAAAkwF,cAAAlwF,EAAAkwF,aACAC,OAAAhlH,IAAA60B,EAAAmwF,eAAAnwF,EAAAmwF,eAAA,EACAC,OAAAjlH,IAAA60B,EAAAowF,UAAApwF,EAAAowF,UAAAD,EAAA,EACAE,OAAAllH,IAAA60B,EAAAqwF,YAAArwF,EAAAqwF,YAAA,EACAC,OAAAnlH,IAAA60B,EAAAswF,cAAAtwF,EAAAswF,cAAA,EAEAC,EAAAvwF,EAAAuwF,YAEAC,OAAArlH,IAAA60B,EAAAywF,YAAAzwF,EAAAywF,YAAAC,QAIAvlH,IAAA60B,EAAA2wF,SAEAp7G,QAAAC,KAAA,kEACAsyD,EAAA9nC,EAAA2wF,QAMA,IAAAC,EACAC,EAAAC,EAAAhnF,EAAAinF,EADAC,GAAA,EAGAT,IAEAK,EAAAL,EAAAU,gBAAAhB,GAEAe,GAAA,EACAd,GAAA,EAMAW,EAAAN,EAAApH,oBAAA8G,GAAA,GAIAa,EAAA,IAAAppF,GACAoC,EAAA,IAAApC,GACAqpF,EAAA,IAAArpF,IAMAwoF,IAEAI,EAAA,EACAH,EAAA,EACAC,EAAA,EACAC,EAAA,GAMA,IAAAa,EAAApB,EAAAqB,cAAAnB,GAEA54D,EAAA85D,EAAApB,MACAR,EAAA4B,EAAA5B,MAIA,IAFAL,GAAAE,YAAA/3D,GAEA,CAEAA,EAAAA,EAAAg6D,UAIA,IAAA,IAAAnjH,EAAA,EAAAojH,EAAA/B,EAAA9pH,OAAAyI,EAAAojH,EAAApjH,IAAA,CAEA,IAAAqjH,EAAAhC,EAAArhH,GAEAghH,GAAAE,YAAAmC,KAEAhC,EAAArhH,GAAAqjH,EAAAF,YAeA,IANA,IAAA/3D,EAAA41D,GAAAI,iBAAAj4D,EAAAk4D,GAIAJ,EAAA93D,EAEAm6D,EAAA,EAAAC,EAAAlC,EAAA9pH,OAAA+rH,EAAAC,EAAAD,IAAA,CAIAn6D,EAAAA,EAAAn2C,OAFAquG,EAAAiC,IAOA,SAAAE,EAAAn7G,EAAAo7G,EAAAv3E,GAIA,OAFAu3E,GAAAn8G,QAAAkK,MAAA,6CAEAiyG,EAAAj7F,QAAAY,eAAA8iB,GAAAvjB,IAAAtgB,GAIA,IAAAq7G,EAAAv6D,EAAA5xD,OAAAosH,EAAAv4D,EAAA7zD,OAMA,SAAAqsH,EAAAC,EAAAC,EAAAC,GASA,IAAAC,EAAAC,EAAAC,EAKAC,EAAAN,EAAAtnH,EAAAunH,EAAAvnH,EACA6nH,EAAAP,EAAAhmH,EAAAimH,EAAAjmH,EACAwmH,EAAAN,EAAAxnH,EAAAsnH,EAAAtnH,EACA+nH,EAAAP,EAAAlmH,EAAAgmH,EAAAhmH,EAEA0mH,EAAAJ,EAAAA,EAAAC,EAAAA,EAKA,GAAAvlH,KAAAkC,IAFAojH,EAAAG,EAAAF,EAAAC,GAEA16G,OAAAwQ,QAAA,CAMA,IAAAqqG,EAAA3lH,KAAAorB,KAAAs6F,GACAE,EAAA5lH,KAAAorB,KAAAo6F,EAAAA,EAAAC,EAAAA,GAIAI,EAAAZ,EAAAvnH,EAAA6nH,EAAAI,EACAG,EAAAb,EAAAjmH,EAAAsmH,EAAAK,EAOAI,IALAb,EAAAxnH,EAAA+nH,EAAAG,EAKAC,GAAAJ,GAJAP,EAAAlmH,EAAAwmH,EAAAI,EAKAE,GAAAN,IACAF,EAAAG,EAAAF,EAAAC,GASAQ,GALAb,EAAAU,EAAAP,EAAAS,EAAAf,EAAAtnH,GAKAynH,GAJAC,EAAAU,EAAAP,EAAAQ,EAAAf,EAAAhmH,GAIAomH,EACA,GAAAY,GAAA,EAEA,OAAA,IAAAh9F,GAAAm8F,EAAAC,GAIAC,EAAArlH,KAAAorB,KAAA46F,EAAA,OAIA,CAIA,IAAAC,GAAA,EAEAX,EAAAx6G,OAAAwQ,QAEAkqG,EAAA16G,OAAAwQ,UAEA2qG,GAAA,GAMAX,GAAAx6G,OAAAwQ,QAEAkqG,GAAA16G,OAAAwQ,UAEA2qG,GAAA,GAMAjmH,KAAAyb,KAAA8pG,KAAAvlH,KAAAyb,KAAAgqG,KAEAQ,GAAA,GAQAA,GAGAd,GAAAI,EACAH,EAAAE,EACAD,EAAArlH,KAAAorB,KAAAs6F,KAKAP,EAAAG,EACAF,EAAAG,EACAF,EAAArlH,KAAAorB,KAAAs6F,EAAA,IAMA,OAAA,IAAA18F,GAAAm8F,EAAAE,EAAAD,EAAAC,GAOA,IAFA,IAAAa,EAAA,GAEAnuH,EAAA,EAAAm1C,EAAAk1E,EAAA1pH,OAAAwzC,EAAAgB,EAAA,EAAAv4B,EAAA5c,EAAA,EAAAA,EAAAm1C,EAAAn1C,IAAAm0C,IAAAv3B,IAEAu3B,IAAAgB,IAAAhB,EAAA,GACAv3B,IAAAu4B,IAAAv4B,EAAA,GAKAuxG,EAAAnuH,GAAAgtH,EAAA3C,EAAArqH,GAAAqqH,EAAAl2E,GAAAk2E,EAAAztG,IAOA,IAHA,IACAwxG,EADAC,EAAA,GACAC,EAAAH,EAAA/xG,SAEAmyG,EAAA,EAAAC,EAAA/D,EAAA9pH,OAAA4tH,EAAAC,EAAAD,IAAA,CAEA,IAAAE,EAAAhE,EAAA8D,GAEAH,EAAA,GAEA,IAAA,IAAA57E,EAAA,EAAAuY,EAAA0jE,EAAA9tH,OAAA40D,EAAAxK,EAAA,EAAA2jE,EAAAl8E,EAAA,EAAAA,EAAAuY,EAAAvY,IAAA+iB,IAAAm5D,IAEAn5D,IAAAxK,IAAAwK,EAAA,GACAm5D,IAAA3jE,IAAA2jE,EAAA,GAGAN,EAAA57E,GAAAw6E,EAAAyB,EAAAj8E,GAAAi8E,EAAAl5D,GAAAk5D,EAAAC,IAIAL,EAAAlqH,KAAAiqH,GACAE,EAAAA,EAAAlyG,OAAAgyG,GAOA,IAAA,IAAAlpH,EAAA,EAAAA,EAAAumH,EAAAvmH,IAAA,CAUA,IANA,IAAApF,EAAAoF,EAAAumH,EACAxwF,EAAAqwF,EAAArjH,KAAAqoB,IAAAxwB,EAAAmI,KAAAgmB,GAAA,GACA0gG,GAAApD,EAAAtjH,KAAAsoB,IAAAzwB,EAAAmI,KAAAgmB,GAAA,GAAAu9F,EAIA94E,GAAA,EAAAqlB,GAAAsyD,EAAA1pH,OAAA+xC,GAAAqlB,GAAArlB,KAAA,CAEA,IAAAk8E,GAAAhC,EAAAvC,EAAA33E,IAAAy7E,EAAAz7E,IAAAi8E,IAEA78F,GAAA88F,GAAAjpH,EAAAipH,GAAA3nH,GAAAg0B,GAMA,IAAA,IAAA4zF,GAAA,EAAAC,GAAArE,EAAA9pH,OAAAkuH,GAAAC,GAAAD,KAAA,CAEA,IAAAE,GAAAtE,EAAAoE,IACAT,EAAAC,EAAAQ,IAEA,IAAA,IAAAhyD,GAAA,EAAAC,GAAAiyD,GAAApuH,OAAAk8D,GAAAC,GAAAD,KAAA,CAEA,IAAAmyD,GAAApC,EAAAmC,GAAAlyD,IAAAuxD,EAAAvxD,IAAA8xD,IAEA78F,GAAAk9F,GAAArpH,EAAAqpH,GAAA/nH,GAAAg0B,KAYA,IAJA,IAAAg0F,GAAA1D,EAAAC,EAIAxpD,GAAA,EAAAA,GAAA8qD,EAAA9qD,KAAA,CAEA,IAAAktD,GAAA7D,EAAAuB,EAAAr6D,EAAAyP,IAAAssD,EAAAtsD,IAAAitD,IAAA18D,EAAAyP,IAEAmqD,GAQAlnF,EAAAr/B,KAAAomH,EAAAx5D,QAAA,IAAAhgC,eAAA08F,GAAAvpH,GACAsmH,EAAArmH,KAAAomH,EAAA5H,UAAA,IAAA5xF,eAAA08F,GAAAjoH,GAEAilH,EAAAtmH,KAAAmmH,EAAA,IAAAh6F,IAAAkT,GAAAlT,IAAAk6F,GAEAn6F,GAAAo6F,EAAAvmH,EAAAumH,EAAAjlH,EAAAilH,EAAAjxF,IAXAnJ,GAAAo9F,GAAAvpH,EAAAupH,GAAAjoH,EAAA,GAoBA,IAAA,IAAArE,GAAA,EAAAA,IAAAwoH,EAAAxoH,KAEA,IAAA,IAAAs/D,GAAA,EAAAA,GAAA4qD,EAAA5qD,KAAA,CAEA,IAAAitD,GAAA9D,EAAAuB,EAAAr6D,EAAA2P,IAAAosD,EAAApsD,IAAA+sD,IAAA18D,EAAA2P,IAEAiqD,GAQAlnF,EAAAr/B,KAAAomH,EAAAx5D,QAAA5vD,KAAA4vB,eAAA28F,GAAAxpH,GACAsmH,EAAArmH,KAAAomH,EAAA5H,UAAAxhH,KAAA4vB,eAAA28F,GAAAloH,GAEAilH,EAAAtmH,KAAAmmH,EAAAnpH,KAAAmvB,IAAAkT,GAAAlT,IAAAk6F,GAEAn6F,GAAAo6F,EAAAvmH,EAAAumH,EAAAjlH,EAAAilH,EAAAjxF,IAXAnJ,GAAAq9F,GAAAxpH,EAAAwpH,GAAAloH,EAAAg8D,EAAAmoD,EAAAxoH,IAuBA,IAAA,IAAA45D,GAAAivD,EAAA,EAAAjvD,IAAA,EAAAA,KAAA,CAQA,IANA,IAAA4yD,GAAA5yD,GAAAivD,EACA4D,GAAA/D,EAAArjH,KAAAqoB,IAAA8+F,GAAAnnH,KAAAgmB,GAAA,GACAqhG,GAAA/D,EAAAtjH,KAAAsoB,IAAA6+F,GAAAnnH,KAAAgmB,GAAA,GAAAu9F,EAIA9oD,GAAA,EAAAT,GAAAooD,EAAA1pH,OAAA+hE,GAAAT,GAAAS,KAAA,CAEA,IAAA6sD,GAAA3C,EAAAvC,EAAA3nD,IAAAyrD,EAAAzrD,IAAA4sD,IACAx9F,GAAAy9F,GAAA5pH,EAAA4pH,GAAAtoH,EAAAg8D,EAAAosD,IAMA,IAAA,IAAAG,GAAA,EAAAC,GAAAhF,EAAA9pH,OAAA6uH,GAAAC,GAAAD,KAAA,CAEA,IAAAE,GAAAjF,EAAA+E,IACApB,EAAAC,EAAAmB,IAEA,IAAA,IAAA5sD,GAAA,EAAAT,GAAAutD,GAAA/uH,OAAAiiE,GAAAT,GAAAS,KAAA,CAEA,IAAA+sD,GAAA/C,EAAA8C,GAAA9sD,IAAAwrD,EAAAxrD,IAAA0sD,IAEAnD,EAMAr6F,GAAA69F,GAAAhqH,EAAAgqH,GAAA1oH,EAAA8kH,EAAAX,EAAA,GAAAnkH,EAAA8kH,EAAAX,EAAA,GAAAzlH,EAAA0pH,IAJAv9F,GAAA69F,GAAAhqH,EAAAgqH,GAAA1oH,EAAAg8D,EAAAosD,MA4GA,SAAAO,GAAAvF,EAAAwF,GAIA,IAFA,IAAA7vH,EAAAqqH,EAAA1pH,SAEAX,GAAA,GAAA,CAEA,IAAAm0C,EAAAn0C,EACA4c,EAAA5c,EAAA,EACA4c,EAAA,IAAAA,EAAAytG,EAAA1pH,OAAA,GAIA,IAAA,IAAAiC,EAAA,EAAAktH,EAAA1E,EAAA,EAAAK,EAAA7oH,EAAAktH,EAAAltH,IAAA,CAEA,IAAAmtH,EAAAjD,EAAAlqH,EACAotH,EAAAlD,GAAAlqH,EAAA,GAOAqtH,GALAJ,EAAA17E,EAAA47E,EACAF,EAAAjzG,EAAAmzG,EACAF,EAAAjzG,EAAAozG,EACAH,EAAA17E,EAAA67E,KAUA,SAAAl+F,GAAAnsB,EAAAsB,EAAAg0B,GAEAiwF,EAAA/mH,KAAAwB,GACAulH,EAAA/mH,KAAA8C,GACAikH,EAAA/mH,KAAA82B,GAKA,SAAAi1F,GAAA7vH,EAAA6E,EAAAhF,GAEAiwH,GAAA9vH,GACA8vH,GAAAjrH,GACAirH,GAAAjwH,GAEA,IAAAkwH,EAAArF,EAAApqH,OAAA,EACA+xD,EAAAi5D,EAAA0E,cAAAzyD,EAAAmtD,EAAAqF,EAAA,EAAAA,EAAA,EAAAA,EAAA,GAEAE,GAAA59D,EAAA,IACA49D,GAAA59D,EAAA,IACA49D,GAAA59D,EAAA,IAIA,SAAAu9D,GAAA5vH,EAAA6E,EAAAhF,EAAA4G,GAEAqpH,GAAA9vH,GACA8vH,GAAAjrH,GACAirH,GAAArpH,GAEAqpH,GAAAjrH,GACAirH,GAAAjwH,GACAiwH,GAAArpH,GAGA,IAAAspH,EAAArF,EAAApqH,OAAA,EACA+xD,EAAAi5D,EAAA4E,mBAAA3yD,EAAAmtD,EAAAqF,EAAA,EAAAA,EAAA,EAAAA,EAAA,EAAAA,EAAA,GAEAE,GAAA59D,EAAA,IACA49D,GAAA59D,EAAA,IACA49D,GAAA59D,EAAA,IAEA49D,GAAA59D,EAAA,IACA49D,GAAA59D,EAAA,IACA49D,GAAA59D,EAAA,IAIA,SAAAy9D,GAAAtsG,GAEAknG,EAAA5mH,KAAA+mH,EAAA,EAAArnG,EAAA,IACAknG,EAAA5mH,KAAA+mH,EAAA,EAAArnG,EAAA,IACAknG,EAAA5mH,KAAA+mH,EAAA,EAAArnG,EAAA,IAKA,SAAAysG,GAAAE,GAEArb,EAAAhxG,KAAAqsH,EAAA7qH,GACAwvG,EAAAhxG,KAAAqsH,EAAAvpH,IA3KA,WAEA,IAAA00C,EAAAovE,EAAApqH,OAAA,EAEA,GAAA0qH,EAAA,CAOA,IALA,IAAA77G,EAAA,EACA8kB,EAAAw4F,EAAAt9G,EAIAxP,EAAA,EAAAA,EAAA+sH,EAAA/sH,IAAA,CAEA,IAAAy0D,EAAAD,EAAAx0D,GACAkwH,GAAAz7D,EAAA,GAAAngC,EAAAmgC,EAAA,GAAAngC,EAAAmgC,EAAA,GAAAngC,GAKAA,EAAAw4F,GADAt9G,EAAA47G,EAAA,EAAAK,GAKA,IAAA,IAAAj5E,EAAA,EAAAA,EAAAu6E,EAAAv6E,IAAA,CAEA,IAAA0rB,EAAA1J,EAAAhiB,GACA09E,GAAAhyD,EAAA,GAAA5pC,EAAA4pC,EAAA,GAAA5pC,EAAA4pC,EAAA,GAAA5pC,QAIA,CAIA,IAAA,IAAAoe,EAAA,EAAAA,EAAAq6E,EAAAr6E,IAAA,CAEA,IAAA6rB,EAAA/J,EAAA9hB,GACAw9E,GAAA3xD,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAMA,IAAA,IAAA1B,EAAA,EAAAA,EAAAkwD,EAAAlwD,IAAA,CAEA,IAAA4zD,EAAAj8D,EAAAqI,GACAqzD,GAAAO,EAAA,GAAA3D,EAAA1B,EAAAqF,EAAA,GAAA3D,EAAA1B,EAAAqF,EAAA,GAAA3D,EAAA1B,IAMAxtD,EAAAlH,SAAA/a,EAAAovE,EAAApqH,OAAA,EAAAg7C,EAAA,GA7DA+0E,GAmEA,WAEA,IAAA/0E,EAAAovE,EAAApqH,OAAA,EACAkvH,EAAA,EACAD,GAAAvF,EAAAwF,GACAA,GAAAxF,EAAA1pH,OAEA,IAAA,IAAAyI,EAAA,EAAAojH,EAAA/B,EAAA9pH,OAAAyI,EAAAojH,EAAApjH,IAAA,CAEA,IAAAqjH,EAAAhC,EAAArhH,GACAwmH,GAAAnD,EAAAoD,GAGAA,GAAApD,EAAA9rH,OAKAi9D,EAAAlH,SAAA/a,EAAAovE,EAAApqH,OAAA,EAAAg7C,EAAA,GAjFAg1E,GA7bAn3G,KAAAg9C,aAAA,WAAA,IAAAtE,GAAA64D,EAAA,IACAvxG,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAijD,EAAA,IAEA37F,KAAA2+C,wBA9CA0yD,GAAA5pH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAg5F,GAEAA,GAAA5pH,UAAAo7B,OAAA,WAEA,IAAA/f,EAAAohD,GAAAz8D,UAAAo7B,OAAA37B,KAAA8Y,MAKA,OAAA6iB,GAHA7iB,KAAA64B,WAAAZ,OACAj4B,KAAA64B,WAAAlX,QAEA7e,KAspBAwuG,GAAA7pH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAi5F,GAEAA,GAAA7pH,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA05C,GAAA/0D,UAAAo7B,OAAA37B,KAAA8Y,MAKA,OAAA6iB,GAHA7iB,KAAA64B,WAAAZ,OACAj4B,KAAA64B,WAAAlX,QAEA7e,IAMA,IAAAuvG,GAAA,CAEAwE,cAAA,SAAAj+E,EAAAmgB,EAAAq+D,EAAAC,EAAAC,GAEA,IAEAC,EAAAx+D,EAAA,EAAAs+D,GACAG,EAAAz+D,EAAA,EAAAs+D,EAAA,GACAI,EAAA1+D,EAAA,EAAAu+D,GACAI,EAAA3+D,EAAA,EAAAu+D,EAAA,GAEA,MAAA,CACA,IAAA7/F,GARAshC,EAAA,EAAAq+D,GACAr+D,EAAA,EAAAq+D,EAAA,IAQA,IAAA3/F,GAAA8/F,EAAAC,GACA,IAAA//F,GAAAggG,EAAAC,KAKAX,mBAAA,SAAAn+E,EAAAmgB,EAAAq+D,EAAAC,EAAAC,EAAAK,GAEA,IAAAC,EAAA7+D,EAAA,EAAAq+D,GACAS,EAAA9+D,EAAA,EAAAq+D,EAAA,GACAU,EAAA/+D,EAAA,EAAAq+D,EAAA,GACAG,EAAAx+D,EAAA,EAAAs+D,GACAG,EAAAz+D,EAAA,EAAAs+D,EAAA,GACAU,EAAAh/D,EAAA,EAAAs+D,EAAA,GACAI,EAAA1+D,EAAA,EAAAu+D,GACAI,EAAA3+D,EAAA,EAAAu+D,EAAA,GACAU,EAAAj/D,EAAA,EAAAu+D,EAAA,GACAW,EAAAl/D,EAAA,EAAA4+D,GACAO,EAAAn/D,EAAA,EAAA4+D,EAAA,GACAQ,EAAAp/D,EAAA,EAAA4+D,EAAA,GAEA,OAAAlpH,KAAAkC,IAAAknH,EAAAL,GAAA,IAEA,CACA,IAAA//F,GAAAmgG,EAAA,EAAAE,GACA,IAAArgG,GAAA8/F,EAAA,EAAAQ,GACA,IAAAtgG,GAAAggG,EAAA,EAAAO,GACA,IAAAvgG,GAAAwgG,EAAA,EAAAE,IAKA,CACA,IAAA1gG,GAAAogG,EAAA,EAAAC,GACA,IAAArgG,GAAA+/F,EAAA,EAAAO,GACA,IAAAtgG,GAAAigG,EAAA,EAAAM,GACA,IAAAvgG,GAAAygG,EAAA,EAAAC,MAQA,SAAAt1F,GAAAoV,EAAAtW,EAAA7e,GAMA,GAFAA,EAAAm1B,OAAA,GAEA/sC,MAAA6B,QAAAkrC,GAEA,IAAA,IAAAzxC,EAAA,EAAAyJ,EAAAgoC,EAAA9wC,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAIAsc,EAAAm1B,OAAAttC,KAFAstC,EAAAzxC,GAEAm6B,WAMA7d,EAAAm1B,OAAAttC,KAAAstC,EAAAtX,MAQA,YAFA7zB,IAAA60B,EAAAuwF,cAAApvG,EAAA6e,QAAAuwF,YAAAvwF,EAAAuwF,YAAArvF,UAEA/f,EA0BA,SAAAs1G,GAAAC,EAAAx/E,GAEAqrB,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,eAEAmM,KAAA64B,WAAA,CACAw/E,KAAAA,EACAx/E,WAAAA,GAGA74B,KAAAmkD,mBAAA,IAAAm0D,GAAAD,EAAAx/E,IACA74B,KAAA+mD,gBASA,SAAAuxD,GAAAD,EAAAx/E,GAIA,IAAA0/E,GAFA1/E,EAAAA,GAAA,IAEA0/E,KAEA,IAAAA,IAAAA,EAAAC,OAGA,OADAthH,QAAAkK,MAAA,wEACA,IAAA8iD,GAIA,IAAAjsB,EAAAsgF,EAAAE,eAAAJ,EAAAx/E,EAAAiD,MAIAjD,EAAA4wB,WAAA38D,IAAA+rC,EAAA/+B,OAAA++B,EAAA/+B,OAAA,QAIAhN,IAAA+rC,EAAAi5E,iBAAAj5E,EAAAi5E,eAAA,SACAhlH,IAAA+rC,EAAAk5E,YAAAl5E,EAAAk5E,UAAA,QACAjlH,IAAA+rC,EAAAg5E,eAAAh5E,EAAAg5E,cAAA,GAEAP,GAAApqH,KAAA8Y,KAAAi4B,EAAAY,GAEA74B,KAAAnM,KAAA,qBAeA,SAAA6kH,GAAA7sF,EAAA69B,EAAAC,EAAAgvD,EAAAC,EAAAC,EAAAC,GAEA50D,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,iBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA69B,cAAAA,EACAC,eAAAA,EACAgvD,SAAAA,EACAC,UAAAA,EACAC,WAAAA,EACAC,YAAAA,GAGA94G,KAAAmkD,mBAAA,IAAA40D,GAAAltF,EAAA69B,EAAAC,EAAAgvD,EAAAC,EAAAC,EAAAC,IACA94G,KAAA+mD,gBASA,SAAAgyD,GAAAltF,EAAA69B,EAAAC,EAAAgvD,EAAAC,EAAAC,EAAAC,GAEAt8D,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,uBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA69B,cAAAA,EACAC,eAAAA,EACAgvD,SAAAA,EACAC,UAAAA,EACAC,WAAAA,EACAC,YAAAA,GAGAjtF,EAAAA,GAAA,EAEA69B,EAAAj7D,KAAAsD,IAAA,EAAAtD,KAAAC,MAAAg7D,IAAA,GACAC,EAAAl7D,KAAAsD,IAAA,EAAAtD,KAAAC,MAAAi7D,IAAA,GAEAgvD,OAAA7rH,IAAA6rH,EAAAA,EAAA,EACAC,OAAA9rH,IAAA8rH,EAAAA,EAAA,EAAAnqH,KAAAgmB,GAEAokG,OAAA/rH,IAAA+rH,EAAAA,EAAA,EACAC,OAAAhsH,IAAAgsH,EAAAA,EAAArqH,KAAAgmB,GAmBA,IAjBA,IAAAukG,EAAAvqH,KAAAqM,IAAA+9G,EAAAC,EAAArqH,KAAAgmB,IAEApK,EAAA,EACA4uG,EAAA,GAEAtxD,EAAA,IAAAt+B,GACAoC,EAAA,IAAApC,GAIA02B,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIAhvB,EAAA,EAAAA,GAAAy/B,EAAAz/B,IAAA,CAEA,IAAAgvF,EAAA,GAEA5gG,EAAA4R,EAAAy/B,EAIAwvD,EAAA,EAEA,GAAAjvF,GAAA,GAAA2uF,EAEAM,EAAA,GAAAzvD,EAEAx/B,GAAAy/B,GAAAqvD,GAAAvqH,KAAAgmB,KAEA0kG,GAAA,GAAAzvD,GAIA,IAAA,IAAAz/B,EAAA,EAAAA,GAAAy/B,EAAAz/B,IAAA,CAEA,IAAArjC,EAAAqjC,EAAAy/B,EAIA/B,EAAAx7D,GAAA0/B,EAAAp9B,KAAAqoB,IAAA6hG,EAAA/xH,EAAAgyH,GAAAnqH,KAAAsoB,IAAA8hG,EAAAvgG,EAAAwgG,GACAnxD,EAAAl6D,EAAAo+B,EAAAp9B,KAAAqoB,IAAA+hG,EAAAvgG,EAAAwgG,GACAnxD,EAAAlmC,EAAAoK,EAAAp9B,KAAAsoB,IAAA4hG,EAAA/xH,EAAAgyH,GAAAnqH,KAAAsoB,IAAA8hG,EAAAvgG,EAAAwgG,GAEA//D,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAIAgK,EAAAr/B,KAAAu7D,GAAA5tC,YACAi/B,EAAAruD,KAAA8gC,EAAAt/B,EAAAs/B,EAAAh+B,EAAAg+B,EAAAhK,GAIAy3B,EAAAvuD,KAAA/D,EAAAuyH,EAAA,EAAA7gG,GAEA4gG,EAAAvuH,KAAA0f,KAIA4uG,EAAAtuH,KAAAuuH,GAMA,IAAA,IAAAnuD,EAAA,EAAAA,EAAApB,EAAAoB,IAEA,IAAA,IAAAC,EAAA,EAAAA,EAAAtB,EAAAsB,IAAA,CAEA,IACAt/D,EAAAutH,EAAAluD,GAAAC,GACAtkE,EAAAuyH,EAAAluD,EAAA,GAAAC,GACA19D,EAAA2rH,EAAAluD,EAAA,GAAAC,EAAA,IAEA,IAAAD,GAAA8tD,EAAA,IAAA94D,EAAAp1D,KALAsuH,EAAAluD,GAAAC,EAAA,GAKAt/D,EAAA4B,IACAy9D,IAAApB,EAAA,GAAAqvD,EAAAvqH,KAAAgmB,KAAAsrC,EAAAp1D,KAAAe,EAAAhF,EAAA4G,GAQA0S,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IAcA,SAAAkgE,GAAAC,EAAAC,EAAAC,EAAAC,EAAAX,EAAAC,GAEA50D,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,eAEAmM,KAAA64B,WAAA,CACAwgF,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAX,WAAAA,EACAC,YAAAA,GAGA94G,KAAAmkD,mBAAA,IAAAs1D,GAAAJ,EAAAC,EAAAC,EAAAC,EAAAX,EAAAC,IACA94G,KAAA+mD,gBASA,SAAA0yD,GAAAJ,EAAAC,EAAAC,EAAAC,EAAAX,EAAAC,GAEAt8D,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,qBAEAmM,KAAA64B,WAAA,CACAwgF,YAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAX,WAAAA,EACAC,YAAAA,GAGAO,EAAAA,GAAA,GACAC,EAAAA,GAAA,EAEAT,OAAA/rH,IAAA+rH,EAAAA,EAAA,EACAC,OAAAhsH,IAAAgsH,EAAAA,EAAA,EAAArqH,KAAAgmB,GAEA8kG,OAAAzsH,IAAAysH,EAAA9qH,KAAAsD,IAAA,EAAAwnH,GAAA,EAmBA,IAdA,IAAAx5D,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIArtB,EAAAwtF,EACAK,GAAAJ,EAAAD,IAZAG,OAAA1sH,IAAA0sH,EAAA/qH,KAAAsD,IAAA,EAAAynH,GAAA,GAaA7xD,EAAA,IAAAt+B,GACA9F,EAAA,IAAA9L,GAIAkjB,EAAA,EAAAA,GAAA6+E,EAAA7+E,IAAA,CAEA,IAAA,IAAAn0C,EAAA,EAAAA,GAAA+yH,EAAA/yH,IAAA,CAIA,IAAAmzH,EAAAd,EAAAryH,EAAA+yH,EAAAT,EAIAnxD,EAAAx7D,EAAA0/B,EAAAp9B,KAAAqoB,IAAA6iG,GACAhyD,EAAAl6D,EAAAo+B,EAAAp9B,KAAAsoB,IAAA4iG,GAEA5gE,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAIAu3B,EAAAruD,KAAA,EAAA,EAAA,GAIA44B,EAAAp3B,GAAAw7D,EAAAx7D,EAAAmtH,EAAA,GAAA,EACA/1F,EAAA91B,GAAAk6D,EAAAl6D,EAAA6rH,EAAA,GAAA,EAEApgE,EAAAvuD,KAAA44B,EAAAp3B,EAAAo3B,EAAA91B,GAMAo+B,GAAA6tF,EAMA,IAAA,IAAA39D,EAAA,EAAAA,EAAAy9D,EAAAz9D,IAIA,IAFA,IAAA69D,EAAA79D,GAAAw9D,EAAA,GAEAvgF,EAAA,EAAAA,EAAAugF,EAAAvgF,IAAA,CAEA,IAAA6gF,EAAA7gF,EAAA4gF,EAGAluH,EAAAmuH,EAAAN,EAAA,EACA7yH,EAAAmzH,EAAAN,EAAA,EACAjsH,EAAAusH,EAAA,EAIA95D,EAAAp1D,KAPAkvH,EAOAnuH,EAAA4B,GACAyyD,EAAAp1D,KAAAe,EAAAhF,EAAA4G,GAQA0S,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IAeA,SAAA4gE,GAAAr+E,EAAAs+E,EAAApB,EAAAC,GAEA10D,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,gBAEAmM,KAAA64B,WAAA,CACA4C,OAAAA,EACAs+E,SAAAA,EACApB,SAAAA,EACAC,UAAAA,GAGA54G,KAAAmkD,mBAAA,IAAA61D,GAAAv+E,EAAAs+E,EAAApB,EAAAC,IACA54G,KAAA+mD,gBASA,SAAAizD,GAAAv+E,EAAAs+E,EAAApB,EAAAC,GAEAp8D,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,sBAEAmM,KAAA64B,WAAA,CACA4C,OAAAA,EACAs+E,SAAAA,EACApB,SAAAA,EACAC,UAAAA,GAGAmB,EAAAtrH,KAAAC,MAAAqrH,IAAA,GACApB,EAAAA,GAAA,EACAC,EAAAA,GAAA,EAAAnqH,KAAAgmB,GAIAmkG,EAAArkG,GAAAW,MAAA0jG,EAAA,EAAA,EAAAnqH,KAAAgmB,IAiBA,IAZA,IAAAsrC,EAAA,GACAhH,EAAA,GACAG,EAAA,GAIA+gE,EAAA,EAAAF,EACApyD,EAAA,IAAAt+B,GACA9F,EAAA,IAAA9L,GAIAjxB,EAAA,EAAAA,GAAAuzH,EAAAvzH,IAOA,IALA,IAAAslC,EAAA6sF,EAAAnyH,EAAAyzH,EAAArB,EAEA7hG,EAAAtoB,KAAAsoB,IAAA+U,GACAhV,EAAAroB,KAAAqoB,IAAAgV,GAEA6O,EAAA,EAAAA,GAAAc,EAAAt0C,OAAA,EAAAwzC,IAIAgtB,EAAAx7D,EAAAsvC,EAAAd,GAAAxuC,EAAA4qB,EACA4wC,EAAAl6D,EAAAguC,EAAAd,GAAAltC,EACAk6D,EAAAlmC,EAAAga,EAAAd,GAAAxuC,EAAA2qB,EAEAiiC,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAIA8B,EAAAp3B,EAAA3F,EAAAuzH,EACAx2F,EAAA91B,EAAAktC,GAAAc,EAAAt0C,OAAA,GAEA+xD,EAAAvuD,KAAA44B,EAAAp3B,EAAAo3B,EAAA91B,GASA,IAAA,IAAAurC,EAAA,EAAAA,EAAA+gF,EAAA/gF,IAEA,IAAA,IAAA+iB,EAAA,EAAAA,EAAAtgB,EAAAt0C,OAAA,EAAA40D,IAAA,CAEA,IAAAm+D,EAAAn+D,EAAA/iB,EAAAyC,EAAAt0C,OAGAuE,EAAAwuH,EAAAz+E,EAAAt0C,OACAT,EAAAwzH,EAAAz+E,EAAAt0C,OAAA,EACAmG,EAAA4sH,EAAA,EAIAn6D,EAAAp1D,KAPAuvH,EAOAxuH,EAAA4B,GACAyyD,EAAAp1D,KAAAe,EAAAhF,EAAA4G,GAmBA,GAXA0S,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IAIAl5C,KAAA2+C,uBAKAi6D,IAAA,EAAAnqH,KAAAgmB,GAWA,IATA,IAAAukC,EAAAh5C,KAAA/C,WAAAwuB,OAAArX,MACA+lG,EAAA,IAAA9wF,GACA+wF,EAAA,IAAA/wF,GACAhjC,EAAA,IAAAgjC,GAIAgxF,EAAAN,EAAAt+E,EAAAt0C,OAAA,EAEA+xC,EAAA,EAAAutB,EAAA,EAAAvtB,EAAAuC,EAAAt0C,OAAA+xC,IAAAutB,GAAA,EAIA0zD,EAAAhuH,EAAA6sD,EAAAyN,EAAA,GACA0zD,EAAA1sH,EAAAurD,EAAAyN,EAAA,GACA0zD,EAAA14F,EAAAu3B,EAAAyN,EAAA,GAIA2zD,EAAAjuH,EAAA6sD,EAAAqhE,EAAA5zD,EAAA,GACA2zD,EAAA3sH,EAAAurD,EAAAqhE,EAAA5zD,EAAA,GACA2zD,EAAA34F,EAAAu3B,EAAAqhE,EAAA5zD,EAAA,GAIApgE,EAAAoyB,WAAA0hG,EAAAC,GAAArgG,YAIAi/B,EAAAyN,EAAA,GAAAzN,EAAAqhE,EAAA5zD,EAAA,GAAApgE,EAAA8F,EACA6sD,EAAAyN,EAAA,GAAAzN,EAAAqhE,EAAA5zD,EAAA,GAAApgE,EAAAoH,EACAurD,EAAAyN,EAAA,GAAAzN,EAAAqhE,EAAA5zD,EAAA,GAAApgE,EAAAo7B,EAkBA,SAAA64F,GAAAriF,EAAA05E,GAEAztD,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,gBAEA,iBAAA89G,IAEAz6G,QAAAC,KAAA,4DAEAw6G,EAAAA,EAAAA,eAIA3xG,KAAA64B,WAAA,CACAZ,OAAAA,EACA05E,cAAAA,GAGA3xG,KAAAmkD,mBAAA,IAAAo2D,GAAAtiF,EAAA05E,IACA3xG,KAAA+mD,gBAmBA,SAAAwzD,GAAAtiF,EAAA05E,GAEAn1D,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,sBAEAmM,KAAA64B,WAAA,CACAZ,OAAAA,EACA05E,cAAAA,GAGAA,EAAAA,GAAA,GAIA,IAAA5xD,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIA8Q,EAAA,EACAc,EAAA,EAIA,IAAA,IAAA5/D,MAAA6B,QAAAkrC,GAEAu5E,EAAAv5E,QAIA,IAAA,IAAAzxC,EAAA,EAAAA,EAAAyxC,EAAA9wC,OAAAX,IAEAgrH,EAAAv5E,EAAAzxC,IAEAwZ,KAAAk9C,SAAA8M,EAAAc,EAAAtkE,GAEAwjE,GAAAc,EACAA,EAAA,EAgBA,SAAA0mD,EAAAC,GAEA,IAAA+I,EAAAzhE,EAAA5xD,OAAA,EACAs0C,EAAAg2E,EAAAqB,cAAAnB,GAEA8I,EAAAh/E,EAAAg2E,MACAiJ,EAAAj/E,EAAAw1E,OAIA,IAAAL,GAAAE,YAAA2J,KAEAA,EAAAA,EAAA1H,WAIA,IAAA,IAAAvsH,EAAA,EAAAyJ,EAAAyqH,EAAAvzH,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAm0H,EAAAD,EAAAl0H,IAEA,IAAAoqH,GAAAE,YAAA6J,KAEAD,EAAAl0H,GAAAm0H,EAAA5H,WAUA,IAJA,IAAA/3D,EAAA41D,GAAAI,iBAAAyJ,EAAAC,GAIA1hF,EAAA,EAAAC,EAAAyhF,EAAAvzH,OAAA6xC,EAAAC,EAAAD,IAAA,CAGAyhF,EAAAA,EAAA73G,OADA83G,EAAA1hF,IAOA,IAAA,IAAAE,EAAA,EAAA2uE,EAAA4S,EAAAtzH,OAAA+xC,EAAA2uE,EAAA3uE,IAAA,CAEA,IAAAyuB,EAAA8yD,EAAAvhF,GAEA6f,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAA,GACAurD,EAAAruD,KAAA,EAAA,EAAA,GACAuuD,EAAAvuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,GAMA,IAAA,IAAA41D,EAAA,EAAAu3D,EAAA5/D,EAAA7zD,OAAAk8D,EAAAu3D,EAAAv3D,IAAA,CAEA,IAAApI,EAAAD,EAAAqI,GAMAtD,EAAAp1D,KAJAswD,EAAA,GAAAu/D,EACAv/D,EAAA,GAAAu/D,EACAv/D,EAAA,GAAAu/D,GAGA1vD,GAAA,GAtEA9qD,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IA0FA,SAAA2hE,GAAA5iF,EAAAn1B,GAIA,GAFAA,EAAAm1B,OAAA,GAEA/sC,MAAA6B,QAAAkrC,GAEA,IAAA,IAAAzxC,EAAA,EAAAyJ,EAAAgoC,EAAA9wC,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAIAsc,EAAAm1B,OAAAttC,KAFAstC,EAAAzxC,GAEAm6B,WAMA7d,EAAAm1B,OAAAttC,KAAAstC,EAAAtX,MAIA,OAAA7d,EASA,SAAAg4G,GAAAliF,EAAAmiF,GAEAv+D,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,gBAEAmM,KAAA64B,WAAA,CACAkiF,eAAAA,GAGAA,OAAAjuH,IAAAiuH,EAAAA,EAAA,EAIA,IAMA3T,EAAAC,EAAA/9G,EAKA22D,EAXAlH,EAAA,GAIAiiE,EAAAvsH,KAAAqoB,IAAAvC,GAAAC,QAAAumG,GACA7T,EAAA,CAAA,EAAA,GAAAC,EAAA,GAEA1+G,EAAA,CAAA,IAAA,IAAA,KAMAmwC,EAAAgkB,kBAEAqD,EAAA,IAAAiE,IACAC,mBAAAvrB,GAIAqnB,EAAArnB,EAAAxgB,QAIA6nC,EAAA8G,gBACA9G,EAAAvB,qBAOA,IALA,IAAAu8D,EAAAh7D,EAAAlH,SACAiC,EAAAiF,EAAAjF,MAIAx0D,EAAA,EAAAyJ,EAAA+qD,EAAA7zD,OAAAX,EAAAyJ,EAAAzJ,IAIA,IAFA,IAAAy0D,EAAAD,EAAAx0D,GAEAm0C,EAAA,EAAAA,EAAA,EAAAA,IAEAysE,EAAAnsD,EAAAxyD,EAAAkyC,IACA0sE,EAAApsD,EAAAxyD,GAAAkyC,EAAA,GAAA,IACAusE,EAAA,GAAAz4G,KAAAqM,IAAAssG,EAAAC,GACAH,EAAA,GAAAz4G,KAAAsD,IAAAq1G,EAAAC,QAIAv6G,IAAAq6G,EAFA79G,EAAA49G,EAAA,GAAA,IAAAA,EAAA,IAIAC,EAAA79G,GAAA,CAAA4wD,OAAAgtD,EAAA,GAAA/sD,OAAA+sD,EAAA,GAAAgU,MAAA10H,EAAA20H,WAAAruH,GAIAq6G,EAAA79G,GAAA6xH,MAAA30H,EAUA,IAAA8C,KAAA69G,EAAA,CAEA,IAAA/gH,EAAA+gH,EAAA79G,GAIA,QAAAwD,IAAA1G,EAAA+0H,OAAAngE,EAAA50D,EAAA80H,OAAAzvF,OAAA/R,IAAAshC,EAAA50D,EAAA+0H,OAAA1vF,SAAAuvF,EAAA,CAEA,IAAArzD,EAAAszD,EAAA70H,EAAA8zD,QACAnB,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAGAs3B,EAAApuD,MADAg9D,EAAAszD,EAAA70H,EAAA+zD,SACAhuD,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,IAQAzhB,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IAcA,SAAAqiE,GAAAC,EAAAC,EAAAxhH,EAAAwwG,EAAA3gD,EAAA4xD,EAAA1C,EAAAC,GAEA50D,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,mBAEAmM,KAAA64B,WAAA,CACAwiF,UAAAA,EACAC,aAAAA,EACAxhH,OAAAA,EACAwwG,eAAAA,EACA3gD,eAAAA,EACA4xD,UAAAA,EACA1C,WAAAA,EACAC,YAAAA,GAGA94G,KAAAmkD,mBAAA,IAAAq3D,GAAAH,EAAAC,EAAAxhH,EAAAwwG,EAAA3gD,EAAA4xD,EAAA1C,EAAAC,IACA94G,KAAA+mD,gBASA,SAAAy0D,GAAAH,EAAAC,EAAAxhH,EAAAwwG,EAAA3gD,EAAA4xD,EAAA1C,EAAAC,GAEAt8D,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,yBAEAmM,KAAA64B,WAAA,CACAwiF,UAAAA,EACAC,aAAAA,EACAxhH,OAAAA,EACAwwG,eAAAA,EACA3gD,eAAAA,EACA4xD,UAAAA,EACA1C,WAAAA,EACAC,YAAAA,GAGA,IAAA10D,EAAApkD,KAEAq7G,OAAAvuH,IAAAuuH,EAAAA,EAAA,EACAC,OAAAxuH,IAAAwuH,EAAAA,EAAA,EACAxhH,EAAAA,GAAA,EAEAwwG,EAAA77G,KAAAC,MAAA47G,IAAA,EACA3gD,EAAAl7D,KAAAC,MAAAi7D,IAAA,EAEA4xD,OAAAzuH,IAAAyuH,GAAAA,EACA1C,OAAA/rH,IAAA+rH,EAAAA,EAAA,EACAC,OAAAhsH,IAAAgsH,EAAAA,EAAA,EAAArqH,KAAAgmB,GAIA,IAAAsrC,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIA7uC,EAAA,EACAoxG,EAAA,GACAt/B,EAAAriF,EAAA,EACAkwD,EAAA,EAmHA,SAAA0xD,EAAAjqF,GAEA,IAAAkqF,EAAAC,EAEAr4F,EAAA,IAAA9L,GACAkwC,EAAA,IAAAt+B,GAEAyhC,EAAA,EAEAj/B,GAAA,IAAA4F,EAAA4pF,EAAAC,EACApxG,GAAA,IAAAunB,EAAA,GAAA,EAGAkqF,EAAAtxG,EAMA,IAAA,IAAAle,EAAA,EAAAA,GAAAm+G,EAAAn+G,IAIA4sD,EAAApuD,KAAA,EAAAwxF,EAAAjyE,EAAA,GAIA8uC,EAAAruD,KAAA,EAAAuf,EAAA,GAIAgvC,EAAAvuD,KAAA,GAAA,IAIA0f,IAMAuxG,EAAAvxG,EAIA,IAAA,IAAAwxG,EAAA,EAAAA,GAAAvR,EAAAuR,IAAA,CAEA,IACAt8F,EADAs8F,EAAAvR,EACAwO,EAAAD,EAEAiD,EAAArtH,KAAAqoB,IAAAyI,GACAw8F,EAAAttH,KAAAsoB,IAAAwI,GAIAooC,EAAAx7D,EAAA0/B,EAAAkwF,EACAp0D,EAAAl6D,EAAA0uF,EAAAjyE,EACAy9C,EAAAlmC,EAAAoK,EAAAiwF,EACA/iE,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAIAu3B,EAAAruD,KAAA,EAAAuf,EAAA,GAIAqZ,EAAAp3B,EAAA,GAAA2vH,EAAA,GACAv4F,EAAA91B,EAAA,GAAAsuH,EAAA7xG,EAAA,GACAgvC,EAAAvuD,KAAA44B,EAAAp3B,EAAAo3B,EAAA91B,GAIA4c,IAMA,IAAA,IAAA2xG,EAAA,EAAAA,EAAA1R,EAAA0R,IAAA,CAEA,IAAAt1H,EAAAi1H,EAAAK,EACAx1H,EAAAo1H,EAAAI,GAEA,IAAAvqF,EAIAsuB,EAAAp1D,KAAAnE,EAAAA,EAAA,EAAAE,GAMAq5D,EAAAp1D,KAAAnE,EAAA,EAAAA,EAAAE,GAIAokE,GAAA,EAMA1G,EAAAlH,SAAA8M,EAAAc,GAAA,IAAAr5B,EAAA,EAAA,GAIAu4B,GAAAc,GA1MA,WAYA,IAVA,IAAAr/B,EAAA,IAAApC,GACAs+B,EAAA,IAAAt+B,GAEAyhC,EAAA,EAGAmxD,GAAAX,EAAAD,GAAAvhH,EAIArM,EAAA,EAAAA,GAAAk8D,EAAAl8D,IAAA,CAUA,IARA,IAAAyuH,EAAA,GAEA5jG,EAAA7qB,EAAAk8D,EAIA99B,EAAAvT,GAAAgjG,EAAAD,GAAAA,EAEAlvH,EAAA,EAAAA,GAAAm+G,EAAAn+G,IAAA,CAEA,IAAAvF,EAAAuF,EAAAm+G,EAEA/qF,EAAA34B,EAAAkyH,EAAAD,EAEAkD,EAAAttH,KAAAsoB,IAAAwI,GACAu8F,EAAArtH,KAAAqoB,IAAAyI,GAIAooC,EAAAx7D,EAAA0/B,EAAAkwF,EACAp0D,EAAAl6D,GAAA6qB,EAAAxe,EAAAqiF,EACAx0B,EAAAlmC,EAAAoK,EAAAiwF,EACA/iE,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAIAgK,EAAAjU,IAAAukG,EAAAE,EAAAH,GAAA/hG,YACAi/B,EAAAruD,KAAA8gC,EAAAt/B,EAAAs/B,EAAAh+B,EAAAg+B,EAAAhK,GAIAy3B,EAAAvuD,KAAA/D,EAAA,EAAA0xB,GAIA4jG,EAAAvxH,KAAA0f,KAMAoxG,EAAA9wH,KAAAuxH,GAMA,IAAA,IAAAL,EAAA,EAAAA,EAAAvR,EAAAuR,IAEA,IAAA,IAAAM,EAAA,EAAAA,EAAAxyD,EAAAwyD,IAAA,CAIA,IAAAt1H,EAAA40H,EAAAU,GAAAN,GACAnwH,EAAA+vH,EAAAU,EAAA,GAAAN,GACAn1H,EAAA+0H,EAAAU,EAAA,GAAAN,EAAA,GACAvuH,EAAAmuH,EAAAU,GAAAN,EAAA,GAIA97D,EAAAp1D,KAAA9D,EAAA6E,EAAA4B,GACAyyD,EAAAp1D,KAAAe,EAAAhF,EAAA4G,GAIAw9D,GAAA,EAQA1G,EAAAlH,SAAA8M,EAAAc,EAAA,GAIAd,GAAAc,EA3GAsxD,IAEA,IAAAb,IAEAF,EAAA,GAAAK,GAAA,GACAJ,EAAA,GAAAI,GAAA,IAMA17G,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,IA2NA,SAAAmjE,GAAAxwF,EAAA/xB,EAAAwwG,EAAA3gD,EAAA4xD,EAAA1C,EAAAC,GAEAsC,GAAAl0H,KAAA8Y,KAAA,EAAA6rB,EAAA/xB,EAAAwwG,EAAA3gD,EAAA4xD,EAAA1C,EAAAC,GAEA94G,KAAAnM,KAAA,eAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA/xB,OAAAA,EACAwwG,eAAAA,EACA3gD,eAAAA,EACA4xD,UAAAA,EACA1C,WAAAA,EACAC,YAAAA,GAUA,SAAAwD,GAAAzwF,EAAA/xB,EAAAwwG,EAAA3gD,EAAA4xD,EAAA1C,EAAAC,GAEA0C,GAAAt0H,KAAA8Y,KAAA,EAAA6rB,EAAA/xB,EAAAwwG,EAAA3gD,EAAA4xD,EAAA1C,EAAAC,GAEA94G,KAAAnM,KAAA,qBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACA/xB,OAAAA,EACAwwG,eAAAA,EACA3gD,eAAAA,EACA4xD,UAAAA,EACA1C,WAAAA,EACAC,YAAAA,GAgBA,SAAAyD,GAAA1wF,EAAAkuF,EAAAlB,EAAAC,GAEA50D,GAAAh9D,KAAA8Y,MAEAA,KAAAnM,KAAA,iBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACAkuF,SAAAA,EACAlB,WAAAA,EACAC,YAAAA,GAGA94G,KAAAmkD,mBAAA,IAAAq4D,GAAA3wF,EAAAkuF,EAAAlB,EAAAC,IACA94G,KAAA+mD,gBASA,SAAAy1D,GAAA3wF,EAAAkuF,EAAAlB,EAAAC,GAEAt8D,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,uBAEAmM,KAAA64B,WAAA,CACAhN,OAAAA,EACAkuF,SAAAA,EACAlB,WAAAA,EACAC,YAAAA,GAGAjtF,EAAAA,GAAA,EACAkuF,OAAAjtH,IAAAitH,EAAAtrH,KAAAsD,IAAA,EAAAgoH,GAAA,EAEAlB,OAAA/rH,IAAA+rH,EAAAA,EAAA,EACAC,OAAAhsH,IAAAgsH,EAAAA,EAAA,EAAArqH,KAAAgmB,GAIA,IAAAsrC,EAAA,GACAhH,EAAA,GACAC,EAAA,GACAE,EAAA,GAIAyO,EAAA,IAAAt+B,GACA9F,EAAA,IAAA9L,GAIAshC,EAAApuD,KAAA,EAAA,EAAA,GACAquD,EAAAruD,KAAA,EAAA,EAAA,GACAuuD,EAAAvuD,KAAA,GAAA,IAEA,IAAA,IAAAvB,EAAA,EAAA5C,EAAA,EAAA4C,GAAA2wH,EAAA3wH,IAAA5C,GAAA,EAAA,CAEA,IAAAmzH,EAAAd,EAAAzvH,EAAA2wH,EAAAjB,EAIAnxD,EAAAx7D,EAAA0/B,EAAAp9B,KAAAqoB,IAAA6iG,GACAhyD,EAAAl6D,EAAAo+B,EAAAp9B,KAAAsoB,IAAA4iG,GAEA5gE,EAAApuD,KAAAg9D,EAAAx7D,EAAAw7D,EAAAl6D,EAAAk6D,EAAAlmC,GAIAu3B,EAAAruD,KAAA,EAAA,EAAA,GAIA44B,EAAAp3B,GAAA4sD,EAAAvyD,GAAAqlC,EAAA,GAAA,EACAtI,EAAA91B,GAAAsrD,EAAAvyD,EAAA,GAAAqlC,EAAA,GAAA,EAEAqtB,EAAAvuD,KAAA44B,EAAAp3B,EAAAo3B,EAAA91B,GAMA,IAAA,IAAAurC,EAAA,EAAAA,GAAA+gF,EAAA/gF,IAEA+mB,EAAAp1D,KAAAquC,EAAAA,EAAA,EAAA,GAMAh5B,KAAA88C,SAAAiD,GACA//C,KAAAg9C,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACA/4C,KAAAg9C,aAAA,SAAA,IAAAtE,GAAAM,EAAA,IACAh5C,KAAAg9C,aAAA,KAAA,IAAAtE,GAAAQ,EAAA,KA7wCAk/D,GAAA3wH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAA+/F,IAmCAE,GAAA7wH,UAAAF,OAAAm7B,OAAA4uF,GAAA7pH,YACA4wB,YAAAigG,IA+BAI,GAAAjxH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAqgG,IA4HAK,GAAAtxH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAA0gG,IA6BAK,GAAA3xH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAA+gG,IA+GAK,GAAAhyH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAohG,IA4BAK,GAAAryH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAyhG,IAiJAE,GAAAvyH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAA2hG,IAiCAM,GAAA7yH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAiiG,GAEAA,GAAA7yH,UAAAo7B,OAAA,WAEA,IAAA/f,EAAAohD,GAAAz8D,UAAAo7B,OAAA37B,KAAA8Y,MAIA,OAAA66G,GAFA76G,KAAA64B,WAAAZ,OAEAn1B,KAoIAy3G,GAAA9yH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAkiG,GAEAA,GAAA9yH,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA05C,GAAA/0D,UAAAo7B,OAAA37B,KAAA8Y,MAIA,OAAA66G,GAFA76G,KAAA64B,WAAAZ,OAEAn1B,KAsIAg4G,GAAArzH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAyiG,IA+BAM,GAAA3zH,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAA+iG,IAkRAI,GAAA/zH,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAmjG,IA0BAa,GAAA50H,UAAAF,OAAAm7B,OAAA04F,GAAA3zH,YACA4wB,YAAAgkG,IAsBAC,GAAA70H,UAAAF,OAAAm7B,OAAA84F,GAAA/zH,YACA4wB,YAAAikG,IA4BAC,GAAA90H,UAAAF,OAAAm7B,OAAAwhC,GAAAz8D,YACA4wB,YAAAkkG,IAkFAC,GAAA/0H,UAAAF,OAAAm7B,OAAA85B,GAAA/0D,YACA4wB,YAAAmkG,GAEA,IAAAC,GAAAl1H,OAAAm1H,OAAA,CACA5yD,UAAA,KACAm9C,kBAAAA,GACAa,mBAAAA,GACAG,yBAAAA,GACA2B,oBAAAA,GACAC,0BAAAA,GACAC,mBAAAA,GACAC,yBAAAA,GACAC,oBAAAA,GACAC,0BAAAA,GACAC,qBAAAA,GACAC,2BAAAA,GACA9B,mBAAAA,GACAC,yBAAAA,GACA8B,aAAAA,GACAM,mBAAAA,GACAW,kBAAAA,GACAG,wBAAAA,GACAQ,cAAAA,GACAE,oBAAAA,GACAkM,aAAAA,GACAE,mBAAAA,GACAI,eAAAA,GACAK,qBAAAA,GACAK,aAAAA,GACAK,mBAAAA,GACA5jD,cAAAA,GACAC,oBAAAA,GACAgkD,cAAAA,GACAE,oBAAAA,GACAM,cAAAA,GACAC,oBAAAA,GACAlJ,gBAAAA,GACAC,sBAAAA,GACAwJ,cAAAA,GACAuB,aAAAA,GACAC,mBAAAA,GACAlB,iBAAAA,GACAI,uBAAAA,GACAe,eAAAA,GACAC,qBAAAA,GACAhzD,YAAAA,GACAK,kBAAAA,KAWA,SAAAovB,GAAApgD,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,iBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,GACAzuC,KAAA8xC,aAAA,EAEA9xC,KAAA60C,UAAAhc,GAuBA,SAAA8jF,GAAA9jF,GAEA4yB,GAAAvkE,KAAA8Y,KAAA64B,GAEA74B,KAAAnM,KAAA,oBA6DA,SAAA8kF,GAAA9/C,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAA0rD,QAAA,CAAAkxD,SAAA,IAEA58G,KAAAnM,KAAA,uBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,UACAzuC,KAAAo1C,UAAA,EACAp1C,KAAAq1C,UAAA,EAEAr1C,KAAA7X,IAAA,KAEA6X,KAAA6zC,SAAA,KACA7zC,KAAA8zC,kBAAA,EAEA9zC,KAAA+zC,MAAA,KACA/zC,KAAAg0C,eAAA,EAEAh0C,KAAAu1C,SAAA,IAAA9G,GAAA,GACAzuC,KAAAw1C,kBAAA,EACAx1C,KAAA42C,YAAA,KAEA52C,KAAAk2C,QAAA,KACAl2C,KAAAm2C,UAAA,EAEAn2C,KAAAo2C,UAAA,KACAp2C,KAAAq2C,cAAAhjC,GACArT,KAAAs2C,YAAA,IAAA7+B,GAAA,EAAA,GAEAzX,KAAAu2C,gBAAA,KACAv2C,KAAAw2C,kBAAA,EACAx2C,KAAAy2C,iBAAA,EAEAz2C,KAAA02C,aAAA,KAEA12C,KAAA22C,aAAA,KAEA32C,KAAAk0C,SAAA,KAEAl0C,KAAAm0C,OAAA,KACAn0C,KAAA62C,gBAAA,EAEA72C,KAAAs0C,gBAAA,IAEAt0C,KAAAu0C,WAAA,EACAv0C,KAAAw0C,mBAAA,EACAx0C,KAAAy0C,iBAAA,QACAz0C,KAAA00C,kBAAA,QAEA10C,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EACA50C,KAAAm3C,cAAA,EAEAn3C,KAAA01E,gBAAA,EAEA11E,KAAA60C,UAAAhc,GAuFA,SAAA+/C,GAAA//C,GAEA8/C,GAAAzxF,KAAA8Y,MAEAA,KAAA0rD,QAAA,CAEAkxD,SAAA,GACAC,SAAA,IAIA78G,KAAAnM,KAAA,uBAEAmM,KAAA21C,UAAA,EACA31C,KAAA61C,aAAA,KACA71C,KAAA41C,mBAAA,EACA51C,KAAA81C,sBAAA,KACA91C,KAAAg2C,qBAAA,IAAAv+B,GAAA,EAAA,GACAzX,KAAA+1C,mBAAA,KAEA/1C,KAAAq0C,aAAA,GAEAr0C,KAAAs1C,MAAA,KAEAt1C,KAAA2qE,aAAA,EAEA3qE,KAAA60C,UAAAhc,GAgGA,SAAA4/C,GAAA5/C,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,oBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,UACAzuC,KAAAy1C,SAAA,IAAAhH,GAAA,SACAzuC,KAAA01C,UAAA,GAEA11C,KAAA7X,IAAA,KAEA6X,KAAA6zC,SAAA,KACA7zC,KAAA8zC,kBAAA,EAEA9zC,KAAA+zC,MAAA,KACA/zC,KAAAg0C,eAAA,EAEAh0C,KAAAu1C,SAAA,IAAA9G,GAAA,GACAzuC,KAAAw1C,kBAAA,EACAx1C,KAAA42C,YAAA,KAEA52C,KAAAk2C,QAAA,KACAl2C,KAAAm2C,UAAA,EAEAn2C,KAAAo2C,UAAA,KACAp2C,KAAAq2C,cAAAhjC,GACArT,KAAAs2C,YAAA,IAAA7+B,GAAA,EAAA,GAEAzX,KAAAu2C,gBAAA,KACAv2C,KAAAw2C,kBAAA,EACAx2C,KAAAy2C,iBAAA,EAEAz2C,KAAAi0C,YAAA,KAEAj0C,KAAAk0C,SAAA,KAEAl0C,KAAAm0C,OAAA,KACAn0C,KAAAo0C,QAAAtnC,EACA9M,KAAAq0C,aAAA,EACAr0C,KAAAs0C,gBAAA,IAEAt0C,KAAAu0C,WAAA,EACAv0C,KAAAw0C,mBAAA,EACAx0C,KAAAy0C,iBAAA,QACAz0C,KAAA00C,kBAAA,QAEA10C,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EACA50C,KAAAm3C,cAAA,EAEAn3C,KAAA60C,UAAAhc,GAuGA,SAAA6/C,GAAA7/C,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAA0rD,QAAA,CAAAoxD,KAAA,IAEA98G,KAAAnM,KAAA,mBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,UAEAzuC,KAAA7X,IAAA,KACA6X,KAAA82C,YAAA,KAEA92C,KAAA6zC,SAAA,KACA7zC,KAAA8zC,kBAAA,EAEA9zC,KAAA+zC,MAAA,KACA/zC,KAAAg0C,eAAA,EAEAh0C,KAAAu1C,SAAA,IAAA9G,GAAA,GACAzuC,KAAAw1C,kBAAA,EACAx1C,KAAA42C,YAAA,KAEA52C,KAAAk2C,QAAA,KACAl2C,KAAAm2C,UAAA,EAEAn2C,KAAAo2C,UAAA,KACAp2C,KAAAq2C,cAAAhjC,GACArT,KAAAs2C,YAAA,IAAA7+B,GAAA,EAAA,GAEAzX,KAAAu2C,gBAAA,KACAv2C,KAAAw2C,kBAAA,EACAx2C,KAAAy2C,iBAAA,EAEAz2C,KAAAk0C,SAAA,KAEAl0C,KAAAu0C,WAAA,EACAv0C,KAAAw0C,mBAAA,EACAx0C,KAAAy0C,iBAAA,QACAz0C,KAAA00C,kBAAA,QAEA10C,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EACA50C,KAAAm3C,cAAA,EAEAn3C,KAAA60C,UAAAhc,GAiFA,SAAA0/C,GAAA1/C,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,qBAEAmM,KAAAk2C,QAAA,KACAl2C,KAAAm2C,UAAA,EAEAn2C,KAAAo2C,UAAA,KACAp2C,KAAAq2C,cAAAhjC,GACArT,KAAAs2C,YAAA,IAAA7+B,GAAA,EAAA,GAEAzX,KAAAu2C,gBAAA,KACAv2C,KAAAw2C,kBAAA,EACAx2C,KAAAy2C,iBAAA,EAEAz2C,KAAAu0C,WAAA,EACAv0C,KAAAw0C,mBAAA,EAEAx0C,KAAAk1B,KAAA,EAEAl1B,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EACA50C,KAAAm3C,cAAA,EAEAn3C,KAAA60C,UAAAhc,GAyEA,SAAA2/C,GAAA3/C,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAAnM,KAAA,sBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,UAEAzuC,KAAA7X,IAAA,KAEA6X,KAAA6zC,SAAA,KACA7zC,KAAA8zC,kBAAA,EAEA9zC,KAAA+zC,MAAA,KACA/zC,KAAAg0C,eAAA,EAEAh0C,KAAAu1C,SAAA,IAAA9G,GAAA,GACAzuC,KAAAw1C,kBAAA,EACAx1C,KAAA42C,YAAA,KAEA52C,KAAAi0C,YAAA,KAEAj0C,KAAAk0C,SAAA,KAEAl0C,KAAAm0C,OAAA,KACAn0C,KAAAo0C,QAAAtnC,EACA9M,KAAAq0C,aAAA,EACAr0C,KAAAs0C,gBAAA,IAEAt0C,KAAAu0C,WAAA,EACAv0C,KAAAw0C,mBAAA,EACAx0C,KAAAy0C,iBAAA,QACAz0C,KAAA00C,kBAAA,QAEA10C,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EACA50C,KAAAm3C,cAAA,EAEAn3C,KAAA60C,UAAAhc,GA+EA,SAAAggD,GAAAhgD,GAEA4Y,GAAAvqD,KAAA8Y,MAEAA,KAAA0rD,QAAA,CAAAqxD,OAAA,IAEA/8G,KAAAnM,KAAA,qBAEAmM,KAAA+uC,MAAA,IAAAN,GAAA,UAEAzuC,KAAAi2C,OAAA,KAEAj2C,KAAA7X,IAAA,KAEA6X,KAAAk2C,QAAA,KACAl2C,KAAAm2C,UAAA,EAEAn2C,KAAAo2C,UAAA,KACAp2C,KAAAq2C,cAAAhjC,GACArT,KAAAs2C,YAAA,IAAA7+B,GAAA,EAAA,GAEAzX,KAAAu2C,gBAAA,KACAv2C,KAAAw2C,kBAAA,EACAx2C,KAAAy2C,iBAAA,EAEAz2C,KAAAk0C,SAAA,KAEAl0C,KAAA20C,UAAA,EACA30C,KAAA40C,cAAA,EACA50C,KAAAm3C,cAAA,EAEAn3C,KAAA60C,UAAAhc,GAyDA,SAAAkgD,GAAAlgD,GAEAigD,GAAA5xF,KAAA8Y,MAEAA,KAAAnM,KAAA,qBAEAmM,KAAAsE,MAAA,EACAtE,KAAAi3C,SAAA,EACAj3C,KAAAk3C,QAAA,EAEAl3C,KAAA60C,UAAAhc,IAh7BAogD,GAAAxxF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAA4gE,GAEAA,GAAAxxF,UAAAwuG,kBAAA,EAEAhd,GAAAxxF,UAAA2E,KAAA,SAAAvD,GAMA,OAJA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OAEA/uC,OAgBA28G,GAAAl1H,UAAAF,OAAAm7B,OAAA+oC,GAAAhkE,YACA4wB,YAAAskG,GAEAA,GAAAl1H,UAAAytF,qBAAA,GAmHAyD,GAAAlxF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAsgE,GAEAA,GAAAlxF,UAAAgyF,wBAAA,EAEAd,GAAAlxF,UAAA2E,KAAA,SAAAvD,GAuDA,OArDA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA0rD,QAAA,CAAAkxD,SAAA,IAEA58G,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OACA/uC,KAAAo1C,UAAAvsD,EAAAusD,UACAp1C,KAAAq1C,UAAAxsD,EAAAwsD,UAEAr1C,KAAA7X,IAAAU,EAAAV,IAEA6X,KAAA6zC,SAAAhrD,EAAAgrD,SACA7zC,KAAA8zC,kBAAAjrD,EAAAirD,kBAEA9zC,KAAA+zC,MAAAlrD,EAAAkrD,MACA/zC,KAAAg0C,eAAAnrD,EAAAmrD,eAEAh0C,KAAAu1C,SAAAnpD,KAAAvD,EAAA0sD,UACAv1C,KAAA42C,YAAA/tD,EAAA+tD,YACA52C,KAAAw1C,kBAAA3sD,EAAA2sD,kBAEAx1C,KAAAk2C,QAAArtD,EAAAqtD,QACAl2C,KAAAm2C,UAAAttD,EAAAstD,UAEAn2C,KAAAo2C,UAAAvtD,EAAAutD,UACAp2C,KAAAq2C,cAAAxtD,EAAAwtD,cACAr2C,KAAAs2C,YAAAlqD,KAAAvD,EAAAytD,aAEAt2C,KAAAu2C,gBAAA1tD,EAAA0tD,gBACAv2C,KAAAw2C,kBAAA3tD,EAAA2tD,kBACAx2C,KAAAy2C,iBAAA5tD,EAAA4tD,iBAEAz2C,KAAA02C,aAAA7tD,EAAA6tD,aAEA12C,KAAA22C,aAAA9tD,EAAA8tD,aAEA32C,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAAm0C,OAAAtrD,EAAAsrD,OACAn0C,KAAA62C,gBAAAhuD,EAAAguD,gBAEA72C,KAAAs0C,gBAAAzrD,EAAAyrD,gBAEAt0C,KAAAu0C,UAAA1rD,EAAA0rD,UACAv0C,KAAAw0C,mBAAA3rD,EAAA2rD,mBACAx0C,KAAAy0C,iBAAA5rD,EAAA4rD,iBACAz0C,KAAA00C,kBAAA7rD,EAAA6rD,kBAEA10C,KAAA20C,SAAA9rD,EAAA8rD,SACA30C,KAAA40C,aAAA/rD,EAAA+rD,aACA50C,KAAAm3C,aAAAtuD,EAAAsuD,aAEAn3C,KAAA01E,eAAA7sF,EAAA6sF,eAEA11E,OAqDA44E,GAAAnxF,UAAAF,OAAAm7B,OAAAi2D,GAAAlxF,YACA4wB,YAAAugE,GAEAA,GAAAnxF,UAAAwtG,wBAAA,EAEArc,GAAAnxF,UAAA2E,KAAA,SAAAvD,GAgCA,OA9BA8vF,GAAAlxF,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA0rD,QAAA,CAEAkxD,SAAA,GACAC,SAAA,IAIA78G,KAAA21C,UAAA9sD,EAAA8sD,UACA31C,KAAA61C,aAAAhtD,EAAAgtD,aACA71C,KAAA41C,mBAAA/sD,EAAA+sD,mBACA51C,KAAA81C,sBAAAjtD,EAAAitD,sBACA91C,KAAA+1C,mBAAAltD,EAAAktD,mBACA/1C,KAAAg2C,qBAAA5pD,KAAAvD,EAAAmtD,sBAEAh2C,KAAAq0C,aAAAxrD,EAAAwrD,aAIAr0C,KAAAs1C,MAFAzsD,EAAAysD,OAEAt1C,KAAAs1C,OAAA,IAAA7G,IAAAriD,KAAAvD,EAAAysD,OAIA,KAIAt1C,KAAA2qE,aAAA9hF,EAAA8hF,aAEA3qE,OA8GAy4E,GAAAhxF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAogE,GAEAA,GAAAhxF,UAAAstG,qBAAA,EAEAtc,GAAAhxF,UAAA2E,KAAA,SAAAvD,GAiDA,OA/CA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OACA/uC,KAAAy1C,SAAArpD,KAAAvD,EAAA4sD,UACAz1C,KAAA01C,UAAA7sD,EAAA6sD,UAEA11C,KAAA7X,IAAAU,EAAAV,IAEA6X,KAAA6zC,SAAAhrD,EAAAgrD,SACA7zC,KAAA8zC,kBAAAjrD,EAAAirD,kBAEA9zC,KAAA+zC,MAAAlrD,EAAAkrD,MACA/zC,KAAAg0C,eAAAnrD,EAAAmrD,eAEAh0C,KAAAu1C,SAAAnpD,KAAAvD,EAAA0sD,UACAv1C,KAAA42C,YAAA/tD,EAAA+tD,YACA52C,KAAAw1C,kBAAA3sD,EAAA2sD,kBAEAx1C,KAAAk2C,QAAArtD,EAAAqtD,QACAl2C,KAAAm2C,UAAAttD,EAAAstD,UAEAn2C,KAAAo2C,UAAAvtD,EAAAutD,UACAp2C,KAAAq2C,cAAAxtD,EAAAwtD,cACAr2C,KAAAs2C,YAAAlqD,KAAAvD,EAAAytD,aAEAt2C,KAAAu2C,gBAAA1tD,EAAA0tD,gBACAv2C,KAAAw2C,kBAAA3tD,EAAA2tD,kBACAx2C,KAAAy2C,iBAAA5tD,EAAA4tD,iBAEAz2C,KAAAi0C,YAAAprD,EAAAorD,YAEAj0C,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAAm0C,OAAAtrD,EAAAsrD,OACAn0C,KAAAo0C,QAAAvrD,EAAAurD,QACAp0C,KAAAq0C,aAAAxrD,EAAAwrD,aACAr0C,KAAAs0C,gBAAAzrD,EAAAyrD,gBAEAt0C,KAAAu0C,UAAA1rD,EAAA0rD,UACAv0C,KAAAw0C,mBAAA3rD,EAAA2rD,mBACAx0C,KAAAy0C,iBAAA5rD,EAAA4rD,iBACAz0C,KAAA00C,kBAAA7rD,EAAA6rD,kBAEA10C,KAAA20C,SAAA9rD,EAAA8rD,SACA30C,KAAA40C,aAAA/rD,EAAA+rD,aACA50C,KAAAm3C,aAAAtuD,EAAAsuD,aAEAn3C,OA8FA04E,GAAAjxF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAqgE,GAEAA,GAAAjxF,UAAAotG,oBAAA,EAEAnc,GAAAjxF,UAAA2E,KAAA,SAAAvD,GAyCA,OAvCA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OAEA/uC,KAAA7X,IAAAU,EAAAV,IACA6X,KAAA82C,YAAAjuD,EAAAiuD,YAEA92C,KAAA6zC,SAAAhrD,EAAAgrD,SACA7zC,KAAA8zC,kBAAAjrD,EAAAirD,kBAEA9zC,KAAA+zC,MAAAlrD,EAAAkrD,MACA/zC,KAAAg0C,eAAAnrD,EAAAmrD,eAEAh0C,KAAAu1C,SAAAnpD,KAAAvD,EAAA0sD,UACAv1C,KAAA42C,YAAA/tD,EAAA+tD,YACA52C,KAAAw1C,kBAAA3sD,EAAA2sD,kBAEAx1C,KAAAk2C,QAAArtD,EAAAqtD,QACAl2C,KAAAm2C,UAAAttD,EAAAstD,UAEAn2C,KAAAo2C,UAAAvtD,EAAAutD,UACAp2C,KAAAq2C,cAAAxtD,EAAAwtD,cACAr2C,KAAAs2C,YAAAlqD,KAAAvD,EAAAytD,aAEAt2C,KAAAu2C,gBAAA1tD,EAAA0tD,gBACAv2C,KAAAw2C,kBAAA3tD,EAAA2tD,kBACAx2C,KAAAy2C,iBAAA5tD,EAAA4tD,iBAEAz2C,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAAu0C,UAAA1rD,EAAA0rD,UACAv0C,KAAAw0C,mBAAA3rD,EAAA2rD,mBACAx0C,KAAAy0C,iBAAA5rD,EAAA4rD,iBACAz0C,KAAA00C,kBAAA7rD,EAAA6rD,kBAEA10C,KAAA20C,SAAA9rD,EAAA8rD,SACA30C,KAAA40C,aAAA/rD,EAAA+rD,aACA50C,KAAAm3C,aAAAtuD,EAAAsuD,aAEAn3C,OA6DAu4E,GAAA9wF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAkgE,GAEAA,GAAA9wF,UAAA8tG,sBAAA,EAEAhd,GAAA9wF,UAAA2E,KAAA,SAAAvD,GAsBA,OApBA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAk2C,QAAArtD,EAAAqtD,QACAl2C,KAAAm2C,UAAAttD,EAAAstD,UAEAn2C,KAAAo2C,UAAAvtD,EAAAutD,UACAp2C,KAAAq2C,cAAAxtD,EAAAwtD,cACAr2C,KAAAs2C,YAAAlqD,KAAAvD,EAAAytD,aAEAt2C,KAAAu2C,gBAAA1tD,EAAA0tD,gBACAv2C,KAAAw2C,kBAAA3tD,EAAA2tD,kBACAx2C,KAAAy2C,iBAAA5tD,EAAA4tD,iBAEAz2C,KAAAu0C,UAAA1rD,EAAA0rD,UACAv0C,KAAAw0C,mBAAA3rD,EAAA2rD,mBAEAx0C,KAAA20C,SAAA9rD,EAAA8rD,SACA30C,KAAA40C,aAAA/rD,EAAA+rD,aACA50C,KAAAm3C,aAAAtuD,EAAAsuD,aAEAn3C,OAoFAw4E,GAAA/wF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAmgE,GAEAA,GAAA/wF,UAAAktG,uBAAA,EAEAnc,GAAA/wF,UAAA2E,KAAA,SAAAvD,GAoCA,OAlCA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OAEA/uC,KAAA7X,IAAAU,EAAAV,IAEA6X,KAAA6zC,SAAAhrD,EAAAgrD,SACA7zC,KAAA8zC,kBAAAjrD,EAAAirD,kBAEA9zC,KAAA+zC,MAAAlrD,EAAAkrD,MACA/zC,KAAAg0C,eAAAnrD,EAAAmrD,eAEAh0C,KAAAu1C,SAAAnpD,KAAAvD,EAAA0sD,UACAv1C,KAAA42C,YAAA/tD,EAAA+tD,YACA52C,KAAAw1C,kBAAA3sD,EAAA2sD,kBAEAx1C,KAAAi0C,YAAAprD,EAAAorD,YAEAj0C,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAAm0C,OAAAtrD,EAAAsrD,OACAn0C,KAAAo0C,QAAAvrD,EAAAurD,QACAp0C,KAAAq0C,aAAAxrD,EAAAwrD,aACAr0C,KAAAs0C,gBAAAzrD,EAAAyrD,gBAEAt0C,KAAAu0C,UAAA1rD,EAAA0rD,UACAv0C,KAAAw0C,mBAAA3rD,EAAA2rD,mBACAx0C,KAAAy0C,iBAAA5rD,EAAA4rD,iBACAz0C,KAAA00C,kBAAA7rD,EAAA6rD,kBAEA10C,KAAA20C,SAAA9rD,EAAA8rD,SACA30C,KAAA40C,aAAA/rD,EAAA+rD,aACA50C,KAAAm3C,aAAAtuD,EAAAsuD,aAEAn3C,OAqEA64E,GAAApxF,UAAAF,OAAAm7B,OAAA+uB,GAAAhqD,YACA4wB,YAAAwgE,GAEAA,GAAApxF,UAAA0tG,sBAAA,EAEAtc,GAAApxF,UAAA2E,KAAA,SAAAvD,GA6BA,OA3BA4oD,GAAAhqD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA0rD,QAAA,CAAAqxD,OAAA,IAEA/8G,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OAEA/uC,KAAAi2C,OAAAptD,EAAAotD,OAEAj2C,KAAA7X,IAAAU,EAAAV,IAEA6X,KAAAk2C,QAAArtD,EAAAqtD,QACAl2C,KAAAm2C,UAAAttD,EAAAstD,UAEAn2C,KAAAo2C,UAAAvtD,EAAAutD,UACAp2C,KAAAq2C,cAAAxtD,EAAAwtD,cACAr2C,KAAAs2C,YAAAlqD,KAAAvD,EAAAytD,aAEAt2C,KAAAu2C,gBAAA1tD,EAAA0tD,gBACAv2C,KAAAw2C,kBAAA3tD,EAAA2tD,kBACAx2C,KAAAy2C,iBAAA5tD,EAAA4tD,iBAEAz2C,KAAAk0C,SAAArrD,EAAAqrD,SAEAl0C,KAAA20C,SAAA9rD,EAAA8rD,SACA30C,KAAA40C,aAAA/rD,EAAA+rD,aACA50C,KAAAm3C,aAAAtuD,EAAAsuD,aAEAn3C,OAiCA+4E,GAAAtxF,UAAAF,OAAAm7B,OAAAo2D,GAAArxF,YACA4wB,YAAA0gE,GAEAA,GAAAtxF,UAAAkuG,sBAAA,EAEA5c,GAAAtxF,UAAA2E,KAAA,SAAAvD,GAQA,OANAiwF,GAAArxF,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAsE,MAAAzb,EAAAyb,MACAtE,KAAAi3C,SAAApuD,EAAAouD,SACAj3C,KAAAk3C,QAAAruD,EAAAquD,QAEAl3C,MAIA,IAAAg9G,GAAAz1H,OAAAm1H,OAAA,CACA5yD,UAAA,KACAmvB,eAAAA,GACAC,eAAAA,GACAyjC,kBAAAA,GACAlxD,eAAAA,GACAutB,eAAAA,GACAJ,qBAAAA,GACAD,qBAAAA,GACAF,kBAAAA,GACAC,iBAAAA,GACAH,mBAAAA,GACAC,oBAAAA,GACAH,kBAAAA,GACAC,qBAAAA,GACA1kC,kBAAAA,GACAilC,mBAAAA,GACAE,mBAAAA,GACAD,kBAAAA,GACArnC,SAAAA,KASAwrE,GAAA,CAGAC,WAAA,SAAA9oG,EAAAtrB,EAAAE,GAEA,OAAAi0H,GAAAE,aAAA/oG,GAIA,IAAAA,EAAAiE,YAAAjE,EAAAuhD,SAAA7sE,OAAAgE,IAAA9D,EAAAA,EAAAorB,EAAAjtB,SAIAitB,EAAAjpB,MAAArC,EAAAE,IAKAo0H,aAAA,SAAAhpG,EAAAvgB,EAAAwpH,GAEA,OAAAjpG,IACAipG,GAAAjpG,EAAAiE,cAAAxkB,EAAAugB,EAEA,iBAAAvgB,EAAA4hE,kBAEA,IAAA5hE,EAAAugB,GAIAlpB,MAAAzD,UAAA0D,MAAAjE,KAAAktB,IAIA+oG,aAAA,SAAApyH,GAEA,OAAAmJ,YAAAopH,OAAAvyH,MACAA,aAAAwyH,WAKAC,iBAAA,SAAAC,GAUA,IAFA,IAAAp3H,EAAAo3H,EAAAt2H,OACAkS,EAAA,IAAAnO,MAAA7E,GACAG,EAAA,EAAAA,IAAAH,IAAAG,EAAA6S,EAAA7S,GAAAA,EAIA,OAFA6S,EAAArN,KAVA,SAAAxF,EAAAm0C,GAEA,OAAA8iF,EAAAj3H,GAAAi3H,EAAA9iF,KAUAthC,GAKAqkH,YAAA,SAAArkF,EAAAipC,EAAAzrD,GAKA,IAHA,IAAA8mG,EAAAtkF,EAAAlyC,OACAkS,EAAA,IAAAggC,EAAAhhB,YAAAslG,GAEAn3H,EAAA,EAAAg/B,EAAA,EAAAA,IAAAm4F,IAAAn3H,EAIA,IAFA,IAAAo3H,EAAA/mG,EAAArwB,GAAA87E,EAEA3nC,EAAA,EAAAA,IAAA2nC,IAAA3nC,EAEAthC,EAAAmsB,KAAA6T,EAAAukF,EAAAjjF,GAMA,OAAAthC,GAKAwkH,YAAA,SAAAC,EAAAL,EAAApkF,EAAA0kF,GAIA,IAFA,IAAAv3H,EAAA,EAAA8C,EAAAw0H,EAAA,QAEAhxH,IAAAxD,QAAAwD,IAAAxD,EAAAy0H,IAEAz0H,EAAAw0H,EAAAt3H,KAIA,QAAAsG,IAAAxD,EAAA,CAEA,IAAA4C,EAAA5C,EAAAy0H,GACA,QAAAjxH,IAAAZ,EAEA,GAAAhB,MAAA6B,QAAAb,GAEA,QAIAY,KAFAZ,EAAA5C,EAAAy0H,MAIAN,EAAA9yH,KAAArB,EAAAgX,MACA+4B,EAAA1uC,KAAA89F,MAAApvD,EAAAntC,IAIA5C,EAAAw0H,EAAAt3H,gBAEAsG,IAAAxD,QAEA,QAAAwD,IAAAZ,EAAA6uB,QAIA,QAIAjuB,KAFAZ,EAAA5C,EAAAy0H,MAIAN,EAAA9yH,KAAArB,EAAAgX,MACApU,EAAA6uB,QAAAse,EAAAA,EAAAlyC,SAIAmC,EAAAw0H,EAAAt3H,gBAEAsG,IAAAxD,QAMA,QAIAwD,KAFAZ,EAAA5C,EAAAy0H,MAIAN,EAAA9yH,KAAArB,EAAAgX,MACA+4B,EAAA1uC,KAAAuB,IAIA5C,EAAAw0H,EAAAt3H,gBAEAsG,IAAAxD,KAMA00H,QAAA,SAAAC,EAAA9nH,EAAAqR,EAAA02G,EAAA39G,GAEAA,EAAAA,GAAA,GAEA,IAAA49G,EAAAF,EAAA7lG,QAEA+lG,EAAAhoH,KAAAA,EAIA,IAFA,IAAAioH,EAAA,GAEA53H,EAAA,EAAAA,EAAA23H,EAAAC,OAAAj3H,SAAAX,EAAA,CAQA,IANA,IAAA63H,EAAAF,EAAAC,OAAA53H,GACA83H,EAAAD,EAAAE,eAEAd,EAAA,GACApkF,EAAA,GAEAsB,EAAA,EAAAA,EAAA0jF,EAAAZ,MAAAt2H,SAAAwzC,EAAA,CAEA,IAAA1nC,EAAAorH,EAAAZ,MAAA9iF,GAAAp6B,EAEA,KAAAtN,EAAAuU,GAAAvU,GAAAirH,GAAA,CAEAT,EAAA9yH,KAAA0zH,EAAAZ,MAAA9iF,IAEA,IAAA,IAAAv3B,EAAA,EAAAA,EAAAk7G,IAAAl7G,EAEAi2B,EAAA1uC,KAAA0zH,EAAAhlF,OAAAsB,EAAA2jF,EAAAl7G,KAMA,IAAAq6G,EAAAt2H,SAEAk3H,EAAAZ,MAAAR,GAAAG,aAAAK,EAAAY,EAAAZ,MAAAplG,aACAgmG,EAAAhlF,OAAA4jF,GAAAG,aAAA/jF,EAAAglF,EAAAhlF,OAAAhhB,aAEA+lG,EAAAzzH,KAAA0zH,IAIAF,EAAAC,OAAAA,EAMA,IAFA,IAAAI,EAAAl3G,SAEA0xB,EAAA,EAAAA,EAAAmlF,EAAAC,OAAAj3H,SAAA6xC,EAEAwlF,EAAAL,EAAAC,OAAAplF,GAAAykF,MAAA,KAEAe,EAAAL,EAAAC,OAAAplF,GAAAykF,MAAA,IAQA,IAAA,IAAAvkF,EAAA,EAAAA,EAAAilF,EAAAC,OAAAj3H,SAAA+xC,EAEAilF,EAAAC,OAAAllF,GAAAugE,OAAA,EAAA+kB,GAMA,OAFAL,EAAAM,gBAEAN,GAIAO,iBAAA,SAAAC,EAAAC,EAAAC,EAAAt+G,QAEAzT,IAAA8xH,IAAAA,EAAA,QACA9xH,IAAA+xH,IAAAA,EAAAF,SACA7xH,IAAAyT,GAAAA,GAAA,KAAAA,EAAA,IAgGA,IA9FA,IAAAu+G,EAAAH,EAAAP,OAAAj3H,OACA43H,EAAAH,EAAAr+G,EAGAkG,EAAA,SAAAjgB,GAEA,IAAAw4H,EAAAH,EAAAT,OAAA53H,GACAy4H,EAAAD,EAAAE,cAGA,GAAA,SAAAD,GAAA,WAAAA,EAAA,CAGA,IAAAE,EAAAR,EAAAP,OAAAz6G,KAAA,SAAA06G,GAEA,OAAAA,EAAAloH,OAAA6oH,EAAA7oH,MACAkoH,EAAAa,gBAAAD,IAIA,QAAAnyH,IAAAqyH,EAAA,CAEA,IAAAb,EAAAU,EAAAT,eACAvuC,EAAAgvC,EAAAvB,MAAAt2H,OAAA,EACAi4H,OAAA,EAGA,GAAAL,GAAAC,EAAAvB,MAAA,GAGA2B,EAAAnC,GAAAC,WAAA8B,EAAA3lF,OAAA,EAAA2lF,EAAAV,gBAEA,GAAAS,GAAAC,EAAAvB,MAAAztC,GAAA,CAIAovC,EAAAnC,GAAAC,WAAA8B,EAAA3lF,OADA22C,EAAAsuC,OAGA,CAGA,IAAAe,EAAAL,EAAAM,oBACAD,EAAAE,SAAAR,GACAK,EAAAC,EAAAG,aAKA,GAAA,eAAAP,EAEA,IAAA58F,GACA+8F,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,IACArlG,YAAAmO,YACAnN,QAAAqkG,GAOA,IADA,IAAAK,EAAAN,EAAA1B,MAAAt2H,OACAwzC,EAAA,EAAAA,EAAA8kF,IAAA9kF,EAAA,CAEA,IAAA+kF,EAAA/kF,EAAA2jF,EAEA,GAAA,eAAAW,EAGA58F,GAAAmE,wBACA24F,EAAA9lF,OACAqmF,EACAN,EACA,EACAD,EAAA9lF,OACAqmF,QAMA,IAAA,IAAAt8G,EAAA,EAAAA,EAAAk7G,IAAAl7G,EAEA+7G,EAAA9lF,OAAAqmF,EAAAt8G,IAAAg8G,EAAAh8G,OAUA5c,EAAA,EAAAA,EAAAs4H,IAAAt4H,EAAAigB,EAAAjgB,GAIA,OAFAm4H,EAAAgB,UA5vjCA,KA8vjCAhB,IA4BA,SAAAiB,GAAAC,EAAAC,EAAAC,EAAAP,GAEAx/G,KAAA6/G,mBAAAA,EACA7/G,KAAAggH,aAAA,EAEAhgH,KAAAw/G,kBAAA1yH,IAAA0yH,EACAA,EAAA,IAAAM,EAAAznG,YAAA0nG,GACA//G,KAAA8/G,aAAAA,EACA9/G,KAAAs+G,UAAAyB,EA6OA,SAAAE,GAAAJ,EAAAC,EAAAC,EAAAP,GAEAI,GAAA14H,KAAA8Y,KAAA6/G,EAAAC,EAAAC,EAAAP,GAEAx/G,KAAAkgH,aAAA,EACAlgH,KAAAmgH,aAAA,EACAngH,KAAAogH,aAAA,EACApgH,KAAAqgH,aAAA,EAyIA,SAAAC,GAAAT,EAAAC,EAAAC,EAAAP,GAEAI,GAAA14H,KAAA8Y,KAAA6/G,EAAAC,EAAAC,EAAAP,GA0CA,SAAAe,GAAAV,EAAAC,EAAAC,EAAAP,GAEAI,GAAA14H,KAAA8Y,KAAA6/G,EAAAC,EAAAC,EAAAP,GA0BA,SAAAgB,GAAArqH,EAAAsnH,EAAApkF,EAAAonF,GAEA,QAAA3zH,IAAAqJ,EAAA,MAAA,IAAArP,MAAA,gDACA,QAAAgG,IAAA2wH,GAAA,IAAAA,EAAAt2H,OAAA,MAAA,IAAAL,MAAA,oDAAAqP,GAEA6J,KAAA7J,KAAAA,EAEA6J,KAAAy9G,MAAAR,GAAAG,aAAAK,EAAAz9G,KAAA0gH,gBACA1gH,KAAAq5B,OAAA4jF,GAAAG,aAAA/jF,EAAAr5B,KAAA2gH,iBAEA3gH,KAAA4gH,iBAAAH,GAAAzgH,KAAA6gH,sBA6cA,SAAAC,GAAA3qH,EAAAsnH,EAAApkF,GAEAmnF,GAAAt5H,KAAA8Y,KAAA7J,EAAAsnH,EAAApkF,GAgCA,SAAA0nF,GAAA5qH,EAAAsnH,EAAApkF,EAAAonF,GAEAD,GAAAt5H,KAAA8Y,KAAA7J,EAAAsnH,EAAApkF,EAAAonF,GA4BA,SAAAO,GAAA7qH,EAAAsnH,EAAApkF,EAAAonF,GAEAD,GAAAt5H,KAAA8Y,KAAA7J,EAAAsnH,EAAApkF,EAAAonF,GAsBA,SAAAQ,GAAApB,EAAAC,EAAAC,EAAAP,GAEAI,GAAA14H,KAAA8Y,KAAA6/G,EAAAC,EAAAC,EAAAP,GAuCA,SAAA0B,GAAA/qH,EAAAsnH,EAAApkF,EAAAonF,GAEAD,GAAAt5H,KAAA8Y,KAAA7J,EAAAsnH,EAAApkF,EAAAonF,GAkCA,SAAAU,GAAAhrH,EAAAsnH,EAAApkF,EAAAonF,GAEAD,GAAAt5H,KAAA8Y,KAAA7J,EAAAsnH,EAAApkF,EAAAonF,GA6BA,SAAAW,GAAAjrH,EAAAsnH,EAAApkF,EAAAonF,GAEAD,GAAAt5H,KAAA8Y,KAAA7J,EAAAsnH,EAAApkF,EAAAonF,GAwBA,SAAAY,GAAAlrH,EAAAgK,EAAAi+G,EAAAuB,GAEA3/G,KAAA7J,KAAAA,EACA6J,KAAAo+G,OAAAA,EACAp+G,KAAAG,cAAArT,IAAAqT,EAAAA,GAAA,EACAH,KAAA2/G,eAAA7yH,IAAA6yH,EAAAA,EAAAjtG,GAEA1S,KAAA2gB,KAAApM,GAAAI,eAGA3U,KAAAG,SAAA,GAEAH,KAAAy+G,gBAgDA,SAAA6C,GAAAC,GAEA,QAAAz0H,IAAAy0H,EAAA1tH,KAEA,MAAA,IAAA/M,MAAA,4DAIA,IAAA06H,EAlDA,SAAAC,GAEA,OAAAA,EAAAz0H,eAEA,IAAA,SACA,IAAA,SACA,IAAA,QACA,IAAA,SACA,IAAA,UAEA,OAAAg0H,GAEA,IAAA,SACA,IAAA,UACA,IAAA,UACA,IAAA,UAEA,OAAAI,GAEA,IAAA,QAEA,OAAAL,GAEA,IAAA,aAEA,OAAAG,GAEA,IAAA,OACA,IAAA,UAEA,OAAAJ,GAEA,IAAA,SAEA,OAAAK,GAIA,MAAA,IAAAr6H,MAAA,8CAAA26H,GAYAC,CAAAH,EAAA1tH,MAEA,QAAA/G,IAAAy0H,EAAA9D,MAAA,CAEA,IAAAA,EAAA,GAAApkF,EAAA,GAEA4jF,GAAAY,YAAA0D,EAAA94H,KAAAg1H,EAAApkF,EAAA,SAEAkoF,EAAA9D,MAAAA,EACA8D,EAAAloF,OAAAA,EAKA,YAAAvsC,IAAA00H,EAAAjoF,MAEAioF,EAAAjoF,MAAAgoF,GAKA,IAAAC,EAAAD,EAAAprH,KAAAorH,EAAA9D,MAAA8D,EAAAloF,OAAAkoF,EAAAd,eA/sCAl5H,OAAAM,OAAA+3H,GAAAn4H,UAAA,CAEA83H,SAAA,SAAAj5H,GAEA,IAAAq7H,EAAA3hH,KAAA6/G,mBACAt7E,EAAAvkC,KAAAggH,aAEA//E,EAAA0hF,EAAAp9E,GACAvE,EAAA2hF,EAAAp9E,EAAA,GAEAq9E,EAAA,CAEAC,EAAA,CAEA,IAAArwF,EAEAswF,EAAA,CAMAC,EAAA,KAAAz7H,EAAA25C,GAAA,CAEA,IAAA,IAAA+hF,EAAAz9E,EAAA,IAAA,CAEA,QAAAz3C,IAAAmzC,EAAA,CAEA,GAAA35C,EAAA05C,EAAA,MAAA+hF,EAMA,OADA/hH,KAAAggH,aADAz7E,EAAAo9E,EAAAx6H,OAEA6Y,KAAAiiH,UAAA19E,EAAA,EAAAj+C,EAAA05C,GAIA,GAAAuE,IAAAy9E,EAAA,MAKA,GAHAhiF,EAAAC,EAGA35C,GAFA25C,EAAA0hF,IAAAp9E,IAKA,MAAAs9E,EAOArwF,EAAAmwF,EAAAx6H,OACA,MAAA26H,EAMA,GAAAx7H,GAAA05C,EAiDA,MAAA4hF,EA7CA,IAAAM,EAAAP,EAAA,GAEAr7H,EAAA47H,IAEA39E,EAAA,EACAvE,EAAAkiF,GAMA,IAAA,IAAAC,EAAA59E,EAAA,IAAA,CAEA,QAAAz3C,IAAAkzC,EAKA,OADAhgC,KAAAggH,aAAA,EACAhgH,KAAAoiH,aAAA,EAAA97H,EAAA25C,GAIA,GAAAsE,IAAA49E,EAAA,MAKA,GAHAliF,EAAAD,EAGA15C,IAFA05C,EAAA2hF,IAAAp9E,EAAA,IAKA,MAAAs9E,EAOArwF,EAAA+S,EACAA,EAAA,EAaA,KAAAA,EAAA/S,GAAA,CAEA,IAAA6wF,EAAA99E,EAAA/S,IAAA,EAEAlrC,EAAAq7H,EAAAU,GAEA7wF,EAAA6wF,EAIA99E,EAAA89E,EAAA,EAWA,GALApiF,EAAA0hF,EAAAp9E,QAKAz3C,KAJAkzC,EAAA2hF,EAAAp9E,EAAA,IAOA,OADAvkC,KAAAggH,aAAA,EACAhgH,KAAAoiH,aAAA,EAAA97H,EAAA25C,GAIA,QAAAnzC,IAAAmzC,EAIA,OADAjgC,KAAAggH,aADAz7E,EAAAo9E,EAAAx6H,OAEA6Y,KAAAiiH,UAAA19E,EAAA,EAAAvE,EAAA15C,GAMA0Z,KAAAggH,aAAAz7E,EAEAvkC,KAAAsiH,iBAAA/9E,EAAAvE,EAAAC,GAIA,OAAAjgC,KAAAuiH,aAAAh+E,EAAAvE,EAAA15C,EAAA25C,IAIAhpC,SAAA,KAKAurH,iBAAA,GAEAC,aAAA,WAEA,OAAAziH,KAAA/I,UAAA+I,KAAAwiH,kBAIAE,iBAAA,SAAAr4G,GASA,IALA,IAAAhR,EAAA2G,KAAAw/G,aACAnmF,EAAAr5B,KAAA8/G,aACAx9C,EAAAtiE,KAAAs+G,UACAxjG,EAAAzQ,EAAAi4D,EAEA97E,EAAA,EAAAA,IAAA87E,IAAA97E,EAEA6S,EAAA7S,GAAA6yC,EAAAve,EAAAt0B,GAIA,OAAA6S,GAMAkpH,aAAA,WAEA,MAAA,IAAAz7H,MAAA,4BAKAw7H,iBAAA,eASA/6H,OAAAM,OAAA+3H,GAAAn4H,UAAA,CAGA26H,aAAAxC,GAAAn4H,UAAAi7H,iBAGAT,UAAArC,GAAAn4H,UAAAi7H,mBAyBAzC,GAAAx4H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAk9F,GAAAn4H,WAAA,CAEA4wB,YAAA4nG,GAEAuC,iBAAA,CAEAG,YAAAlwG,GACAmwG,UAAAnwG,IAIA6vG,iBAAA,SAAA/9E,EAAAvE,EAAAC,GAEA,IAAA0hF,EAAA3hH,KAAA6/G,mBACAgD,EAAAt+E,EAAA,EACAu+E,EAAAv+E,EAAA,EAEAw+E,EAAApB,EAAAkB,GACAG,EAAArB,EAAAmB,GAEA,QAAAh2H,IAAAi2H,EAEA,OAAA/iH,KAAAyiH,eAAAE,aAEA,KArjkCA,KAwjkCAE,EAAAt+E,EACAw+E,EAAA,EAAA/iF,EAAAC,EAEA,MAEA,KA5jkCA,KAgkkCA8iF,EAAA/iF,EAAA2hF,EADAkB,EAAAlB,EAAAx6H,OAAA,GACAw6H,EAAAkB,EAAA,GAEA,MAEA,QAGAA,EAAAt+E,EACAw+E,EAAA9iF,EAMA,QAAAnzC,IAAAk2H,EAEA,OAAAhjH,KAAAyiH,eAAAG,WAEA,KAnlkCA,KAslkCAE,EAAAv+E,EACAy+E,EAAA,EAAA/iF,EAAAD,EAEA,MAEA,KA1lkCA,KA6lkCA8iF,EAAA,EACAE,EAAA/iF,EAAA0hF,EAAA,GAAAA,EAAA,GAEA,MAEA,QAGAmB,EAAAv+E,EAAA,EACAy+E,EAAAhjF,EAMA,IAAAijF,EAAA,IAAAhjF,EAAAD,GACAsiC,EAAAtiE,KAAAs+G,UAEAt+G,KAAAkgH,YAAA+C,GAAAjjF,EAAA+iF,GACA/iH,KAAAogH,YAAA6C,GAAAD,EAAA/iF,GACAjgC,KAAAmgH,YAAA0C,EAAAvgD,EACAtiE,KAAAqgH,YAAAyC,EAAAxgD,GAIAigD,aAAA,SAAAh+E,EAAAvE,EAAA15C,EAAA25C,GAuBA,IArBA,IAAA5mC,EAAA2G,KAAAw/G,aACAnmF,EAAAr5B,KAAA8/G,aACAx9C,EAAAtiE,KAAAs+G,UAEAjO,EAAA9rE,EAAA+9B,EAAA4gD,EAAA7S,EAAA/tC,EACA6gD,EAAAnjH,KAAAmgH,YAAAiD,EAAApjH,KAAAqgH,YACAgD,EAAArjH,KAAAkgH,YAAAoD,EAAAtjH,KAAAogH,YAEAp5H,GAAAV,EAAA05C,IAAAC,EAAAD,GACA2hF,EAAA36H,EAAAA,EACAu8H,EAAA5B,EAAA36H,EAIAw8H,GAAAH,EAAAE,EAAA,EAAAF,EAAA1B,EAAA0B,EAAAr8H,EACAq4C,GAAA,EAAAgkF,GAAAE,IAAA,IAAA,EAAAF,GAAA1B,IAAA,GAAA0B,GAAAr8H,EAAA,EACAigC,IAAA,EAAAq8F,GAAAC,GAAA,IAAAD,GAAA3B,EAAA,GAAA36H,EACAy8H,EAAAH,EAAAC,EAAAD,EAAA3B,EAIAn7H,EAAA,EAAAA,IAAA87E,IAAA97E,EAEA6S,EAAA7S,GACAg9H,EAAAnqF,EAAA8pF,EAAA38H,GACA64C,EAAAhG,EAAA6pF,EAAA18H,GACAygC,EAAAoS,EAAAg3E,EAAA7pH,GACAi9H,EAAApqF,EAAA+pF,EAAA58H,GAIA,OAAA6S,KAgBAinH,GAAA74H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAk9F,GAAAn4H,WAAA,CAEA4wB,YAAAioG,GAEAiC,aAAA,SAAAh+E,EAAAvE,EAAA15C,EAAA25C,GAYA,IAVA,IAAA5mC,EAAA2G,KAAAw/G,aACAnmF,EAAAr5B,KAAA8/G,aACAx9C,EAAAtiE,KAAAs+G,UAEAoF,EAAAn/E,EAAA+9B,EACAqhD,EAAAD,EAAAphD,EAEAshD,GAAAt9H,EAAA05C,IAAAC,EAAAD,GACA6jF,EAAA,EAAAD,EAEAp9H,EAAA,EAAAA,IAAA87E,IAAA97E,EAEA6S,EAAA7S,GACA6yC,EAAAsqF,EAAAn9H,GAAAq9H,EACAxqF,EAAAqqF,EAAAl9H,GAAAo9H,EAIA,OAAAvqH,KAoBAknH,GAAA94H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAk9F,GAAAn4H,WAAA,CAEA4wB,YAAAkoG,GAEAgC,aAAA,SAAAh+E,GAEA,OAAAvkC,KAAA0iH,iBAAAn+E,EAAA,MAgCAh9C,OAAAM,OAAA24H,GAAA,CAKA39F,OAAA,SAAAw7F,GAEA,IAEAkD,EAFAC,EAAAnD,EAAAhmG,YAKA,QAAAvrB,IAAA00H,EAAA3+F,OAEA0+F,EAAAC,EAAA3+F,OAAAw7F,OAEA,CAGAkD,EAAA,CAEAprH,KAAAkoH,EAAAloH,KACAsnH,MAAAR,GAAAG,aAAAiB,EAAAZ,MAAAvyH,OACAmuC,OAAA4jF,GAAAG,aAAAiB,EAAAhlF,OAAAnuC,QAIA,IAAAu1H,EAAApC,EAAAyF,mBAEArD,IAAApC,EAAAwC,uBAEAU,EAAAd,cAAAA,GAQA,OAFAc,EAAA1tH,KAAAwqH,EAAAa,cAEAqC,KAMAh6H,OAAAM,OAAA24H,GAAA/4H,UAAA,CAEA4wB,YAAAmoG,GAEAE,eAAA/nE,aAEAgoE,gBAAAhoE,aAEAkoE,qBAlzkCA,KAozkCAkD,iCAAA,SAAA1qH,GAEA,OAAA,IAAAknH,GAAAvgH,KAAAy9G,MAAAz9G,KAAAq5B,OAAAr5B,KAAAu+G,eAAAllH,IAIA2qH,+BAAA,SAAA3qH,GAEA,OAAA,IAAAinH,GAAAtgH,KAAAy9G,MAAAz9G,KAAAq5B,OAAAr5B,KAAAu+G,eAAAllH,IAIA4qH,+BAAA,SAAA5qH,GAEA,OAAA,IAAA4mH,GAAAjgH,KAAAy9G,MAAAz9G,KAAAq5B,OAAAr5B,KAAAu+G,eAAAllH,IAIAunH,iBAAA,SAAAH,GAEA,IAAAyD,EAEA,OAAAzD,GAEA,KA70kCA,KA+0kCAyD,EAAAlkH,KAAA+jH,iCAEA,MAEA,KAl1kCA,KAo1kCAG,EAAAlkH,KAAAgkH,+BAEA,MAEA,KAv1kCA,KAy1kCAE,EAAAlkH,KAAAikH,+BAMA,QAAAn3H,IAAAo3H,EAAA,CAEA,IAAAl7G,EAAA,iCACAhJ,KAAAk/G,cAAA,yBAAAl/G,KAAA7J,KAEA,QAAArJ,IAAAkT,KAAAs/G,kBAAA,CAGA,GAAAmB,IAAAzgH,KAAA6gH,qBAMA,MAAA,IAAA/5H,MAAAkiB,GAJAhJ,KAAA4gH,iBAAA5gH,KAAA6gH,sBAWA,OADA3pH,QAAAC,KAAA,uBAAA6R,GACAhJ,KAMA,OAFAA,KAAAs/G,kBAAA4E,EAEAlkH,MAIA8jH,iBAAA,WAEA,OAAA9jH,KAAAs/G,mBAEA,KAAAt/G,KAAA+jH,iCAEA,OAt4kCA,KAw4kCA,KAAA/jH,KAAAgkH,+BAEA,OAz4kCA,KA24kCA,KAAAhkH,KAAAikH,+BAEA,OA54kCA,OAk5kCA1F,aAAA,WAEA,OAAAv+G,KAAAq5B,OAAAlyC,OAAA6Y,KAAAy9G,MAAAt2H,QAKAsyG,MAAA,SAAA0qB,GAEA,GAAA,IAAAA,EAIA,IAFA,IAAA1G,EAAAz9G,KAAAy9G,MAEAj3H,EAAA,EAAAH,EAAAo3H,EAAAt2H,OAAAX,IAAAH,IAAAG,EAEAi3H,EAAAj3H,IAAA29H,EAMA,OAAAnkH,MAKAsE,MAAA,SAAAgC,GAEA,GAAA,IAAAA,EAIA,IAFA,IAAAm3G,EAAAz9G,KAAAy9G,MAEAj3H,EAAA,EAAAH,EAAAo3H,EAAAt2H,OAAAX,IAAAH,IAAAG,EAEAi3H,EAAAj3H,IAAA8f,EAMA,OAAAtG,MAMAmxE,KAAA,SAAA5pE,EAAA68G,GAQA,IANA,IAAA3G,EAAAz9G,KAAAy9G,MACA4G,EAAA5G,EAAAt2H,OAEA2B,EAAA,EACAE,EAAAq7H,EAAA,EAEAv7H,IAAAu7H,GAAA5G,EAAA30H,GAAAye,KAEAze,EAIA,MAAA,IAAAE,GAAAy0H,EAAAz0H,GAAAo7H,KAEAp7H,EAMA,KAFAA,EAEA,IAAAF,GAAAE,IAAAq7H,EAAA,CAGAv7H,GAAAE,IAGAF,GADAE,EAAAyF,KAAAsD,IAAA/I,EAAA,IACA,GAIA,IAAAs5E,EAAAtiE,KAAAu+G,eACAv+G,KAAAy9G,MAAAR,GAAAC,WAAAO,EAAA30H,EAAAE,GACAgX,KAAAq5B,OAAA4jF,GAAAC,WAAAl9G,KAAAq5B,OAAAvwC,EAAAw5E,EAAAt5E,EAAAs5E,GAIA,OAAAtiE,MAKAskH,SAAA,WAEA,IAAAC,GAAA,EAEAjG,EAAAt+G,KAAAu+G,eACAD,EAAA7vH,KAAAC,MAAA4vH,IAAA,IAEApnH,QAAAkK,MAAA,oDAAApB,MACAukH,GAAA,GAIA,IAAA9G,EAAAz9G,KAAAy9G,MACApkF,EAAAr5B,KAAAq5B,OAEAgrF,EAAA5G,EAAAt2H,OAEA,IAAAk9H,IAEAntH,QAAAkK,MAAA,uCAAApB,MACAukH,GAAA,GAMA,IAFA,IAAAC,EAAA,KAEAh+H,EAAA,EAAAA,IAAA69H,EAAA79H,IAAA,CAEA,IAAAi+H,EAAAhH,EAAAj3H,GAEA,GAAA,iBAAAi+H,GAAAv3H,MAAAu3H,GAAA,CAEAvtH,QAAAkK,MAAA,mDAAApB,KAAAxZ,EAAAi+H,GACAF,GAAA,EACA,MAIA,GAAA,OAAAC,GAAAA,EAAAC,EAAA,CAEAvtH,QAAAkK,MAAA,0CAAApB,KAAAxZ,EAAAi+H,EAAAD,GACAD,GAAA,EACA,MAIAC,EAAAC,EAIA,QAAA33H,IAAAusC,GAEA4jF,GAAAE,aAAA9jF,GAEA,IAAA,IAAAL,EAAA,EAAA3yC,EAAAgzC,EAAAlyC,OAAA6xC,IAAA3yC,IAAA2yC,EAAA,CAEA,IAAA9sC,EAAAmtC,EAAAL,GAEA,GAAA9rC,MAAAhB,GAAA,CAEAgL,QAAAkK,MAAA,oDAAApB,KAAAg5B,EAAA9sC,GACAq4H,GAAA,EACA,OAUA,OAAAA,GAMAG,SAAA,WAaA,IAVA,IAAAjH,EAAAR,GAAAC,WAAAl9G,KAAAy9G,OACApkF,EAAA4jF,GAAAC,WAAAl9G,KAAAq5B,QACAipC,EAAAtiE,KAAAu+G,eAEAoG,EAhklCA,OAgklCA3kH,KAAA8jH,mBAEA9zC,EAAAytC,EAAAt2H,OAAA,EAEAy9H,EAAA,EAEAp+H,EAAA,EAAAA,EAAAwpF,IAAAxpF,EAAA,CAEA,IAAAq+H,GAAA,EAEAvkH,EAAAm9G,EAAAj3H,GAKA,GAAA8Z,IAJAm9G,EAAAj3H,EAAA,KAIA,IAAAA,GAAA8Z,IAAAA,EAAA,IAEA,GAAAqkH,EAwBAE,GAAA,OAhBA,IAJA,IAAA/pG,EAAAt0B,EAAA87E,EACAwiD,EAAAhqG,EAAAwnD,EACAyiD,EAAAjqG,EAAAwnD,EAEA3nC,EAAA,EAAAA,IAAA2nC,IAAA3nC,EAAA,CAEA,IAAAzuC,EAAAmtC,EAAAve,EAAA6f,GAEA,GAAAzuC,IAAAmtC,EAAAyrF,EAAAnqF,IACAzuC,IAAAmtC,EAAA0rF,EAAApqF,GAAA,CAEAkqF,GAAA,EACA,OAgBA,GAAAA,EAAA,CAEA,GAAAr+H,IAAAo+H,EAAA,CAEAnH,EAAAmH,GAAAnH,EAAAj3H,GAKA,IAHA,IAAAw+H,EAAAx+H,EAAA87E,EACA2iD,EAAAL,EAAAtiD,EAEAvmB,EAAA,EAAAA,IAAAumB,IAAAvmB,EAEA1iB,EAAA4rF,EAAAlpE,GAAA1iB,EAAA2rF,EAAAjpE,KAMA6oE,GAQA,GAAA50C,EAAA,EAAA,CAEAytC,EAAAmH,GAAAnH,EAAAztC,GAEA,IAAA,IAAAk1C,EAAAl1C,EAAA1N,EAAA6iD,EAAAP,EAAAtiD,EAAA7b,EAAA,EAAAA,IAAA6b,IAAA7b,EAEAptB,EAAA8rF,EAAA1+D,GAAAptB,EAAA6rF,EAAAz+D,KAIAm+D,EAgBA,OAZAA,IAAAnH,EAAAt2H,QAEA6Y,KAAAy9G,MAAAR,GAAAC,WAAAO,EAAA,EAAAmH,GACA5kH,KAAAq5B,OAAA4jF,GAAAC,WAAA7jF,EAAA,EAAAurF,EAAAtiD,KAIAtiE,KAAAy9G,MAAAA,EACAz9G,KAAAq5B,OAAAA,GAIAr5B,MAIAoY,MAAA,WAEA,IAAAqlG,EAAAR,GAAAC,WAAAl9G,KAAAy9G,MAAA,GACApkF,EAAA4jF,GAAAC,WAAAl9G,KAAAq5B,OAAA,GAGAglF,EAAA,IAAA+G,EADAplH,KAAAqY,aACArY,KAAA7J,KAAAsnH,EAAApkF,GAKA,OAFAglF,EAAAiB,kBAAAt/G,KAAAs/G,kBAEAjB,KAsBAyC,GAAAr5H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA89F,GAAA/4H,WAAA,CAEA4wB,YAAAyoG,GAEA5B,cAAA,OACAyB,gBAAAz1H,MAEA21H,qBAltlCA,KAotlCAmD,oCAAAl3H,EACAm3H,oCAAAn3H,IAwBAi0H,GAAAt5H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA89F,GAAA/4H,WAAA,CAEA4wB,YAAA0oG,GAEA7B,cAAA,UA0BA8B,GAAAv5H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA89F,GAAA/4H,WAAA,CAEA4wB,YAAA2oG,GAEA9B,cAAA,WAoBA+B,GAAAx5H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAk9F,GAAAn4H,WAAA,CAEA4wB,YAAA4oG,GAEAsB,aAAA,SAAAh+E,EAAAvE,EAAA15C,EAAA25C,GAUA,IARA,IAAA5mC,EAAA2G,KAAAw/G,aACAnmF,EAAAr5B,KAAA8/G,aACAx9C,EAAAtiE,KAAAs+G,UAEA9jG,GAAAl0B,EAAA05C,IAAAC,EAAAD,GAEAllB,EAAAypB,EAAA+9B,EAEArgE,EAAA6Y,EAAAwnD,EAAAxnD,IAAA7Y,EAAA6Y,GAAA,EAEAuH,GAAAiD,UAAAjsB,EAAA,EAAAggC,EAAAve,EAAAwnD,EAAAjpC,EAAAve,EAAAN,GAIA,OAAAnhB,KAqBA6nH,GAAAz5H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA89F,GAAA/4H,WAAA,CAEA4wB,YAAA6oG,GAEAhC,cAAA,aAIA2B,qBAn1lCA,KAq1lCAmD,+BAAA,SAAA3qH,GAEA,OAAA,IAAA4nH,GAAAjhH,KAAAy9G,MAAAz9G,KAAAq5B,OAAAr5B,KAAAu+G,eAAAllH,IAIA4qH,oCAAAn3H,IAoBAq0H,GAAA15H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA89F,GAAA/4H,WAAA,CAEA4wB,YAAA8oG,GAEAjC,cAAA,SACAyB,gBAAAz1H,MAEA21H,qBAv3lCA,KAy3lCAmD,oCAAAl3H,EAEAm3H,oCAAAn3H,IAoBAs0H,GAAA35H,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA89F,GAAA/4H,WAAA,CAEA4wB,YAAA+oG,GAEAlC,cAAA,WA+GA33H,OAAAM,OAAAw5H,GAAA,CAEA9nF,MAAA,SAAAgoF,GAMA,IAJA,IAAAnD,EAAA,GACAiH,EAAA9D,EAAAnD,OACAkH,EAAA,GAAA/D,EAAAhhH,KAAA,GAEA/Z,EAAA,EAAAH,EAAAg/H,EAAAl+H,OAAAX,IAAAH,IAAAG,EAEA43H,EAAAzzH,KAAA22H,GAAA+D,EAAA7+H,IAAA8d,MAAAghH,IAIA,OAAA,IAAAjE,GAAAE,EAAAprH,KAAAorH,EAAAphH,SAAAi+G,EAAAmD,EAAA5B,YAIA98F,OAAA,SAAAs7F,GAeA,IAbA,IAAAC,EAAA,GACAmH,EAAApH,EAAAC,OAEAmD,EAAA,CAEAprH,KAAAgoH,EAAAhoH,KACAgK,SAAAg+G,EAAAh+G,SACAi+G,OAAAA,EACAz9F,KAAAw9F,EAAAx9F,KACAg/F,UAAAxB,EAAAwB,WAIAn5H,EAAA,EAAAH,EAAAk/H,EAAAp+H,OAAAX,IAAAH,IAAAG,EAEA43H,EAAAzzH,KAAA61H,GAAA39F,OAAA0iG,EAAA/+H,KAIA,OAAA+6H,GAIAiE,8BAAA,SAAArvH,EAAAsvH,EAAAllH,EAAAmI,GAKA,IAHA,IAAAg9G,EAAAD,EAAAt+H,OACAi3H,EAAA,GAEA53H,EAAA,EAAAA,EAAAk/H,EAAAl/H,IAAA,CAEA,IAAAi3H,EAAA,GACApkF,EAAA,GAEAokF,EAAA9yH,MACAnE,EAAAk/H,EAAA,GAAAA,EACAl/H,GACAA,EAAA,GAAAk/H,GAEArsF,EAAA1uC,KAAA,EAAA,EAAA,GAEA,IAAAksB,EAAAomG,GAAAO,iBAAAC,GACAA,EAAAR,GAAAS,YAAAD,EAAA,EAAA5mG,GACAwiB,EAAA4jF,GAAAS,YAAArkF,EAAA,EAAAxiB,GAIAnO,GAAA,IAAA+0G,EAAA,KAEAA,EAAA9yH,KAAA+6H,GACArsF,EAAA1uC,KAAA0uC,EAAA,KAIA+kF,EAAAzzH,KACA,IAAAq2H,GACA,0BAAAyE,EAAAj/H,GAAA2P,KAAA,IACAsnH,EAAApkF,GACA/0B,MAAA,EAAA/D,IAIA,OAAA,IAAA8gH,GAAAlrH,GAAA,EAAAioH,IAIAuH,WAAA,SAAAC,EAAAzvH,GAEA,IAAA0vH,EAAAD,EAEA,IAAA16H,MAAA6B,QAAA64H,GAAA,CAGAC,EADAD,EACAhtF,UADAgtF,EACAhtF,SAAAktF,YADAF,EACAE,WAIA,IAAA,IAAAt/H,EAAA,EAAAA,EAAAq/H,EAAA1+H,OAAAX,IAEA,GAAAq/H,EAAAr/H,GAAA2P,OAAAA,EAEA,OAAA0vH,EAAAr/H,GAMA,OAAA,MAIAu/H,oCAAA,SAAAnxE,EAAAr0C,EAAAmI,GAUA,IARA,IAAAs9G,EAAA,GAIAC,EAAA,qBAIAz/H,EAAA,EAAAm1C,EAAAiZ,EAAAztD,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAAs1D,EAAAlH,EAAApuD,GACA8c,EAAAw4C,EAAA3lD,KAAA3F,MAAAy1H,GAEA,GAAA3iH,GAAAA,EAAAnc,OAAA,EAAA,CAEA,IAAAgP,EAAAmN,EAAA,GAEA4iH,EAAAF,EAAA7vH,GAEA+vH,IAEAF,EAAA7vH,GAAA+vH,EAAA,IAIAA,EAAAv7H,KAAAmxD,IAMA,IAAAqqE,EAAA,GAEA,IAAA,IAAAhmE,KAAA6lE,EAEAG,EAAAx7H,KAAA02H,GAAAmE,8BAAArlE,EAAA6lE,EAAA7lE,GAAA5/C,EAAAmI,IAIA,OAAAy9G,GAKAC,eAAA,SAAAl1B,EAAAxX,GAEA,IAAAwX,EAGA,OADAh6F,QAAAkK,MAAA,yDACA,KAoCA,IAhCA,IAAAilH,EAAA,SAAA7E,EAAA8E,EAAAC,EAAAC,EAAAC,GAGA,GAAA,IAAAF,EAAAp/H,OAAA,CAEA,IAAAs2H,EAAA,GACApkF,EAAA,GAEA4jF,GAAAY,YAAA0I,EAAA9I,EAAApkF,EAAAmtF,GAGA,IAAA/I,EAAAt2H,QAEAs/H,EAAA97H,KAAA,IAAA62H,EAAA8E,EAAA7I,EAAApkF,MAQA+kF,EAAA,GAEAsI,EAAAx1B,EAAA/6F,MAAA,UACAoK,EAAA2wF,EAAA3wF,KAAA,GACAo/G,EAAAzuB,EAAAyuB,UAGAx/G,EAAA+wF,EAAA/pG,SAAA,EAEAw/H,EAAAz1B,EAAA01B,WAAA,GAEAh3H,EAAA,EAAAA,EAAA+2H,EAAAx/H,OAAAyI,IAAA,CAEA,IAAA22H,EAAAI,EAAA/2H,GAAAnH,KAGA,GAAA89H,GAAA,IAAAA,EAAAp/H,OAGA,GAAAo/H,EAAA,GAAA3xE,aAAA,CAGA,IAAAiyE,EAAA,GAEAzjH,OAAA,EAEA,IAAAA,EAAA,EAAAA,EAAAmjH,EAAAp/H,OAAAic,IAEA,GAAAmjH,EAAAnjH,GAAAwxC,aAEA,IAAA,IAAApnD,EAAA,EAAAA,EAAA+4H,EAAAnjH,GAAAwxC,aAAAztD,OAAAqG,IAEAq5H,EAAAN,EAAAnjH,GAAAwxC,aAAApnD,KAAA,EAWA,IAAA,IAAAs5H,KAAAD,EAAA,CAKA,IAHA,IAAApJ,EAAA,GACApkF,EAAA,GAEA0tF,EAAA,EAAAA,IAAAR,EAAAnjH,GAAAwxC,aAAAztD,SAAA4/H,EAAA,CAEA,IAAAC,EAAAT,EAAAnjH,GAEAq6G,EAAA9yH,KAAAq8H,EAAA1mH,MACA+4B,EAAA1uC,KAAAq8H,EAAAlrE,cAAAgrE,EAAA,EAAA,GAIA1I,EAAAzzH,KAAA,IAAAq2H,GAAA,yBAAA8F,EAAA,IAAArJ,EAAApkF,IAIAl5B,EAAA0mH,EAAA1/H,QAAAoZ,GAAA,OAEA,CAIA,IAAA0mH,EAAA,UAAAvtC,EAAA9pF,GAAAuG,KAAA,IAEAkwH,EACAjF,GAAA6F,EAAA,YACAV,EAAA,MAAAnI,GAEAiI,EACAnF,GAAA+F,EAAA,cACAV,EAAA,MAAAnI,GAEAiI,EACAjF,GAAA6F,EAAA,SACAV,EAAA,MAAAnI,IAMA,OAAA,IAAAA,EAAAj3H,OAEA,KAIA,IAAAk6H,GAAAqF,EAAAvmH,EAAAi+G,EAAAuB,MAQAp4H,OAAAM,OAAAw5H,GAAA55H,UAAA,CAEAg3H,cAAA,WAKA,IAHA,IACAt+G,EAAA,EAEA3Z,EAAA,EAAAH,EAHA2Z,KAAAo+G,OAGAj3H,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAA63H,EAAAr+G,KAAAo+G,OAAA53H,GAEA2Z,EAAA1R,KAAAsD,IAAAoO,EAAAk+G,EAAAZ,MAAAY,EAAAZ,MAAAt2H,OAAA,IAMA,OAFA6Y,KAAAG,SAAAA,EAEAH,MAIAmxE,KAAA,WAEA,IAAA,IAAA3qF,EAAA,EAAAA,EAAAwZ,KAAAo+G,OAAAj3H,OAAAX,IAEAwZ,KAAAo+G,OAAA53H,GAAA2qF,KAAA,EAAAnxE,KAAAG,UAIA,OAAAH,MAIAskH,SAAA,WAIA,IAFA,IAAAC,GAAA,EAEA/9H,EAAA,EAAAA,EAAAwZ,KAAAo+G,OAAAj3H,OAAAX,IAEA+9H,EAAAA,GAAAvkH,KAAAo+G,OAAA53H,GAAA89H,WAIA,OAAAC,GAIAG,SAAA,WAEA,IAAA,IAAAl+H,EAAA,EAAAA,EAAAwZ,KAAAo+G,OAAAj3H,OAAAX,IAEAwZ,KAAAo+G,OAAA53H,GAAAk+H,WAIA,OAAA1kH,MAIAoY,MAAA,WAIA,IAFA,IAAAgmG,EAAA,GAEA53H,EAAA,EAAAA,EAAAwZ,KAAAo+G,OAAAj3H,OAAAX,IAEA43H,EAAAzzH,KAAAqV,KAAAo+G,OAAA53H,GAAA4xB,SAIA,OAAA,IAAAipG,GAAArhH,KAAA7J,KAAA6J,KAAAG,SAAAi+G,EAAAp+G,KAAA2/G,cAUA,IAAAuH,GAAA,CAEAhpH,SAAA,EAEAipH,MAAA,GAEA5uG,IAAA,SAAAjvB,EAAAqM,IAEA,IAAAqK,KAAA9B,UAIA8B,KAAAmnH,MAAA79H,GAAAqM,IAIAoK,IAAA,SAAAzW,GAEA,IAAA,IAAA0W,KAAA9B,QAIA,OAAA8B,KAAAmnH,MAAA79H,IAIAytC,OAAA,SAAAztC,UAEA0W,KAAAmnH,MAAA79H,IAIA0d,MAAA,WAEAhH,KAAAmnH,MAAA,KAUA,SAAAC,GAAAC,EAAAC,EAAAC,GAEA,IAAAnjE,EAAApkD,KAEAwnH,GAAA,EACAC,EAAA,EACAC,EAAA,EACAC,OAAA76H,EACA86H,EAAA,GAKA5nH,KAAA6nH,aAAA/6H,EACAkT,KAAAqnH,OAAAA,EACArnH,KAAAsnH,WAAAA,EACAtnH,KAAAunH,QAAAA,EAEAvnH,KAAA8nH,UAAA,SAAAzkG,GAEAqkG,KAEA,IAAAF,QAEA16H,IAAAs3D,EAAAyjE,SAEAzjE,EAAAyjE,QAAAxkG,EAAAokG,EAAAC,GAMAF,GAAA,GAIAxnH,KAAA+nH,QAAA,SAAA1kG,GAEAokG,SAEA36H,IAAAs3D,EAAAkjE,YAEAljE,EAAAkjE,WAAAjkG,EAAAokG,EAAAC,GAIAD,IAAAC,IAEAF,GAAA,OAEA16H,IAAAs3D,EAAAijE,QAEAjjE,EAAAijE,WAQArnH,KAAAgoH,UAAA,SAAA3kG,QAEAv2B,IAAAs3D,EAAAmjE,SAEAnjE,EAAAmjE,QAAAlkG,IAMArjB,KAAAioH,WAAA,SAAA5kG,GAEA,OAAAskG,EAEAA,EAAAtkG,GAIAA,GAIArjB,KAAAkoH,eAAA,SAAAj0B,GAIA,OAFA0zB,EAAA1zB,EAEAj0F,MAIAA,KAAAmoH,WAAA,SAAAC,EAAAt/G,GAIA,OAFA8+G,EAAAj9H,KAAAy9H,EAAAt/G,GAEA9I,MAIAA,KAAAqoH,cAAA,SAAAD,GAEA,IAAA/9G,EAAAu9G,EAAAn0H,QAAA20H,GAQA,OANA,IAAA/9G,GAEAu9G,EAAA3zG,OAAA5J,EAAA,GAIArK,MAIAA,KAAAsoH,WAAA,SAAA3yH,GAEA,IAAA,IAAAnP,EAAA,EAAAyJ,EAAA23H,EAAAzgI,OAAAX,EAAAyJ,EAAAzJ,GAAA,EAAA,CAEA,IAAA4hI,EAAAR,EAAAphI,GACAsiB,EAAA8+G,EAAAphI,EAAA,GAIA,GAFA4hI,EAAA/7H,SAAA+7H,EAAAp4C,UAAA,GAEAo4C,EAAAn7H,KAAA0I,GAEA,OAAAmT,EAMA,OAAA,MAMA,IAAAy/G,GAAA,IAAAnB,GAMA,SAAAoB,GAAA5+G,GAEA5J,KAAA4J,aAAA9c,IAAA8c,EAAAA,EAAA2+G,GAEAvoH,KAAAyoH,YAAA,YACAzoH,KAAA8vE,KAAA,GACA9vE,KAAA0oH,aAAA,GACA1oH,KAAA2oH,cAAA,GAIAphI,OAAAM,OAAA2gI,GAAA/gI,UAAA,CAEAsgB,KAAA,aAEA6gH,UAAA,SAAAvlG,EAAAikG,GAEA,IAAAljE,EAAApkD,KAEA,OAAA,IAAApN,QAAA,SAAAC,EAAAC,GAEAsxD,EAAAr8C,KAAAsb,EAAAxwB,EAAAy0H,EAAAx0H,MAMAymC,MAAA,aAEAsvF,eAAA,SAAAJ,GAGA,OADAzoH,KAAAyoH,YAAAA,EACAzoH,MAIA8oH,QAAA,SAAAh5C,GAGA,OADA9vE,KAAA8vE,KAAAA,EACA9vE,MAIA+oH,gBAAA,SAAAL,GAGA,OADA1oH,KAAA0oH,aAAAA,EACA1oH,MAIAgpH,iBAAA,SAAAL,GAGA,OADA3oH,KAAA2oH,cAAAA,EACA3oH,QAUA,IAAAipH,GAAA,GAEA,SAAAC,GAAAt/G,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GA6SA,SAAAu/G,GAAAv/G,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GAkEA,SAAAw/G,GAAAx/G,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GA8HA,SAAAy/G,GAAAz/G,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GAqFA,SAAA0/G,GAAA1/G,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GAqFA,SAAA2/G,GAAA3/G,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GAsDA,SAAA4/G,GAAA5/G,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GA2EA,SAAA6/G,KAEAzpH,KAAAnM,KAAA,QAEAmM,KAAA0pH,mBAAA,IA6XA,SAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAV,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,eAEAmM,KAAA4pH,GAAAA,GAAA,EACA5pH,KAAA6pH,GAAAA,GAAA,EAEA7pH,KAAA8pH,QAAAA,GAAA,EACA9pH,KAAA+pH,QAAAA,GAAA,EAEA/pH,KAAAgqH,YAAAA,GAAA,EACAhqH,KAAAiqH,UAAAA,GAAA,EAAAx7H,KAAAgmB,GAEAzU,KAAAkqH,WAAAA,IAAA,EAEAlqH,KAAAmqH,UAAAA,GAAA,EAuIA,SAAAC,GAAAR,EAAAC,EAAAQ,EAAAL,EAAAC,EAAAC,GAEAP,GAAAziI,KAAA8Y,KAAA4pH,EAAAC,EAAAQ,EAAAA,EAAAL,EAAAC,EAAAC,GAEAlqH,KAAAnM,KAAA,WA+BA,SAAAy2H,KAEA,IAAAC,EAAA,EAAAxjG,EAAA,EAAA/P,EAAA,EAAAgQ,EAAA,EAUA,SAAAugD,EAAA1hD,EAAAI,EAAA+Z,EAAAC,GAEAsqF,EAAA1kG,EACAkB,EAAAiZ,EACAhpB,GAAA,EAAA6O,EAAA,EAAAI,EAAA,EAAA+Z,EAAAC,EACAjZ,EAAA,EAAAnB,EAAA,EAAAI,EAAA+Z,EAAAC,EAIA,MAAA,CAEAuqF,eAAA,SAAA3kG,EAAAI,EAAA2K,EAAA65F,EAAAC,GAEAnjD,EAAAthD,EAAA2K,EAAA85F,GAAA95F,EAAA/K,GAAA6kG,GAAAD,EAAAxkG,KAIA0kG,yBAAA,SAAA9kG,EAAAI,EAAA2K,EAAA65F,EAAAG,EAAAC,EAAAC,GAGA,IAAA7qF,GAAAha,EAAAJ,GAAA+kG,GAAAh6F,EAAA/K,IAAA+kG,EAAAC,IAAAj6F,EAAA3K,GAAA4kG,EACAE,GAAAn6F,EAAA3K,GAAA4kG,GAAAJ,EAAAxkG,IAAA4kG,EAAAC,IAAAL,EAAA75F,GAAAk6F,EAMAvjD,EAAAthD,EAAA2K,EAHAqP,GAAA4qF,EACAE,GAAAF,IAMAG,KAAA,SAAA1kI,GAEA,IAAAykI,EAAAzkI,EAAAA,EAEA,OAAAikI,EAAAxjG,EAAAzgC,EAAA0wB,EAAA+zG,EAAA/jG,GADA+jG,EAAAzkI,KA14CA4iI,GAAAzhI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAA6wG,GAEAnhH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,QAEAz6H,IAAAu2B,IAAAA,EAAA,SAEAv2B,IAAAkT,KAAA8vE,OAAAzsD,EAAArjB,KAAA8vE,KAAAzsD,GAEAA,EAAArjB,KAAA4J,QAAAq+G,WAAA5kG,GAEA,IAAA+gC,EAAApkD,KAEAirH,EAAA/D,GAAAnnH,IAAAsjB,GAEA,QAAAv2B,IAAAm+H,EAYA,OAVA7mE,EAAAx6C,QAAAk+G,UAAAzkG,GAEAjuB,WAAA,WAEAiyH,GAAAA,EAAA4D,GAEA7mE,EAAAx6C,QAAAm+G,QAAA1kG,IAEA,GAEA4nG,EAMA,QAAAn+H,IAAAm8H,GAAA5lG,GAAA,CAeA,IAEA6nG,EADAC,EAAA9nG,EAAA7yB,MADA,+BAKA,GAAA26H,EAAA,CAEA,IAAAC,EAAAD,EAAA,GACAE,IAAAF,EAAA,GAEAroH,EAAAqoH,EAAA,GACAroH,EAAAwoH,mBAAAxoH,GAEAuoH,IAAAvoH,EAAAlP,KAAAkP,IAEA,IAEA,IAAAf,EACAwpH,GAAAvrH,KAAAurH,cAAA,IAAAv+H,cAEA,OAAAu+H,GAEA,IAAA,cACA,IAAA,OAIA,IAFA,IAAA3+D,EAAA,IAAAx4D,WAAA0O,EAAA3b,QAEAX,EAAA,EAAAA,EAAAsc,EAAA3b,OAAAX,IAEAomE,EAAApmE,GAAAsc,EAAAzO,WAAA7N,GAMAub,EAFA,SAAAwpH,EAEA,IAAAj3H,KAAA,CAAAs4D,EAAAuI,QAAA,CAAAthE,KAAAu3H,IAIAx+D,EAAAuI,OAIA,MAEA,IAAA,WAEA,IAAAq2D,EAAA,IAAAC,UACA1pH,EAAAypH,EAAAE,gBAAA5oH,EAAAsoH,GAEA,MAEA,IAAA,OAEArpH,EAAAq2B,KAAAmB,MAAAz2B,GAEA,MAEA,QAEAf,EAAAe,EAOA1N,WAAA,WAEAiyH,GAAAA,EAAAtlH,GAEAqiD,EAAAx6C,QAAAm+G,QAAA1kG,IAEA,GAEA,MAAAjiB,GAGAhM,WAAA,WAEAmyH,GAAAA,EAAAnmH,GAEAgjD,EAAAx6C,QAAAo+G,UAAA3kG,GACA+gC,EAAAx6C,QAAAm+G,QAAA1kG,IAEA,QAIA,CAoHA,IAAA,IAAAsoG,KAhHA1C,GAAA5lG,GAAA,GAEA4lG,GAAA5lG,GAAA14B,KAAA,CAEA08H,OAAAA,EACAC,WAAAA,EACAC,QAAAA,KAIA2D,EAAA,IAAAU,gBAEAC,KAAA,MAAAxoG,GAAA,GAEA6nG,EAAAvsH,iBAAA,OAAA,SAAAwV,GAEA,IAAApS,EAAA/B,KAAA+B,SAEA+pH,EAAA7C,GAAA5lG,GAIA,UAFA4lG,GAAA5lG,GAEA,MAAArjB,KAAAgxE,QAAA,IAAAhxE,KAAAgxE,OAAA,CAKA,IAAAhxE,KAAAgxE,QAAA95E,QAAAC,KAAA,6CAIA+vH,GAAA3uG,IAAA8K,EAAAthB,GAEA,IAAA,IAAAvb,EAAA,EAAAm1C,EAAAmwF,EAAA3kI,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAA2iC,EAAA2iG,EAAAtlI,GACA2iC,EAAAk+F,QAAAl+F,EAAAk+F,OAAAtlH,GAIAqiD,EAAAx6C,QAAAm+G,QAAA1kG,OAEA,CAEA,IAAA,IAAA2V,EAAA,EAAAuY,EAAAu6E,EAAA3kI,OAAA6xC,EAAAuY,EAAAvY,IAAA,CAEA,IAAA+yF,EAAAD,EAAA9yF,GACA+yF,EAAAxE,SAAAwE,EAAAxE,QAAApzG,GAIAiwC,EAAAx6C,QAAAo+G,UAAA3kG,GACA+gC,EAAAx6C,QAAAm+G,QAAA1kG,MAIA,GAEA6nG,EAAAvsH,iBAAA,WAAA,SAAAwV,GAIA,IAFA,IAAA23G,EAAA7C,GAAA5lG,GAEA78B,EAAA,EAAAm1C,EAAAmwF,EAAA3kI,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAA2iC,EAAA2iG,EAAAtlI,GACA2iC,EAAAm+F,YAAAn+F,EAAAm+F,WAAAnzG,MAIA,GAEA+2G,EAAAvsH,iBAAA,QAAA,SAAAwV,GAEA,IAAA23G,EAAA7C,GAAA5lG,UAEA4lG,GAAA5lG,GAEA,IAAA,IAAA78B,EAAA,EAAAm1C,EAAAmwF,EAAA3kI,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAA2iC,EAAA2iG,EAAAtlI,GACA2iC,EAAAo+F,SAAAp+F,EAAAo+F,QAAApzG,GAIAiwC,EAAAx6C,QAAAo+G,UAAA3kG,GACA+gC,EAAAx6C,QAAAm+G,QAAA1kG,KAEA,GAEA6nG,EAAAvsH,iBAAA,QAAA,SAAAwV,GAEA,IAAA23G,EAAA7C,GAAA5lG,UAEA4lG,GAAA5lG,GAEA,IAAA,IAAA78B,EAAA,EAAAm1C,EAAAmwF,EAAA3kI,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAA2iC,EAAA2iG,EAAAtlI,GACA2iC,EAAAo+F,SAAAp+F,EAAAo+F,QAAApzG,GAIAiwC,EAAAx6C,QAAAo+G,UAAA3kG,GACA+gC,EAAAx6C,QAAAm+G,QAAA1kG,KAEA,QAEAv2B,IAAAkT,KAAAurH,eAAAL,EAAAK,aAAAvrH,KAAAurH,mBACAz+H,IAAAkT,KAAAgsH,kBAAAd,EAAAc,gBAAAhsH,KAAAgsH,iBAEAd,EAAAe,kBAAAf,EAAAe,sBAAAn/H,IAAAkT,KAAAorH,SAAAprH,KAAAorH,SAAA,cAEAprH,KAAA2oH,cAEAuC,EAAAlC,iBAAA2C,EAAA3rH,KAAA2oH,cAAAgD,IAIAT,EAAAgB,KAAA,MAMA,OAFA9nE,EAAAx6C,QAAAk+G,UAAAzkG,GAEA6nG,EAtOAjC,GAAA5lG,GAAA14B,KAAA,CAEA08H,OAAAA,EACAC,WAAAA,EACAC,QAAAA,KAsOA4E,gBAAA,SAAAjgI,GAGA,OADA8T,KAAAurH,aAAAr/H,EACA8T,MAIAosH,mBAAA,SAAAlgI,GAGA,OADA8T,KAAAgsH,gBAAA9/H,EACA8T,MAIAqsH,YAAA,SAAAngI,GAGA,OADA8T,KAAAorH,SAAAl/H,EACA8T,QAgBAmpH,GAAA1hI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAA8wG,GAEAphH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,GAEA,IAAAnjE,EAAApkD,KAEA8I,EAAA,IAAAogH,GAAA9kE,EAAAx6C,SACAd,EAAAggH,QAAA1kE,EAAA0rB,MACAhnE,EAAAf,KAAAsb,EAAA,SAAAg1F,GAEA,IAEAgP,EAAAjjE,EAAA7qB,MAAAnB,KAAAmB,MAAA8+E,KAEA,MAAAjyH,GAEAmhI,EAEAA,EAAAnhI,GAIA8Q,QAAAkK,MAAAhb,GAIAg+D,EAAAx6C,QAAAo+G,UAAA3kG,KAIAikG,EAAAC,IAIAhuF,MAAA,SAAAgoF,GAIA,IAFA,IAAAuE,EAAA,GAEAt/H,EAAA,EAAAA,EAAA+6H,EAAAp6H,OAAAX,IAAA,CAEA,IAAA23H,EAAAkD,GAAA9nF,MAAAgoF,EAAA/6H,IAEAs/H,EAAAn7H,KAAAwzH,GAIA,OAAA2H,KAoBAsD,GAAA3hI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAA+wG,GAEArhH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,GAEA,IAAAnjE,EAAApkD,KAEAojB,EAAA,GAEArB,EAAA,IAAA+kF,GACA/kF,EAAApC,MAAAyD,EAEA,IAAAta,EAAA,IAAAogH,GAAAlpH,KAAA4J,SACAd,EAAAggH,QAAA9oH,KAAA8vE,MACAhnE,EAAAqjH,gBAAA,eAEA,IAAAG,EAAA,EAEA,SAAAC,EAAA/lI,GAEAsiB,EAAAf,KAAAsb,EAAA78B,GAAA,SAAA2uE,GAEA,IAAAq3D,EAAApoE,EAAA7qB,MAAA47B,GAAA,GAEA/xC,EAAA58B,GAAA,CACAqT,MAAA2yH,EAAA3yH,MACAC,OAAA0yH,EAAA1yH,OACA2mB,OAAA+rG,EAAA/rG,OACAI,QAAA2rG,EAAA3rG,SAKA,KAFAyrG,GAAA,KAIA,IAAAE,EAAAC,cACA1qG,EAAAvB,UAAArS,IAEA4T,EAAAtB,OAAA+rG,EAAA/rG,OACAsB,EAAAs7B,aAAA,EAEAgqE,GAAAA,EAAAtlG,KAIAulG,EAAAC,GAIA,GAAAr8H,MAAA6B,QAAAs2B,GAEA,IAAA,IAAA78B,EAAA,EAAAm1C,EAAAtY,EAAAl8B,OAAAX,EAAAm1C,IAAAn1C,EAEA+lI,EAAA/lI,QAQAsiB,EAAAf,KAAAsb,EAAA,SAAA8xC,GAEA,IAAAq3D,EAAApoE,EAAA7qB,MAAA47B,GAAA,GAEA,GAAAq3D,EAAAE,UAIA,IAFA,IAAA1xE,EAAAwxE,EAAA3rG,QAAA15B,OAAAqlI,EAAAC,YAEAhmI,EAAA,EAAAA,EAAAu0D,EAAAv0D,IAAA,CAEA28B,EAAA38B,GAAA,CAAAo6B,QAAA,IAEA,IAAA,IAAAr6B,EAAA,EAAAA,EAAAgmI,EAAAC,YAAAjmI,IAEA48B,EAAA38B,GAAAo6B,QAAAl2B,KAAA6hI,EAAA3rG,QAAAp6B,EAAA+lI,EAAAC,YAAAjmI,IACA48B,EAAA38B,GAAAg6B,OAAA+rG,EAAA/rG,OACA2C,EAAA38B,GAAAoT,MAAA2yH,EAAA3yH,MACAupB,EAAA38B,GAAAqT,OAAA0yH,EAAA1yH,YAQAioB,EAAApC,MAAA9lB,MAAA2yH,EAAA3yH,MACAkoB,EAAApC,MAAA7lB,OAAA0yH,EAAA1yH,OACAioB,EAAAlB,QAAA2rG,EAAA3rG,QAIA,IAAA2rG,EAAAC,cAEA1qG,EAAAvB,UAAArS,IAIA4T,EAAAtB,OAAA+rG,EAAA/rG,OACAsB,EAAAs7B,aAAA,EAEAgqE,GAAAA,EAAAtlG,IAEAulG,EAAAC,GAIA,OAAAxlG,KAoBAsnG,GAAA5hI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAAgxG,GAEAthH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,GAEA,IAAAnjE,EAAApkD,KAEA+hB,EAAA,IAAAotC,GAEArmD,EAAA,IAAAogH,GAAAlpH,KAAA4J,SA6DA,OA5DAd,EAAAqjH,gBAAA,eACArjH,EAAAggH,QAAA9oH,KAAA8vE,MACAhnE,EAAAf,KAAAsb,EAAA,SAAA8xC,GAEA,IAAAw3D,EAAAvoE,EAAA7qB,MAAA47B,GAEAw3D,SAEA7/H,IAAA6/H,EAAAhtG,MAEAoC,EAAApC,MAAAgtG,EAAAhtG,WAEA7yB,IAAA6/H,EAAA7pH,OAEAif,EAAApC,MAAA9lB,MAAA8yH,EAAA9yH,MACAkoB,EAAApC,MAAA7lB,OAAA6yH,EAAA7yH,OACAioB,EAAApC,MAAA7c,KAAA6pH,EAAA7pH,MAIAif,EAAA1B,WAAAvzB,IAAA6/H,EAAAtsG,MAAAssG,EAAAtsG,MAAAvS,GACAiU,EAAAzB,WAAAxzB,IAAA6/H,EAAArsG,MAAAqsG,EAAArsG,MAAAxS,GAEAiU,EAAAxB,eAAAzzB,IAAA6/H,EAAApsG,UAAAosG,EAAApsG,UAAApS,GACA4T,EAAAvB,eAAA1zB,IAAA6/H,EAAAnsG,UAAAmsG,EAAAnsG,UAAArS,GAEA4T,EAAArB,gBAAA5zB,IAAA6/H,EAAAjsG,WAAAisG,EAAAjsG,WAAA,OAEA5zB,IAAA6/H,EAAAlsG,SAEAsB,EAAAtB,OAAAksG,EAAAlsG,aAIA3zB,IAAA6/H,EAAA94H,OAEAkuB,EAAAluB,KAAA84H,EAAA94H,WAIA/G,IAAA6/H,EAAA9rG,UAEAkB,EAAAlB,QAAA8rG,EAAA9rG,QACAkB,EAAAvB,UAAAnS,IAIA,IAAAs+G,EAAAF,cAEA1qG,EAAAvB,UAAArS,IAIA4T,EAAAs7B,aAAA,EAEAgqE,GAAAA,EAAAtlG,EAAA4qG,KAEArF,EAAAC,GAGAxlG,KAgBAunG,GAAA7hI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAAixG,GAEAvhH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,QAEAz6H,IAAAkT,KAAA8vE,OAAAzsD,EAAArjB,KAAA8vE,KAAAzsD,GAEAA,EAAArjB,KAAA4J,QAAAq+G,WAAA5kG,GAEA,IAAA+gC,EAAApkD,KAEAirH,EAAA/D,GAAAnnH,IAAAsjB,GAEA,QAAAv2B,IAAAm+H,EAYA,OAVA7mE,EAAAx6C,QAAAk+G,UAAAzkG,GAEAjuB,WAAA,WAEAiyH,GAAAA,EAAA4D,GAEA7mE,EAAAx6C,QAAAm+G,QAAA1kG,IAEA,GAEA4nG,EAIA,IAAAtrG,EAAAn1B,SAAAs1B,gBAAA,+BAAA,OAEA,SAAA8sG,IAEAjtG,EAAA/gB,oBAAA,OAAAguH,GAAA,GACAjtG,EAAA/gB,oBAAA,QAAAiuH,GAAA,GAEA3F,GAAA3uG,IAAA8K,EAAArjB,MAEAqnH,GAAAA,EAAArnH,MAEAokD,EAAAx6C,QAAAm+G,QAAA1kG,GAIA,SAAAwpG,EAAA14G,GAEAwL,EAAA/gB,oBAAA,OAAAguH,GAAA,GACAjtG,EAAA/gB,oBAAA,QAAAiuH,GAAA,GAEAtF,GAAAA,EAAApzG,GAEAiwC,EAAAx6C,QAAAo+G,UAAA3kG,GACA+gC,EAAAx6C,QAAAm+G,QAAA1kG,GAiBA,OAbA1D,EAAAhhB,iBAAA,OAAAiuH,GAAA,GACAjtG,EAAAhhB,iBAAA,QAAAkuH,GAAA,GAEA,UAAAxpG,EAAArxB,OAAA,EAAA,SAEAlF,IAAAkT,KAAAyoH,cAAA9oG,EAAA8oG,YAAAzoH,KAAAyoH,aAIArkE,EAAAx6C,QAAAk+G,UAAAzkG,GAEA1D,EAAAC,IAAAyD,EAEA1D,KAiBA4pG,GAAA9hI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAAkxG,GAEAxhH,KAAA,SAAA+kH,EAAAzF,EAAAC,EAAAC,GAEA,IAAAxlG,EAAA,IAAAuoD,GAEAxhE,EAAA,IAAAwgH,GAAAtpH,KAAA4J,SACAd,EAAA+/G,eAAA7oH,KAAAyoH,aACA3/G,EAAAggH,QAAA9oH,KAAA8vE,MAEA,IAAAw8C,EAAA,EAEA,SAAAC,EAAA/lI,GAEAsiB,EAAAf,KAAA+kH,EAAAtmI,GAAA,SAAAm5B,GAEAoC,EAAAqB,OAAA58B,GAAAm5B,EAIA,MAFA2sG,IAIAvqG,EAAAs7B,aAAA,EAEAgqE,GAAAA,EAAAtlG,UAIAj1B,EAAAy6H,GAIA,IAAA,IAAA/gI,EAAA,EAAAA,EAAAsmI,EAAA3lI,SAAAX,EAEA+lI,EAAA/lI,GAIA,OAAAu7B,KAgBAynG,GAAA/hI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAAmxG,GAEAzhH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,GAEA,IAAAxlG,EAAA,IAAA5B,GAEArX,EAAA,IAAAwgH,GAAAtpH,KAAA4J,SAsBA,OArBAd,EAAA+/G,eAAA7oH,KAAAyoH,aACA3/G,EAAAggH,QAAA9oH,KAAA8vE,MAEAhnE,EAAAf,KAAAsb,EAAA,SAAA1D,GAEAoC,EAAApC,MAAAA,EAGA,IAAAotG,EAAA1pG,EAAA2pG,OAAA,kBAAA,GAAA,IAAA3pG,EAAA2pG,OAAA,sBAEAjrG,EAAAtB,OAAAssG,EAAA59G,GAAAC,GACA2S,EAAAs7B,aAAA,OAEAvwD,IAAAu6H,GAEAA,EAAAtlG,IAIAulG,EAAAC,GAEAxlG,KAiDAx6B,OAAAM,OAAA4hI,GAAAhiI,UAAA,CAKAwlI,SAAA,WAGA,OADA/1H,QAAAC,KAAA,6CACA,MAOA8zG,WAAA,SAAArkH,EAAAsmI,GAEA,IAAA5mI,EAAA0Z,KAAAmtH,eAAAvmI,GACA,OAAAoZ,KAAAitH,SAAA3mI,EAAA4mI,IAMAE,UAAA,SAAAC,QAEAvgI,IAAAugI,IAAAA,EAAA,GAIA,IAFA,IAAA5xF,EAAA,GAEAnuC,EAAA,EAAAA,GAAA+/H,EAAA//H,IAEAmuC,EAAA9wC,KAAAqV,KAAAitH,SAAA3/H,EAAA+/H,IAIA,OAAA5xF,GAMAm3E,gBAAA,SAAAya,QAEAvgI,IAAAugI,IAAAA,EAAA,GAIA,IAFA,IAAA5xF,EAAA,GAEAnuC,EAAA,EAAAA,GAAA+/H,EAAA//H,IAEAmuC,EAAA9wC,KAAAqV,KAAAirG,WAAA39G,EAAA+/H,IAIA,OAAA5xF,GAMA6xF,UAAA,WAEA,IAAAC,EAAAvtH,KAAAwtH,aACA,OAAAD,EAAAA,EAAApmI,OAAA,IAMAqmI,WAAA,SAAAH,GAIA,QAFAvgI,IAAAugI,IAAAA,EAAArtH,KAAA0pH,oBAEA1pH,KAAAytH,iBACAztH,KAAAytH,gBAAAtmI,SAAAkmI,EAAA,IACArtH,KAAAq9C,YAEA,OAAAr9C,KAAAytH,gBAIAztH,KAAAq9C,aAAA,EAEA,IACAqwE,EADAjjI,EAAA,GACA+iH,EAAAxtG,KAAAitH,SAAA,GACAxf,EAAA,EAEAhjH,EAAAE,KAAA,GAEA,IAAA,IAAA3D,EAAA,EAAAA,GAAAqmI,EAAArmI,IAGAymH,IADAigB,EAAA1tH,KAAAitH,SAAAjmI,EAAAqmI,IACAnzG,WAAAszF,GACA/iH,EAAAE,KAAA8iH,GACAD,EAAAkgB,EAMA,OAFA1tH,KAAAytH,gBAAAhjI,EAEAA,GAIAkjI,iBAAA,WAEA3tH,KAAAq9C,aAAA,EACAr9C,KAAAwtH,cAMAL,eAAA,SAAAvmI,EAAAyvC,GAEA,IAIAu3F,EAJAC,EAAA7tH,KAAAwtH,aAEAhnI,EAAA,EAAAm1C,EAAAkyF,EAAA1mI,OAMAymI,EAFAv3F,GAMAzvC,EAAAinI,EAAAlyF,EAAA,GAQA,IAFA,IAAAmyF,EAAAj4G,EAAA,EAAAC,EAAA6lB,EAAA,EAEA9lB,GAAAC,GAMA,IAFAg4G,EAAAD,EAFArnI,EAAAiI,KAAAC,MAAAmnB,GAAAC,EAAAD,GAAA,IAEA+3G,GAEA,EAEA/3G,EAAArvB,EAAA,MAEA,CAAA,KAAAsnI,EAAA,GAIA,CAEAh4G,EAAAtvB,EACA,MALAsvB,EAAAtvB,EAAA,EAeA,GAAAqnI,EAFArnI,EAAAsvB,KAEA83G,EAEA,OAAApnI,GAAAm1C,EAAA,GAMA,IAAAoyF,EAAAF,EAAArnI,GAaA,OAFAA,GAJAonI,EAAAG,IANAF,EAAArnI,EAAA,GAEAunI,KAQApyF,EAAA,IAWAqyF,WAAA,SAAA1nI,EAAA4mI,GAEA,IACAjtF,EAAA35C,EADA,KAEAykI,EAAAzkI,EAFA,KAMA25C,EAAA,IAAAA,EAAA,GACA8qF,EAAA,IAAAA,EAAA,GAEA,IAAAkD,EAAAjuH,KAAAitH,SAAAhtF,GACAiuF,EAAAluH,KAAAitH,SAAAlC,GAEAztE,EAAA4vE,IAAAe,EAAA,UAAA,IAAAx2G,GAAA,IAAA4R,IAIA,OAFAi0B,EAAAlxD,KAAA8hI,GAAAt1G,IAAAq1G,GAAAl0G,YAEAujC,GAIA6wE,aAAA,SAAAvnI,EAAAsmI,GAEA,IAAA5mI,EAAA0Z,KAAAmtH,eAAAvmI,GACA,OAAAoZ,KAAAguH,WAAA1nI,EAAA4mI,IAIApiB,oBAAA,SAAAiP,EAAAxP,GAeA,IAXA,IAAA9+E,EAAA,IAAApC,GAEAshF,EAAA,GACA3xD,EAAA,GACA4xD,EAAA,GAEAyI,EAAA,IAAAhqF,GACA+kG,EAAA,IAAA5hG,GAIAhmC,EAAA,EAAAA,GAAAuzH,EAAAvzH,IAAA,CAIAmkH,EAAAnkH,GAAAwZ,KAAAmuH,aAFA3nI,EAAAuzH,EAEA,IAAA1wF,IACAshF,EAAAnkH,GAAAuzB,YAOAi/B,EAAA,GAAA,IAAA3vB,GACAuhF,EAAA,GAAA,IAAAvhF,GACA,IAAAvuB,EAAAvB,OAAA80H,UACAtvG,EAAAtwB,KAAAkC,IAAAg6G,EAAA,GAAAx+G,GACA6yB,EAAAvwB,KAAAkC,IAAAg6G,EAAA,GAAAl9G,GACA6gI,EAAA7/H,KAAAkC,IAAAg6G,EAAA,GAAAlpF,GAEA1C,GAAAjkB,IAEAA,EAAAikB,EACA0M,EAAAjU,IAAA,EAAA,EAAA,IAIAwH,GAAAlkB,IAEAA,EAAAkkB,EACAyM,EAAAjU,IAAA,EAAA,EAAA,IAIA82G,GAAAxzH,GAEA2wB,EAAAjU,IAAA,EAAA,EAAA,GAIA67F,EAAAxoF,aAAA8/E,EAAA,GAAAl/E,GAAA1R,YAEAi/B,EAAA,GAAAnuB,aAAA8/E,EAAA,GAAA0I,GACAzI,EAAA,GAAA//E,aAAA8/E,EAAA,GAAA3xD,EAAA,IAKA,IAAA,IAAAhgB,EAAA,EAAAA,GAAA+gF,EAAA/gF,IAAA,CAQA,GANAggB,EAAAhgB,GAAAggB,EAAAhgB,EAAA,GAAA5gB,QAEAwyF,EAAA5xE,GAAA4xE,EAAA5xE,EAAA,GAAA5gB,QAEAi7F,EAAAxoF,aAAA8/E,EAAA3xE,EAAA,GAAA2xE,EAAA3xE,IAEAq6E,EAAAlsH,SAAAoS,OAAAwQ,QAAA,CAEAspG,EAAAt5F,YAEA,IAAAwF,EAAA9wB,KAAAo1B,KAAAtP,GAAAW,MAAAy1F,EAAA3xE,EAAA,GAAAtf,IAAAixF,EAAA3xE,KAAA,EAAA,IAEAggB,EAAAhgB,GAAArV,aAAAyqG,EAAA59F,iBAAA6iF,EAAA9zF,IAIAqrF,EAAA5xE,GAAAnO,aAAA8/E,EAAA3xE,GAAAggB,EAAAhgB,IAMA,IAAA,IAAAuxE,EAAA,CAEA,IAAAgkB,EAAA9/H,KAAAo1B,KAAAtP,GAAAW,MAAA8jC,EAAA,GAAAt/B,IAAAs/B,EAAA+gE,KAAA,EAAA,IACAwU,GAAAxU,EAEApP,EAAA,GAAAjxF,IAAA25F,EAAAxoF,aAAAmuB,EAAA,GAAAA,EAAA+gE,KAAA,IAEAwU,GAAAA,GAIA,IAAA,IAAAr1F,EAAA,EAAAA,GAAA6gF,EAAA7gF,IAGA8f,EAAA9f,GAAAvV,aAAAyqG,EAAA59F,iBAAAm6E,EAAAzxE,GAAAq1F,EAAAr1F,IACA0xE,EAAA1xE,GAAArO,aAAA8/E,EAAAzxE,GAAA8f,EAAA9f,IAMA,MAAA,CACAyxE,SAAAA,EACA3xD,QAAAA,EACA4xD,UAAAA,IAKAxyF,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAvD,GAIA,OAFAmX,KAAA0pH,mBAAA7gI,EAAA6gI,mBAEA1pH,MAIA6iB,OAAA,WAEA,IAAA/f,EAAA,CACAmgB,SAAA,CACA3B,QAAA,IACAztB,KAAA,QACAqvB,UAAA,iBAOA,OAHApgB,EAAA4mH,mBAAA1pH,KAAA0pH,mBACA5mH,EAAAjP,KAAAmM,KAAAnM,KAEAiP,GAIA0rH,SAAA,SAAAjN,GAIA,OAFAvhH,KAAA0pH,mBAAAnI,EAAAmI,mBAEA1pH,SA2BA2pH,GAAAliI,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,YACA4wB,YAAAsxG,GAEAA,GAAAliI,UAAAgnI,gBAAA,EAEA9E,GAAAliI,UAAAwlI,SAAA,SAAA3mI,EAAA4mI,GASA,IAPA,IAAA5wF,EAAA4wF,GAAA,IAAAz1G,GAEAi3G,EAAA,EAAAjgI,KAAAgmB,GACAk6G,EAAA3uH,KAAAiqH,UAAAjqH,KAAAgqH,YACA4E,EAAAngI,KAAAkC,IAAAg+H,GAAAp1H,OAAAwQ,QAGA4kH,EAAA,GAAAA,GAAAD,EACA,KAAAC,EAAAD,GAAAC,GAAAD,EAEAC,EAAAp1H,OAAAwQ,UAIA4kH,EAFAC,EAEA,EAIAF,IAMA,IAAA1uH,KAAAkqH,YAAA0E,IAEAD,IAAAD,EAEAC,GAAAD,EAIAC,GAAAD,GAMA,IAAA10G,EAAAha,KAAAgqH,YAAA1jI,EAAAqoI,EACAxiI,EAAA6T,KAAA4pH,GAAA5pH,KAAA8pH,QAAAr7H,KAAAqoB,IAAAkD,GACAvsB,EAAAuS,KAAA6pH,GAAA7pH,KAAA+pH,QAAAt7H,KAAAsoB,IAAAiD,GAEA,GAAA,IAAAha,KAAAmqH,UAAA,CAEA,IAAArzG,EAAAroB,KAAAqoB,IAAA9W,KAAAmqH,WACApzG,EAAAtoB,KAAAsoB,IAAA/W,KAAAmqH,WAEAprG,EAAA5yB,EAAA6T,KAAA4pH,GACA5qG,EAAAvxB,EAAAuS,KAAA6pH,GAGA19H,EAAA4yB,EAAAjI,EAAAkI,EAAAjI,EAAA/W,KAAA4pH,GACAn8H,EAAAsxB,EAAAhI,EAAAiI,EAAAlI,EAAA9W,KAAA6pH,GAIA,OAAAvtF,EAAA9kB,IAAArrB,EAAAsB,IAIAk8H,GAAAliI,UAAA2E,KAAA,SAAAvD,GAiBA,OAfA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA4pH,GAAA/gI,EAAA+gI,GACA5pH,KAAA6pH,GAAAhhI,EAAAghI,GAEA7pH,KAAA8pH,QAAAjhI,EAAAihI,QACA9pH,KAAA+pH,QAAAlhI,EAAAkhI,QAEA/pH,KAAAgqH,YAAAnhI,EAAAmhI,YACAhqH,KAAAiqH,UAAAphI,EAAAohI,UAEAjqH,KAAAkqH,WAAArhI,EAAAqhI,WAEAlqH,KAAAmqH,UAAAthI,EAAAshI,UAEAnqH,MAKA2pH,GAAAliI,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAeA,OAbA8C,EAAA8mH,GAAA5pH,KAAA4pH,GACA9mH,EAAA+mH,GAAA7pH,KAAA6pH,GAEA/mH,EAAAgnH,QAAA9pH,KAAA8pH,QACAhnH,EAAAinH,QAAA/pH,KAAA+pH,QAEAjnH,EAAAknH,YAAAhqH,KAAAgqH,YACAlnH,EAAAmnH,UAAAjqH,KAAAiqH,UAEAnnH,EAAAonH,WAAAlqH,KAAAkqH,WAEApnH,EAAAqnH,UAAAnqH,KAAAmqH,UAEArnH,GAIA6mH,GAAAliI,UAAA+mI,SAAA,SAAAjN,GAiBA,OAfAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAA4pH,GAAArI,EAAAqI,GACA5pH,KAAA6pH,GAAAtI,EAAAsI,GAEA7pH,KAAA8pH,QAAAvI,EAAAuI,QACA9pH,KAAA+pH,QAAAxI,EAAAwI,QAEA/pH,KAAAgqH,YAAAzI,EAAAyI,YACAhqH,KAAAiqH,UAAA1I,EAAA0I,UAEAjqH,KAAAkqH,WAAA3I,EAAA2I,WAEAlqH,KAAAmqH,UAAA5I,EAAA4I,UAEAnqH,OAYAoqH,GAAA3iI,UAAAF,OAAAm7B,OAAAinG,GAAAliI,YACA4wB,YAAA+xG,GAEAA,GAAA3iI,UAAAonI,YAAA,EAiFA,IAAAnwG,GAAA,IAAA2K,GACAymF,GAAA,IAAAwa,GAAAva,GAAA,IAAAua,GAAAwE,GAAA,IAAAxE,GAEA,SAAAyE,GAAAtzF,EAAA8uE,EAAAykB,EAAAtE,GAEAjB,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,mBAEAmM,KAAAy7B,OAAAA,GAAA,GACAz7B,KAAAuqG,OAAAA,IAAA,EACAvqG,KAAAgvH,UAAAA,GAAA,cACAhvH,KAAA0qH,QAAAA,GAAA,GAsKA,SAAAuE,GAAA3oI,EAAAs0C,EAAAC,EAAAC,EAAAkJ,GAEA,IAAAvJ,EAAA,IAAAK,EAAAF,GACAlgB,EAAA,IAAAspB,EAAAnJ,GACAkwF,EAAAzkI,EAAAA,EAEA,OAAA,EAAAu0C,EAAA,EAAAC,EAAAL,EAAA/f,IADAp0B,EAAAykI,KACA,EAAAlwF,EAAA,EAAAC,EAAA,EAAAL,EAAA/f,GAAAqwG,EAAAtwF,EAAAn0C,EAAAu0C,EAyBA,SAAAq0F,GAAA5oI,EAAAs0C,EAAAC,EAAAC,GAEA,OArBA,SAAAx0C,EAAAU,GAEA,IAAAoc,EAAA,EAAA9c,EACA,OAAA8c,EAAAA,EAAApc,EAkBAmoI,CAAA7oI,EAAAs0C,GAdA,SAAAt0C,EAAAU,GAEA,OAAA,GAAA,EAAAV,GAAAA,EAAAU,EAYAooI,CAAA9oI,EAAAu0C,GARA,SAAAv0C,EAAAU,GAEA,OAAAV,EAAAA,EAAAU,EAOAqoI,CAAA/oI,EAAAw0C,GAgCA,SAAAw0F,GAAAhpI,EAAAs0C,EAAAC,EAAAC,EAAAkJ,GAEA,OA5BA,SAAA19C,EAAAU,GAEA,IAAAoc,EAAA,EAAA9c,EACA,OAAA8c,EAAAA,EAAAA,EAAApc,EAyBAuoI,CAAAjpI,EAAAs0C,GArBA,SAAAt0C,EAAAU,GAEA,IAAAoc,EAAA,EAAA9c,EACA,OAAA,EAAA8c,EAAAA,EAAA9c,EAAAU,EAkBAwoI,CAAAlpI,EAAAu0C,GAdA,SAAAv0C,EAAAU,GAEA,OAAA,GAAA,EAAAV,GAAAA,EAAAA,EAAAU,EAYAyoI,CAAAnpI,EAAAw0C,GARA,SAAAx0C,EAAAU,GAEA,OAAAV,EAAAA,EAAAA,EAAAU,EAOA0oI,CAAAppI,EAAA09C,GAIA,SAAA2rF,GAAAl1F,EAAA/f,EAAAC,EAAAi1G,GAEAnG,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,mBAEAmM,KAAAy6B,GAAAA,GAAA,IAAAhjB,GACAzX,KAAA0a,GAAAA,GAAA,IAAAjD,GACAzX,KAAA2a,GAAAA,GAAA,IAAAlD,GACAzX,KAAA4vH,GAAAA,GAAA,IAAAn4G,GA+DA,SAAAo4G,GAAAp1F,EAAA/f,EAAAC,EAAAi1G,GAEAnG,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,oBAEAmM,KAAAy6B,GAAAA,GAAA,IAAApR,GACArpB,KAAA0a,GAAAA,GAAA,IAAA2O,GACArpB,KAAA2a,GAAAA,GAAA,IAAA0O,GACArpB,KAAA4vH,GAAAA,GAAA,IAAAvmG,GAgEA,SAAAymG,GAAAp1G,EAAAC,GAEA8uG,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,YAEAmM,KAAA0a,GAAAA,GAAA,IAAAjD,GACAzX,KAAA2a,GAAAA,GAAA,IAAAlD,GA+EA,SAAAs4G,GAAAr1G,EAAAC,GAEA8uG,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,aAEAmM,KAAA0a,GAAAA,GAAA,IAAA2O,GACArpB,KAAA2a,GAAAA,GAAA,IAAA0O,GAqEA,SAAA2mG,GAAAv1F,EAAA/f,EAAAC,GAEA8uG,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,uBAEAmM,KAAAy6B,GAAAA,GAAA,IAAAhjB,GACAzX,KAAA0a,GAAAA,GAAA,IAAAjD,GACAzX,KAAA2a,GAAAA,GAAA,IAAAlD,GA4DA,SAAAw4G,GAAAx1F,EAAA/f,EAAAC,GAEA8uG,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,wBAEAmM,KAAAy6B,GAAAA,GAAA,IAAApR,GACArpB,KAAA0a,GAAAA,GAAA,IAAA2O,GACArpB,KAAA2a,GAAAA,GAAA,IAAA0O,GA6DA,SAAA6mG,GAAAz0F,GAEAguF,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,cAEAmM,KAAAy7B,OAAAA,GAAA,IA7qBAszF,GAAAtnI,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,YACA4wB,YAAA02G,GAEAA,GAAAtnI,UAAA0oI,oBAAA,EAEApB,GAAAtnI,UAAAwlI,SAAA,SAAA3mI,EAAA4mI,GAEA,IAoBAtyF,EAAAC,EAAAC,EAAAkJ,EApBA1H,EAAA4wF,GAAA,IAAA7jG,GAEAoS,EAAAz7B,KAAAy7B,OACAxrC,EAAAwrC,EAAAt0C,OAEAH,GAAAiJ,GAAA+P,KAAAuqG,OAAA,EAAA,IAAAjkH,EACA8pI,EAAA3hI,KAAAC,MAAA1H,GACAs8G,EAAAt8G,EAAAopI,EA0CA,GAxCApwH,KAAAuqG,OAEA6lB,GAAAA,EAAA,EAAA,GAAA3hI,KAAAC,MAAAD,KAAAkC,IAAAy/H,GAAAngI,GAAA,GAAAA,EAEA,IAAAqzG,GAAA8sB,IAAAngI,EAAA,IAEAmgI,EAAAngI,EAAA,EACAqzG,EAAA,GAMAtjG,KAAAuqG,QAAA6lB,EAAA,EAEAx1F,EAAAa,GAAA20F,EAAA,GAAAngI,IAKAyuB,GAAA7F,WAAA4iB,EAAA,GAAAA,EAAA,IAAAljB,IAAAkjB,EAAA,IACAb,EAAAlc,IAIAmc,EAAAY,EAAA20F,EAAAngI,GACA6qC,EAAAW,GAAA20F,EAAA,GAAAngI,GAEA+P,KAAAuqG,QAAA6lB,EAAA,EAAAngI,EAEA+zC,EAAAvI,GAAA20F,EAAA,GAAAngI,IAKAyuB,GAAA7F,WAAA4iB,EAAAxrC,EAAA,GAAAwrC,EAAAxrC,EAAA,IAAAsoB,IAAAkjB,EAAAxrC,EAAA,IACA+zC,EAAAtlB,IAIA,gBAAA1e,KAAAgvH,WAAA,YAAAhvH,KAAAgvH,UAAA,CAGA,IAAAhlH,EAAA,YAAAhK,KAAAgvH,UAAA,GAAA,IACApE,EAAAn8H,KAAAub,IAAA4wB,EAAAzgB,kBAAA0gB,GAAA7wB,GACA6gH,EAAAp8H,KAAAub,IAAA6wB,EAAA1gB,kBAAA2gB,GAAA9wB,GACA8gH,EAAAr8H,KAAAub,IAAA8wB,EAAA3gB,kBAAA6pB,GAAAh6B,GAGA6gH,EAAA,OAAAA,EAAA,GACAD,EAAA,OAAAA,EAAAC,GACAC,EAAA,OAAAA,EAAAD,GAEA/a,GAAA6a,yBAAA/vF,EAAAzuC,EAAA0uC,EAAA1uC,EAAA2uC,EAAA3uC,EAAA63C,EAAA73C,EAAAy+H,EAAAC,EAAAC,GACA/a,GAAA4a,yBAAA/vF,EAAAntC,EAAAotC,EAAAptC,EAAAqtC,EAAArtC,EAAAu2C,EAAAv2C,EAAAm9H,EAAAC,EAAAC,GACAgE,GAAAnE,yBAAA/vF,EAAAnZ,EAAAoZ,EAAApZ,EAAAqZ,EAAArZ,EAAAuiB,EAAAviB,EAAAmpG,EAAAC,EAAAC,OAEA,eAAA9qH,KAAAgvH,YAEAlf,GAAA0a,eAAA5vF,EAAAzuC,EAAA0uC,EAAA1uC,EAAA2uC,EAAA3uC,EAAA63C,EAAA73C,EAAA6T,KAAA0qH,SACA3a,GAAAya,eAAA5vF,EAAAntC,EAAAotC,EAAAptC,EAAAqtC,EAAArtC,EAAAu2C,EAAAv2C,EAAAuS,KAAA0qH,SACAoE,GAAAtE,eAAA5vF,EAAAnZ,EAAAoZ,EAAApZ,EAAAqZ,EAAArZ,EAAAuiB,EAAAviB,EAAAzhB,KAAA0qH,UAUA,OANApuF,EAAA9kB,IACAs4F,GAAAkb,KAAA1nB,GACAyM,GAAAib,KAAA1nB,GACAwrB,GAAA9D,KAAA1nB,IAGAhnE,GAIAyyF,GAAAtnI,UAAA2E,KAAA,SAAAvD,GAEA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAy7B,OAAA,GAEA,IAAA,IAAAj1C,EAAA,EAAAyJ,EAAApH,EAAA4yC,OAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAIAwZ,KAAAy7B,OAAA9wC,KAFA9B,EAAA4yC,OAAAj1C,GAEA4xB,SAQA,OAJApY,KAAAuqG,OAAA1hH,EAAA0hH,OACAvqG,KAAAgvH,UAAAnmI,EAAAmmI,UACAhvH,KAAA0qH,QAAA7hI,EAAA6hI,QAEA1qH,MAIA+uH,GAAAtnI,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAEA8C,EAAA24B,OAAA,GAEA,IAAA,IAAAj1C,EAAA,EAAAyJ,EAAA+P,KAAAy7B,OAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAGAsc,EAAA24B,OAAA9wC,KADAqV,KAAAy7B,OAAAj1C,GACAu0B,WAQA,OAJAjY,EAAAynG,OAAAvqG,KAAAuqG,OACAznG,EAAAksH,UAAAhvH,KAAAgvH,UACAlsH,EAAA4nH,QAAA1qH,KAAA0qH,QAEA5nH,GAIAisH,GAAAtnI,UAAA+mI,SAAA,SAAAjN,GAEAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAAy7B,OAAA,GAEA,IAAA,IAAAj1C,EAAA,EAAAyJ,EAAAsxH,EAAA9lF,OAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAA81C,EAAAilF,EAAA9lF,OAAAj1C,GACAwZ,KAAAy7B,OAAA9wC,MAAA,IAAA0+B,IAAAxO,UAAAyhB,IAQA,OAJAt8B,KAAAuqG,OAAAgX,EAAAhX,OACAvqG,KAAAgvH,UAAAzN,EAAAyN,UACAhvH,KAAA0qH,QAAAnJ,EAAAmJ,QAEA1qH,OAiGA2vH,GAAAloI,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,YACA4wB,YAAAs3G,GAEAA,GAAAloI,UAAA4oI,oBAAA,EAEAV,GAAAloI,UAAAwlI,SAAA,SAAA3mI,EAAA4mI,GAEA,IAAA5wF,EAAA4wF,GAAA,IAAAz1G,GAEAgjB,EAAAz6B,KAAAy6B,GAAA/f,EAAA1a,KAAA0a,GAAAC,EAAA3a,KAAA2a,GAAAi1G,EAAA5vH,KAAA4vH,GAOA,OALAtzF,EAAA9kB,IACA83G,GAAAhpI,EAAAm0C,EAAAtuC,EAAAuuB,EAAAvuB,EAAAwuB,EAAAxuB,EAAAyjI,EAAAzjI,GACAmjI,GAAAhpI,EAAAm0C,EAAAhtC,EAAAitB,EAAAjtB,EAAAktB,EAAAltB,EAAAmiI,EAAAniI,IAGA6uC,GAIAqzF,GAAAloI,UAAA2E,KAAA,SAAAvD,GASA,OAPA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAy6B,GAAAruC,KAAAvD,EAAA4xC,IACAz6B,KAAA0a,GAAAtuB,KAAAvD,EAAA6xB,IACA1a,KAAA2a,GAAAvuB,KAAAvD,EAAA8xB,IACA3a,KAAA4vH,GAAAxjI,KAAAvD,EAAA+mI,IAEA5vH,MAIA2vH,GAAAloI,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAOA,OALA8C,EAAA23B,GAAAz6B,KAAAy6B,GAAA1f,UACAjY,EAAA4X,GAAA1a,KAAA0a,GAAAK,UACAjY,EAAA6X,GAAA3a,KAAA2a,GAAAI,UACAjY,EAAA8sH,GAAA5vH,KAAA4vH,GAAA70G,UAEAjY,GAIA6sH,GAAAloI,UAAA+mI,SAAA,SAAAjN,GASA,OAPAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAAy6B,GAAA5f,UAAA0mG,EAAA9mF,IACAz6B,KAAA0a,GAAAG,UAAA0mG,EAAA7mG,IACA1a,KAAA2a,GAAAE,UAAA0mG,EAAA5mG,IACA3a,KAAA4vH,GAAA/0G,UAAA0mG,EAAAqO,IAEA5vH,OAiBA6vH,GAAApoI,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,YACA4wB,YAAAw3G,GAEAA,GAAApoI,UAAA6oI,qBAAA,EAEAT,GAAApoI,UAAAwlI,SAAA,SAAA3mI,EAAA4mI,GAEA,IAAA5wF,EAAA4wF,GAAA,IAAA7jG,GAEAoR,EAAAz6B,KAAAy6B,GAAA/f,EAAA1a,KAAA0a,GAAAC,EAAA3a,KAAA2a,GAAAi1G,EAAA5vH,KAAA4vH,GAQA,OANAtzF,EAAA9kB,IACA83G,GAAAhpI,EAAAm0C,EAAAtuC,EAAAuuB,EAAAvuB,EAAAwuB,EAAAxuB,EAAAyjI,EAAAzjI,GACAmjI,GAAAhpI,EAAAm0C,EAAAhtC,EAAAitB,EAAAjtB,EAAAktB,EAAAltB,EAAAmiI,EAAAniI,GACA6hI,GAAAhpI,EAAAm0C,EAAAhZ,EAAA/G,EAAA+G,EAAA9G,EAAA8G,EAAAmuG,EAAAnuG,IAGA6a,GAIAuzF,GAAApoI,UAAA2E,KAAA,SAAAvD,GASA,OAPA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAy6B,GAAAruC,KAAAvD,EAAA4xC,IACAz6B,KAAA0a,GAAAtuB,KAAAvD,EAAA6xB,IACA1a,KAAA2a,GAAAvuB,KAAAvD,EAAA8xB,IACA3a,KAAA4vH,GAAAxjI,KAAAvD,EAAA+mI,IAEA5vH,MAIA6vH,GAAApoI,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAOA,OALA8C,EAAA23B,GAAAz6B,KAAAy6B,GAAA1f,UACAjY,EAAA4X,GAAA1a,KAAA0a,GAAAK,UACAjY,EAAA6X,GAAA3a,KAAA2a,GAAAI,UACAjY,EAAA8sH,GAAA5vH,KAAA4vH,GAAA70G,UAEAjY,GAIA+sH,GAAApoI,UAAA+mI,SAAA,SAAAjN,GASA,OAPAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAAy6B,GAAA5f,UAAA0mG,EAAA9mF,IACAz6B,KAAA0a,GAAAG,UAAA0mG,EAAA7mG,IACA1a,KAAA2a,GAAAE,UAAA0mG,EAAA5mG,IACA3a,KAAA4vH,GAAA/0G,UAAA0mG,EAAAqO,IAEA5vH,OAeA8vH,GAAAroI,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,YACA4wB,YAAAy3G,GAEAA,GAAAroI,UAAA8oI,aAAA,EAEAT,GAAAroI,UAAAwlI,SAAA,SAAA3mI,EAAA4mI,GAEA,IAAA5wF,EAAA4wF,GAAA,IAAAz1G,GAaA,OAXA,IAAAnxB,EAEAg2C,EAAAlwC,KAAA4T,KAAA2a,KAIA2hB,EAAAlwC,KAAA4T,KAAA2a,IAAA/B,IAAA5Y,KAAA0a,IACA4hB,EAAAtjB,eAAA1yB,GAAAiyB,IAAAvY,KAAA0a,KAIA4hB,GAMAwzF,GAAAroI,UAAAwjH,WAAA,SAAArkH,EAAAsmI,GAEA,OAAAltH,KAAAitH,SAAArmI,EAAAsmI,IAIA4C,GAAAroI,UAAAumI,WAAA,SAAA1nI,EAAA4mI,GAEA,IAAA5vE,EAAA4vE,GAAA,IAAAz1G,GAIA,OAFA6lC,EAAAlxD,KAAA4T,KAAA2a,IAAA/B,IAAA5Y,KAAA0a,IAAAX,YAEAujC,GAIAwyE,GAAAroI,UAAA2E,KAAA,SAAAvD,GAOA,OALA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA0a,GAAAtuB,KAAAvD,EAAA6xB,IACA1a,KAAA2a,GAAAvuB,KAAAvD,EAAA8xB,IAEA3a,MAIA8vH,GAAAroI,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAKA,OAHA8C,EAAA4X,GAAA1a,KAAA0a,GAAAK,UACAjY,EAAA6X,GAAA3a,KAAA2a,GAAAI,UAEAjY,GAIAgtH,GAAAroI,UAAA+mI,SAAA,SAAAjN,GAOA,OALAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAA0a,GAAAG,UAAA0mG,EAAA7mG,IACA1a,KAAA2a,GAAAE,UAAA0mG,EAAA5mG,IAEA3a,OAeA+vH,GAAAtoI,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,YACA4wB,YAAA03G,GAEAA,GAAAtoI,UAAA+oI,cAAA,EAEAT,GAAAtoI,UAAAwlI,SAAA,SAAA3mI,EAAA4mI,GAEA,IAAA5wF,EAAA4wF,GAAA,IAAA7jG,GAaA,OAXA,IAAA/iC,EAEAg2C,EAAAlwC,KAAA4T,KAAA2a,KAIA2hB,EAAAlwC,KAAA4T,KAAA2a,IAAA/B,IAAA5Y,KAAA0a,IACA4hB,EAAAtjB,eAAA1yB,GAAAiyB,IAAAvY,KAAA0a,KAIA4hB,GAMAyzF,GAAAtoI,UAAAwjH,WAAA,SAAArkH,EAAAsmI,GAEA,OAAAltH,KAAAitH,SAAArmI,EAAAsmI,IAIA6C,GAAAtoI,UAAA2E,KAAA,SAAAvD,GAOA,OALA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA0a,GAAAtuB,KAAAvD,EAAA6xB,IACA1a,KAAA2a,GAAAvuB,KAAAvD,EAAA8xB,IAEA3a,MAIA+vH,GAAAtoI,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAKA,OAHA8C,EAAA4X,GAAA1a,KAAA0a,GAAAK,UACAjY,EAAA6X,GAAA3a,KAAA2a,GAAAI,UAEAjY,GAIAitH,GAAAtoI,UAAA+mI,SAAA,SAAAjN,GAOA,OALAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAA0a,GAAAG,UAAA0mG,EAAA7mG,IACA1a,KAAA2a,GAAAE,UAAA0mG,EAAA5mG,IAEA3a,OAgBAgwH,GAAAvoI,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,YACA4wB,YAAA23G,GAEAA,GAAAvoI,UAAAgpI,wBAAA,EAEAT,GAAAvoI,UAAAwlI,SAAA,SAAA3mI,EAAA4mI,GAEA,IAAA5wF,EAAA4wF,GAAA,IAAAz1G,GAEAgjB,EAAAz6B,KAAAy6B,GAAA/f,EAAA1a,KAAA0a,GAAAC,EAAA3a,KAAA2a,GAOA,OALA2hB,EAAA9kB,IACA03G,GAAA5oI,EAAAm0C,EAAAtuC,EAAAuuB,EAAAvuB,EAAAwuB,EAAAxuB,GACA+iI,GAAA5oI,EAAAm0C,EAAAhtC,EAAAitB,EAAAjtB,EAAAktB,EAAAltB,IAGA6uC,GAIA0zF,GAAAvoI,UAAA2E,KAAA,SAAAvD,GAQA,OANA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAy6B,GAAAruC,KAAAvD,EAAA4xC,IACAz6B,KAAA0a,GAAAtuB,KAAAvD,EAAA6xB,IACA1a,KAAA2a,GAAAvuB,KAAAvD,EAAA8xB,IAEA3a,MAIAgwH,GAAAvoI,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAMA,OAJA8C,EAAA23B,GAAAz6B,KAAAy6B,GAAA1f,UACAjY,EAAA4X,GAAA1a,KAAA0a,GAAAK,UACAjY,EAAA6X,GAAA3a,KAAA2a,GAAAI,UAEAjY,GAIAktH,GAAAvoI,UAAA+mI,SAAA,SAAAjN,GAQA,OANAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAAy6B,GAAA5f,UAAA0mG,EAAA9mF,IACAz6B,KAAA0a,GAAAG,UAAA0mG,EAAA7mG,IACA1a,KAAA2a,GAAAE,UAAA0mG,EAAA5mG,IAEA3a,OAgBAiwH,GAAAxoI,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,YACA4wB,YAAA43G,GAEAA,GAAAxoI,UAAAipI,yBAAA,EAEAT,GAAAxoI,UAAAwlI,SAAA,SAAA3mI,EAAA4mI,GAEA,IAAA5wF,EAAA4wF,GAAA,IAAA7jG,GAEAoR,EAAAz6B,KAAAy6B,GAAA/f,EAAA1a,KAAA0a,GAAAC,EAAA3a,KAAA2a,GAQA,OANA2hB,EAAA9kB,IACA03G,GAAA5oI,EAAAm0C,EAAAtuC,EAAAuuB,EAAAvuB,EAAAwuB,EAAAxuB,GACA+iI,GAAA5oI,EAAAm0C,EAAAhtC,EAAAitB,EAAAjtB,EAAAktB,EAAAltB,GACAyhI,GAAA5oI,EAAAm0C,EAAAhZ,EAAA/G,EAAA+G,EAAA9G,EAAA8G,IAGA6a,GAIA2zF,GAAAxoI,UAAA2E,KAAA,SAAAvD,GAQA,OANA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAy6B,GAAAruC,KAAAvD,EAAA4xC,IACAz6B,KAAA0a,GAAAtuB,KAAAvD,EAAA6xB,IACA1a,KAAA2a,GAAAvuB,KAAAvD,EAAA8xB,IAEA3a,MAIAiwH,GAAAxoI,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAMA,OAJA8C,EAAA23B,GAAAz6B,KAAAy6B,GAAA1f,UACAjY,EAAA4X,GAAA1a,KAAA0a,GAAAK,UACAjY,EAAA6X,GAAA3a,KAAA2a,GAAAI,UAEAjY,GAIAmtH,GAAAxoI,UAAA+mI,SAAA,SAAAjN,GAQA,OANAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAAy6B,GAAA5f,UAAA0mG,EAAA9mF,IACAz6B,KAAA0a,GAAAG,UAAA0mG,EAAA7mG,IACA1a,KAAA2a,GAAAE,UAAA0mG,EAAA5mG,IAEA3a,OAcAkwH,GAAAzoI,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,YACA4wB,YAAA63G,GAEAA,GAAAzoI,UAAAkpI,eAAA,EAEAT,GAAAzoI,UAAAwlI,SAAA,SAAA3mI,EAAA4mI,GAEA,IAAA5wF,EAAA4wF,GAAA,IAAAz1G,GAEAgkB,EAAAz7B,KAAAy7B,OACAz0C,GAAAy0C,EAAAt0C,OAAA,GAAAb,EAEA8pI,EAAA3hI,KAAAC,MAAA1H,GACAs8G,EAAAt8G,EAAAopI,EAEAx1F,EAAAa,EAAA,IAAA20F,EAAAA,EAAAA,EAAA,GACAv1F,EAAAY,EAAA20F,GACAt1F,EAAAW,EAAA20F,EAAA30F,EAAAt0C,OAAA,EAAAs0C,EAAAt0C,OAAA,EAAAipI,EAAA,GACApsF,EAAAvI,EAAA20F,EAAA30F,EAAAt0C,OAAA,EAAAs0C,EAAAt0C,OAAA,EAAAipI,EAAA,GAOA,OALA9zF,EAAA9kB,IACAy3G,GAAA3rB,EAAA1oE,EAAAzuC,EAAA0uC,EAAA1uC,EAAA2uC,EAAA3uC,EAAA63C,EAAA73C,GACA8iI,GAAA3rB,EAAA1oE,EAAAntC,EAAAotC,EAAAptC,EAAAqtC,EAAArtC,EAAAu2C,EAAAv2C,IAGA6uC,GAIA4zF,GAAAzoI,UAAA2E,KAAA,SAAAvD,GAEA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAy7B,OAAA,GAEA,IAAA,IAAAj1C,EAAA,EAAAyJ,EAAApH,EAAA4yC,OAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAIAwZ,KAAAy7B,OAAA9wC,KAFA9B,EAAA4yC,OAAAj1C,GAEA4xB,SAIA,OAAApY,MAIAkwH,GAAAzoI,UAAAo7B,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAEA8C,EAAA24B,OAAA,GAEA,IAAA,IAAAj1C,EAAA,EAAAyJ,EAAA+P,KAAAy7B,OAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAGAsc,EAAA24B,OAAA9wC,KADAqV,KAAAy7B,OAAAj1C,GACAu0B,WAIA,OAAAjY,GAIAotH,GAAAzoI,UAAA+mI,SAAA,SAAAjN,GAEAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAAy7B,OAAA,GAEA,IAAA,IAAAj1C,EAAA,EAAAyJ,EAAAsxH,EAAA9lF,OAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAA81C,EAAAilF,EAAA9lF,OAAAj1C,GACAwZ,KAAAy7B,OAAA9wC,MAAA,IAAA8sB,IAAAoD,UAAAyhB,IAIA,OAAAt8B,MAIA,IAAA4wH,GAAArpI,OAAAm1H,OAAA,CACA5yD,UAAA,KACAsgE,SAAAA,GACA2E,iBAAAA,GACAY,iBAAAA,GACAE,kBAAAA,GACAlG,aAAAA,GACAmG,UAAAA,GACAC,WAAAA,GACAC,qBAAAA,GACAC,sBAAAA,GACAC,YAAAA,KAaA,SAAAW,KAEApH,GAAAviI,KAAA8Y,MAEAA,KAAAnM,KAAA,YAEAmM,KAAA8wH,OAAA,GACA9wH,KAAA+wH,WAAA,EAsPA,SAAAC,GAAAv1F,GAEAo1F,GAAA3pI,KAAA8Y,MAEAA,KAAAnM,KAAA,OAEAmM,KAAAixH,aAAA,IAAAx5G,GAEAgkB,GAEAz7B,KAAAw7B,cAAAC,GA6LA,SAAAy1F,GAAAz1F,GAEAu1F,GAAA9pI,KAAA8Y,KAAAy7B,GAEAz7B,KAAA2gB,KAAApM,GAAAI,eAEA3U,KAAAnM,KAAA,QAEAmM,KAAAixG,MAAA,GAgGA,SAAAkgB,GAAApiF,EAAA0uC,GAEAzpD,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,QAEAmM,KAAA+uC,MAAA,IAAAN,GAAAM,GACA/uC,KAAAy9E,eAAA3wF,IAAA2wF,EAAAA,EAAA,EAEAz9E,KAAA20B,mBAAA7nC,EA+CA,SAAAskI,GAAAl9D,EAAAC,EAAAspB,GAEA0zC,GAAAjqI,KAAA8Y,KAAAk0D,EAAAupB,GAEAz9E,KAAAnM,KAAA,kBAEAmM,KAAA00B,gBAAA5nC,EAEAkT,KAAA2wB,SAAAvkC,KAAA4nC,GAAAE,WACAl0B,KAAA4iB,eAEA5iB,KAAAm0D,YAAA,IAAA1lB,GAAA0lB,GA0BA,SAAAk9D,GAAA/mG,GAEAtqB,KAAAsqB,OAAAA,EAEAtqB,KAAAg+E,KAAA,EACAh+E,KAAAi+E,WAAA,EACAj+E,KAAA6rB,OAAA,EAEA7rB,KAAAk+E,QAAA,IAAAzmE,GAAA,IAAA,KAEAzX,KAAA7X,IAAA,KACA6X,KAAAohF,QAAA,KACAphF,KAAAke,OAAA,IAAAsO,GAEAxsB,KAAAo1B,YAAA,EACAp1B,KAAAq9C,aAAA,EAEAr9C,KAAAigF,SAAA,IAAAvwB,GACA1vD,KAAAsxH,cAAA,IAAA75G,GAAA,EAAA,GAEAzX,KAAAuxH,eAAA,EAEAvxH,KAAAwxH,WAAA,CAEA,IAAAhwG,GAAA,EAAA,EAAA,EAAA,IA6GA,SAAAiwG,KAEAJ,GAAAnqI,KAAA8Y,KAAA,IAAAwsD,GAAA,GAAA,EAAA,GAAA,MAqCA,SAAAklE,GAAA3iF,EAAA0uC,EAAApnD,EAAArc,EAAAqkE,EAAA9qB,GAEA49D,GAAAjqI,KAAA8Y,KAAA+uC,EAAA0uC,GAEAz9E,KAAAnM,KAAA,YAEAmM,KAAA2wB,SAAAvkC,KAAA4nC,GAAAE,WACAl0B,KAAA4iB,eAEA5iB,KAAApX,OAAA,IAAAorC,GAEAzsC,OAAA6iB,eAAApK,KAAA,QAAA,CACAD,IAAA,WAIA,OAAAC,KAAAy9E,UAAAhvF,KAAAgmB,IAGA+C,IAAA,SAAAm6G,GAIA3xH,KAAAy9E,UAAAk0C,EAAAljI,KAAAgmB,MAKAzU,KAAAq2B,cAAAvpC,IAAAupC,EAAAA,EAAA,EACAr2B,KAAAga,WAAAltB,IAAAktB,EAAAA,EAAAvrB,KAAAgmB,GAAA,EACAzU,KAAAq+E,cAAAvxF,IAAAuxF,EAAAA,EAAA,EACAr+E,KAAAuzD,WAAAzmE,IAAAymE,EAAAA,EAAA,EAEAvzD,KAAAi/D,OAAA,IAAAwyD,GA6BA,SAAAG,KAEAP,GAAAnqI,KAAA8Y,KAAA,IAAAwsD,GAAA,GAAA,EAAA,GAAA,MAEAxsD,KAAAsxH,cAAA,IAAA75G,GAAA,EAAA,GAEAzX,KAAAuxH,eAAA,EAEAvxH,KAAAwxH,WAAA,CAeA,IAAAhwG,GAAA,EAAA,EAAA,EAAA,GAEA,IAAAA,GAAA,EAAA,EAAA,EAAA,GAEA,IAAAA,GAAA,EAAA,EAAA,EAAA,GAEA,IAAAA,GAAA,EAAA,EAAA,EAAA,GAEA,IAAAA,GAAA,EAAA,EAAA,EAAA,GAEA,IAAAA,GAAA,EAAA,EAAA,EAAA,IAGAxhB,KAAA6xH,gBAAA,CACA,IAAAxoG,GAAA,EAAA,EAAA,GAAA,IAAAA,IAAA,EAAA,EAAA,GAAA,IAAAA,GAAA,EAAA,EAAA,GACA,IAAAA,GAAA,EAAA,GAAA,GAAA,IAAAA,GAAA,EAAA,EAAA,GAAA,IAAAA,GAAA,GAAA,EAAA,IAGArpB,KAAA8xH,SAAA,CACA,IAAAzoG,GAAA,EAAA,EAAA,GAAA,IAAAA,GAAA,EAAA,EAAA,GAAA,IAAAA,GAAA,EAAA,EAAA,GACA,IAAAA,GAAA,EAAA,EAAA,GAAA,IAAAA,GAAA,EAAA,EAAA,GAAA,IAAAA,GAAA,EAAA,GAAA,IA4CA,SAAA0oG,GAAAhjF,EAAA0uC,EAAApnD,EAAAk9B,GAEA49D,GAAAjqI,KAAA8Y,KAAA+uC,EAAA0uC,GAEAz9E,KAAAnM,KAAA,aAEAtM,OAAA6iB,eAAApK,KAAA,QAAA,CACAD,IAAA,WAIA,OAAA,EAAAC,KAAAy9E,UAAAhvF,KAAAgmB,IAGA+C,IAAA,SAAAm6G,GAIA3xH,KAAAy9E,UAAAk0C,GAAA,EAAAljI,KAAAgmB,OAKAzU,KAAAq2B,cAAAvpC,IAAAupC,EAAAA,EAAA,EACAr2B,KAAAuzD,WAAAzmE,IAAAymE,EAAAA,EAAA,EAEAvzD,KAAAi/D,OAAA,IAAA2yD,GA8BA,SAAAI,GAAAzgG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA26B,GAAArlE,KAAA8Y,MAEAA,KAAAnM,KAAA,qBAEAmM,KAAA0sD,KAAA,EACA1sD,KAAA4sD,KAAA,KAEA5sD,KAAAuxB,UAAAzkC,IAAAykC,EAAAA,GAAA,EACAvxB,KAAAwxB,WAAA1kC,IAAA0kC,EAAAA,EAAA,EACAxxB,KAAAyxB,SAAA3kC,IAAA2kC,EAAAA,EAAA,EACAzxB,KAAA0xB,YAAA5kC,IAAA4kC,EAAAA,GAAA,EAEA1xB,KAAA2xB,UAAA7kC,IAAA6kC,EAAAA,EAAA,GACA3xB,KAAA4xB,SAAA9kC,IAAA8kC,EAAAA,EAAA,IAEA5xB,KAAA+sD,yBA0HA,SAAAklE,KAEAZ,GAAAnqI,KAAA8Y,KAAA,IAAAgyH,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,MAuBA,SAAAE,GAAAnjF,EAAA0uC,GAEA0zC,GAAAjqI,KAAA8Y,KAAA+uC,EAAA0uC,GAEAz9E,KAAAnM,KAAA,mBAEAmM,KAAA2wB,SAAAvkC,KAAA4nC,GAAAE,WACAl0B,KAAA4iB,eAEA5iB,KAAApX,OAAA,IAAAorC,GAEAh0B,KAAAi/D,OAAA,IAAAgzD,GA4BA,SAAAE,GAAApjF,EAAA0uC,GAEA0zC,GAAAjqI,KAAA8Y,KAAA+uC,EAAA0uC,GAEAz9E,KAAAnM,KAAA,eAEAmM,KAAA00B,gBAAA5nC,EAgBA,SAAAslI,GAAArjF,EAAA0uC,EAAA5jF,EAAAC,GAEAq3H,GAAAjqI,KAAA8Y,KAAA+uC,EAAA0uC,GAEAz9E,KAAAnM,KAAA,gBAEAmM,KAAAnG,WAAA/M,IAAA+M,EAAAA,EAAA,GACAmG,KAAAlG,YAAAhN,IAAAgN,EAAAA,EAAA,GA+CA,SAAAu4H,KAEAryH,KAAA69E,aAAA,GAEA,IAAA,IAAAr3F,EAAA,EAAAA,EAAA,EAAAA,IAEAwZ,KAAA69E,aAAAlzF,KAAA,IAAA0+B,IA+OA,SAAAipG,GAAA10C,EAAAH,GAEA0zC,GAAAjqI,KAAA8Y,UAAAlT,EAAA2wF,GAEAz9E,KAAAnM,KAAA,aAEAmM,KAAA49E,QAAA9wF,IAAA8wF,EAAAA,EAAA,IAAAy0C,GA6CA,SAAAE,GAAA3oH,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GAEA5J,KAAAgjB,SAAA,GA1jDA6tG,GAAAppI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA+mG,GAAAhiI,WAAA,CAEA4wB,YAAAw4G,GAEAt4G,IAAA,SAAAi6G,GAEAxyH,KAAA8wH,OAAAnmI,KAAA6nI,IAIAC,UAAA,WAGA,IAAAC,EAAA1yH,KAAA8wH,OAAA,GAAA7D,SAAA,GACA0F,EAAA3yH,KAAA8wH,OAAA9wH,KAAA8wH,OAAA3pI,OAAA,GAAA8lI,SAAA,GAEAyF,EAAA93G,OAAA+3G,IAEA3yH,KAAA8wH,OAAAnmI,KAAA,IAAAmlI,GAAA6C,EAAAD,KAeAzF,SAAA,SAAA3mI,GAQA,IANA,IAAAgH,EAAAhH,EAAA0Z,KAAAstH,YACAsF,EAAA5yH,KAAA6yH,kBACArsI,EAAA,EAIAA,EAAAosI,EAAAzrI,QAAA,CAEA,GAAAyrI,EAAApsI,IAAA8G,EAAA,CAEA,IAAA+5D,EAAAurE,EAAApsI,GAAA8G,EACAklI,EAAAxyH,KAAA8wH,OAAAtqI,GAEAssI,EAAAN,EAAAlF,YAGA,OAAAkF,EAAAvnB,WAFA,IAAA6nB,EAAA,EAAA,EAAAzrE,EAAAyrE,GAMAtsI,IAIA,OAAA,MAUA8mI,UAAA,WAEA,IAAAyF,EAAA/yH,KAAA6yH,kBACA,OAAAE,EAAAA,EAAA5rI,OAAA,IAKAwmI,iBAAA,WAEA3tH,KAAAq9C,aAAA,EACAr9C,KAAAgzH,aAAA,KACAhzH,KAAA6yH,mBAOAA,gBAAA,WAIA,GAAA7yH,KAAAgzH,cAAAhzH,KAAAgzH,aAAA7rI,SAAA6Y,KAAA8wH,OAAA3pI,OAEA,OAAA6Y,KAAAgzH,aAUA,IAHA,IAAAzF,EAAA,GACA0F,EAAA,EAEAzsI,EAAA,EAAAyJ,EAAA+P,KAAA8wH,OAAA3pI,OAAAX,EAAAyJ,EAAAzJ,IAEAysI,GAAAjzH,KAAA8wH,OAAAtqI,GAAA8mI,YACAC,EAAA5iI,KAAAsoI,GAMA,OAFAjzH,KAAAgzH,aAAAzF,EAEAA,GAIA3a,gBAAA,SAAAya,QAEAvgI,IAAAugI,IAAAA,EAAA,IAIA,IAFA,IAAA5xF,EAAA,GAEAj1C,EAAA,EAAAA,GAAA6mI,EAAA7mI,IAEAi1C,EAAA9wC,KAAAqV,KAAAitH,SAAAzmI,EAAA6mI,IAUA,OANArtH,KAAA+wH,WAEAt1F,EAAA9wC,KAAA8wC,EAAA,IAIAA,GAIA2xF,UAAA,SAAAC,GAEAA,EAAAA,GAAA,GAKA,IAHA,IACA7f,EADA/xE,EAAA,GAGAj1C,EAAA,EAAAsqI,EAAA9wH,KAAA8wH,OAAAtqI,EAAAsqI,EAAA3pI,OAAAX,IAUA,IARA,IAAAgsI,EAAA1B,EAAAtqI,GAMAuqH,EAAAyhB,EAAApF,UALAoF,GAAAA,EAAA/D,eAAA,EAAApB,EACAmF,IAAAA,EAAAjC,aAAAiC,EAAAhC,cAAA,EACAgC,GAAAA,EAAA7B,cAAAtD,EAAAmF,EAAA/2F,OAAAt0C,OACAkmI,GAIA1yF,EAAA,EAAAA,EAAAo2E,EAAA5pH,OAAAwzC,IAAA,CAEA,IAAA2B,EAAAy0E,EAAAp2E,GAEA6yE,GAAAA,EAAA5yF,OAAA0hB,KAEAb,EAAA9wC,KAAA2xC,GACAkxE,EAAAlxE,GAYA,OANAt8B,KAAA+wH,WAAAt1F,EAAAt0C,OAAA,IAAAs0C,EAAAA,EAAAt0C,OAAA,GAAAyzB,OAAA6gB,EAAA,KAEAA,EAAA9wC,KAAA8wC,EAAA,IAIAA,GAIArvC,KAAA,SAAAvD,GAEA4gI,GAAAhiI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA8wH,OAAA,GAEA,IAAA,IAAAtqI,EAAA,EAAAyJ,EAAApH,EAAAioI,OAAA3pI,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAIAwZ,KAAA8wH,OAAAnmI,KAFA9B,EAAAioI,OAAAtqI,GAEA4xB,SAMA,OAFApY,KAAA+wH,UAAAloI,EAAAkoI,UAEA/wH,MAIA6iB,OAAA,WAEA,IAAA/f,EAAA2mH,GAAAhiI,UAAAo7B,OAAA37B,KAAA8Y,MAEA8C,EAAAiuH,UAAA/wH,KAAA+wH,UACAjuH,EAAAguH,OAAA,GAEA,IAAA,IAAAtqI,EAAA,EAAAyJ,EAAA+P,KAAA8wH,OAAA3pI,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAGAsc,EAAAguH,OAAAnmI,KADAqV,KAAA8wH,OAAAtqI,GACAq8B,UAIA,OAAA/f,GAIA0rH,SAAA,SAAAjN,GAEAkI,GAAAhiI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAA+wH,UAAAxP,EAAAwP,UACA/wH,KAAA8wH,OAAA,GAEA,IAAA,IAAAtqI,EAAA,EAAAyJ,EAAAsxH,EAAAuP,OAAA3pI,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAgsI,EAAAjR,EAAAuP,OAAAtqI,GACAwZ,KAAA8wH,OAAAnmI,MAAA,IAAAimI,GAAA4B,EAAA3+H,OAAA26H,SAAAgE,IAIA,OAAAxyH,QA2BAgxH,GAAAvpI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAmuG,GAAAppI,WAAA,CAEA4wB,YAAA24G,GAEAx1F,cAAA,SAAAC,GAEAz7B,KAAAkzH,OAAAz3F,EAAA,GAAAtvC,EAAAsvC,EAAA,GAAAhuC,GAEA,IAAA,IAAAjH,EAAA,EAAAyJ,EAAAwrC,EAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAEAwZ,KAAAmzH,OAAA13F,EAAAj1C,GAAA2F,EAAAsvC,EAAAj1C,GAAAiH,GAIA,OAAAuS,MAIAkzH,OAAA,SAAA/mI,EAAAsB,GAIA,OAFAuS,KAAAixH,aAAAz5G,IAAArrB,EAAAsB,GAEAuS,MAIAmzH,OAAA,SAAAhnI,EAAAsB,GAEA,IAAA+kI,EAAA,IAAA1C,GAAA9vH,KAAAixH,aAAA74G,QAAA,IAAAX,GAAAtrB,EAAAsB,IAKA,OAJAuS,KAAA8wH,OAAAnmI,KAAA6nI,GAEAxyH,KAAAixH,aAAAz5G,IAAArrB,EAAAsB,GAEAuS,MAIAozH,iBAAA,SAAAC,EAAAC,EAAA1J,EAAAC,GAEA,IAAA2I,EAAA,IAAAxC,GACAhwH,KAAAixH,aAAA74G,QACA,IAAAX,GAAA47G,EAAAC,GACA,IAAA77G,GAAAmyG,EAAAC,IAOA,OAJA7pH,KAAA8wH,OAAAnmI,KAAA6nI,GAEAxyH,KAAAixH,aAAAz5G,IAAAoyG,EAAAC,GAEA7pH,MAIAuzH,cAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA/J,EAAAC,GAEA,IAAA2I,EAAA,IAAA7C,GACA3vH,KAAAixH,aAAA74G,QACA,IAAAX,GAAA+7G,EAAAC,GACA,IAAAh8G,GAAAi8G,EAAAC,GACA,IAAAl8G,GAAAmyG,EAAAC,IAOA,OAJA7pH,KAAA8wH,OAAAnmI,KAAA6nI,GAEAxyH,KAAAixH,aAAAz5G,IAAAoyG,EAAAC,GAEA7pH,MAIA4zH,WAAA,SAAA7iB,GAEA,IAEAyhB,EAAA,IAAAtC,GAFA,CAAAlwH,KAAAixH,aAAA74G,SAAAxV,OAAAmuG,IAOA,OAJA/wG,KAAA8wH,OAAAnmI,KAAA6nI,GAEAxyH,KAAAixH,aAAA7kI,KAAA2kH,EAAAA,EAAA5pH,OAAA,IAEA6Y,MAIAisG,IAAA,SAAA2d,EAAAC,EAAAQ,EAAAL,EAAAC,EAAAC,GAQA,OAHAlqH,KAAA6zH,OAAAjK,EAHA5pH,KAAAixH,aAAA9kI,EAGA09H,EAFA7pH,KAAAixH,aAAAxjI,EAEA48H,EACAL,EAAAC,EAAAC,GAEAlqH,MAIA6zH,OAAA,SAAAjK,EAAAC,EAAAQ,EAAAL,EAAAC,EAAAC,GAIA,OAFAlqH,KAAA8zH,WAAAlK,EAAAC,EAAAQ,EAAAA,EAAAL,EAAAC,EAAAC,GAEAlqH,MAIA+zH,QAAA,SAAAnK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAOA,OAFAnqH,KAAA8zH,WAAAlK,EAHA5pH,KAAAixH,aAAA9kI,EAGA09H,EAFA7pH,KAAAixH,aAAAxjI,EAEAq8H,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAnqH,MAIA8zH,WAAA,SAAAlK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAqI,EAAA,IAAA7I,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAnqH,KAAA8wH,OAAA3pI,OAAA,EAAA,CAGA,IAAA6sI,EAAAxB,EAAAvF,SAAA,GAEA+G,EAAAp5G,OAAA5a,KAAAixH,eAEAjxH,KAAAmzH,OAAAa,EAAA7nI,EAAA6nI,EAAAvmI,GAMAuS,KAAA8wH,OAAAnmI,KAAA6nI,GAEA,IAAAyB,EAAAzB,EAAAvF,SAAA,GAGA,OAFAjtH,KAAAixH,aAAA7kI,KAAA6nI,GAEAj0H,MAIA5T,KAAA,SAAAvD,GAMA,OAJAgoI,GAAAppI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAixH,aAAA7kI,KAAAvD,EAAAooI,cAEAjxH,MAIA6iB,OAAA,WAEA,IAAA/f,EAAA+tH,GAAAppI,UAAAo7B,OAAA37B,KAAA8Y,MAIA,OAFA8C,EAAAmuH,aAAAjxH,KAAAixH,aAAAl2G,UAEAjY,GAIA0rH,SAAA,SAAAjN,GAMA,OAJAsP,GAAAppI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAAixH,aAAAp2G,UAAA0mG,EAAA0P,cAEAjxH,QA6BAkxH,GAAAzpI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsuG,GAAAvpI,WAAA,CAEA4wB,YAAA64G,GAEAgD,eAAA,SAAA7G,GAIA,IAFA,IAAA8G,EAAA,GAEA3tI,EAAA,EAAAyJ,EAAA+P,KAAAixG,MAAA9pH,OAAAX,EAAAyJ,EAAAzJ,IAEA2tI,EAAA3tI,GAAAwZ,KAAAixG,MAAAzqH,GAAA4mI,UAAAC,GAIA,OAAA8G,GAMArhB,cAAA,SAAAua,GAEA,MAAA,CAEA5b,MAAAzxG,KAAAotH,UAAAC,GACApc,MAAAjxG,KAAAk0H,eAAA7G,KAMAjhI,KAAA,SAAAvD,GAEAmoI,GAAAvpI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAixG,MAAA,GAEA,IAAA,IAAAzqH,EAAA,EAAAyJ,EAAApH,EAAAooH,MAAA9pH,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAIAwZ,KAAAixG,MAAAtmH,KAFA9B,EAAAooH,MAAAzqH,GAEA4xB,SAIA,OAAApY,MAIA6iB,OAAA,WAEA,IAAA/f,EAAAkuH,GAAAvpI,UAAAo7B,OAAA37B,KAAA8Y,MAEA8C,EAAA6d,KAAA3gB,KAAA2gB,KACA7d,EAAAmuG,MAAA,GAEA,IAAA,IAAAzqH,EAAA,EAAAyJ,EAAA+P,KAAAixG,MAAA9pH,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAGAsc,EAAAmuG,MAAAtmH,KADAqV,KAAAixG,MAAAzqH,GACAq8B,UAIA,OAAA/f,GAIA0rH,SAAA,SAAAjN,GAEAyP,GAAAvpI,UAAA+mI,SAAAtnI,KAAA8Y,KAAAuhH,GAEAvhH,KAAA2gB,KAAA4gG,EAAA5gG,KACA3gB,KAAAixG,MAAA,GAEA,IAAA,IAAAzqH,EAAA,EAAAyJ,EAAAsxH,EAAAtQ,MAAA9pH,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAA6oH,EAAAkS,EAAAtQ,MAAAzqH,GACAwZ,KAAAixG,MAAAtmH,MAAA,IAAAqmI,IAAAxC,SAAAnf,IAIA,OAAArvG,QAwBAmxH,GAAA1pI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAA84G,GAEAr6F,SAAA,EAEA1qC,KAAA,SAAAvD,GAOA,OALAmrC,GAAAvsC,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA+uC,MAAA3iD,KAAAvD,EAAAkmD,OACA/uC,KAAAy9E,UAAA50F,EAAA40F,UAEAz9E,MAIA6iB,OAAA,SAAAC,GAEA,IAAAhgB,EAAAkxB,GAAAvsC,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,GAcA,OAZAhgB,EAAA/X,OAAAgkD,MAAA/uC,KAAA+uC,MAAA0B,SACA3tC,EAAA/X,OAAA0yF,UAAAz9E,KAAAy9E,eAEA3wF,IAAAkT,KAAAm0D,cAAArxD,EAAA/X,OAAAopE,YAAAn0D,KAAAm0D,YAAA1jB,eAEA3jD,IAAAkT,KAAAq2B,WAAAvzB,EAAA/X,OAAAsrC,SAAAr2B,KAAAq2B,eACAvpC,IAAAkT,KAAAga,QAAAlX,EAAA/X,OAAAivB,MAAAha,KAAAga,YACAltB,IAAAkT,KAAAuzD,QAAAzwD,EAAA/X,OAAAwoE,MAAAvzD,KAAAuzD,YACAzmE,IAAAkT,KAAAq+E,WAAAv7E,EAAA/X,OAAAszF,SAAAr+E,KAAAq+E,eAEAvxF,IAAAkT,KAAAi/D,SAAAn8D,EAAA/X,OAAAk0E,OAAAj/D,KAAAi/D,OAAAp8C,UAEA/f,KAyBAsuH,GAAA3pI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAyuG,GAAA1pI,WAAA,CAEA4wB,YAAA+4G,GAEAtyC,mBAAA,EAEA1yF,KAAA,SAAAvD,GAMA,OAJAsoI,GAAA1pI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAm0D,YAAA/nE,KAAAvD,EAAAsrE,aAEAn0D,QAwCAzY,OAAAM,OAAAwpI,GAAA5pI,UAAA,CAEAkxG,kBAAA,IAAAnsE,GAEA4nG,oBAAA,IAAA/qG,GAEAgrG,YAAA,IAAAhrG,GAEAg6D,iBAAA,WAEA,OAAArjF,KAAAuxH,gBAIA9tC,WAAA,WAEA,OAAAzjF,KAAAigF,UAIAuD,eAAA,SAAAvH,GAEA,IAAAoG,EAAAriF,KAAAsqB,OACAgqG,EAAAt0H,KAAAke,OACAq2G,EAAAv0H,KAAA24F,kBACA67B,EAAAx0H,KAAAq0H,YACAI,EAAAz0H,KAAAo0H,oBAEAK,EAAAvoG,sBAAA+vD,EAAAtxD,aACA03D,EAAA1xD,SAAAvkC,KAAAqoI,GAEAD,EAAAtoG,sBAAA+vD,EAAArzF,OAAA+hC,aACA03D,EAAArzD,OAAAwlG,GACAnyC,EAAAjrD,oBAEAm9F,EAAA93G,iBAAA4lE,EAAA73D,iBAAA63D,EAAA93D,oBACAvqB,KAAAigF,SAAAnwB,wBAAAykE,GAEAD,EAAA98G,IACA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,EAAA,GAGA88G,EAAAv7G,SAAAspE,EAAA73D,kBACA8pG,EAAAv7G,SAAAspE,EAAA93D,qBAIAg5D,YAAA,SAAAmxC,GAEA,OAAA10H,KAAAwxH,WAAAkD,IAIAzxC,gBAAA,WAEA,OAAAjjF,KAAAsxH,eAIAllI,KAAA,SAAAvD,GASA,OAPAmX,KAAAsqB,OAAAzhC,EAAAyhC,OAAAlS,QAEApY,KAAAg+E,KAAAn1F,EAAAm1F,KACAh+E,KAAA6rB,OAAAhjC,EAAAgjC,OAEA7rB,KAAAk+E,QAAA9xF,KAAAvD,EAAAq1F,SAEAl+E,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA6iB,OAAA,WAEA,IAAA93B,EAAA,GAUA,OARA,IAAAiV,KAAAg+E,OAAAjzF,EAAAizF,KAAAh+E,KAAAg+E,MACA,IAAAh+E,KAAAi+E,aAAAlzF,EAAAkzF,WAAAj+E,KAAAi+E,YACA,IAAAj+E,KAAA6rB,SAAA9gC,EAAA8gC,OAAA7rB,KAAA6rB,QACA,MAAA7rB,KAAAk+E,QAAA/xF,GAAA,MAAA6T,KAAAk+E,QAAAzwF,IAAA1C,EAAAmzF,QAAAl+E,KAAAk+E,QAAAnjE,WAEAhwB,EAAAu/B,OAAAtqB,KAAAsqB,OAAAzH,QAAA,GAAA93B,cACAA,EAAAu/B,OAAApM,OAEAnzB,KAgBA0mI,GAAAhqI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA2uG,GAAA5pI,WAAA,CAEA4wB,YAAAo5G,GAEAkD,mBAAA,EAEAnxC,eAAA,SAAAvH,GAEA,IAAA3xD,EAAAtqB,KAAAsqB,OAEAmiC,EAAA,EAAAl4C,GAAAG,QAAAunE,EAAAjiE,MACA/d,EAAA+D,KAAAk+E,QAAArkF,MAAAmG,KAAAk+E,QAAApkF,OACA83B,EAAAqqD,EAAA5lD,UAAA/L,EAAAsH,IAEA66B,IAAAniC,EAAAmiC,KAAAxwD,IAAAquB,EAAAruB,QAAA21B,IAAAtH,EAAAsH,MAEAtH,EAAAmiC,IAAAA,EACAniC,EAAAruB,OAAAA,EACAquB,EAAAsH,IAAAA,EACAtH,EAAAyiC,0BAIAskE,GAAA5pI,UAAA+7F,eAAAt8F,KAAA8Y,KAAAi8E,MA+CAy1C,GAAAjqI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAyuG,GAAA1pI,WAAA,CAEA4wB,YAAAq5G,GAEAvzC,aAAA,EAEA/xF,KAAA,SAAAvD,GAaA,OAXAsoI,GAAA1pI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAq2B,SAAAxtC,EAAAwtC,SACAr2B,KAAAga,MAAAnxB,EAAAmxB,MACAha,KAAAq+E,SAAAx1F,EAAAw1F,SACAr+E,KAAAuzD,MAAA1qE,EAAA0qE,MAEAvzD,KAAApX,OAAAC,EAAAD,OAAAwvB,QAEApY,KAAAi/D,OAAAp2E,EAAAo2E,OAAA7mD,QAEApY,QAsDA4xH,GAAAnqI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA2uG,GAAA5pI,WAAA,CAEA4wB,YAAAu5G,GAEA1uC,oBAAA,EAEAM,eAAA,SAAAvH,EAAAy4C,QAEA5nI,IAAA4nI,IAAAA,EAAA,GAEA,IAAApqG,EAAAtqB,KAAAsqB,OACAgqG,EAAAt0H,KAAAke,OACAu2G,EAAAz0H,KAAAo0H,oBACAI,EAAAx0H,KAAAq0H,YACAE,EAAAv0H,KAAA24F,kBAEA87B,EAAAvoG,sBAAA+vD,EAAAtxD,aACAL,EAAAqG,SAAAvkC,KAAAqoI,GAEAD,EAAApoI,KAAAk+B,EAAAqG,UACA6jG,EAAAj8G,IAAAvY,KAAA6xH,gBAAA6C,IACApqG,EAAA4E,GAAA9iC,KAAA4T,KAAA8xH,SAAA4C,IACApqG,EAAA0E,OAAAwlG,GACAlqG,EAAA8M,oBAEAk9F,EAAAlkG,iBAAAqkG,EAAAtoI,GAAAsoI,EAAAhnI,GAAAgnI,EAAAhzG,GAEA8yG,EAAA93G,iBAAA6N,EAAAE,iBAAAF,EAAAC,oBACAvqB,KAAAigF,SAAAnwB,wBAAAykE,MAyCAxC,GAAAtqI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAyuG,GAAA1pI,WAAA,CAEA4wB,YAAA05G,GAEArzC,cAAA,EAEAtyF,KAAA,SAAAvD,GASA,OAPAsoI,GAAA1pI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAq2B,SAAAxtC,EAAAwtC,SACAr2B,KAAAuzD,MAAA1qE,EAAA0qE,MAEAvzD,KAAAi/D,OAAAp2E,EAAAo2E,OAAA7mD,QAEApY,QAgCAgyH,GAAAvqI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA6pC,GAAA9kE,WAAA,CAEA4wB,YAAA25G,GAEA9zB,sBAAA,EAEA9xG,KAAA,SAAAvD,EAAAywC,GAcA,OAZAizB,GAAA9kE,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,EAAAywC,GAEAt5B,KAAAuxB,KAAA1oC,EAAA0oC,KACAvxB,KAAAwxB,MAAA3oC,EAAA2oC,MACAxxB,KAAAyxB,IAAA5oC,EAAA4oC,IACAzxB,KAAA0xB,OAAA7oC,EAAA6oC,OACA1xB,KAAA2xB,KAAA9oC,EAAA8oC,KACA3xB,KAAA4xB,IAAA/oC,EAAA+oC,IAEA5xB,KAAA0sD,KAAA7jE,EAAA6jE,KACA1sD,KAAA4sD,KAAA,OAAA/jE,EAAA+jE,KAAA,KAAArlE,OAAAM,OAAA,GAAAgB,EAAA+jE,MAEA5sD,MAIA0tD,cAAA,SAAAC,EAAAC,EAAAzhE,EAAAsB,EAAAoM,EAAAC,GAEA,OAAAkG,KAAA4sD,OAEA5sD,KAAA4sD,KAAA,CACA1uD,SAAA,EACAyvD,UAAA,EACAC,WAAA,EACAC,QAAA,EACAC,QAAA,EACAj0D,MAAA,EACAC,OAAA,IAKAkG,KAAA4sD,KAAA1uD,SAAA,EACA8B,KAAA4sD,KAAAe,UAAAA,EACA3tD,KAAA4sD,KAAAgB,WAAAA,EACA5tD,KAAA4sD,KAAAiB,QAAA1hE,EACA6T,KAAA4sD,KAAAkB,QAAArgE,EACAuS,KAAA4sD,KAAA/yD,MAAAA,EACAmG,KAAA4sD,KAAA9yD,OAAAA,EAEAkG,KAAA+sD,0BAIAgB,gBAAA,WAEA,OAAA/tD,KAAA4sD,OAEA5sD,KAAA4sD,KAAA1uD,SAAA,GAIA8B,KAAA+sD,0BAIAA,uBAAA,WAEA,IAAA3yC,GAAApa,KAAAwxB,MAAAxxB,KAAAuxB,OAAA,EAAAvxB,KAAA0sD,MACAryC,GAAAra,KAAAyxB,IAAAzxB,KAAA0xB,SAAA,EAAA1xB,KAAA0sD,MACAttC,GAAApf,KAAAwxB,MAAAxxB,KAAAuxB,MAAA,EACAlS,GAAArf,KAAAyxB,IAAAzxB,KAAA0xB,QAAA,EAEAH,EAAAnS,EAAAhF,EACAoX,EAAApS,EAAAhF,EACAqX,EAAApS,EAAAhF,EACAqX,EAAArS,EAAAhF,EAEA,GAAA,OAAAra,KAAA4sD,MAAA5sD,KAAA4sD,KAAA1uD,QAAA,CAEA,IAAA02H,GAAA50H,KAAAwxB,MAAAxxB,KAAAuxB,MAAAvxB,KAAA4sD,KAAAe,UAAA3tD,KAAA0sD,KACAmoE,GAAA70H,KAAAyxB,IAAAzxB,KAAA0xB,QAAA1xB,KAAA4sD,KAAAgB,WAAA5tD,KAAA0sD,KAGAl7B,GADAD,GAAAqjG,EAAA50H,KAAA4sD,KAAAiB,SACA+mE,EAAA50H,KAAA4sD,KAAA/yD,MAEA63B,GADAD,GAAAojG,EAAA70H,KAAA4sD,KAAAkB,SACA+mE,EAAA70H,KAAA4sD,KAAA9yD,OAIAkG,KAAAwqB,iBAAAqH,iBAAAN,EAAAC,EAAAC,EAAAC,EAAA1xB,KAAA2xB,KAAA3xB,KAAA4xB,KAEA5xB,KAAA0qB,wBAAAzM,WAAAje,KAAAwqB,mBAIA3H,OAAA,SAAAC,GAEA,IAAAhgB,EAAAkxB,GAAAvsC,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,GAYA,OAVAhgB,EAAA/X,OAAA2hE,KAAA1sD,KAAA0sD,KACA5pD,EAAA/X,OAAAwmC,KAAAvxB,KAAAuxB,KACAzuB,EAAA/X,OAAAymC,MAAAxxB,KAAAwxB,MACA1uB,EAAA/X,OAAA0mC,IAAAzxB,KAAAyxB,IACA3uB,EAAA/X,OAAA2mC,OAAA1xB,KAAA0xB,OACA5uB,EAAA/X,OAAA4mC,KAAA3xB,KAAA2xB,KACA7uB,EAAA/X,OAAA6mC,IAAA5xB,KAAA4xB,IAEA,OAAA5xB,KAAA4sD,OAAA9pD,EAAA/X,OAAA6hE,KAAArlE,OAAAM,OAAA,GAAAmY,KAAA4sD,OAEA9pD,KAgBAmvH,GAAAxqI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA2uG,GAAA5pI,WAAA,CAEA4wB,YAAA45G,GAEA6C,0BAAA,EAEAtxC,eAAA,SAAAvH,GAEAo1C,GAAA5pI,UAAA+7F,eAAAt8F,KAAA8Y,KAAAi8E,MA0BAi2C,GAAAzqI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAyuG,GAAA1pI,WAAA,CAEA4wB,YAAA65G,GAEAp0C,oBAAA,EAEA1xF,KAAA,SAAAvD,GAQA,OANAsoI,GAAA1pI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAApX,OAAAC,EAAAD,OAAAwvB,QAEApY,KAAAi/D,OAAAp2E,EAAAo2E,OAAA7mD,QAEApY,QAoBAmyH,GAAA1qI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAyuG,GAAA1pI,WAAA,CAEA4wB,YAAA85G,GAEAz0C,gBAAA,IAmBA00C,GAAA3qI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAyuG,GAAA1pI,WAAA,CAEA4wB,YAAA+5G,GAEA5zC,iBAAA,EAEApyF,KAAA,SAAAvD,GAOA,OALAsoI,GAAA1pI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAnG,MAAAhR,EAAAgR,MACAmG,KAAAlG,OAAAjR,EAAAiR,OAEAkG,MAIA6iB,OAAA,SAAAC,GAEA,IAAAhgB,EAAAquH,GAAA1pI,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,GAKA,OAHAhgB,EAAA/X,OAAA8O,MAAAmG,KAAAnG,MACAiJ,EAAA/X,OAAA+O,OAAAkG,KAAAlG,OAEAgJ,KA+BAvb,OAAAM,OAAAwqI,GAAA5qI,UAAA,CAEAstI,uBAAA,EAEAv9G,IAAA,SAAAqmE,GAEA,IAAA,IAAAr3F,EAAA,EAAAA,EAAA,EAAAA,IAEAwZ,KAAA69E,aAAAr3F,GAAA4F,KAAAyxF,EAAAr3F,IAIA,OAAAwZ,MAIAg1H,KAAA,WAEA,IAAA,IAAAxuI,EAAA,EAAAA,EAAA,EAAAA,IAEAwZ,KAAA69E,aAAAr3F,GAAAgxB,IAAA,EAAA,EAAA,GAIA,OAAAxX,MAMAi1H,MAAA,SAAAxpG,EAAA7iC,GAIA,IAAAuD,EAAAs/B,EAAAt/B,EAAAsB,EAAAg+B,EAAAh+B,EAAAg0B,EAAAgK,EAAAhK,EAEAyzG,EAAAl1H,KAAA69E,aAiBA,OAdAj1F,EAAAwD,KAAA8oI,EAAA,IAAAl8G,eAAA,SAGApwB,EAAA+vB,gBAAAu8G,EAAA,GAAA,QAAAznI,GACA7E,EAAA+vB,gBAAAu8G,EAAA,GAAA,QAAAzzG,GACA74B,EAAA+vB,gBAAAu8G,EAAA,GAAA,QAAA/oI,GAGAvD,EAAA+vB,gBAAAu8G,EAAA,GAAA/oI,EAAAsB,EAAA,UACA7E,EAAA+vB,gBAAAu8G,EAAA,GAAAznI,EAAAg0B,EAAA,UACA74B,EAAA+vB,gBAAAu8G,EAAA,GAAA,SAAA,EAAAzzG,EAAAA,EAAA,IACA74B,EAAA+vB,gBAAAu8G,EAAA,GAAA/oI,EAAAs1B,EAAA,UACA74B,EAAA+vB,gBAAAu8G,EAAA,GAAA,SAAA/oI,EAAAA,EAAAsB,EAAAA,IAEA7E,GAOAusI,gBAAA,SAAA1pG,EAAA7iC,GAIA,IAAAuD,EAAAs/B,EAAAt/B,EAAAsB,EAAAg+B,EAAAh+B,EAAAg0B,EAAAgK,EAAAhK,EAEAyzG,EAAAl1H,KAAA69E,aAiBA,OAdAj1F,EAAAwD,KAAA8oI,EAAA,IAAAl8G,eAAA,SAGApwB,EAAA+vB,gBAAAu8G,EAAA,GAAA,SAAAznI,GACA7E,EAAA+vB,gBAAAu8G,EAAA,GAAA,SAAAzzG,GACA74B,EAAA+vB,gBAAAu8G,EAAA,GAAA,SAAA/oI,GAGAvD,EAAA+vB,gBAAAu8G,EAAA,GAAA,QAAA/oI,EAAAsB,GACA7E,EAAA+vB,gBAAAu8G,EAAA,GAAA,QAAAznI,EAAAg0B,GACA74B,EAAA+vB,gBAAAu8G,EAAA,GAAA,QAAAzzG,EAAAA,EAAA,SACA74B,EAAA+vB,gBAAAu8G,EAAA,GAAA,QAAA/oI,EAAAs1B,GACA74B,EAAA+vB,gBAAAu8G,EAAA,GAAA,SAAA/oI,EAAAA,EAAAsB,EAAAA,IAEA7E,GAIA2vB,IAAA,SAAAqlE,GAEA,IAAA,IAAAp3F,EAAA,EAAAA,EAAA,EAAAA,IAEAwZ,KAAA69E,aAAAr3F,GAAA+xB,IAAAqlE,EAAAC,aAAAr3F,IAIA,OAAAwZ,MAIAo1H,YAAA,SAAAx3C,EAAAx0F,GAEA,IAAA,IAAA5C,EAAA,EAAAA,EAAA,EAAAA,IAEAwZ,KAAA69E,aAAAr3F,GAAAmyB,gBAAAilE,EAAAC,aAAAr3F,GAAA4C,GAIA,OAAA4W,MAIAsE,MAAA,SAAAlb,GAEA,IAAA,IAAA5C,EAAA,EAAAA,EAAA,EAAAA,IAEAwZ,KAAA69E,aAAAr3F,GAAAwyB,eAAA5vB,GAIA,OAAA4W,MAIAyV,KAAA,SAAAmoE,EAAApjE,GAEA,IAAA,IAAAh0B,EAAA,EAAAA,EAAA,EAAAA,IAEAwZ,KAAA69E,aAAAr3F,GAAAivB,KAAAmoE,EAAAC,aAAAr3F,GAAAg0B,GAIA,OAAAxa,MAIA4a,OAAA,SAAAgjE,GAEA,IAAA,IAAAp3F,EAAA,EAAAA,EAAA,EAAAA,IAEA,IAAAwZ,KAAA69E,aAAAr3F,GAAAo0B,OAAAgjE,EAAAC,aAAAr3F,IAEA,OAAA,EAMA,OAAA,GAIA4F,KAAA,SAAAwxF,GAEA,OAAA59E,KAAAwX,IAAAomE,EAAAC,eAIAzlE,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA6a,UAAA,SAAAzG,EAAA0G,QAEAhuB,IAAAguB,IAAAA,EAAA,GAIA,IAFA,IAAA+iE,EAAA79E,KAAA69E,aAEAr3F,EAAA,EAAAA,EAAA,EAAAA,IAEAq3F,EAAAr3F,GAAAq0B,UAAAzG,EAAA0G,EAAA,EAAAt0B,GAIA,OAAAwZ,MAIA+a,QAAA,SAAA3G,EAAA0G,QAEAhuB,IAAAsnB,IAAAA,EAAA,SACAtnB,IAAAguB,IAAAA,EAAA,GAIA,IAFA,IAAA+iE,EAAA79E,KAAA69E,aAEAr3F,EAAA,EAAAA,EAAA,EAAAA,IAEAq3F,EAAAr3F,GAAAu0B,QAAA3G,EAAA0G,EAAA,EAAAt0B,GAIA,OAAA4tB,KAMA7sB,OAAAM,OAAAwqI,GAAA,CAIAgD,WAAA,SAAA5pG,EAAA6pG,GAIA,IAAAnpI,EAAAs/B,EAAAt/B,EAAAsB,EAAAg+B,EAAAh+B,EAAAg0B,EAAAgK,EAAAhK,EAGA6zG,EAAA,GAAA,QAGAA,EAAA,GAAA,QAAA7nI,EACA6nI,EAAA,GAAA,QAAA7zG,EACA6zG,EAAA,GAAA,QAAAnpI,EAGAmpI,EAAA,GAAA,SAAAnpI,EAAAsB,EACA6nI,EAAA,GAAA,SAAA7nI,EAAAg0B,EACA6zG,EAAA,GAAA,SAAA,EAAA7zG,EAAAA,EAAA,GACA6zG,EAAA,GAAA,SAAAnpI,EAAAs1B,EACA6zG,EAAA,GAAA,SAAAnpI,EAAAA,EAAAsB,EAAAA,MAsBA6kI,GAAA7qI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAyuG,GAAA1pI,WAAA,CAEA4wB,YAAAi6G,GAEA30C,cAAA,EAEAvxF,KAAA,SAAAvD,GAMA,OAJAsoI,GAAA1pI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA49E,GAAAxxF,KAAAvD,EAAA+0F,IAEA59E,MAIAwuH,SAAA,SAAAjN,GAKA,OAHAvhH,KAAAy9E,UAAA8jC,EAAA9jC,UACAz9E,KAAA49E,GAAA/iE,UAAA0mG,EAAA3jC,IAEA59E,MAIA6iB,OAAA,SAAAC,GAEA,IAAAhgB,EAAAquH,GAAA1pI,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,GAIA,OAFAhgB,EAAA/X,OAAA6yF,GAAA59E,KAAA49E,GAAA7iE,UAEAjY,KAkBAyvH,GAAA9qI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAAk6G,GAEAxqH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,GAEA,IAAAnjE,EAAApkD,KAEA8I,EAAA,IAAAogH,GAAA9kE,EAAAx6C,SACAd,EAAAggH,QAAA1kE,EAAA0rB,MACAhnE,EAAAf,KAAAsb,EAAA,SAAAg1F,GAEA,IAEAgP,EAAAjjE,EAAA7qB,MAAAnB,KAAAmB,MAAA8+E,KAEA,MAAAjyH,GAEAmhI,EAEAA,EAAAnhI,GAIA8Q,QAAAkK,MAAAhb,GAIAg+D,EAAAx6C,QAAAo+G,UAAA3kG,KAIAikG,EAAAC,IAIAhuF,MAAA,SAAAgoF,GAEA,IAAAv+F,EAAAhjB,KAAAgjB,SAEA,SAAAuyG,EAAAp/H,GAQA,YANArJ,IAAAk2B,EAAA7sB,IAEAe,QAAAC,KAAA,0CAAAhB,GAIA6sB,EAAA7sB,GAIA,IAAA2iC,EAAA,IAAAkkF,GAAAuE,EAAA1tH,MA+EA,QA7EA/G,IAAAy0H,EAAA5gG,OAAAmY,EAAAnY,KAAA4gG,EAAA5gG,WACA7zB,IAAAy0H,EAAAprH,OAAA2iC,EAAA3iC,KAAAorH,EAAAprH,WACArJ,IAAAy0H,EAAAxyE,OAAAjW,EAAAiW,MAAAK,OAAAmyE,EAAAxyE,YACAjiD,IAAAy0H,EAAAnsE,YAAAtc,EAAAsc,UAAAmsE,EAAAnsE,gBACAtoD,IAAAy0H,EAAAlsE,YAAAvc,EAAAuc,UAAAksE,EAAAlsE,gBACAvoD,IAAAy0H,EAAAjsE,QAAAxc,EAAAwc,OAAA,IAAA7G,IAAAW,OAAAmyE,EAAAjsE,aACAxoD,IAAAy0H,EAAAhsE,UAAAzc,EAAAyc,SAAAnG,OAAAmyE,EAAAhsE,eACAzoD,IAAAy0H,EAAA9rE,UAAA3c,EAAA2c,SAAArG,OAAAmyE,EAAA9rE,eACA3oD,IAAAy0H,EAAA7rE,YAAA5c,EAAA4c,UAAA6rE,EAAA7rE,gBACA5oD,IAAAy0H,EAAA5rE,YAAA7c,EAAA6c,UAAA4rE,EAAA5rE,gBACA7oD,IAAAy0H,EAAA3rE,qBAAA9c,EAAA8c,mBAAA2rE,EAAA3rE,yBACA9oD,IAAAy0H,EAAArsF,MAAA4D,EAAA5D,IAAAqsF,EAAArsF,UACApoC,IAAAy0H,EAAA3vE,cAAA9Y,EAAA8Y,YAAA2vE,EAAA3vE,kBACA9kD,IAAAy0H,EAAA7vE,WAAA5Y,EAAA4Y,SAAA6vE,EAAA7vE,eACA5kD,IAAAy0H,EAAAntE,UAAAtb,EAAAsb,QAAAmtE,EAAAntE,cACAtnD,IAAAy0H,EAAA5vE,OAAA7Y,EAAA6Y,KAAA4vE,EAAA5vE,WACA7kD,IAAAy0H,EAAA1vE,UAAA/Y,EAAA+Y,QAAA0vE,EAAA1vE,cACA/kD,IAAAy0H,EAAAzvE,cAAAhZ,EAAAgZ,YAAAyvE,EAAAzvE,kBACAhlD,IAAAy0H,EAAA9tE,YAAA3a,EAAA2a,UAAA8tE,EAAA9tE,gBACA3mD,IAAAy0H,EAAAjvE,YAAAxZ,EAAAwZ,UAAAivE,EAAAjvE,gBACAxlD,IAAAy0H,EAAAhvE,aAAAzZ,EAAAyZ,WAAAgvE,EAAAhvE,iBACAzlD,IAAAy0H,EAAAnuE,aAAAta,EAAAsa,WAAAmuE,EAAAnuE,iBAEAtmD,IAAAy0H,EAAAxuE,eAAAja,EAAAia,aAAAwuE,EAAAxuE,mBACAjmD,IAAAy0H,EAAA/uE,mBAAA1Z,EAAA0Z,iBAAA+uE,EAAA/uE,uBACA1lD,IAAAy0H,EAAA9uE,cAAA3Z,EAAA2Z,YAAA8uE,EAAA9uE,kBACA3lD,IAAAy0H,EAAA7uE,aAAA5Z,EAAA4Z,WAAA6uE,EAAA7uE,iBACA5lD,IAAAy0H,EAAA5uE,kBAAA7Z,EAAA6Z,gBAAA4uE,EAAA5uE,sBACA7lD,IAAAy0H,EAAA3uE,cAAA9Z,EAAA8Z,YAAA2uE,EAAA3uE,kBACA9lD,IAAAy0H,EAAA1uE,eAAA/Z,EAAA+Z,aAAA0uE,EAAA1uE,mBACA/lD,IAAAy0H,EAAAzuE,eAAAha,EAAAga,aAAAyuE,EAAAzuE,mBAEAhmD,IAAAy0H,EAAAhtE,YAAAzb,EAAAyb,UAAAgtE,EAAAhtE,gBACAznD,IAAAy0H,EAAA/sE,qBAAA1b,EAAA0b,mBAAA+sE,EAAA/sE,yBACA1nD,IAAAy0H,EAAA9sE,mBAAA3b,EAAA2b,iBAAA8sE,EAAA9sE,uBACA3nD,IAAAy0H,EAAA7sE,oBAAA5b,EAAA4b,kBAAA6sE,EAAA7sE,wBAEA5nD,IAAAy0H,EAAApiG,WAAA2Z,EAAA3Z,SAAAoiG,EAAApiG,UAEA,IAAAoiG,EAAAvqE,YAAAle,EAAAke,UAAAuqE,EAAAvqE,gBACAlqD,IAAAy0H,EAAAtqE,WAAAne,EAAAme,SAAAsqE,EAAAtqE,eACAnqD,IAAAy0H,EAAArqE,UAAApe,EAAAoe,QAAAqqE,EAAArqE,cACApqD,IAAAy0H,EAAAj9G,QAAAw0B,EAAAx0B,MAAAi9G,EAAAj9G,YAEAxX,IAAAy0H,EAAAluE,gBAAAva,EAAAua,cAAAkuE,EAAAluE,oBACAvmD,IAAAy0H,EAAAjuE,sBAAAxa,EAAAwa,oBAAAiuE,EAAAjuE,0BACAxmD,IAAAy0H,EAAAhuE,qBAAAza,EAAAya,mBAAAguE,EAAAhuE,yBAEAzmD,IAAAy0H,EAAA5sE,WAAA7b,EAAA6b,SAAA4sE,EAAA5sE,eACA7nD,IAAAy0H,EAAA3sE,eAAA9b,EAAA8b,aAAA2sE,EAAA3sE,mBACA9nD,IAAAy0H,EAAApqE,eAAAre,EAAAqe,aAAAoqE,EAAApqE,mBACArqD,IAAAy0H,EAAA/tE,YAAA1a,EAAA0a,UAAA+tE,EAAA/tE,gBAEA1mD,IAAAy0H,EAAA7rC,iBAAA58C,EAAA48C,eAAA6rC,EAAA7rC,qBAEA5oF,IAAAy0H,EAAA9sF,UAAAqE,EAAArE,QAAA8sF,EAAA9sF,cAEA3nC,IAAAy0H,EAAA5tE,aAAA7a,EAAA6a,WAAA4tE,EAAA5tE,iBAEA7mD,IAAAy0H,EAAAzsF,WAAAgE,EAAAhE,SAAAysF,EAAAzsF,eAEAhoC,IAAAy0H,EAAApyE,eAIArW,EAAAqW,aAFA,iBAAAoyE,EAAApyE,aAEAoyE,EAAApyE,aAAA,EAIAoyE,EAAApyE,mBAQAriD,IAAAy0H,EAAAn2D,SAEA,IAAA,IAAAj1D,KAAAorH,EAAAn2D,SAAA,CAEA,IAAAwb,EAAA26C,EAAAn2D,SAAAj1D,GAIA,OAFA2iC,EAAAsyB,SAAAj1D,GAAA,GAEAywE,EAAA/yE,MAEA,IAAA,IACAilC,EAAAsyB,SAAAj1D,GAAAjK,MAAAqpI,EAAA3uD,EAAA16E,OACA,MAEA,IAAA,IACA4sC,EAAAsyB,SAAAj1D,GAAAjK,OAAA,IAAAuiD,IAAAW,OAAAw3B,EAAA16E,OACA,MAEA,IAAA,KACA4sC,EAAAsyB,SAAAj1D,GAAAjK,OAAA,IAAAurB,IAAAoD,UAAA+rD,EAAA16E,OACA,MAEA,IAAA,KACA4sC,EAAAsyB,SAAAj1D,GAAAjK,OAAA,IAAAm9B,IAAAxO,UAAA+rD,EAAA16E,OACA,MAEA,IAAA,KACA4sC,EAAAsyB,SAAAj1D,GAAAjK,OAAA,IAAAs1B,IAAA3G,UAAA+rD,EAAA16E,OACA,MAEA,IAAA,KACA4sC,EAAAsyB,SAAAj1D,GAAAjK,OAAA,IAAAwrB,IAAAmD,UAAA+rD,EAAA16E,OAEA,IAAA,KACA4sC,EAAAsyB,SAAAj1D,GAAAjK,OAAA,IAAAsgC,IAAA3R,UAAA+rD,EAAA16E,OACA,MAEA,QACA4sC,EAAAsyB,SAAAj1D,GAAAjK,MAAA06E,EAAA16E,OAYA,QAJAY,IAAAy0H,EAAA71D,UAAA5yB,EAAA4yB,QAAA61D,EAAA71D,cACA5+D,IAAAy0H,EAAA51D,eAAA7yB,EAAA6yB,aAAA41D,EAAA51D,mBACA7+D,IAAAy0H,EAAA31D,iBAAA9yB,EAAA8yB,eAAA21D,EAAA31D,qBAEA9+D,IAAAy0H,EAAAx1D,WAEA,IAAA,IAAAziE,KAAAi4H,EAAAx1D,WAEAjzB,EAAAizB,WAAAziE,GAAAi4H,EAAAx1D,WAAAziE,GA2BA,QAnBAwD,IAAAy0H,EAAAiU,UAAA18F,EAAA8Y,YAAA,IAAA2vE,EAAAiU,cAIA1oI,IAAAy0H,EAAAzlF,OAAAhD,EAAAgD,KAAAylF,EAAAzlF,WACAhvC,IAAAy0H,EAAAxqE,kBAAAje,EAAAie,gBAAAwqE,EAAAxqE,sBAIAjqD,IAAAy0H,EAAAp5H,MAAA2wC,EAAA3wC,IAAAotI,EAAAhU,EAAAp5H,WACA2E,IAAAy0H,EAAAtrE,SAAAnd,EAAAmd,OAAAs/E,EAAAhU,EAAAtrE,cAEAnpD,IAAAy0H,EAAArtE,WAAApb,EAAAob,SAAAqhF,EAAAhU,EAAArtE,gBAEApnD,IAAAy0H,EAAArrE,UAAApd,EAAAod,QAAAq/E,EAAAhU,EAAArrE,eACAppD,IAAAy0H,EAAAprE,YAAArd,EAAAqd,UAAAorE,EAAAprE,gBAEArpD,IAAAy0H,EAAAnrE,YAAAtd,EAAAsd,UAAAm/E,EAAAhU,EAAAnrE,iBACAtpD,IAAAy0H,EAAAlrE,gBAAAvd,EAAAud,cAAAkrE,EAAAlrE,oBACAvpD,IAAAy0H,EAAAjrE,YAAA,CAEA,IAAAA,EAAAirE,EAAAjrE,aAEA,IAAAprD,MAAA6B,QAAAupD,KAIAA,EAAA,CAAAA,EAAAA,IAIAxd,EAAAwd,aAAA,IAAA7+B,IAAAoD,UAAAy7B,GAmCA,YA/BAxpD,IAAAy0H,EAAAhrE,kBAAAzd,EAAAyd,gBAAAg/E,EAAAhU,EAAAhrE,uBACAzpD,IAAAy0H,EAAA/qE,oBAAA1d,EAAA0d,kBAAA+qE,EAAA/qE,wBACA1pD,IAAAy0H,EAAA9qE,mBAAA3d,EAAA2d,iBAAA8qE,EAAA9qE,uBAEA3pD,IAAAy0H,EAAA7qE,eAAA5d,EAAA4d,aAAA6+E,EAAAhU,EAAA7qE,oBACA5pD,IAAAy0H,EAAA5qE,eAAA7d,EAAA6d,aAAA4+E,EAAAhU,EAAA5qE,oBAEA7pD,IAAAy0H,EAAA3qE,cAAA9d,EAAA8d,YAAA2+E,EAAAhU,EAAA3qE,mBACA9pD,IAAAy0H,EAAA/rE,oBAAA1c,EAAA0c,kBAAA+rE,EAAA/rE,wBAEA1oD,IAAAy0H,EAAAttE,cAAAnb,EAAAmb,YAAAshF,EAAAhU,EAAAttE,mBAEAnnD,IAAAy0H,EAAAptE,SAAArb,EAAAqb,OAAAohF,EAAAhU,EAAAptE,cACArnD,IAAAy0H,EAAA1qE,kBAAA/d,EAAA+d,gBAAA0qE,EAAA1qE,sBAEA/pD,IAAAy0H,EAAAltE,eAAAvb,EAAAub,aAAAktE,EAAAltE,mBACAvnD,IAAAy0H,EAAAjtE,kBAAAxb,EAAAwb,gBAAAitE,EAAAjtE,sBAEAxnD,IAAAy0H,EAAA1tE,WAAA/a,EAAA+a,SAAA0hF,EAAAhU,EAAA1tE,gBACA/mD,IAAAy0H,EAAAztE,oBAAAhb,EAAAgb,kBAAAytE,EAAAztE,wBAEAhnD,IAAAy0H,EAAAxtE,QAAAjb,EAAAib,MAAAwhF,EAAAhU,EAAAxtE,aACAjnD,IAAAy0H,EAAAvtE,iBAAAlb,EAAAkb,eAAAutE,EAAAvtE,qBAEAlnD,IAAAy0H,EAAAzqE,cAAAhe,EAAAge,YAAAy+E,EAAAhU,EAAAzqE,mBAEAhqD,IAAAy0H,EAAA1rE,eAAA/c,EAAA+c,aAAA0/E,EAAAhU,EAAA1rE,oBACA/oD,IAAAy0H,EAAAzrE,wBAAAhd,EAAAgd,sBAAAy/E,EAAAhU,EAAAzrE,6BACAhpD,IAAAy0H,EAAAxrE,qBAAAjd,EAAAid,mBAAAw/E,EAAAhU,EAAAxrE,0BACAjpD,IAAAy0H,EAAAvrE,uBAAAld,EAAAkd,sBAAA,IAAAv+B,IAAAoD,UAAA0mG,EAAAvrE,uBAEAld,GAIA28F,YAAA,SAAAvpI,GAGA,OADA8T,KAAAgjB,SAAA92B,EACA8T,QAUA,IAAA01H,GAAA,CAEAC,WAAA,SAAAvhH,GAEA,GAAA,oBAAAwhH,YAEA,OAAA,IAAAA,aAAAC,OAAAzhH,GASA,IAFA,IAAAhrB,EAAA,GAEA5C,EAAA,EAAAm1C,EAAAvnB,EAAAjtB,OAAAX,EAAAm1C,EAAAn1C,IAGA4C,GAAArB,OAAAG,aAAAksB,EAAA5tB,IAIA,IAIA,OAAA8kI,mBAAAwK,OAAA1sI,IAEA,MAAAhD,GAEA,OAAAgD,IAMA2sI,eAAA,SAAA1yG,GAEA,IAAAhZ,EAAAgZ,EAAA2yG,YAAA,KAEA,OAAA,IAAA3rH,EAAA,KAEAgZ,EAAArxB,OAAA,EAAAqY,EAAA,KAUA,SAAA4rH,KAEAz5E,GAAAt1D,KAAA8Y,MAEAA,KAAAnM,KAAA,0BACAmM,KAAAspE,cAAAhiE,SA4CA,SAAA4uH,GAAA9hH,EAAAsjC,EAAArG,EAAA4wB,GAEA,iBAAA,IAEAA,EAAA5wB,EAEAA,GAAA,EAEAn6C,QAAAkK,MAAA,kGAIAq2C,GAAAvwD,KAAA8Y,KAAAoU,EAAAsjC,EAAArG,GAEArxC,KAAAiiE,iBAAAA,GAAA,EAsCA,SAAAk0D,GAAAvsH,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GA9FAqsH,GAAAxuI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA85B,GAAA/0D,WAAA,CAEA4wB,YAAA49G,GAEA5yD,2BAAA,EAEAj3E,KAAA,SAAAvD,GAMA,OAJA2zD,GAAA/0D,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAspE,cAAAzgF,EAAAygF,cAEAtpE,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA6iB,OAAA,WAEA,IAAA/f,EAAA05C,GAAA/0D,UAAAo7B,OAAA37B,KAAA8Y,MAMA,OAJA8C,EAAAwmE,cAAAtpE,KAAAspE,cAEAxmE,EAAAugE,2BAAA,EAEAvgE,KA4BAozH,GAAAzuI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA+0B,GAAAhwD,WAAA,CAEA4wB,YAAA69G,GAEAtyD,4BAAA,EAEAx3E,KAAA,SAAAvD,GAMA,OAJA4uD,GAAAhwD,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAiiE,iBAAAp5E,EAAAo5E,iBAEAjiE,MAIA6iB,OAAA,WAEA,IAAA/f,EAAA20C,GAAAhwD,UAAAo7B,OAAA37B,KAAA8Y,MAMA,OAJA8C,EAAAm/D,iBAAAjiE,KAAAiiE,iBAEAn/D,EAAA8gE,4BAAA,EAEA9gE,KAgBAqzH,GAAA1uI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAA89G,GAEApuH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,GAEA,IAAAnjE,EAAApkD,KAEA8I,EAAA,IAAAogH,GAAA9kE,EAAAx6C,SACAd,EAAAggH,QAAA1kE,EAAA0rB,MACAhnE,EAAAf,KAAAsb,EAAA,SAAAg1F,GAEA,IAEAgP,EAAAjjE,EAAA7qB,MAAAnB,KAAAmB,MAAA8+E,KAEA,MAAAjyH,GAEAmhI,EAEAA,EAAAnhI,GAIA8Q,QAAAkK,MAAAhb,GAIAg+D,EAAAx6C,QAAAo+G,UAAA3kG,KAIAikG,EAAAC,IAIAhuF,MAAA,SAAAgoF,GAEA,IAAA6U,EAAA,GACAC,EAAA,GAEA,SAAAC,EAAA/U,EAAA5gG,GAEA,QAAA7zB,IAAAspI,EAAAz1G,GAAA,OAAAy1G,EAAAz1G,GAEA,IACAugF,EADAqgB,EAAApgB,mBACAxgF,GAEAw0C,EAYA,SAAAosD,EAAA5gG,GAEA,QAAA7zB,IAAAupI,EAAA11G,GAAA,OAAA01G,EAAA11G,GAEA,IAGA1sB,EAAA,IAAAwkD,YAHA8oE,EAAA3gB,aACAjgF,IAEAw0C,OAIA,OAFAkhE,EAAA11G,GAAA1sB,EAEAA,EAvBAsiI,CAAAhV,EAAArgB,EAAA/rC,QAGA2rC,EAAA,IAAAX,GADA,IAAAq2B,GAAAt1B,EAAArtG,MAAAshE,GACA+rC,EAAA5+B,QAKA,OAJAw+B,EAAAngF,KAAAugF,EAAAvgF,KAEAy1G,EAAAz1G,GAAAmgF,EAEAA,EAmBA,IAAAloE,EAAA2oF,EAAAl+C,0BAAA,IAAA4yD,GAAA,IAAAz5E,GAEAnyC,EAAAk3G,EAAAz+G,KAAAuH,MAEA,QAAAvd,IAAAud,EAAA,CAEA,IAAAosH,EAAA,IAAAD,GAAAnsH,EAAAxW,MAAAwW,EAAA+J,OACAwkB,EAAAkkB,SAAA,IAAArF,GAAAg/E,EAAA,IAIA,IAAAx5H,EAAAskH,EAAAz+G,KAAA7F,WAEA,IAAA,IAAA3T,KAAA2T,EAAA,CAEA,IAAAge,EAAAhe,EAAA3T,GACAotI,OAAA,EAEA,GAAAz7G,EAAAg6C,6BAAA,CAGAyhE,EAAA,IAAAz1B,GADAq1B,EAAA/U,EAAAz+G,KAAAmY,EAAAnY,MACAmY,EAAAy8B,SAAAz8B,EAAAH,OAAAG,EAAAo2B,gBAEA,CAEA,IAAAslF,EAAA,IAAAH,GAAAv7G,EAAApnB,MAAAonB,EAAA7G,OAEAsiH,EAAA,IADAz7G,EAAA2oD,2BAAAsyD,GAAAz+E,IACAk/E,EAAA17G,EAAAy8B,SAAAz8B,EAAAo2B,iBAIAvkD,IAAAmuB,EAAA9kB,OAAAugI,EAAAvgI,KAAA8kB,EAAA9kB,MACAyiC,EAAAokB,aAAA1zD,EAAAotI,GAIA,IAAAj6E,EAAA8kE,EAAAz+G,KAAA25C,gBAEA,GAAAA,EAEA,IAAA,IAAA8D,KAAA9D,EAAA,CAMA,IAJA,IAAAkE,EAAAlE,EAAA8D,GAEAnsC,EAAA,GAEA5tB,EAAA,EAAAm1C,EAAAglB,EAAAx5D,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAAu3D,EAAA4C,EAAAn6D,GACAowI,OAAA,EAEA,GAAA74E,EAAAkX,6BAGA2hE,EAAA,IAAA31B,GADAq1B,EAAA/U,EAAAz+G,KAAAi7C,EAAAj7C,MACAi7C,EAAArG,SAAAqG,EAAAjjC,OAAAijC,EAAA1M,iBAKAulF,EAAA,IAAAn/E,GADA,IAAA++E,GAAAz4E,EAAAlqD,MAAAkqD,EAAA3pC,OACA2pC,EAAArG,SAAAqG,EAAA1M,iBAIAvkD,IAAAixD,EAAA5nD,OAAAygI,EAAAzgI,KAAA4nD,EAAA5nD,MACAie,EAAAzpB,KAAAisI,GAIAh+F,EAAA6jB,gBAAA8D,GAAAnsC,EAMAmtG,EAAAz+G,KAAA45C,uBAIA9jB,EAAA8jB,sBAAA,GAIA,IAAAtD,EAAAmoE,EAAAz+G,KAAAs2C,QAAAmoE,EAAAz+G,KAAA+zH,WAAAtV,EAAAz+G,KAAAg0H,QAEA,QAAAhqI,IAAAssD,EAEA,IAAA,IAAApgB,EAAA,EAAA3yC,EAAA+yD,EAAAjyD,OAAA6xC,IAAA3yC,IAAA2yC,EAAA,CAEA,IAAA+hB,EAAA3B,EAAApgB,GAEAJ,EAAAskB,SAAAnC,EAAA5Y,MAAA4Y,EAAAxiB,MAAAwiB,EAAA/L,eAMA,IAAAuK,EAAAgoE,EAAAz+G,KAAAy2C,eAEA,QAAAzsD,IAAAysD,EAAA,CAEA,IAAAl+B,EAAA,IAAAgO,QAEAv8B,IAAAysD,EAAAl+B,QAEAA,EAAAR,UAAA0+B,EAAAl+B,QAIAud,EAAA2gB,eAAA,IAAA3b,GAAAviB,EAAAk+B,EAAA1tB,QAOA,OAHA01F,EAAAprH,OAAAyiC,EAAAziC,KAAAorH,EAAAprH,MACAorH,EAAAzsF,WAAA8D,EAAA9D,SAAAysF,EAAAzsF,UAEA8D,KAMA,IAAA49F,GAAA,CACA1+E,UAAAA,UACA1jD,WAAAA,WAEA6jD,kBAAA,oBAAAA,kBAAAA,kBAAA7jD,WACA+jD,WAAAA,WACAE,YAAAA,YACAE,WAAAA,WACAE,YAAAA,YACAE,aAAAA,aACAE,aAAAA,cAOA,SAAAk+E,GAAAntH,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GAIAmtH,GAAAtvI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAA0+G,GAEAhvH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,GAEA,IAAAnjE,EAAApkD,KAEA8vE,EAAA,KAAA9vE,KAAA8vE,KAAA4lD,GAAAK,eAAA1yG,GAAArjB,KAAA8vE,KACA9vE,KAAA0oH,aAAA1oH,KAAA0oH,cAAA54C,EAEA,IAAAhnE,EAAA,IAAAogH,GAAA9kE,EAAAx6C,SACAd,EAAAggH,QAAA9oH,KAAA8vE,MACAhnE,EAAAf,KAAAsb,EAAA,SAAAg1F,GAEA,IAAAkJ,EAAA,KAEA,IAEAA,EAAAnpF,KAAAmB,MAAA8+E,GAEA,MAAAj3G,GAMA,YAJAtU,IAAAy6H,GAAAA,EAAAnmH,QAEAlK,QAAAkK,MAAA,mCAAAiiB,EAAA,IAAAjiB,EAAA4H,SAMA,IAAAia,EAAAs+F,EAAAt+F,cAEAn2B,IAAAm2B,QAAAn2B,IAAAm2B,EAAApvB,MAAA,aAAAovB,EAAApvB,KAAA7G,cAOAo3D,EAAA7qB,MAAAgoF,EAAA8F,GALAnwH,QAAAkK,MAAA,kCAAAiiB,IAOAikG,EAAAC,IAIAhuF,MAAA,SAAAgoF,EAAA8F,GAEA,IAAApvF,EAAAj4B,KAAAg3H,WAAAzV,EAAAtpF,QACAF,EAAA/3B,KAAAi3H,gBAAA1V,EAAAxpF,WAAAE,GAEA7U,EAAApjB,KAAAk3H,YAAA3V,EAAAn+F,OAAA,gBAEAt2B,IAAAu6H,GAAAA,EAAAt8H,KAIAi4B,EAAAhjB,KAAAm3H,cAAA5V,EAAAv+F,SAAAI,GACA4U,EAAAh4B,KAAAo3H,eAAA7V,EAAAvpF,UAAAhV,GAEAj4B,EAAAiV,KAAAq3H,YAAA9V,EAAAx2H,OAAAgtC,EAAAC,GAcA,OAZAupF,EAAAuE,aAEA/6H,EAAA+6H,WAAA9lH,KAAAs3H,gBAAA/V,EAAAuE,kBAIAh5H,IAAAy0H,EAAAn+F,QAAA,IAAAm+F,EAAAn+F,OAAAj8B,aAEA2F,IAAAu6H,GAAAA,EAAAt8H,GAIAA,GAIAisI,WAAA,SAAAzV,GAEA,IAAAtpF,EAAA,GAEA,QAAAnrC,IAAAy0H,EAEA,IAAA,IAAA/6H,EAAA,EAAAyJ,EAAAsxH,EAAAp6H,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAirH,GAAA,IAAAyf,IAAA1C,SAAAjN,EAAA/6H,IAEAyxC,EAAAw5E,EAAA9wF,MAAA8wF,EAMA,OAAAx5E,GAIAg/F,gBAAA,SAAA1V,EAAAtpF,GAEA,IACAs/F,EADAx/F,EAAA,GAGA,QAAAjrC,IAAAy0H,EAIA,IAFA,IAAAiW,EAAA,IAAArB,GAEA3vI,EAAA,EAAAyJ,EAAAsxH,EAAAp6H,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAoyC,OAAA,EACA91B,EAAAy+G,EAAA/6H,GAEA,OAAAsc,EAAAjP,MAEA,IAAA,gBACA,IAAA,sBAEA+kC,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAAjJ,MACAiJ,EAAAhJ,OACAgJ,EAAA4mD,cACA5mD,EAAA6mD,gBAGA,MAEA,IAAA,cACA,IAAA,oBACA,IAAA,eAEA/wB,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAAjJ,MACAiJ,EAAAhJ,OACAgJ,EAAA2mD,MACA3mD,EAAA4mD,cACA5mD,EAAA6mD,eACA7mD,EAAA8mD,eAGA,MAEA,IAAA,iBACA,IAAA,uBAEAhxB,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAA+oB,OACA/oB,EAAAi3G,SACAj3G,EAAA+1G,WACA/1G,EAAAg2G,aAGA,MAEA,IAAA,mBACA,IAAA,yBAEAlgF,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAAu4G,UACAv4G,EAAAw4G,aACAx4G,EAAAhJ,OACAgJ,EAAAwnG,eACAxnG,EAAA6mD,eACA7mD,EAAAy4G,UACAz4G,EAAA+1G,WACA/1G,EAAAg2G,aAGA,MAEA,IAAA,eACA,IAAA,qBAEAlgF,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAA+oB,OACA/oB,EAAAhJ,OACAgJ,EAAAwnG,eACAxnG,EAAA6mD,eACA7mD,EAAAy4G,UACAz4G,EAAA+1G,WACA/1G,EAAAg2G,aAGA,MAEA,IAAA,iBACA,IAAA,uBAEAlgF,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAA+oB,OACA/oB,EAAA4mD,cACA5mD,EAAA6mD,eACA7mD,EAAA61G,SACA71G,EAAA81G,UACA91G,EAAA+1G,WACA/1G,EAAAg2G,aAGA,MAEA,IAAA,uBACA,IAAA,6BACA,IAAA,sBACA,IAAA,4BACA,IAAA,qBACA,IAAA,2BACA,IAAA,sBACA,IAAA,4BAEAlgF,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAA+oB,OACA/oB,EAAAyyB,QAGA,MAEA,IAAA,eACA,IAAA,qBAEAqD,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAAu2G,YACAv2G,EAAAw2G,YACAx2G,EAAAy2G,cACAz2G,EAAA02G,YACA12G,EAAA+1G,WACA/1G,EAAAg2G,aAGA,MAEA,IAAA,gBACA,IAAA,sBAEAlgF,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAA+oB,OACA/oB,EAAAwoG,KACAxoG,EAAAwnG,eACAxnG,EAAAunG,gBACAvnG,EAAAmpG,KAGA,MAEA,IAAA,oBACA,IAAA,0BAEArzE,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAA+oB,OACA/oB,EAAAwoG,KACAxoG,EAAAunG,gBACAvnG,EAAAwnG,eACAxnG,EAAA9b,EACA8b,EAAA8T,GAGA,MAEA,IAAA,eACA,IAAA,qBAIAgiB,EAAA,IAAA6jF,GAAA35G,EAAAjP,OACA,IAAA+8H,GAAA9tH,EAAAgtE,KAAAj8E,OAAA26H,SAAA1rH,EAAAgtE,MACAhtE,EAAAunG,gBACAvnG,EAAA+oB,OACA/oB,EAAAwnG,eACAxnG,EAAAynG,QAGA,MAEA,IAAA,gBACA,IAAA,sBAEA3xE,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAA24B,OACA34B,EAAAi3G,SACAj3G,EAAA61G,SACA71G,EAAA81G,WAGA,MAEA,IAAA,qBACA,IAAA,2BAEAhgF,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACAiP,EAAAi2C,SACAj2C,EAAAi9C,QACAj9C,EAAA+oB,OACA/oB,EAAA20H,SAGA,MAEA,IAAA,gBACA,IAAA,sBAEAF,EAAA,GAEA,IAAA,IAAA58F,EAAA,EAAA8jB,EAAA37C,EAAAm1B,OAAA9wC,OAAAwzC,EAAA8jB,EAAA9jB,IAAA,CAIA48F,EAAA5sI,KAFAstC,EAAAn1B,EAAAm1B,OAAA0C,KAMA/B,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACA0jI,EACAz0H,EAAA6uG,eAGA,MAGA,IAAA,kBACA,IAAA,wBAEA4lB,EAAA,GAEA,IAAA,IAAAx7E,EAAA,EAAAqH,EAAAtgD,EAAAm1B,OAAA9wC,OAAA40D,EAAAqH,EAAArH,IAAA,CAIAw7E,EAAA5sI,KAFAstC,EAAAn1B,EAAAm1B,OAAA8jB,KAMA,IAAAm2D,EAAApvG,EAAA6e,QAAAuwF,iBAEAplH,IAAAolH,IAEApvG,EAAA6e,QAAAuwF,aAAA,IAAA0e,GAAA1e,EAAAr+G,OAAA26H,SAAAtc,IAIAt5E,EAAA,IAAA6jF,GAAA35G,EAAAjP,MACA0jI,EACAz0H,EAAA6e,SAGA,MAEA,IAAA,iBACA,IAAA,0BAEAiX,EAAA4+F,EAAAj+F,MAAAz2B,GAEA,MAEA,IAAA,WAEA5L,QAAAkK,MAAA,oEAEA,MAEA,QAEAlK,QAAAC,KAAA,kDAAA2L,EAAAjP,KAAA,KAEA,SAIA+kC,EAAAjY,KAAA7d,EAAA6d,UAEA7zB,IAAAgW,EAAA3M,OAAAyiC,EAAAziC,KAAA2M,EAAA3M,OACA,IAAAyiC,EAAAgkB,uBAAA9vD,IAAAgW,EAAAgyB,WAAA8D,EAAA9D,SAAAhyB,EAAAgyB,UAEAiD,EAAAj1B,EAAA6d,MAAAiY,EAMA,OAAAb,GAIAq/F,eAAA,SAAA7V,EAAAv+F,GAEA,IAAAv4B,EAAA,GACAutC,EAAA,GAEA,QAAAlrC,IAAAy0H,EAAA,CAEA,IAAAz4G,EAAA,IAAAypH,GACAzpH,EAAA2sH,YAAAzyG,GAEA,IAAA,IAAAx8B,EAAA,EAAAyJ,EAAAsxH,EAAAp6H,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAsc,EAAAy+G,EAAA/6H,GAEA,GAAA,kBAAAsc,EAAAjP,KAAA,CAMA,IAFA,IAAAugB,EAAA,GAEAumB,EAAA,EAAAA,EAAA73B,EAAAk1B,UAAA7wC,OAAAwzC,IAAA,CAEA,IAAA7B,EAAAh2B,EAAAk1B,UAAA2C,QAEA7tC,IAAArC,EAAAquC,EAAAnY,QAEAl2B,EAAAquC,EAAAnY,MAAA7X,EAAAywB,MAAAT,IAIA1kB,EAAAzpB,KAAAF,EAAAquC,EAAAnY,OAIAqX,EAAAl1B,EAAA6d,MAAAvM,YAIAtnB,IAAArC,EAAAqY,EAAA6d,QAEAl2B,EAAAqY,EAAA6d,MAAA7X,EAAAywB,MAAAz2B,IAIAk1B,EAAAl1B,EAAA6d,MAAAl2B,EAAAqY,EAAA6d,OAQA,OAAAqX,GAIAs/F,gBAAA,SAAA/V,GAIA,IAFA,IAAAuE,EAAA,GAEAt/H,EAAA,EAAAA,EAAA+6H,EAAAp6H,OAAAX,IAAA,CAEA,IAAAsc,EAAAy+G,EAAA/6H,GAEA23H,EAAAkD,GAAA9nF,MAAAz2B,QAEAhW,IAAAgW,EAAA6d,OAAAw9F,EAAAx9F,KAAA7d,EAAA6d,MAEAmlG,EAAAn7H,KAAAwzH,GAIA,OAAA2H,GAIAoR,YAAA,SAAA3V,EAAA8F,GAEA,IAGAv+G,EAHAs7C,EAAApkD,KACAojB,EAAA,GAIA,SAAAs0G,EAAAr0G,GAIA,OAFA+gC,EAAAx6C,QAAAk+G,UAAAzkG,GAEAva,EAAAf,KAAAsb,EAAA,WAEA+gC,EAAAx6C,QAAAm+G,QAAA1kG,SAEAv2B,EAAA,WAEAs3D,EAAAx6C,QAAAo+G,UAAA3kG,GACA+gC,EAAAx6C,QAAAm+G,QAAA1kG,KAMA,QAAAv2B,IAAAy0H,GAAAA,EAAAp6H,OAAA,EAAA,CAEA,IAAAyiB,EAAA,IAAAw9G,GAAAC,IAEAv+G,EAAA,IAAAwgH,GAAA1/G,IACAi/G,eAAA7oH,KAAAyoH,aAEA,IAAA,IAAAjiI,EAAA,EAAAm1C,EAAA4lF,EAAAp6H,OAAAX,EAAAm1C,EAAAn1C,IAAA,CAEA,IAAAm5B,EAAA4hG,EAAA/6H,GACA68B,EAAA1D,EAAA0D,IAEA,GAAAn4B,MAAA6B,QAAAs2B,GAAA,CAIAD,EAAAzD,EAAAgB,MAAA,GAEA,IAAA,IAAAga,EAAA,EAAA8jB,EAAAp7B,EAAAl8B,OAAAwzC,EAAA8jB,EAAA9jB,IAAA,CAEA,IAAAg9F,EAAAt0G,EAAAsX,GAEAm1C,EAAA,4BAAA7iF,KAAA0qI,GAAAA,EAAAvzE,EAAAskE,aAAAiP,EAEAv0G,EAAAzD,EAAAgB,MAAAh2B,KAAA+sI,EAAA5nD,SAIA,CAIA,IAAA8nD,EAAA,4BAAA3qI,KAAA0yB,EAAA0D,KAAA1D,EAAA0D,IAAA+gC,EAAAskE,aAAA/oG,EAAA0D,IAEAD,EAAAzD,EAAAgB,MAAA+2G,EAAAE,KAQA,OAAAx0G,GAIA+zG,cAAA,SAAA5V,EAAAn+F,GAEA,SAAAy0G,EAAA3rI,EAAA2H,GAEA,MAAA,iBAAA3H,EAAAA,GAEAgL,QAAAC,KAAA,uEAAAjL,GAEA2H,EAAA3H,IAIA,IAAA82B,EAAA,GAEA,QAAAl2B,IAAAy0H,EAEA,IAAA,IAAA/6H,EAAA,EAAAyJ,EAAAsxH,EAAAp6H,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAsc,EAAAy+G,EAAA/6H,QAEAsG,IAAAgW,EAAA6c,OAEAzoB,QAAAC,KAAA,+CAAA2L,EAAA6d,WAIA7zB,IAAAs2B,EAAAtgB,EAAA6c,QAEAzoB,QAAAC,KAAA,sCAAA2L,EAAA6c,OAIA,IAAAoC,OAAA,GAIAA,EAFA72B,MAAA6B,QAAAq2B,EAAAtgB,EAAA6c,QAEA,IAAA2qD,GAAAlnD,EAAAtgB,EAAA6c,QAIA,IAAAQ,GAAAiD,EAAAtgB,EAAA6c,SAIA09B,aAAA,EAEAt7B,EAAApB,KAAA7d,EAAA6d,UAEA7zB,IAAAgW,EAAA3M,OAAA4rB,EAAA5rB,KAAA2M,EAAA3M,WAEArJ,IAAAgW,EAAAsd,UAAA2B,EAAA3B,QAAAy3G,EAAA/0H,EAAAsd,QAAA03G,UAEAhrI,IAAAgW,EAAAgY,QAAAiH,EAAAjH,OAAAD,UAAA/X,EAAAgY,aACAhuB,IAAAgW,EAAAke,QAAAe,EAAAf,OAAAnG,UAAA/X,EAAAke,aACAl0B,IAAAgW,EAAAuY,QAAA0G,EAAA1G,OAAAR,UAAA/X,EAAAuY,aACAvuB,IAAAgW,EAAAqc,WAAA4C,EAAA5C,SAAArc,EAAAqc,eAEAryB,IAAAgW,EAAAqgB,OAEApB,EAAA1B,MAAAw3G,EAAA/0H,EAAAqgB,KAAA,GAAA40G,IACAh2G,EAAAzB,MAAAu3G,EAAA/0H,EAAAqgB,KAAA,GAAA40G,UAIAjrI,IAAAgW,EAAA2d,SAAAsB,EAAAtB,OAAA3d,EAAA2d,aACA3zB,IAAAgW,EAAAjP,OAAAkuB,EAAAluB,KAAAiP,EAAAjP,WACA/G,IAAAgW,EAAAV,WAAA2f,EAAA3f,SAAAU,EAAAV,eAEAtV,IAAAgW,EAAA0d,YAAAuB,EAAAvB,UAAAq3G,EAAA/0H,EAAA0d,UAAAw3G,UACAlrI,IAAAgW,EAAAyd,YAAAwB,EAAAxB,UAAAs3G,EAAA/0H,EAAAyd,UAAAy3G,UACAlrI,IAAAgW,EAAA4d,aAAAqB,EAAArB,WAAA5d,EAAA4d,iBAEA5zB,IAAAgW,EAAAse,QAAAW,EAAAX,MAAAte,EAAAse,YAEAt0B,IAAAgW,EAAAqe,mBAAAY,EAAAZ,iBAAAre,EAAAqe,uBACAr0B,IAAAgW,EAAAue,kBAAAU,EAAAV,gBAAAve,EAAAue,iBAEA2B,EAAAlgB,EAAA6d,MAAAoB,EAMA,OAAAiB,GAIAq0G,YAAA,SAAAv0H,EAAAi1B,EAAAC,GAEA,IAAAjtC,EAkDA6tC,EAAAE,EAhDA,SAAAm/F,EAAA9hI,GAQA,YANArJ,IAAAirC,EAAA5hC,IAEAe,QAAAC,KAAA,yCAAAhB,GAIA4hC,EAAA5hC,GAIA,SAAA+hI,EAAA/hI,GAEA,QAAArJ,IAAAqJ,EAAA,CAEA,GAAAjL,MAAA6B,QAAAoJ,GAAA,CAIA,IAFA,IAAAie,EAAA,GAEA5tB,EAAA,EAAAyJ,EAAAkG,EAAAhP,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAm6B,EAAAxqB,EAAA3P,QAEAsG,IAAAkrC,EAAArX,IAEAzpB,QAAAC,KAAA,yCAAAwpB,GAIAvM,EAAAzpB,KAAAqtC,EAAArX,IAIA,OAAAvM,EAUA,YANAtnB,IAAAkrC,EAAA7hC,IAEAe,QAAAC,KAAA,yCAAAhB,GAIA6hC,EAAA7hC,IAMA,OAAA2M,EAAAjP,MAEA,IAAA,QAEA9I,EAAA,IAAAgqC,QAEAjoC,IAAAgW,EAAAkyB,YAEAz7B,OAAA0Q,UAAAnH,EAAAkyB,cAEAjqC,EAAAiqC,WAAA,IAAAyZ,GAAA3rC,EAAAkyB,kBAMAloC,IAAAgW,EAAAoyB,MAEA,QAAApyB,EAAAoyB,IAAArhC,KAEA9I,EAAAmqC,IAAA,IAAAgrE,GAAAp9F,EAAAoyB,IAAA6Z,MAAAjsC,EAAAoyB,IAAAvD,KAAA7uB,EAAAoyB,IAAAtD,KAEA,YAAA9uB,EAAAoyB,IAAArhC,OAEA9I,EAAAmqC,IAAA,IAAA+qE,GAAAn9F,EAAAoyB,IAAA6Z,MAAAjsC,EAAAoyB,IAAAu/D,WAMA,MAEA,IAAA,oBAEA1pG,EAAA,IAAAyhE,GAAA1pD,EAAA2pD,IAAA3pD,EAAA7G,OAAA6G,EAAA6uB,KAAA7uB,EAAA8uB,UAEA9kC,IAAAgW,EAAA6pD,QAAA5hE,EAAA4hE,MAAA7pD,EAAA6pD,YACA7/D,IAAAgW,EAAA4pD,OAAA3hE,EAAA2hE,KAAA5pD,EAAA4pD,WACA5/D,IAAAgW,EAAA+pD,YAAA9hE,EAAA8hE,UAAA/pD,EAAA+pD,gBACA//D,IAAAgW,EAAAgqD,aAAA/hE,EAAA+hE,WAAAhqD,EAAAgqD,iBACAhgE,IAAAgW,EAAA8pD,OAAA7hE,EAAA6hE,KAAArlE,OAAAM,OAAA,GAAAib,EAAA8pD,OAEA,MAEA,IAAA,qBAEA7hE,EAAA,IAAAinI,GAAAlvH,EAAAyuB,KAAAzuB,EAAA0uB,MAAA1uB,EAAA2uB,IAAA3uB,EAAA4uB,OAAA5uB,EAAA6uB,KAAA7uB,EAAA8uB,UAEA9kC,IAAAgW,EAAA4pD,OAAA3hE,EAAA2hE,KAAA5pD,EAAA4pD,WACA5/D,IAAAgW,EAAA8pD,OAAA7hE,EAAA6hE,KAAArlE,OAAAM,OAAA,GAAAib,EAAA8pD,OAEA,MAEA,IAAA,eAEA7hE,EAAA,IAAAonI,GAAArvH,EAAAisC,MAAAjsC,EAAA26E,WAEA,MAEA,IAAA,mBAEA1yF,EAAA,IAAAmnI,GAAApvH,EAAAisC,MAAAjsC,EAAA26E,WAEA,MAEA,IAAA,aAEA1yF,EAAA,IAAAgnI,GAAAjvH,EAAAisC,MAAAjsC,EAAA26E,UAAA36E,EAAAuzB,SAAAvzB,EAAAywD,OAEA,MAEA,IAAA,gBAEAxoE,EAAA,IAAAqnI,GAAAtvH,EAAAisC,MAAAjsC,EAAA26E,UAAA36E,EAAAjJ,MAAAiJ,EAAAhJ,QAEA,MAEA,IAAA,YAEA/O,EAAA,IAAA2mI,GAAA5uH,EAAAisC,MAAAjsC,EAAA26E,UAAA36E,EAAAuzB,SAAAvzB,EAAAkX,MAAAlX,EAAAu7E,SAAAv7E,EAAAywD,OAEA,MAEA,IAAA,kBAEAxoE,EAAA,IAAAqmI,GAAAtuH,EAAAisC,MAAAjsC,EAAAqxD,YAAArxD,EAAA26E,WAEA,MAEA,IAAA,aAEA1yF,GAAA,IAAAunI,IAAA9D,SAAA1rH,GAEA,MAEA,IAAA,cAEA5L,QAAAC,KAAA,sEAEA,IAAA,OAKApM,EAAA,IAAA+2D,GAHAlpB,EAAAq/F,EAAAn1H,EAAA81B,UACAE,EAAAo/F,EAAAp1H,EAAAg2B,WAIA,MAEA,IAAA,gBAEAF,EAAAq/F,EAAAn1H,EAAA81B,UACAE,EAAAo/F,EAAAp1H,EAAAg2B,UACA,IACAN,EAAA11B,EAAA01B,gBAEAztC,EAAA,IAAAs5G,GAAAzrE,EAAAE,EAHAh2B,EAAAy1B,QAIAC,eAAA,IAAAif,GAAA,IAAAkB,aAAAngB,EAAApkB,OAAA,IAEA,MAEA,IAAA,MAEArpB,EAAA,IAAA03G,GAEA,MAEA,IAAA,OAEA13G,EAAA,IAAAk6G,GAAAgzB,EAAAn1H,EAAA81B,UAAAs/F,EAAAp1H,EAAAg2B,UAAAh2B,EAAA4hE,MAEA,MAEA,IAAA,WAEA35E,EAAA,IAAAm7G,GAAA+xB,EAAAn1H,EAAA81B,UAAAs/F,EAAAp1H,EAAAg2B,WAEA,MAEA,IAAA,eAEA/tC,EAAA,IAAAk7G,GAAAgyB,EAAAn1H,EAAA81B,UAAAs/F,EAAAp1H,EAAAg2B,WAEA,MAEA,IAAA,aACA,IAAA,SAEA/tC,EAAA,IAAAw7G,GAAA0xB,EAAAn1H,EAAA81B,UAAAs/F,EAAAp1H,EAAAg2B,WAEA,MAEA,IAAA,SAEA/tC,EAAA,IAAAi3G,GAAAk2B,EAAAp1H,EAAAg2B,WAEA,MAEA,IAAA,QAEA/tC,EAAA,IAAA4kG,GAEA,MAEA,QAEA5kG,EAAA,IAAAipC,GA2CA,GAvCAjpC,EAAA41B,KAAA7d,EAAA6d,UAEA7zB,IAAAgW,EAAA3M,OAAApL,EAAAoL,KAAA2M,EAAA3M,WAEArJ,IAAAgW,EAAAob,QAEAnzB,EAAAmzB,OAAArD,UAAA/X,EAAAob,aAEApxB,IAAAgW,EAAAme,mBAAAl2B,EAAAk2B,iBAAAne,EAAAme,kBACAl2B,EAAAk2B,kBAAAl2B,EAAAmzB,OAAAgT,UAAAnmC,EAAA4lC,SAAA5lC,EAAA47B,WAAA57B,EAAAuZ,cAIAxX,IAAAgW,EAAA6tB,UAAA5lC,EAAA4lC,SAAA9V,UAAA/X,EAAA6tB,eACA7jC,IAAAgW,EAAAqc,UAAAp0B,EAAAo0B,SAAAtE,UAAA/X,EAAAqc,eACAryB,IAAAgW,EAAA6jB,YAAA57B,EAAA47B,WAAA9L,UAAA/X,EAAA6jB,iBACA75B,IAAAgW,EAAAwB,OAAAvZ,EAAAuZ,MAAAuW,UAAA/X,EAAAwB,aAIAxX,IAAAgW,EAAA4xB,aAAA3pC,EAAA2pC,WAAA5xB,EAAA4xB,iBACA5nC,IAAAgW,EAAA6xB,gBAAA5pC,EAAA4pC,cAAA7xB,EAAA6xB,eAEA7xB,EAAAm8D,cAEAnyE,IAAAgW,EAAAm8D,OAAA+e,OAAAjzF,EAAAk0E,OAAA+e,KAAAl7E,EAAAm8D,OAAA+e,WACAlxF,IAAAgW,EAAAm8D,OAAAgf,aAAAlzF,EAAAk0E,OAAAgf,WAAAn7E,EAAAm8D,OAAAgf,iBACAnxF,IAAAgW,EAAAm8D,OAAApzC,SAAA9gC,EAAAk0E,OAAApzC,OAAA/oB,EAAAm8D,OAAApzC,aACA/+B,IAAAgW,EAAAm8D,OAAAif,SAAAnzF,EAAAk0E,OAAAif,QAAArjE,UAAA/X,EAAAm8D,OAAAif,cACApxF,IAAAgW,EAAAm8D,OAAA30C,SAAAv/B,EAAAk0E,OAAA30C,OAAAtqB,KAAAq3H,YAAAv0H,EAAAm8D,OAAA30C,eAIAx9B,IAAAgW,EAAA2xB,UAAA1pC,EAAA0pC,QAAA3xB,EAAA2xB,cACA3nC,IAAAgW,EAAA8xB,gBAAA7pC,EAAA6pC,cAAA9xB,EAAA8xB,oBACA9nC,IAAAgW,EAAA+xB,cAAA9pC,EAAA8pC,YAAA/xB,EAAA+xB,kBACA/nC,IAAAgW,EAAAgyB,WAAA/pC,EAAA+pC,SAAAhyB,EAAAgyB,eACAhoC,IAAAgW,EAAAowB,SAAAnoC,EAAAmoC,OAAAvmC,KAAAmW,EAAAowB,aAEApmC,IAAAgW,EAAAmxB,SAIA,IAFA,IAAAA,EAAAnxB,EAAAmxB,SAEAztC,EAAA,EAAAA,EAAAytC,EAAA9sC,OAAAX,IAEAuE,EAAAwtB,IAAAvY,KAAAq3H,YAAApjG,EAAAztC,GAAAuxC,EAAAC,IAMA,GAAA,QAAAl1B,EAAAjP,KAAA,MAEA/G,IAAAgW,EAAAsyB,aAAArqC,EAAAqqC,WAAAtyB,EAAAsyB,YAIA,IAFA,IAAAutE,EAAA7/F,EAAA6/F,OAEA1yG,EAAA,EAAAA,EAAA0yG,EAAAx7G,OAAA8I,IAAA,CAEA,IAAAuvG,EAAAmD,EAAA1yG,GACAkoI,EAAAptI,EAAAksC,oBAAA,OAAAuoE,EAAAz0G,aAEA+B,IAAAqrI,GAEAptI,EAAAi4G,SAAAm1B,EAAA34B,EAAAnpE,WAQA,OAAAtrC,KAMA,IA0mBAorG,GA1mBA2hC,GAAA,CACAM,UAj/xCA,IAk/xCA7qH,sBAAAA,EACAC,sBAAAA,EACAC,iCAAAA,EACAC,iCAAAA,EACAC,wBAAAA,EACAC,wBAAAA,IAGAmqH,GAAA,CACAlqH,eAAAA,GACAC,oBAAAA,GACAC,uBAAAA,IAGAiqH,GAAA,CACAhqH,cAAAA,GACAC,2BAAAA,GACAC,0BAAAA,GACAC,aAAAA,GACAC,0BAAAA,GACAC,yBAAAA,IAQA,SAAAgqH,GAAAzuH,GAEA,oBAAA0uH,mBAEAphI,QAAAC,KAAA,+DAIA,oBAAAohI,OAEArhI,QAAAC,KAAA,mDAIAqxH,GAAAthI,KAAA8Y,KAAA4J,GAEA5J,KAAA2hB,QAAA,CAAAR,iBAAA,QAkFA,SAAAq3G,KAEAx4H,KAAAnM,KAAA,YAEAmM,KAAA+uC,MAAA,IAAAN,GAEAzuC,KAAAy4H,SAAA,GACAz4H,KAAA04H,YAAA,KA8RA,SAAAC,GAAA71H,GAEA9C,KAAAnM,KAAA,OAEAmM,KAAA8C,KAAAA,EA4DA,SAAA81H,GAAAC,EAAAv0H,EAAAupD,EAAAC,EAAAhrD,GAEA,IAAAg2H,EAAAh2H,EAAAi2H,OAAAF,IAAA/1H,EAAAi2H,OAAA,KAEA,GAAAD,EAAA,CAQA,IAEA3sI,EAAAsB,EAAAurI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAFAvpD,EAAA,IAAA0oD,GAIA,GAAAM,EAAAvyI,EAIA,IAFA,IAAA+yI,EAAAR,EAAAS,iBAAAT,EAAAS,eAAAT,EAAAvyI,EAAA+B,MAAA,MAEA9B,EAAA,EAAAyJ,EAAAqpI,EAAAnyI,OAAAX,EAAAyJ,GAAA,CAIA,OAFAqpI,EAAA9yI,MAIA,IAAA,IAEA2F,EAAAmtI,EAAA9yI,KAAA8d,EAAAupD,EACApgE,EAAA6rI,EAAA9yI,KAAA8d,EAAAwpD,EAEAgiB,EAAAojD,OAAA/mI,EAAAsB,GAEA,MAEA,IAAA,IAEAtB,EAAAmtI,EAAA9yI,KAAA8d,EAAAupD,EACApgE,EAAA6rI,EAAA9yI,KAAA8d,EAAAwpD,EAEAgiB,EAAAqjD,OAAAhnI,EAAAsB,GAEA,MAEA,IAAA,IAEAurI,EAAAM,EAAA9yI,KAAA8d,EAAAupD,EACAorE,EAAAK,EAAA9yI,KAAA8d,EAAAwpD,EACAorE,EAAAI,EAAA9yI,KAAA8d,EAAAupD,EACAsrE,EAAAG,EAAA9yI,KAAA8d,EAAAwpD,EAEAgiB,EAAAsjD,iBAAA8F,EAAAC,EAAAH,EAAAC,GAEA,MAEA,IAAA,IAEAD,EAAAM,EAAA9yI,KAAA8d,EAAAupD,EACAorE,EAAAK,EAAA9yI,KAAA8d,EAAAwpD,EACAorE,EAAAI,EAAA9yI,KAAA8d,EAAAupD,EACAsrE,EAAAG,EAAA9yI,KAAA8d,EAAAwpD,EACAsrE,EAAAE,EAAA9yI,KAAA8d,EAAAupD,EACAwrE,EAAAC,EAAA9yI,KAAA8d,EAAAwpD,EAEAgiB,EAAAyjD,cAAA2F,EAAAC,EAAAC,EAAAC,EAAAL,EAAAC,IAUA,MAAA,CAAAprE,QAAAirE,EAAAU,GAAAl1H,EAAAwrE,KAAAA,GApEA54E,QAAAkK,MAAA,0BAAAy3H,EAAA,oCAAA/1H,EAAA22H,WAAA,KA4EA,SAAAC,GAAA9vH,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GAvgBAyuH,GAAA5wI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAAggH,GAEAsB,qBAAA,EAEAC,WAAA,SAAAj4G,GAIA,OAFA3hB,KAAA2hB,QAAAA,EAEA3hB,MAIA+H,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,QAEAz6H,IAAAu2B,IAAAA,EAAA,SAEAv2B,IAAAkT,KAAA8vE,OAAAzsD,EAAArjB,KAAA8vE,KAAAzsD,GAEAA,EAAArjB,KAAA4J,QAAAq+G,WAAA5kG,GAEA,IAAA+gC,EAAApkD,KAEAirH,EAAA/D,GAAAnnH,IAAAsjB,GAEA,QAAAv2B,IAAAm+H,EAYA,OAVA7mE,EAAAx6C,QAAAk+G,UAAAzkG,GAEAjuB,WAAA,WAEAiyH,GAAAA,EAAA4D,GAEA7mE,EAAAx6C,QAAAm+G,QAAA1kG,IAEA,GAEA4nG,EAIAsN,MAAAl1G,GAAAv5B,KAAA,SAAA6H,GAEA,OAAAA,EAAA6C,SAEA1K,KAAA,SAAA0K,GAEA,OAAA8jI,kBAAA9jI,EAAA4vD,EAAAziC,WAEA73B,KAAA,SAAA+vI,GAEA3S,GAAA3uG,IAAA8K,EAAAw2G,GAEAxS,GAAAA,EAAAwS,GAEAz1E,EAAAx6C,QAAAm+G,QAAA1kG,KAEAvhB,MAAA,SAAA1b,GAEAmhI,GAAAA,EAAAnhI,GAEAg+D,EAAAx6C,QAAAo+G,UAAA3kG,GACA+gC,EAAAx6C,QAAAm+G,QAAA1kG,KAIA+gC,EAAAx6C,QAAAk+G,UAAAzkG,MAsBA97B,OAAAM,OAAA2wI,GAAA/wI,UAAA,CAEAyrI,OAAA,SAAA/mI,EAAAsB,GAMA,OAJAuS,KAAA04H,YAAA,IAAA1H,GACAhxH,KAAAy4H,SAAA9tI,KAAAqV,KAAA04H,aACA14H,KAAA04H,YAAAxF,OAAA/mI,EAAAsB,GAEAuS,MAIAmzH,OAAA,SAAAhnI,EAAAsB,GAIA,OAFAuS,KAAA04H,YAAAvF,OAAAhnI,EAAAsB,GAEAuS,MAIAozH,iBAAA,SAAAC,EAAAC,EAAA1J,EAAAC,GAIA,OAFA7pH,KAAA04H,YAAAtF,iBAAAC,EAAAC,EAAA1J,EAAAC,GAEA7pH,MAIAuzH,cAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA/J,EAAAC,GAIA,OAFA7pH,KAAA04H,YAAAnF,cAAAC,EAAAC,EAAAC,EAAAC,EAAA/J,EAAAC,GAEA7pH,MAIA4zH,WAAA,SAAA7iB,GAIA,OAFA/wG,KAAA04H,YAAA9E,WAAA7iB,GAEA/wG,MAIA85H,SAAA,SAAAC,EAAAC,GAEA,SAAAC,EAAAC,GAIA,IAFA,IAAAjiG,EAAA,GAEAzxC,EAAA,EAAAyJ,EAAAiqI,EAAA/yI,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAA2zI,EAAAD,EAAA1zI,GAEA4zI,EAAA,IAAAlJ,GACAkJ,EAAAtJ,OAAAqJ,EAAArJ,OAEA74F,EAAAttC,KAAAyvI,GAIA,OAAAniG,EAIA,SAAAoiG,EAAA5mB,EAAA6mB,GASA,IAPA,IAAAC,EAAAD,EAAAnzI,OAMA8oH,GAAA,EACAjpH,EAAAuzI,EAAA,EAAA3jH,EAAA,EAAAA,EAAA2jH,EAAAvzI,EAAA4vB,IAAA,CAEA,IAAA4jH,EAAAF,EAAAtzI,GACAyzI,EAAAH,EAAA1jH,GAEA8jH,EAAAD,EAAAtuI,EAAAquI,EAAAruI,EACAwuI,EAAAF,EAAAhtI,EAAA+sI,EAAA/sI,EAEA,GAAAgB,KAAAkC,IAAAgqI,GAAAphI,OAAAwQ,QAAA,CAUA,GAPA4wH,EAAA,IAEAH,EAAAF,EAAA1jH,GAAA8jH,GAAAA,EACAD,EAAAH,EAAAtzI,GAAA2zI,GAAAA,GAIAlnB,EAAAhmH,EAAA+sI,EAAA/sI,GAAAgmH,EAAAhmH,EAAAgtI,EAAAhtI,EAAA,SAEA,GAAAgmH,EAAAhmH,IAAA+sI,EAAA/sI,GAEA,GAAAgmH,EAAAtnH,IAAAquI,EAAAruI,EAAA,OAAA,MAGA,CAEA,IAAAyuI,EAAAD,GAAAlnB,EAAAtnH,EAAAquI,EAAAruI,GAAAuuI,GAAAjnB,EAAAhmH,EAAA+sI,EAAA/sI,GACA,GAAA,IAAAmtI,EAAA,OAAA,EACA,GAAAA,EAAA,EAAA,SACA3qB,GAAAA,OAIA,CAGA,GAAAwD,EAAAhmH,IAAA+sI,EAAA/sI,EAAA,SAEA,GAAAgtI,EAAAtuI,GAAAsnH,EAAAtnH,GAAAsnH,EAAAtnH,GAAAquI,EAAAruI,GACAquI,EAAAruI,GAAAsnH,EAAAtnH,GAAAsnH,EAAAtnH,GAAAsuI,EAAAtuI,EAAA,OAAA,GAOA,OAAA8jH,EAIA,IAAAa,EAAAF,GAAAE,YAEA2nB,EAAAz4H,KAAAy4H,SACA,GAAA,IAAAA,EAAAtxI,OAAA,MAAA,GAEA,IAAA,IAAA6yI,EAAA,OAAAC,EAAAxB,GAGA,IAAAoC,EAAAV,EAAAC,EAAAniG,EAAA,GAEA,GAAA,IAAAwgG,EAAAtxI,OAMA,OAJAgzI,EAAA1B,EAAA,IACA2B,EAAA,IAAAlJ,IACAJ,OAAAqJ,EAAArJ,OACA74F,EAAAttC,KAAAyvI,GACAniG,EAIA,IAAA6iG,GAAAhqB,EAAA2nB,EAAA,GAAArL,aACA0N,EAAAf,GAAAe,EAAAA,EAIA,IAIAC,EAkGAC,EAtGAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,EAGAF,EAAAE,QAAAtuI,EACAquI,EAAAC,GAAA,GAEA,IAAA,IAAA50I,EAAA,EAAAyJ,EAAAwoI,EAAAtxI,OAAAX,EAAAyJ,EAAAzJ,IAIAq0I,EAAA/pB,EADAiqB,GADAZ,EAAA1B,EAAAjyI,IACA4mI,cAEAyN,EAAAd,GAAAc,EAAAA,KAIAC,GAAAI,EAAAE,IAAAA,IAEAF,EAAAE,GAAA,CAAAhyI,EAAA,IAAA8nI,GAAAlqI,EAAA+zI,GACAG,EAAAE,GAAAhyI,EAAA0nI,OAAAqJ,EAAArJ,OAEAgK,GAAAM,IACAD,EAAAC,GAAA,IAMAD,EAAAC,GAAAzwI,KAAA,CAAAiF,EAAAuqI,EAAAnzI,EAAA+zI,EAAA,KASA,IAAAG,EAAA,GAAA,OAAAjB,EAAAxB,GAGA,GAAAyC,EAAA/zI,OAAA,EAAA,CAKA,IAHA,IAAAk0I,GAAA,EACAC,EAAA,GAEAC,EAAA,EAAAC,EAAAN,EAAA/zI,OAAAo0I,EAAAC,EAAAD,IAEAN,EAAAM,GAAA,GAIA,IAAA,IAAAE,EAAA,EAAAC,EAAAR,EAAA/zI,OAAAs0I,EAAAC,EAAAD,IAIA,IAFA,IAAAE,EAAAR,EAAAM,GAEAG,EAAA,EAAAA,EAAAD,EAAAx0I,OAAAy0I,IAAA,CAKA,IAHA,IAAAC,EAAAF,EAAAC,GACAE,GAAA,EAEAC,EAAA,EAAAA,EAAAb,EAAA/zI,OAAA40I,IAEA1B,EAAAwB,EAAA70I,EAAAk0I,EAAAa,GAAA/0I,KAEAy0I,IAAAM,GAAAT,EAAA3wI,KAAA,CAAAqxI,MAAAP,EAAAQ,IAAAF,EAAA1sB,KAAAusB,IACAE,GAEAA,GAAA,EACAb,EAAAc,GAAApxI,KAAAkxI,IAIAR,GAAA,GAQAS,GAEAb,EAAAQ,GAAA9wI,KAAAkxI,GASAP,EAAAn0I,OAAA,IAGAk0I,IAAAF,EAAAF,IAQA,IAAA,IAAAjiG,EAAA,EAAA2C,EAAAu/F,EAAA/zI,OAAA6xC,EAAA2C,EAAA3C,IAAA,CAGAf,EAAAttC,KADAyvI,EAAAc,EAAAliG,GAAA5vC,GAIA,IAAA,IAAAuxC,EAAA,EAAA8jB,GAFAu8E,EAAAG,EAAAniG,IAEA7xC,OAAAwzC,EAAA8jB,EAAA9jB,IAEAy/F,EAAAnpB,MAAAtmH,KAAAqwI,EAAArgG,GAAA/qC,GAQA,OAAAqoC,KAoBA1wC,OAAAM,OAAA8wI,GAAAlxI,UAAA,CAEA+wH,QAAA,EAEAC,eAAA,SAAAJ,EAAAv8E,QAEAhvC,IAAAgvC,IAAAA,EAAA,KAKA,IAHA,IAAA7D,EAAA,GACAikG,EAcA,SAAA7jB,EAAAv8E,EAAAh5B,GAUA,IARA,IAAAq5H,EAAAjxI,MAAApC,KAAAoC,MAAApC,KAAAuvH,GAAAtwH,OAAAswH,GAAA/vH,MAAA,IACAgc,EAAAw3B,EAAAh5B,EAAAg+E,WACAs7C,GAAAt5H,EAAA25B,YAAA4/F,KAAAv5H,EAAA25B,YAAA6/F,KAAAx5H,EAAAy5H,oBAAAj4H,EAEA43H,EAAA,GAEAruE,EAAA,EAAAC,EAAA,EAEAtnE,EAAA,EAAAA,EAAA21I,EAAAh1I,OAAAX,IAAA,CAEA,IAAAqyI,EAAAsD,EAAA31I,GAEA,GAAA,OAAAqyI,EAEAhrE,EAAA,EACAC,GAAAsuE,MAEA,CAEA,IAAAI,EAAA5D,GAAAC,EAAAv0H,EAAAupD,EAAAC,EAAAhrD,GACA+qD,GAAA2uE,EAAA3uE,QACAquE,EAAAvxI,KAAA6xI,EAAA1sD,OAMA,OAAAosD,EA3CAO,CAAApkB,EAAAv8E,EAAA97B,KAAA8C,MAEA9b,EAAA,EAAA0zF,EAAAwhD,EAAA/0I,OAAAH,EAAA0zF,EAAA1zF,IAEAkE,MAAAzD,UAAAkD,KAAA89F,MAAAxwD,EAAAikG,EAAAl1I,GAAA8yI,YAIA,OAAA7hG,KA+HAyhG,GAAAjyI,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAAqhH,GAEA3xH,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,GAEA,IAAAnjE,EAAApkD,KAEA8I,EAAA,IAAAogH,GAAAlpH,KAAA4J,SACAd,EAAAggH,QAAA9oH,KAAA8vE,MACAhnE,EAAAf,KAAAsb,EAAA,SAAAg1F,GAEA,IAAAkJ,EAEA,IAEAA,EAAAnpF,KAAAmB,MAAA8+E,GAEA,MAAAjyH,GAEA8Q,QAAAC,KAAA,yFACAoqH,EAAAnpF,KAAAmB,MAAA8+E,EAAAqkB,UAAA,GAAArkB,EAAAlxH,OAAA,IAIA,IAAAoxH,EAAAn0D,EAAA7qB,MAAAgoF,GAEA8F,GAAAA,EAAA9O,IAEA+O,EAAAC,IAIAhuF,MAAA,SAAAgoF,GAEA,OAAA,IAAAoX,GAAApX,MAYA,IAAAob,GAAA,CAEAhgI,WAAA,WAQA,YANA7P,IAAAqpG,KAEAA,GAAA,IAAAnsG,OAAA2yI,cAAA3yI,OAAA4yI,qBAIAzmC,IAIAxhC,WAAA,SAAAzoE,GAEAiqG,GAAAjqG,IAUA,SAAA2wI,GAAAjzH,GAEA4+G,GAAAthI,KAAA8Y,KAAA4J,GAwDA,SAAAkzH,GAAA5oE,EAAAC,EAAAspB,GAEA60C,GAAAprI,KAAA8Y,UAAAlT,EAAA2wF,GAEA,IAAAvsC,GAAA,IAAAzC,IAAAj3B,IAAA08C,GACA/iB,GAAA,IAAA1C,IAAAj3B,IAAA28C,GAEA4oE,EAAA,IAAA1zG,GAAA6nB,EAAA/qD,EAAA+qD,EAAAlzB,EAAAkzB,EAAAxlD,GACAsxI,EAAA,IAAA3zG,GAAA8nB,EAAAhrD,EAAAgrD,EAAAnzB,EAAAmzB,EAAAzlD,GAGA6+H,EAAA97H,KAAAorB,KAAAprB,KAAAgmB,IACAsS,EAAAwjG,EAAA97H,KAAAorB,KAAA,KAEA7Z,KAAA49E,GAAAC,aAAA,GAAAzxF,KAAA2wI,GAAAxkH,IAAAykH,GAAAhkH,eAAAuxG,GACAvqH,KAAA49E,GAAAC,aAAA,GAAAzxF,KAAA2wI,GAAAnkH,IAAAokH,GAAAhkH,eAAA+N,GAkCA,SAAAk2G,GAAAluF,EAAA0uC,GAEA60C,GAAAprI,KAAA8Y,UAAAlT,EAAA2wF,GAEA,IAAAvsC,GAAA,IAAAzC,IAAAj3B,IAAAu3B,GAGA/uC,KAAA49E,GAAAC,aAAA,GAAArmE,IAAA05B,EAAA/qD,EAAA+qD,EAAAlzB,EAAAkzB,EAAAxlD,GAAAstB,eAAA,EAAAvqB,KAAAorB,KAAAprB,KAAAgmB,KA5GAooH,GAAAp1I,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA8lG,GAAA/gI,WAAA,CAEA4wB,YAAAwkH,GAEA90H,KAAA,SAAAsb,EAAAgkG,EAAAC,EAAAC,GAEA,IAAAnjE,EAAApkD,KAEA8I,EAAA,IAAAogH,GAAA9kE,EAAAx6C,SACAd,EAAAqjH,gBAAA,eACArjH,EAAAggH,QAAA1kE,EAAA0rB,MACAhnE,EAAAf,KAAAsb,EAAA,SAAA8xC,GAEA,IAIA,IAAA+nE,EAAA/nE,EAAAhqE,MAAA,GAEAwxI,GAAAhgI,aACAwgI,gBAAAD,EAAA,SAAAE,GAEA/V,EAAA+V,KAIA,MAAAh3I,GAEAmhI,EAEAA,EAAAnhI,GAIA8Q,QAAAkK,MAAAhb,GAIAg+D,EAAAx6C,QAAAo+G,UAAA3kG,KAIAikG,EAAAC,MA6BAuV,GAAAr1I,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA4vG,GAAA7qI,WAAA,CAEA4wB,YAAAykH,GAEAO,wBAAA,EAEAjxI,KAAA,SAAAvD,GAIA,OAFAypI,GAAA7qI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,MAIA6iB,OAAA,SAAAC,GAMA,OAJAwvG,GAAA7qI,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,MAyBAm6G,GAAAx1I,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA4vG,GAAA7qI,WAAA,CAEA4wB,YAAA4kH,GAEAK,qBAAA,EAEAlxI,KAAA,SAAAvD,GAIA,OAFAypI,GAAA7qI,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,MAIA6iB,OAAA,SAAAC,GAMA,OAJAwvG,GAAA7qI,UAAAo7B,OAAA37B,KAAA8Y,KAAA8iB,MAUA,IAAAy6G,GAAA,IAAA/wG,GACAgxG,GAAA,IAAAhxG,GAMA,SAAAixG,KAEAz9H,KAAAnM,KAAA,eAEAmM,KAAA/D,OAAA,EAEA+D,KAAA09H,OAAA,KAEA19H,KAAAuwF,QAAA,IAAA/jC,GACAxsD,KAAAuwF,QAAAr9D,OAAAL,OAAA,GACA7yB,KAAAuwF,QAAAtvE,kBAAA,EAEAjhB,KAAAwwF,QAAA,IAAAhkC,GACAxsD,KAAAwwF,QAAAt9D,OAAAL,OAAA,GACA7yB,KAAAwwF,QAAAvvE,kBAAA,EAEAjhB,KAAA29H,OAAA,CACAhxE,MAAA,KACAF,IAAA,KACAxwD,OAAA,KACA01B,KAAA,KACAC,IAAA,KACA86B,KAAA,KACAgxE,OAAA,MAwEA,SAAAE,GAAAC,GAEA79H,KAAA69H,eAAA/wI,IAAA+wI,GAAAA,EAEA79H,KAAAuH,UAAA,EACAvH,KAAA89H,QAAA,EACA99H,KAAA+9H,YAAA,EAEA/9H,KAAAg+H,SAAA,EA3EAz2I,OAAAM,OAAA41I,GAAAh2I,UAAA,CAEAqd,OAAA,SAAAwlB,GAEA,IAAA7/B,EAAAuV,KAAA29H,OAMA,GAJAlzI,EAAAkiE,QAAAriC,EAAAqiC,OAAAliE,EAAAgiE,MAAAniC,EAAAmiC,KACAhiE,EAAAwR,SAAAquB,EAAAruB,OAAA+D,KAAA/D,QAAAxR,EAAAknC,OAAArH,EAAAqH,MACAlnC,EAAAmnC,MAAAtH,EAAAsH,KAAAnnC,EAAAiiE,OAAApiC,EAAAoiC,MAAAjiE,EAAAizI,SAAA19H,KAAA09H,OAEA,CAEAjzI,EAAAkiE,MAAAriC,EAAAqiC,MACAliE,EAAAgiE,IAAAniC,EAAAmiC,IACAhiE,EAAAwR,OAAAquB,EAAAruB,OAAA+D,KAAA/D,OACAxR,EAAAknC,KAAArH,EAAAqH,KACAlnC,EAAAmnC,IAAAtH,EAAAsH,IACAnnC,EAAAiiE,KAAApiC,EAAAoiC,KACAjiE,EAAAizI,OAAA19H,KAAA09H,OAKA,IAIAO,EAAAC,EAJA1zG,EAAAF,EAAAE,iBAAApS,QACA+lH,EAAA1zI,EAAAizI,OAAA,EACAU,EAAAD,EAAA1zI,EAAAknC,KAAAlnC,EAAAkiE,MACA0xE,EAAA5zI,EAAAknC,KAAAljC,KAAAm/C,IAAAr5B,GAAAC,QAAA/pB,EAAAgiE,IAAA,IAAAhiE,EAAAiiE,KAKA8wE,GAAA7lH,SAAA,KAAAwmH,EACAZ,GAAA5lH,SAAA,IAAAwmH,EAOA3zG,EAAA7S,SAAA,GAAA,EAAAltB,EAAAknC,OAFAusG,EAAAG,EAAA5zI,EAAAwR,OAAAmiI,IADAH,GAAAI,EAAA5zI,EAAAwR,OAAAmiI,IAIA5zG,EAAA7S,SAAA,IAAAumH,EAAAD,IAAAC,EAAAD,GAEAj+H,KAAAuwF,QAAA/lE,iBAAAp+B,KAAAo+B,GAOAA,EAAA7S,SAAA,GAAA,EAAAltB,EAAAknC,OAFAusG,EAAAG,EAAA5zI,EAAAwR,OAAAmiI,IADAH,GAAAI,EAAA5zI,EAAAwR,OAAAmiI,IAIA5zG,EAAA7S,SAAA,IAAAumH,EAAAD,IAAAC,EAAAD,GAEAj+H,KAAAwwF,QAAAhmE,iBAAAp+B,KAAAo+B,GAIAxqB,KAAAuwF,QAAA5lE,YAAAv+B,KAAAk+B,EAAAK,aAAA5R,SAAAykH,IACAx9H,KAAAwwF,QAAA7lE,YAAAv+B,KAAAk+B,EAAAK,aAAA5R,SAAAwkH,OAsBAh2I,OAAAM,OAAA+1I,GAAAn2I,UAAA,CAEA06C,MAAA,WAEAniC,KAAAuH,WAAA,oBAAA9d,YAAAE,KAAAF,aAAAC,MAEAsW,KAAA89H,QAAA99H,KAAAuH,UACAvH,KAAA+9H,YAAA,EACA/9H,KAAAg+H,SAAA,GAIA38H,KAAA,WAEArB,KAAAs+H,iBACAt+H,KAAAg+H,SAAA,EACAh+H,KAAA69H,WAAA,GAIAS,eAAA,WAGA,OADAt+H,KAAAu+H,WACAv+H,KAAA+9H,aAIAQ,SAAA,WAEA,IAAAl3E,EAAA,EAEA,GAAArnD,KAAA69H,YAAA79H,KAAAg+H,QAGA,OADAh+H,KAAAmiC,QACA,EAIA,GAAAniC,KAAAg+H,QAAA,CAEA,IAAA33H,GAAA,oBAAA5c,YAAAE,KAAAF,aAAAC,MAEA29D,GAAAhhD,EAAArG,KAAA89H,SAAA,IACA99H,KAAA89H,QAAAz3H,EAEArG,KAAA+9H,aAAA12E,EAIA,OAAAA,KAUA,IAAAm3E,GAAA,IAAAn1G,GACAo1G,GAAA,IAAAp8G,GACAq8G,GAAA,IAAAr1G,GACAs1G,GAAA,IAAAt1G,GAEA,SAAAu1G,KAEA5qG,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,gBAEAmM,KAAAnD,QAAA8/H,GAAAhgI,aAEAqD,KAAA6+H,KAAA7+H,KAAAnD,QAAAiiI,aACA9+H,KAAA6+H,KAAAE,QAAA/+H,KAAAnD,QAAAmiI,aAEAh/H,KAAA/J,OAAA,KAEA+J,KAAAi/H,UAAA,EAIAj/H,KAAAk/H,OAAA,IAAAtB,GAmHA,SAAAuB,GAAAvrH,GAEAogB,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,QAEAmM,KAAA4T,SAAAA,EACA5T,KAAAnD,QAAA+W,EAAA/W,QAEAmD,KAAA6+H,KAAA7+H,KAAAnD,QAAAiiI,aACA9+H,KAAA6+H,KAAAE,QAAAnrH,EAAAwrH,YAEAp/H,KAAAq/H,UAAA,EAEAr/H,KAAAm1D,OAAA,KACAn1D,KAAAs/H,OAAA,EACAt/H,KAAAyG,MAAA,EACAzG,KAAAu/H,UAAA,EACAv/H,KAAAw/H,QAAA,EACAx/H,KAAA8a,OAAA,EACA9a,KAAAG,cAAArT,EACAkT,KAAAoG,aAAA,EACApG,KAAAy/H,WAAA,EACAz/H,KAAA0/H,oBAAA,EACA1/H,KAAA2/H,WAAA,QAEA3/H,KAAA4/H,WAAA,EACA5/H,KAAA6/H,UAAA,EAEA7/H,KAAA8/H,QAAA,GA5IAlB,GAAAn3I,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAAumH,GAEAQ,SAAA,WAEA,OAAAp/H,KAAA6+H,MAIAkB,aAAA,WAWA,OATA,OAAA//H,KAAA/J,SAEA+J,KAAA6+H,KAAA7tC,WAAAhxF,KAAA/J,QACA+J,KAAA/J,OAAA+6F,WAAAhxF,KAAAnD,QAAAmiI,aACAh/H,KAAA6+H,KAAAE,QAAA/+H,KAAAnD,QAAAmiI,aACAh/H,KAAA/J,OAAA,MAIA+J,MAIAggI,UAAA,WAEA,OAAAhgI,KAAA/J,QAIAgqI,UAAA,SAAA/zI,GAiBA,OAfA,OAAA8T,KAAA/J,QAEA+J,KAAA6+H,KAAA7tC,WAAAhxF,KAAA/J,QACA+J,KAAA/J,OAAA+6F,WAAAhxF,KAAAnD,QAAAmiI,cAIAh/H,KAAA6+H,KAAA7tC,WAAAhxF,KAAAnD,QAAAmiI,aAIAh/H,KAAA/J,OAAA/J,EACA8T,KAAA6+H,KAAAE,QAAA/+H,KAAA/J,QACA+J,KAAA/J,OAAA8oI,QAAA/+H,KAAAnD,QAAAmiI,aAEAh/H,MAIAkgI,gBAAA,WAEA,OAAAlgI,KAAA6+H,KAAAA,KAAA3yI,OAIAi0I,gBAAA,SAAAj0I,GAIA,OAFA8T,KAAA6+H,KAAAA,KAAAuB,gBAAAl0I,EAAA8T,KAAAnD,QAAAqD,YAAA,KAEAF,MAIAo3B,kBAAA,SAAAQ,GAEA5D,GAAAvsC,UAAA2vC,kBAAAlwC,KAAA8Y,KAAA43B,GAEA,IAAAhkB,EAAA5T,KAAAnD,QAAA+W,SACAsb,EAAAlvB,KAAAkvB,GAQA,GANAlvB,KAAAi/H,UAAAj/H,KAAAk/H,OAAAX,WAEAv+H,KAAA2qB,YAAAuG,UAAAstG,GAAAC,GAAAC,IAEAC,GAAAnnH,IAAA,EAAA,GAAA,GAAAkS,gBAAA+0G,IAEA7qH,EAAAysH,UAAA,CAIA,IAAAjc,EAAApkH,KAAAnD,QAAAqD,YAAAF,KAAAi/H,UAEArrH,EAAAysH,UAAAC,wBAAA9B,GAAAryI,EAAAi4H,GACAxwG,EAAA2sH,UAAAD,wBAAA9B,GAAA/wI,EAAA22H,GACAxwG,EAAA4sH,UAAAF,wBAAA9B,GAAA/8G,EAAA2iG,GACAxwG,EAAA6sH,SAAAH,wBAAA3B,GAAAxyI,EAAAi4H,GACAxwG,EAAA8sH,SAAAJ,wBAAA3B,GAAAlxI,EAAA22H,GACAxwG,EAAA+sH,SAAAL,wBAAA3B,GAAAl9G,EAAA2iG,GACAxwG,EAAAgtH,IAAAN,wBAAApxG,EAAA/iC,EAAAi4H,GACAxwG,EAAAitH,IAAAP,wBAAApxG,EAAAzhC,EAAA22H,GACAxwG,EAAAktH,IAAAR,wBAAApxG,EAAAzN,EAAA2iG,QAIAxwG,EAAAqc,YAAAuuG,GAAAryI,EAAAqyI,GAAA/wI,EAAA+wI,GAAA/8G,GACA7N,EAAAmtH,eAAApC,GAAAxyI,EAAAwyI,GAAAlxI,EAAAkxI,GAAAl9G,EAAAyN,EAAA/iC,EAAA+iC,EAAAzhC,EAAAyhC,EAAAzN,MA8CA09G,GAAA13I,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAsR,GAAAvsC,WAAA,CAEA4wB,YAAA8mH,GAEA6B,UAAA,WAEA,OAAAhhI,KAAA6+H,MAIAoC,cAAA,SAAAC,GAOA,OALAlhI,KAAA0/H,oBAAA,EACA1/H,KAAA2/H,WAAA,YACA3/H,KAAAnX,OAAAq4I,EACAlhI,KAAA++H,UAEA/+H,MAIAmhI,sBAAA,SAAAC,GAOA,OALAphI,KAAA0/H,oBAAA,EACA1/H,KAAA2/H,WAAA,YACA3/H,KAAAnX,OAAAmX,KAAAnD,QAAAwkI,yBAAAD,GACAphI,KAAA++H,UAEA/+H,MAIAshI,qBAAA,SAAAC,GAOA,OALAvhI,KAAA0/H,oBAAA,EACA1/H,KAAA2/H,WAAA,kBACA3/H,KAAAnX,OAAAmX,KAAAnD,QAAA2kI,wBAAAD,GACAvhI,KAAA++H,UAEA/+H,MAIAyhI,UAAA,SAAArE,GAOA,OALAp9H,KAAAm1D,OAAAioE,EACAp9H,KAAA2/H,WAAA,SAEA3/H,KAAAq/H,UAAAr/H,KAAAR,OAEAQ,MAIAR,KAAA,SAAAkiI,GAIA,QAFA50I,IAAA40I,IAAAA,EAAA,IAEA,IAAA1hI,KAAAy/H,UAAA,CAOA,IAAA,IAAAz/H,KAAA0/H,mBAAA,CAOA1/H,KAAA4/H,WAAA5/H,KAAAnD,QAAAqD,YAAAwhI,EAEA,IAAA74I,EAAAmX,KAAAnD,QAAA8kI,qBAeA,OAdA94I,EAAAssE,OAAAn1D,KAAAm1D,OACAtsE,EAAA4d,KAAAzG,KAAAyG,KACA5d,EAAA02I,UAAAv/H,KAAAu/H,UACA12I,EAAA22I,QAAAx/H,KAAAw/H,QACA32I,EAAA+4I,QAAA5hI,KAAA6hI,QAAA1+B,KAAAnjG,MACAnX,EAAAs5C,MAAAniC,KAAA4/H,WAAA5/H,KAAA6/H,UAAA7/H,KAAA8a,OAAA9a,KAAAG,UAEAH,KAAAy/H,WAAA,EAEAz/H,KAAAnX,OAAAA,EAEAmX,KAAA8hI,UAAA9hI,KAAAs/H,QACAt/H,KAAA+hI,gBAAA/hI,KAAAoG,cAEApG,KAAA++H,UAtBA7nI,QAAAC,KAAA,yDAPAD,QAAAC,KAAA,2CAiCAoI,MAAA,WAEA,IAAA,IAAAS,KAAA0/H,mBA4BA,OArBA,IAAA1/H,KAAAy/H,YAIAz/H,KAAA6/H,WAAApxI,KAAAsD,IAAAiO,KAAAnD,QAAAqD,YAAAF,KAAA4/H,WAAA,GAAA5/H,KAAAoG,cAEA,IAAApG,KAAAyG,OAIAzG,KAAA6/H,UAAA7/H,KAAA6/H,WAAA7/H,KAAAG,UAAAH,KAAAm1D,OAAAh1D,WAIAH,KAAAnX,OAAAwY,OACArB,KAAAnX,OAAA+4I,QAAA,KAEA5hI,KAAAy/H,WAAA,GAIAz/H,KA1BA9I,QAAAC,KAAA,qDA8BAkK,KAAA,WAEA,IAAA,IAAArB,KAAA0/H,mBAaA,OANA1/H,KAAA6/H,UAAA,EAEA7/H,KAAAnX,OAAAwY,OACArB,KAAAnX,OAAA+4I,QAAA,KACA5hI,KAAAy/H,WAAA,EAEAz/H,KAXA9I,QAAAC,KAAA,qDAeA4nI,QAAA,WAEA,GAAA/+H,KAAA8/H,QAAA34I,OAAA,EAAA,CAEA6Y,KAAAnX,OAAAk2I,QAAA/+H,KAAA8/H,QAAA,IAEA,IAAA,IAAAt5I,EAAA,EAAAyJ,EAAA+P,KAAA8/H,QAAA34I,OAAAX,EAAAyJ,EAAAzJ,IAEAwZ,KAAA8/H,QAAAt5I,EAAA,GAAAu4I,QAAA/+H,KAAA8/H,QAAAt5I,IAIAwZ,KAAA8/H,QAAA9/H,KAAA8/H,QAAA34I,OAAA,GAAA43I,QAAA/+H,KAAAghI,kBAIAhhI,KAAAnX,OAAAk2I,QAAA/+H,KAAAghI,aAIA,OAAAhhI,MAIAgxF,WAAA,WAEA,GAAAhxF,KAAA8/H,QAAA34I,OAAA,EAAA,CAEA6Y,KAAAnX,OAAAmoG,WAAAhxF,KAAA8/H,QAAA,IAEA,IAAA,IAAAt5I,EAAA,EAAAyJ,EAAA+P,KAAA8/H,QAAA34I,OAAAX,EAAAyJ,EAAAzJ,IAEAwZ,KAAA8/H,QAAAt5I,EAAA,GAAAwqG,WAAAhxF,KAAA8/H,QAAAt5I,IAIAwZ,KAAA8/H,QAAA9/H,KAAA8/H,QAAA34I,OAAA,GAAA6pG,WAAAhxF,KAAAghI,kBAIAhhI,KAAAnX,OAAAmoG,WAAAhxF,KAAAghI,aAIA,OAAAhhI,MAIAgiI,WAAA,WAEA,OAAAhiI,KAAA8/H,SAIAmC,WAAA,SAAA/1I,GAgBA,OAdAA,IAAAA,EAAA,KAEA,IAAA8T,KAAAy/H,WAEAz/H,KAAAgxF,aACAhxF,KAAA8/H,QAAA5zI,EACA8T,KAAA++H,WAIA/+H,KAAA8/H,QAAA5zI,EAIA8T,MAIA8hI,UAAA,SAAA51I,GAIA,GAFA8T,KAAAs/H,OAAApzI,OAEAY,IAAAkT,KAAAnX,OAAAy2I,OAQA,OANA,IAAAt/H,KAAAy/H,WAEAz/H,KAAAnX,OAAAy2I,OAAAc,gBAAApgI,KAAAs/H,OAAAt/H,KAAAnD,QAAAqD,YAAA,KAIAF,MAIAkiI,UAAA,WAEA,OAAAliI,KAAAs/H,QAIAU,UAAA,WAEA,OAAAhgI,KAAAgiI,aAAA,IAIA/B,UAAA,SAAAhqI,GAEA,OAAA+J,KAAAiiI,WAAAhsI,EAAA,CAAAA,GAAA,KAIA8rI,gBAAA,SAAA71I,GAEA,IAAA,IAAA8T,KAAA0/H,mBAeA,OARA1/H,KAAAoG,aAAAla,GAEA,IAAA8T,KAAAy/H,WAEAz/H,KAAAnX,OAAAud,aAAAg6H,gBAAApgI,KAAAoG,aAAApG,KAAAnD,QAAAqD,YAAA,KAIAF,KAbA9I,QAAAC,KAAA,qDAiBAgrI,gBAAA,WAEA,OAAAniI,KAAAoG,cAIAy7H,QAAA,WAEA7hI,KAAAy/H,WAAA,GAIA2C,QAAA,WAEA,OAAA,IAAApiI,KAAA0/H,oBAEAxoI,QAAAC,KAAA,qDACA,GAIA6I,KAAAyG,MAIA47H,QAAA,SAAAn2I,GAEA,IAAA,IAAA8T,KAAA0/H,mBAeA,OARA1/H,KAAAyG,KAAAva,GAEA,IAAA8T,KAAAy/H,YAEAz/H,KAAAnX,OAAA4d,KAAAzG,KAAAyG,MAIAzG,KAbA9I,QAAAC,KAAA,qDAiBAmrI,aAAA,SAAAp2I,GAIA,OAFA8T,KAAAu/H,UAAArzI,EAEA8T,MAIAuiI,WAAA,SAAAr2I,GAIA,OAFA8T,KAAAw/H,QAAAtzI,EAEA8T,MAIAwiI,UAAA,WAEA,OAAAxiI,KAAA6+H,KAAAA,KAAA3yI,OAIAu2I,UAAA,SAAAv2I,GAIA,OAFA8T,KAAA6+H,KAAAA,KAAAuB,gBAAAl0I,EAAA8T,KAAAnD,QAAAqD,YAAA,KAEAF,QAUA,IAAA0iI,GAAA,IAAAr5G,GACAs5G,GAAA,IAAAtgH,GACAugH,GAAA,IAAAv5G,GACAw5G,GAAA,IAAAx5G,GAEA,SAAAy5G,GAAAlvH,GAEAurH,GAAAj4I,KAAA8Y,KAAA4T,GAEA5T,KAAA+iI,OAAA/iI,KAAAnD,QAAAmmI,eACAhjI,KAAA+iI,OAAAE,aAAA,OACAjjI,KAAA+iI,OAAAhE,QAAA/+H,KAAA6+H,MAwHA,SAAAqE,GAAAC,EAAAC,GAEApjI,KAAAqjI,SAAAF,EAAAtmI,QAAAymI,iBACAtjI,KAAAqjI,SAAAD,aAAAt2I,IAAAs2I,EAAAA,EAAA,KAEApjI,KAAA8C,KAAA,IAAA1O,WAAA4L,KAAAqjI,SAAAE,mBAEAJ,EAAAnC,YAAAjC,QAAA/+H,KAAAqjI,UAyCA,SAAAG,GAAAC,EAAAhiB,EAAAnD,GAKA,IAAAolB,EACAC,EACAC,EAkBA,OAvBA5jI,KAAAyjI,QAAAA,EACAzjI,KAAAs+G,UAAAA,EAsBAmD,GAEA,IAAA,aACAiiB,EAAA1jI,KAAA6jI,OACAF,EAAA3jI,KAAA8jI,eACAF,EAAA5jI,KAAA+jI,+BAEA/jI,KAAAm1D,OAAA,IAAAtc,aAAA,EAAAylE,GACAt+G,KAAAgkI,WAAA,EACA,MAEA,IAAA,SACA,IAAA,OACAN,EAAA1jI,KAAAikI,QAIAN,EAAA3jI,KAAAikI,QAEAL,EAAA5jI,KAAAkkI,0BAEAlkI,KAAAm1D,OAAA,IAAAjqE,MAAA,EAAAozH,GACA,MAEA,QACAolB,EAAA1jI,KAAAmkI,MACAR,EAAA3jI,KAAAokI,cACAR,EAAA5jI,KAAAqkI,4BAEArkI,KAAAm1D,OAAA,IAAAtc,aAAA,EAAAylE,GAIAt+G,KAAAskI,iBAAAZ,EACA1jI,KAAAukI,yBAAAZ,EACA3jI,KAAAwkI,aAAAZ,EACA5jI,KAAAykI,WAAA,EACAzkI,KAAA0kI,UAAA,EAEA1kI,KAAA2kI,iBAAA,EACA3kI,KAAA4kI,yBAAA,EAEA5kI,KAAA6kI,SAAA,EACA7kI,KAAA8kI,eAAA,EAxOAhC,GAAAr7I,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAy8G,GAAA13I,WAAA,CAEA4wB,YAAAyqH,GAEA9B,UAAA,WAEA,OAAAhhI,KAAA+iI,QAIAgC,eAAA,WAEA,OAAA/kI,KAAA+iI,OAAAiC,aAIAC,eAAA,SAAA/4I,GAIA,OAFA8T,KAAA+iI,OAAAiC,YAAA94I,EAEA8T,MAIAklI,iBAAA,WAEA,OAAAllI,KAAA+iI,OAAAoC,eAIAC,iBAAA,SAAAl5I,GAIA,OAFA8T,KAAA+iI,OAAAoC,cAAAj5I,EAEA8T,MAIAqlI,iBAAA,WAEA,OAAArlI,KAAA+iI,OAAAuC,eAIAC,iBAAA,SAAAr5I,GAIA,OAFA8T,KAAA+iI,OAAAuC,cAAAp5I,EAEA8T,MAIAwlI,eAAA,WAEA,OAAAxlI,KAAA+iI,OAAA0C,aAIAC,eAAA,SAAAx5I,GAIA,OAFA8T,KAAA+iI,OAAA0C,YAAAv5I,EAEA8T,MAIA2lI,mBAAA,SAAAC,EAAAC,EAAAC,GAMA,OAJA9lI,KAAA+iI,OAAA6C,eAAAA,EACA5lI,KAAA+iI,OAAA8C,eAAAA,EACA7lI,KAAA+iI,OAAA+C,cAAAA,EAEA9lI,MAIAo3B,kBAAA,SAAAQ,GAIA,GAFA5D,GAAAvsC,UAAA2vC,kBAAAlwC,KAAA8Y,KAAA43B,IAEA,IAAA53B,KAAA0/H,qBAAA,IAAA1/H,KAAAy/H,UAAA,CAEAz/H,KAAA2qB,YAAAuG,UAAAwxG,GAAAC,GAAAC,IAEAC,GAAArrH,IAAA,EAAA,EAAA,GAAAkS,gBAAAi5G,IAEA,IAAAI,EAAA/iI,KAAA+iI,OAEA,GAAAA,EAAA1C,UAAA,CAIA,IAAAjc,EAAApkH,KAAAnD,QAAAqD,YAAAF,KAAA4T,SAAAqrH,UAEA8D,EAAA1C,UAAAC,wBAAAoC,GAAAv2I,EAAAi4H,GACA2e,EAAAxC,UAAAD,wBAAAoC,GAAAj1I,EAAA22H,GACA2e,EAAAvC,UAAAF,wBAAAoC,GAAAjhH,EAAA2iG,GACA2e,EAAAgD,aAAAzF,wBAAAuC,GAAA12I,EAAAi4H,GACA2e,EAAAiD,aAAA1F,wBAAAuC,GAAAp1I,EAAA22H,GACA2e,EAAAkD,aAAA3F,wBAAAuC,GAAAphH,EAAA2iG,QAIA2e,EAAA9yG,YAAAyyG,GAAAv2I,EAAAu2I,GAAAj1I,EAAAi1I,GAAAjhH,GACAshH,EAAAhC,eAAA8B,GAAA12I,EAAA02I,GAAAp1I,EAAAo1I,GAAAphH,OAuBAl6B,OAAAM,OAAAq7I,GAAAz7I,UAAA,CAEAy+I,iBAAA,WAIA,OAFAlmI,KAAAqjI,SAAA8C,qBAAAnmI,KAAA8C,MAEA9C,KAAA8C,MAIAsjI,oBAAA,WAKA,IAHA,IAAAl6I,EAAA,EACA4W,EAAA9C,KAAAkmI,mBAEA1/I,EAAA,EAAAA,EAAAsc,EAAA3b,OAAAX,IAEA0F,GAAA4W,EAAAtc,GAIA,OAAA0F,EAAA4W,EAAA3b,UAwFAI,OAAAM,OAAA27I,GAAA/7I,UAAA,CAGA4+I,WAAA,SAAAC,EAAAhjC,GAKA,IAAAnuC,EAAAn1D,KAAAm1D,OACAmN,EAAAtiE,KAAAs+G,UACAxjG,EAAAwrH,EAAAhkE,EAAAA,EAEAikE,EAAAvmI,KAAA2kI,iBAEA,GAAA,IAAA4B,EAAA,CAIA,IAAA,IAAA//I,EAAA,EAAAA,IAAA87E,IAAA97E,EAEA2uE,EAAAr6C,EAAAt0B,GAAA2uE,EAAA3uE,GAIA+/I,EAAAjjC,MAEA,CAMAtjG,KAAAskI,iBAAAnvE,EAAAr6C,EAAA,EADAwoF,GADAijC,GAAAjjC,GAEAhhC,GAIAtiE,KAAA2kI,iBAAA4B,GAKAC,mBAAA,SAAAljC,GAEA,IAAAnuC,EAAAn1D,KAAAm1D,OACAmN,EAAAtiE,KAAAs+G,UACAxjG,EAAAwnD,EAAAtiE,KAAA0kI,UAEA,IAAA1kI,KAAA4kI,0BAIA5kI,KAAAwkI,eAMAxkI,KAAAukI,yBAAApvE,EAAAr6C,EAAA,EAAAwoF,EAAAhhC,GACAtiE,KAAA4kI,0BAAAthC,GAKA7a,MAAA,SAAA69C,GAEA,IAAAhkE,EAAAtiE,KAAAs+G,UACAnpD,EAAAn1D,KAAAm1D,OACAr6C,EAAAwrH,EAAAhkE,EAAAA,EAEAghC,EAAAtjG,KAAA2kI,iBACA8B,EAAAzmI,KAAA4kI,yBAEAnB,EAAAzjI,KAAAyjI,SAEAzjI,KAAA2kI,iBAAA,EACA3kI,KAAA4kI,yBAAA,EAEAthC,EAAA,IAMAtjG,KAAAskI,iBACAnvE,EAAAr6C,EAHAwnD,EAAAtiE,KAAAykI,WAGA,EAAAnhC,EAAAhhC,GAIAmkE,EAAA,GAIAzmI,KAAAukI,yBAAApvE,EAAAr6C,EAAA9a,KAAA0kI,UAAApiE,EAAA,EAAAA,GAIA,IAAA,IAAA97E,EAAA87E,EAAAl8E,EAAAk8E,EAAAA,EAAA97E,IAAAJ,IAAAI,EAEA,GAAA2uE,EAAA3uE,KAAA2uE,EAAA3uE,EAAA87E,GAAA,CAIAmhE,EAAAt5D,SAAAhV,EAAAr6C,GACA,QASA4rH,kBAAA,WAEA,IAEAvxE,EAAAn1D,KAAAm1D,OACAmN,EAAAtiE,KAAAs+G,UAEAqoB,EAAArkE,EAAAtiE,KAAAykI,WALAzkI,KAAAyjI,QAOAmD,SAAAzxE,EAAAwxE,GAGA,IAAA,IAAAngJ,EAAA87E,EAAAl8E,EAAAugJ,EAAAngJ,IAAAJ,IAAAI,EAEA2uE,EAAA3uE,GAAA2uE,EAAAwxE,EAAAngJ,EAAA87E,GAKAtiE,KAAAwkI,eAEAxkI,KAAA2kI,iBAAA,EACA3kI,KAAA4kI,yBAAA,GAKAiC,qBAAA,WAGA7mI,KAAAyjI,QAAAt5D,SAAAnqE,KAAAm1D,OADA,EAAAn1D,KAAAs+G,YAKA+lB,4BAAA,WAKA,IAHA,IAAAyC,EAAA9mI,KAAA0kI,UAAA1kI,KAAAs+G,UACAyoB,EAAAD,EAAA9mI,KAAAs+G,UAEA93H,EAAAsgJ,EAAAtgJ,EAAAugJ,EAAAvgJ,IAEAwZ,KAAAm1D,OAAA3uE,GAAA,GAMAu9I,+BAAA,WAEA/jI,KAAAqkI,8BACArkI,KAAAm1D,OAAA,EAAAn1D,KAAA0kI,UAAA,GAAA,GAIAR,0BAAA,WAKA,IAHA,IAAA4C,EAAA9mI,KAAAykI,WAAAzkI,KAAAs+G,UACA0oB,EAAAhnI,KAAA0kI,UAAA1kI,KAAAs+G,UAEA93H,EAAA,EAAAA,EAAAwZ,KAAAs+G,UAAA93H,IAEAwZ,KAAAm1D,OAAA6xE,EAAAxgJ,GAAAwZ,KAAAm1D,OAAA2xE,EAAAtgJ,IASAy9I,QAAA,SAAA9uE,EAAA3vC,EAAAo4F,EAAAt3H,EAAAg8E,GAEA,GAAAh8E,GAAA,GAEA,IAAA,IAAAE,EAAA,EAAAA,IAAA87E,IAAA97E,EAEA2uE,EAAA3vC,EAAAh/B,GAAA2uE,EAAAyoD,EAAAp3H,IAQAq9I,OAAA,SAAA1uE,EAAA3vC,EAAAo4F,EAAAt3H,GAEA+7B,GAAAiD,UAAA6vC,EAAA3vC,EAAA2vC,EAAA3vC,EAAA2vC,EAAAyoD,EAAAt3H,IAIAw9I,eAAA,SAAA3uE,EAAA3vC,EAAAo4F,EAAAt3H,EAAAg8E,GAEA,IAAA2kE,EAAAjnI,KAAAgkI,WAAA1hE,EAGAjgD,GAAAmE,wBAAA2uC,EAAA8xE,EAAA9xE,EAAA3vC,EAAA2vC,EAAAyoD,GAGAv7F,GAAAiD,UAAA6vC,EAAA3vC,EAAA2vC,EAAA3vC,EAAA2vC,EAAA8xE,EAAA3gJ,IAIA69I,MAAA,SAAAhvE,EAAA3vC,EAAAo4F,EAAAt3H,EAAAg8E,GAIA,IAFA,IAAAl5E,EAAA,EAAA9C,EAEAE,EAAA,EAAAA,IAAA87E,IAAA97E,EAAA,CAEA,IAAAm0C,EAAAnV,EAAAh/B,EAEA2uE,EAAAx6B,GAAAw6B,EAAAx6B,GAAAvxC,EAAA+rE,EAAAyoD,EAAAp3H,GAAAF,IAMA89I,cAAA,SAAAjvE,EAAA3vC,EAAAo4F,EAAAt3H,EAAAg8E,GAEA,IAAA,IAAA97E,EAAA,EAAAA,IAAA87E,IAAA97E,EAAA,CAEA,IAAAm0C,EAAAnV,EAAAh/B,EAEA2uE,EAAAx6B,GAAAw6B,EAAAx6B,GAAAw6B,EAAAyoD,EAAAp3H,GAAAF,MAmBA,IACA4gJ,GAAA,IAAAC,OAAA,kBAAA,KAMAC,GAAA,KAPA,gBAOA12I,QAAA,MAAA,IAAA,IAIA22I,GAAA,kBAAAx+I,OAAA6H,QAAA,KALA,oBAQA42I,GAAA,WAAAz+I,OAAA6H,QAAA,OAAA02I,IAIAG,GAAA,4BAAA1+I,OAAA6H,QAAA,KAZA,oBAgBA82I,GAAA,uBAAA3+I,OAAA6H,QAAA,KAhBA,oBAkBA+2I,GAAA,IAAAN,OACA,IACAE,GACAC,GACAC,GACAC,GACA,KAGAE,GAAA,CAAA,WAAA,YAAA,SAEA,SAAAC,GAAAC,EAAA93D,EAAA+3D,GAEA,IAAAC,EAAAD,GAAAE,GAAAC,eAAAl4D,GAEA9vE,KAAAioI,aAAAL,EACA5nI,KAAAkoI,UAAAN,EAAAO,WAAAr4D,EAAAg4D,GAyDA,SAAAC,GAAAK,EAAAt4D,EAAAg4D,GAEA9nI,KAAA8vE,KAAAA,EACA9vE,KAAA8nI,WAAAA,GAAAC,GAAAC,eAAAl4D,GAEA9vE,KAAAqoI,KAAAN,GAAAO,SAAAF,EAAApoI,KAAA8nI,WAAA39I,WAAAi+I,EAEApoI,KAAAooI,SAAAA,EAimBA,SAAAG,KAEAvoI,KAAA2gB,KAAApM,GAAAI,eAGA3U,KAAAggF,SAAA90F,MAAAzD,UAAA0D,MAAAjE,KAAAmC,WAEA2W,KAAAwoI,gBAAA,EAGA,IAAAzoF,EAAA,GACA//C,KAAAyoI,eAAA1oF,EAEA,IAAA,IAAAv5D,EAAA,EAAAH,EAAAgD,UAAAlC,OAAAX,IAAAH,IAAAG,EAEAu5D,EAAA12D,UAAA7C,GAAAm6B,MAAAn6B,EAIAwZ,KAAA0oI,OAAA,GACA1oI,KAAA2oI,aAAA,GACA3oI,KAAAkoI,UAAA,GACAloI,KAAA4oI,uBAAA,GAEA,IAAAxkF,EAAApkD,KAEAA,KAAA6oI,MAAA,CAEAzpE,QAAA,CACA0pE,YAEA,OAAA1kF,EAAA47B,SAAA74F,QAGA4hJ,YAEA,OAAA/oI,KAAA8oI,MAAA1kF,EAAAokF,kBAIAQ,wBAEA,OAAA5kF,EAAA8jF,UAAA/gJ,SA8TA,SAAA8hJ,GAAAC,EAAA/qB,EAAAgrB,EAAAxpB,GAEA3/G,KAAAopI,OAAAF,EACAlpI,KAAAqpI,MAAAlrB,EACAn+G,KAAAspI,WAAAH,GAAA,KACAnpI,KAAA2/G,UAAAA,GAAAxB,EAAAwB,UAWA,IATA,IAAAvB,EAAAD,EAAAC,OACAmrB,EAAAnrB,EAAAj3H,OACAqiJ,EAAA,IAAAt+I,MAAAq+I,GAEAE,EAAA,CACA9mB,YAAAlwG,GACAmwG,UAAAnwG,IAGAjsB,EAAA,EAAAA,IAAA+iJ,IAAA/iJ,EAAA,CAEA,IAAA64H,EAAAjB,EAAA53H,GAAA84H,kBAAA,MACAkqB,EAAAhjJ,GAAA64H,EACAA,EAAApoH,SAAAwyI,EAIAzpI,KAAA0pI,qBAAAD,EAEAzpI,KAAA2pI,cAAAH,EAGAxpI,KAAA4pI,kBAAA,IAAA1+I,MAAAq+I,GAEAvpI,KAAA6pI,YAAA,KACA7pI,KAAA8pI,kBAAA,KAEA9pI,KAAA+pI,sBAAA,KACA/pI,KAAAgqI,mBAAA,KAEAhqI,KAAAyG,KAAA+L,GACAxS,KAAAiqI,YAAA,EAIAjqI,KAAAkqI,WAAA,KAIAlqI,KAAAM,KAAA,EAEAN,KAAAsG,UAAA,EACAtG,KAAAmqI,oBAAA,EAEAnqI,KAAAsjG,OAAA,EACAtjG,KAAAoqI,iBAAA,EAEApqI,KAAAqqI,YAAA/iI,SAEAtH,KAAAsqI,QAAA,EACAtqI,KAAA9B,SAAA,EAEA8B,KAAAuqI,mBAAA,EAEAvqI,KAAAwqI,kBAAA,EACAxqI,KAAAyqI,gBAAA,EAkoBA,SAAAC,GAAAC,GAEA3qI,KAAA4qI,MAAAD,EACA3qI,KAAA6qI,qBACA7qI,KAAA8qI,WAAA,EAEA9qI,KAAAM,KAAA,EAEAN,KAAAsG,UAAA,EAovBA,SAAAykI,GAAA7+I,GAEA,iBAAAA,IAEAgL,QAAAC,KAAA,sDACAjL,EAAA7C,UAAA,IAIA2W,KAAA9T,MAAAA,EAcA,SAAA8+I,GAAA52H,EAAAkuD,EAAAL,GAEAk+B,GAAAj5G,KAAA8Y,KAAAoU,EAAAkuD,GAEAtiE,KAAAiiE,iBAAAA,GAAA,EAiDA,SAAAgpE,GAAAvsG,EAAAC,EAAAhN,EAAAC,GAEA5xB,KAAA4+B,IAAA,IAAAH,GAAAC,EAAAC,GAGA3+B,KAAA2xB,KAAAA,GAAA,EACA3xB,KAAA4xB,IAAAA,GAAAtqB,SACAtH,KAAAsqB,OAAA,KACAtqB,KAAAkzB,OAAA,IAAAf,GAEAnyB,KAAAqlG,OAAA,CACAvjD,KAAA,GACAmjD,KAAA,CAAAG,UAAA,GACA3C,IAAA,GACA8D,OAAA,CAAAnB,UAAA,GACApD,OAAA,IAGAz6G,OAAAqwB,iBAAA5X,KAAAqlG,OAAA,CACA6lC,WAAA,CACAnrI,IAAA,WAGA,OADA7I,QAAAC,KAAA,yEACA6I,KAAAumG,WAQA,SAAA4kC,GAAAtkJ,EAAA6E,GAEA,OAAA7E,EAAAwvC,SAAA3qC,EAAA2qC,SAIA,SAAA+0G,GAAArgJ,EAAAk3D,EAAAW,EAAAtpB,GAQA,GANAvuC,EAAAmoC,OAAAjmC,KAAAg1D,EAAA/uB,SAEAnoC,EAAAysC,QAAAyqB,EAAAW,IAIA,IAAAtpB,EAIA,IAFA,IAAArF,EAAAlpC,EAAAkpC,SAEAztC,EAAA,EAAAyJ,EAAAgkC,EAAA9sC,OAAAX,EAAAyJ,EAAAzJ,IAEA4kJ,GAAAn3G,EAAAztC,GAAAy7D,EAAAW,GAAA,GAuFA,SAAAyoF,GAAAx/G,EAAAC,EAAAvM,GAMA,OAJAvf,KAAA6rB,YAAA/+B,IAAA++B,EAAAA,EAAA,EACA7rB,KAAA8rB,SAAAh/B,IAAAg/B,EAAAA,EAAA,EACA9rB,KAAAuf,WAAAzyB,IAAAyyB,EAAAA,EAAA,EAEAvf,KA6EA,SAAAsrI,GAAAz/G,EAAAtM,EAAA9xB,GAMA,OAJAuS,KAAA6rB,YAAA/+B,IAAA++B,EAAAA,EAAA,EACA7rB,KAAAuf,WAAAzyB,IAAAyyB,EAAAA,EAAA,EACAvf,KAAAvS,OAAAX,IAAAW,EAAAA,EAAA,EAEAuS,KAhvFAzY,OAAAM,OAAA8/I,GAAAlgJ,UAAA,CAEAm/I,SAAA,SAAAxyH,EAAA0G,GAEA9a,KAAAmjG,OAEA,IACAsgC,EAAAzjI,KAAAkoI,UADAloI,KAAAioI,aAAAO,sBAIA17I,IAAA22I,GAAAA,EAAAmD,SAAAxyH,EAAA0G,IAIAqvD,SAAA,SAAA/1D,EAAA0G,GAIA,IAFA,IAAAywH,EAAAvrI,KAAAkoI,UAEA1hJ,EAAAwZ,KAAAioI,aAAAO,gBAAAniJ,EAAAklJ,EAAApkJ,OAAAX,IAAAH,IAAAG,EAEA+kJ,EAAA/kJ,GAAA2jF,SAAA/1D,EAAA0G,IAMAqoF,KAAA,WAIA,IAFA,IAAAooC,EAAAvrI,KAAAkoI,UAEA1hJ,EAAAwZ,KAAAioI,aAAAO,gBAAAniJ,EAAAklJ,EAAApkJ,OAAAX,IAAAH,IAAAG,EAEA+kJ,EAAA/kJ,GAAA28G,QAMAqoC,OAAA,WAIA,IAFA,IAAAD,EAAAvrI,KAAAkoI,UAEA1hJ,EAAAwZ,KAAAioI,aAAAO,gBAAAniJ,EAAAklJ,EAAApkJ,OAAAX,IAAAH,IAAAG,EAEA+kJ,EAAA/kJ,GAAAglJ,YAoBAjkJ,OAAAM,OAAAkgJ,GAAA,CAEAJ,UAAAA,GAEAjlH,OAAA,SAAAioH,EAAA76D,EAAAg4D,GAEA,OAAA6C,GAAAA,EAAAc,uBAMA,IAAA1D,GAAAJ,UAAAgD,EAAA76D,EAAAg4D,GAJA,IAAAC,GAAA4C,EAAA76D,EAAAg4D,IAiBA4D,iBAAA,SAAAv1I,GAEA,OAAAA,EAAAzF,QAAA,MAAA,KAAAA,QAAAw2I,GAAA,KAIAc,eAAA,SAAA1hB,GAEA,IAAAqlB,EAAAlE,GAAA1zI,KAAAuyH,GAEA,IAAAqlB,EAEA,MAAA,IAAA7kJ,MAAA,4CAAAw/H,GAIA,IAAAslB,EAAA,CAEAzhJ,SAAAwhJ,EAAA,GACAE,WAAAF,EAAA,GACAG,YAAAH,EAAA,GACAnlB,aAAAmlB,EAAA,GACAI,cAAAJ,EAAA,IAGAK,EAAAJ,EAAAzhJ,UAAAyhJ,EAAAzhJ,SAAA6rI,YAAA,KAEA,QAAAlpI,IAAAk/I,IAAA,IAAAA,EAAA,CAEA,IAAAH,EAAAD,EAAAzhJ,SAAAuyI,UAAAsP,EAAA,IAMA,IAAAtE,GAAAj0I,QAAAo4I,KAEAD,EAAAzhJ,SAAAyhJ,EAAAzhJ,SAAAuyI,UAAA,EAAAsP,GACAJ,EAAAC,WAAAA,GAMA,GAAA,OAAAD,EAAAplB,cAAA,IAAAolB,EAAAplB,aAAAr/H,OAEA,MAAA,IAAAL,MAAA,+DAAAw/H,GAIA,OAAAslB,GAIAtD,SAAA,SAAAqC,EAAAxgJ,GAEA,IAAAA,GAAA,KAAAA,GAAA,MAAAA,IAAA,IAAAA,GAAAA,IAAAwgJ,EAAAx0I,MAAAhM,IAAAwgJ,EAAAhqH,KAEA,OAAAgqH,EAKA,GAAAA,EAAAhxD,SAAA,CAEA,IAAAkqB,EAAA8mC,EAAAhxD,SAAAqqB,cAAA75G,GAEA,QAAA2C,IAAA+2G,EAEA,OAAAA,EAOA,GAAA8mC,EAAA12G,SAAA,CAEA,IAAAg4G,EAAA,SAAAh4G,GAEA,IAAA,IAAAztC,EAAA,EAAAA,EAAAytC,EAAA9sC,OAAAX,IAAA,CAEA,IAAA0lJ,EAAAj4G,EAAAztC,GAEA,GAAA0lJ,EAAA/1I,OAAAhM,GAAA+hJ,EAAAvrH,OAAAx2B,EAEA,OAAA+hJ,EAIA,IAAA7yI,EAAA4yI,EAAAC,EAAAj4G,UAEA,GAAA56B,EAAA,OAAAA,EAIA,OAAA,MAIA8yI,EAAAF,EAAAtB,EAAA12G,UAEA,GAAAk4G,EAEA,OAAAA,EAMA,OAAA,QAMA5kJ,OAAAM,OAAAkgJ,GAAAtgJ,UAAA,CAGA2kJ,sBAAA,aACAC,sBAAA,aAEAC,YAAA,CACAC,OAAA,EACAC,YAAA,EACAC,aAAA,EACAC,eAAA,GAGAC,WAAA,CACAC,KAAA,EACAC,YAAA,EACAC,uBAAA,GAGAC,oBAAA,CAEA,SAAA53E,EAAAr6C,GAEAq6C,EAAAr6C,GAAA9a,KAAAqoI,KAAAroI,KAAAwmH,eAIA,SAAArxD,EAAAr6C,GAIA,IAFA,IAAAjyB,EAAAmX,KAAAgtI,iBAEAxmJ,EAAA,EAAAH,EAAAwC,EAAA1B,OAAAX,IAAAH,IAAAG,EAEA2uE,EAAAr6C,KAAAjyB,EAAArC,IAMA,SAAA2uE,EAAAr6C,GAEAq6C,EAAAr6C,GAAA9a,KAAAgtI,iBAAAhtI,KAAA+rI,gBAIA,SAAA52E,EAAAr6C,GAEA9a,KAAAgtI,iBAAAjyH,QAAAo6C,EAAAr6C,KAMAmyH,iCAAA,CAEA,CAGA,SAAA93E,EAAAr6C,GAEA9a,KAAAktI,aAAAltI,KAAAwmH,cAAArxD,EAAAr6C,IAIA,SAAAq6C,EAAAr6C,GAEA9a,KAAAktI,aAAAltI,KAAAwmH,cAAArxD,EAAAr6C,GACA9a,KAAAktI,aAAA7vF,aAAA,GAIA,SAAA8X,EAAAr6C,GAEA9a,KAAAktI,aAAAltI,KAAAwmH,cAAArxD,EAAAr6C,GACA9a,KAAAktI,aAAA14G,wBAAA,IAIA,CAIA,SAAA2gC,EAAAr6C,GAIA,IAFA,IAAAqyH,EAAAntI,KAAAgtI,iBAEAxmJ,EAAA,EAAAH,EAAA8mJ,EAAAhmJ,OAAAX,IAAAH,IAAAG,EAEA2mJ,EAAA3mJ,GAAA2uE,EAAAr6C,MAMA,SAAAq6C,EAAAr6C,GAIA,IAFA,IAAAqyH,EAAAntI,KAAAgtI,iBAEAxmJ,EAAA,EAAAH,EAAA8mJ,EAAAhmJ,OAAAX,IAAAH,IAAAG,EAEA2mJ,EAAA3mJ,GAAA2uE,EAAAr6C,KAIA9a,KAAAktI,aAAA7vF,aAAA,GAIA,SAAA8X,EAAAr6C,GAIA,IAFA,IAAAqyH,EAAAntI,KAAAgtI,iBAEAxmJ,EAAA,EAAAH,EAAA8mJ,EAAAhmJ,OAAAX,IAAAH,IAAAG,EAEA2mJ,EAAA3mJ,GAAA2uE,EAAAr6C,KAIA9a,KAAAktI,aAAA14G,wBAAA,IAIA,CAIA,SAAA2gC,EAAAr6C,GAEA9a,KAAAgtI,iBAAAhtI,KAAA+rI,eAAA52E,EAAAr6C,IAIA,SAAAq6C,EAAAr6C,GAEA9a,KAAAgtI,iBAAAhtI,KAAA+rI,eAAA52E,EAAAr6C,GACA9a,KAAAktI,aAAA7vF,aAAA,GAIA,SAAA8X,EAAAr6C,GAEA9a,KAAAgtI,iBAAAhtI,KAAA+rI,eAAA52E,EAAAr6C,GACA9a,KAAAktI,aAAA14G,wBAAA,IAIA,CAIA,SAAA2gC,EAAAr6C,GAEA9a,KAAAgtI,iBAAAnyH,UAAAs6C,EAAAr6C,IAIA,SAAAq6C,EAAAr6C,GAEA9a,KAAAgtI,iBAAAnyH,UAAAs6C,EAAAr6C,GACA9a,KAAAktI,aAAA7vF,aAAA,GAIA,SAAA8X,EAAAr6C,GAEA9a,KAAAgtI,iBAAAnyH,UAAAs6C,EAAAr6C,GACA9a,KAAAktI,aAAA14G,wBAAA,KAQAoyG,SAAA,SAAAwG,EAAAtyH,GAEA9a,KAAAmjG,OACAnjG,KAAA4mI,SAAAwG,EAAAtyH,IAUAqvD,SAAA,SAAAkjE,EAAAvyH,GAEA9a,KAAAmjG,OACAnjG,KAAAmqE,SAAAkjE,EAAAvyH,IAKAqoF,KAAA,WAEA,IAAA+pC,EAAAltI,KAAAqoI,KACAP,EAAA9nI,KAAA8nI,WAEA+D,EAAA/D,EAAA+D,WACArlB,EAAAshB,EAAAthB,aACAulB,EAAAjE,EAAAiE,cAeA,GAbAmB,IAEAA,EAAAnF,GAAAO,SAAAtoI,KAAAooI,SAAAN,EAAA39I,WAAA6V,KAAAooI,SAEApoI,KAAAqoI,KAAA6E,GAKAltI,KAAA4mI,SAAA5mI,KAAAosI,sBACApsI,KAAAmqE,SAAAnqE,KAAAqsI,sBAGAa,EAAA,CAOA,GAAArB,EAAA,CAEA,IAAAC,EAAAhE,EAAAgE,YAGA,OAAAD,GAEA,IAAA,YAEA,IAAAqB,EAAAp0G,SAGA,YADA5hC,QAAAkK,MAAA,oFAAApB,MAKA,IAAAktI,EAAAp0G,SAAAd,UAGA,YADA9gC,QAAAkK,MAAA,8GAAApB,MAKAktI,EAAAA,EAAAp0G,SAAAd,UAEA,MAEA,IAAA,QAEA,IAAAk1G,EAAAvzD,SAGA,YADAziF,QAAAkK,MAAA,iFAAApB,MAQAktI,EAAAA,EAAAvzD,SAAAD,MAGA,IAAA,IAAAlzF,EAAA,EAAAA,EAAA0mJ,EAAA/lJ,OAAAX,IAEA,GAAA0mJ,EAAA1mJ,GAAA2P,OAAA21I,EAAA,CAEAA,EAAAtlJ,EACA,MAMA,MAEA,QAEA,QAAAsG,IAAAogJ,EAAArB,GAGA,YADA30I,QAAAkK,MAAA,uEAAApB,MAKAktI,EAAAA,EAAArB,GAKA,QAAA/+I,IAAAg/I,EAAA,CAEA,QAAAh/I,IAAAogJ,EAAApB,GAGA,YADA50I,QAAAkK,MAAA,wFAAApB,KAAAktI,GAKAA,EAAAA,EAAApB,IAOA,IAAAwB,EAAAJ,EAAA1mB,GAEA,QAAA15H,IAAAwgJ,EAAA,CAWA,IAAAC,EAAAvtI,KAAA2sI,WAAAC,KAEA5sI,KAAAktI,aAAAA,OAEApgJ,IAAAogJ,EAAA7vF,YAEAkwF,EAAAvtI,KAAA2sI,WAAAE,iBAEA//I,IAAAogJ,EAAA14G,yBAEA+4G,EAAAvtI,KAAA2sI,WAAAG,wBAKA,IAAAU,EAAAxtI,KAAAssI,YAAAC,OAEA,QAAAz/I,IAAAi/I,EAAA,CAIA,GAAA,0BAAAvlB,EAAA,CAKA,IAAA0mB,EAAAt0G,SAGA,YADA1hC,QAAAkK,MAAA,sGAAApB,MAKA,IAAAktI,EAAAt0G,SAAAgkB,iBAmBA,YADA1lD,QAAAkK,MAAA,oHAAApB,MAhBA,IAAAktI,EAAAt0G,SAAA6jB,gBAGA,YADAvlD,QAAAkK,MAAA,sHAAApB,WAKAlT,IAAAogJ,EAAAxqF,sBAAAqpF,KAEAA,EAAAmB,EAAAxqF,sBAAAqpF,IAcAyB,EAAAxtI,KAAAssI,YAAAG,aAEAzsI,KAAAgtI,iBAAAM,EACAttI,KAAA+rI,cAAAA,YAEAj/I,IAAAwgJ,EAAAzyH,gBAAA/tB,IAAAwgJ,EAAAvyH,SAIAyyH,EAAAxtI,KAAAssI,YAAAI,eAEA1sI,KAAAgtI,iBAAAM,GAEApiJ,MAAA6B,QAAAugJ,IAEAE,EAAAxtI,KAAAssI,YAAAE,YAEAxsI,KAAAgtI,iBAAAM,GAIAttI,KAAAwmH,aAAAA,EAKAxmH,KAAA4mI,SAAA5mI,KAAA+sI,oBAAAS,GACAxtI,KAAAmqE,SAAAnqE,KAAAitI,iCAAAO,GAAAD,OAhGA,CAIAr2I,QAAAkK,MAAA,+DAFA0mI,EAAA39I,SAGA,IAAAq8H,EAAA,wBAAA0mB,SAjGAh2I,QAAAkK,MAAA,2DAAApB,KAAA8vE,KAAA,0BAgMA07D,OAAA,WAEAxrI,KAAAqoI,KAAA,KAIAroI,KAAA4mI,SAAA5mI,KAAAytI,kBACAztI,KAAAmqE,SAAAnqE,KAAA0tI,qBAOAnmJ,OAAAM,OAAAkgJ,GAAAtgJ,UAAA,CAGAgmJ,kBAAA1F,GAAAtgJ,UAAAm/I,SACA8G,kBAAA3F,GAAAtgJ,UAAA0iF,WAqFA5iF,OAAAM,OAAA0gJ,GAAA9gJ,UAAA,CAEAgkJ,wBAAA,EAEAlzH,IAAA,WAaA,IAXA,IAAA6mD,EAAAp/D,KAAAggF,SACA2tD,EAAA3tI,KAAAyoI,eACAvM,EAAAl8H,KAAA0oI,OACAkF,EAAA5tI,KAAA2oI,aACA4C,EAAAvrI,KAAAkoI,UACA2F,EAAAtC,EAAApkJ,OAEA2mJ,OAAAhhJ,EACAihJ,EAAA3uE,EAAAj4E,OACA6mJ,EAAAhuI,KAAAwoI,gBAEAhiJ,EAAA,EAAAH,EAAAgD,UAAAlC,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAAuE,EAAA1B,UAAA7C,GACAm6B,EAAA51B,EAAA41B,KACAtW,EAAAsjI,EAAAhtH,GAEA,QAAA7zB,IAAAud,EAAA,CAIAA,EAAA0jI,IACAJ,EAAAhtH,GAAAtW,EACA+0D,EAAAz0E,KAAAI,GAIA,IAAA,IAAA4vC,EAAA,EAAAntC,EAAAqgJ,EAAAlzG,IAAAntC,IAAAmtC,EAEA4wG,EAAA5wG,GAAAhwC,KAAA,IAAAo9I,GAAAh9I,EAAAmxI,EAAAvhG,GAAAizG,EAAAjzG,UAIA,GAAAtwB,EAAA2jI,EAAA,CAEAF,EAAA1uE,EAAA/0D,GAIA,IAAA4jI,IAAAD,EACAE,EAAA9uE,EAAA6uE,GAEAN,EAAAO,EAAAvtH,MAAAtW,EACA+0D,EAAA/0D,GAAA6jI,EAEAP,EAAAhtH,GAAAstH,EACA7uE,EAAA6uE,GAAAljJ,EAIA,IAAA,IAAAgxD,EAAA,EAAAgrE,EAAA8mB,EAAA9xF,IAAAgrE,IAAAhrE,EAAA,CAEA,IAAAoyF,EAAA5C,EAAAxvF,GAGA0nF,EAAA0K,EAAA9jI,GAEA8jI,EAAA9jI,GAJA8jI,EAAAF,QAMAnhJ,IAAA22I,IAMAA,EAAA,IAAAsE,GAAAh9I,EAAAmxI,EAAAngF,GAAA6xF,EAAA7xF,KAIAoyF,EAAAF,GAAAxK,QAIArkE,EAAA/0D,KAAAyjI,GAEA52I,QAAAkK,MAAA,sJAOApB,KAAAwoI,gBAAAwF,GAIAj3G,OAAA,WASA,IAPA,IAAAqoC,EAAAp/D,KAAAggF,SACA2tD,EAAA3tI,KAAAyoI,eACA8C,EAAAvrI,KAAAkoI,UACA2F,EAAAtC,EAAApkJ,OAEA6mJ,EAAAhuI,KAAAwoI,gBAEAhiJ,EAAA,EAAAH,EAAAgD,UAAAlC,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAAuE,EAAA1B,UAAA7C,GACAm6B,EAAA51B,EAAA41B,KACAtW,EAAAsjI,EAAAhtH,GAEA,QAAA7zB,IAAAud,GAAAA,GAAA2jI,EAAA,CAIA,IAAAI,EAAAJ,IACAK,EAAAjvE,EAAAgvE,GAEAT,EAAAU,EAAA1tH,MAAAtW,EACA+0D,EAAA/0D,GAAAgkI,EAEAV,EAAAhtH,GAAAytH,EACAhvE,EAAAgvE,GAAArjJ,EAIA,IAAA,IAAA4vC,EAAA,EAAAntC,EAAAqgJ,EAAAlzG,IAAAntC,IAAAmtC,EAAA,CAEA,IAAAwzG,EAAA5C,EAAA5wG,GAEA8oG,EAAA0K,EAAA9jI,GAEA8jI,EAAA9jI,GAHA8jI,EAAAC,GAIAD,EAAAC,GAAA3K,IAQAzjI,KAAAwoI,gBAAAwF,GAKAM,QAAA,WAUA,IARA,IAAAlvE,EAAAp/D,KAAAggF,SACA2tD,EAAA3tI,KAAAyoI,eACA8C,EAAAvrI,KAAAkoI,UACA2F,EAAAtC,EAAApkJ,OAEA6mJ,EAAAhuI,KAAAwoI,gBACAuF,EAAA3uE,EAAAj4E,OAEAX,EAAA,EAAAH,EAAAgD,UAAAlC,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IACAm6B,EADAt3B,UAAA7C,GACAm6B,KACAtW,EAAAsjI,EAAAhtH,GAEA,QAAA7zB,IAAAud,EAIA,UAFAsjI,EAAAhtH,GAEAtW,EAAA2jI,EAAA,CAIA,IAAAC,IAAAD,EACAE,EAAA9uE,EAAA6uE,GACAj+D,IAAA+9D,EACAQ,EAAAnvE,EAAA4Q,GAGA29D,EAAAO,EAAAvtH,MAAAtW,EACA+0D,EAAA/0D,GAAA6jI,EAGAP,EAAAY,EAAA5tH,MAAAstH,EACA7uE,EAAA6uE,GAAAM,EACAnvE,EAAA3uE,MAIA,IAAA,IAAAkqC,EAAA,EAAAntC,EAAAqgJ,EAAAlzG,IAAAntC,IAAAmtC,EAAA,CAEA,IAAAwzG,EAAA5C,EAAA5wG,GAEA6yE,EAAA2gC,EAAAn+D,GAEAm+D,EAAA9jI,GAHA8jI,EAAAF,GAIAE,EAAAF,GAAAzgC,EACA2gC,EAAA19I,WAIA,CAIA,IAAA+9I,IAAAT,EACAU,EAAArvE,EAAAovE,GAEAb,EAAAc,EAAA9tH,MAAAtW,EACA+0D,EAAA/0D,GAAAokI,EACArvE,EAAA3uE,MAIA,IAAA,IAAAsrD,EAAA,EAAAgrE,EAAA8mB,EAAA9xF,IAAAgrE,IAAAhrE,EAAA,CAEA,IAAA2yF,EAAAnD,EAAAxvF,GAEA2yF,EAAArkI,GAAAqkI,EAAAF,GACAE,EAAAj+I,QAUAuP,KAAAwoI,gBAAAwF,GAMA7F,WAAA,SAAAr4D,EAAAg4D,GAKA,IAAA6G,EAAA3uI,KAAA4oI,uBACAv+H,EAAAskI,EAAA7+D,GACAy7D,EAAAvrI,KAAAkoI,UAEA,QAAAp7I,IAAAud,EAAA,OAAAkhI,EAAAlhI,GAEA,IAAA6xH,EAAAl8H,KAAA0oI,OACAkF,EAAA5tI,KAAA2oI,aACAvpE,EAAAp/D,KAAAggF,SAEAguD,EAAAhuI,KAAAwoI,gBACA2F,EAAA,IAAAjjJ,MAFAk0E,EAAAj4E,QAMAwnJ,EAAA7+D,GAFAzlE,EAAAkhI,EAAApkJ,OAIA+0I,EAAAvxI,KAAAmlF,GACA89D,EAAAjjJ,KAAAm9I,GACAyD,EAAA5gJ,KAAAwjJ,GAEA,IAAA,IAAA3nJ,EAAAwnJ,EAAA3nJ,EAAA+4E,EAAAj4E,OAAAX,IAAAH,IAAAG,EAAA,CAGA2nJ,EAAA3nJ,GAAA,IAAAuhJ,GADA3oE,EAAA54E,GACAspF,EAAAg4D,GAIA,OAAAqG,GAIAS,aAAA,SAAA9+D,GAKA,IAAA6+D,EAAA3uI,KAAA4oI,uBACAv+H,EAAAskI,EAAA7+D,GAEA,QAAAhjF,IAAAud,EAAA,CAEA,IAAA6xH,EAAAl8H,KAAA0oI,OACAkF,EAAA5tI,KAAA2oI,aACA4C,EAAAvrI,KAAAkoI,UACA2G,EAAAtD,EAAApkJ,OAAA,EACA2nJ,EAAAvD,EAAAsD,GAGAF,EAFA7+D,EAAA++D,IAEAxkI,EAEAkhI,EAAAlhI,GAAAykI,EACAvD,EAAA96I,MAEAm9I,EAAAvjI,GAAAujI,EAAAiB,GACAjB,EAAAn9I,MAEAyrI,EAAA7xH,GAAA6xH,EAAA2S,GACA3S,EAAAzrI,UAqFAlJ,OAAAM,OAAAohJ,GAAAxhJ,UAAA,CAIA+X,KAAA,WAIA,OAFAQ,KAAAopI,OAAA2F,gBAAA/uI,MAEAA,MAIAqB,KAAA,WAIA,OAFArB,KAAAopI,OAAA4F,kBAAAhvI,MAEAA,KAAAwiE,SAIAA,MAAA,WASA,OAPAxiE,KAAAsqI,QAAA,EACAtqI,KAAA9B,SAAA,EAEA8B,KAAAM,KAAA,EACAN,KAAAiqI,YAAA,EACAjqI,KAAAkqI,WAAA,KAEAlqI,KAAAivI,aAAAC,eAIAC,UAAA,WAEA,OAAAnvI,KAAA9B,UAAA8B,KAAAsqI,QAAA,IAAAtqI,KAAAsG,WACA,OAAAtG,KAAAkqI,YAAAlqI,KAAAopI,OAAAgG,gBAAApvI,OAKAqvI,YAAA,WAEA,OAAArvI,KAAAopI,OAAAgG,gBAAApvI,OAIAsvI,QAAA,SAAAhvI,GAIA,OAFAN,KAAAkqI,WAAA5pI,EAEAN,MAIAqiI,QAAA,SAAA39D,EAAA2lE,GAKA,OAHArqI,KAAAyG,KAAAi+D,EACA1kE,KAAAqqI,YAAAA,EAEArqI,MASAuvI,mBAAA,SAAAjsC,GAOA,OALAtjG,KAAAsjG,OAAAA,EAGAtjG,KAAAoqI,iBAAApqI,KAAA9B,QAAAolG,EAAA,EAEAtjG,KAAAivI,cAKAO,mBAAA,WAEA,OAAAxvI,KAAAoqI,kBAIAqF,OAAA,SAAAtvI,GAEA,OAAAH,KAAA0vI,gBAAAvvI,EAAA,EAAA,IAIAwvI,QAAA,SAAAxvI,GAEA,OAAAH,KAAA0vI,gBAAAvvI,EAAA,EAAA,IAIAyvI,cAAA,SAAAC,EAAA1vI,EAAA2vI,GAKA,GAHAD,EAAAF,QAAAxvI,GACAH,KAAAyvI,OAAAtvI,GAEA2vI,EAAA,CAEA,IAAAC,EAAA/vI,KAAAqpI,MAAAlpI,SACA6vI,EAAAH,EAAAxG,MAAAlpI,SAGA8vI,EAAAF,EAAAC,EAEAH,EAAAC,KAAA,EAHAE,EAAAD,EAGA5vI,GACAH,KAAA8vI,KAAAG,EAAA,EAAA9vI,GAIA,OAAAH,MAIAkwI,YAAA,SAAAC,EAAAhwI,EAAA2vI,GAEA,OAAAK,EAAAP,cAAA5vI,KAAAG,EAAA2vI,IAIAb,WAAA,WAEA,IAAAmB,EAAApwI,KAAAgqI,mBASA,OAPA,OAAAoG,IAEApwI,KAAAgqI,mBAAA,KACAhqI,KAAAopI,OAAAiH,4BAAAD,IAIApwI,MASAswI,sBAAA,SAAAhqI,GAKA,OAHAtG,KAAAsG,UAAAA,EACAtG,KAAAmqI,oBAAAnqI,KAAAsqI,OAAA,EAAAhkI,EAEAtG,KAAAkvI,eAKAqB,sBAAA,WAEA,OAAAvwI,KAAAmqI,qBAIAqG,YAAA,SAAArwI,GAIA,OAFAH,KAAAsG,UAAAtG,KAAAqpI,MAAAlpI,SAAAA,EAEAH,KAAAkvI,eAIAuB,SAAA,SAAAC,GAKA,OAHA1wI,KAAAM,KAAAowI,EAAApwI,KACAN,KAAAsG,UAAAoqI,EAAApqI,UAEAtG,KAAAkvI,eAIAyB,KAAA,SAAAxwI,GAEA,OAAAH,KAAA8vI,KAAA9vI,KAAAmqI,oBAAA,EAAAhqI,IAIA2vI,KAAA,SAAAc,EAAAC,EAAA1wI,GAEA,IAAA+oI,EAAAlpI,KAAAopI,OACA1/I,EAAAw/I,EAAA5oI,KACAgG,EAAAtG,KAAAsG,UAEA+4G,EAAAr/G,KAAA+pI,sBAEA,OAAA1qB,IAEAA,EAAA6pB,EAAA4H,0BACA9wI,KAAA+pI,sBAAA1qB,GAIA,IAAA5B,EAAA4B,EAAAQ,mBACAxmF,EAAAgmF,EAAAS,aAQA,OANArC,EAAA,GAAA/zH,EACA+zH,EAAA,GAAA/zH,EAAAyW,EAEAk5B,EAAA,GAAAu3G,EAAAtqI,EACA+yB,EAAA,GAAAw3G,EAAAvqI,EAEAtG,MAIAkvI,YAAA,WAEA,IAAA6B,EAAA/wI,KAAA+pI,sBASA,OAPA,OAAAgH,IAEA/wI,KAAA+pI,sBAAA,KACA/pI,KAAAopI,OAAAiH,4BAAAU,IAIA/wI,MAMAgxI,SAAA,WAEA,OAAAhxI,KAAAopI,QAIA6H,QAAA,WAEA,OAAAjxI,KAAAqpI,OAIA6H,QAAA,WAEA,OAAAlxI,KAAAspI,YAAAtpI,KAAAopI,OAAAwB,OAMAuG,QAAA,SAAA7wI,EAAAgB,EAAA8vI,EAAA9K,GAIA,GAAAtmI,KAAA9B,QAAA,CASA,IAAAqJ,EAAAvH,KAAAkqI,WAEA,GAAA,OAAA3iI,EAAA,CAIA,IAAA8pI,GAAA/wI,EAAAiH,GAAA6pI,EACA,GAAAC,EAAA,GAAA,IAAAD,EAEA,OAMApxI,KAAAkqI,WAAA,KACA5oI,EAAA8vI,EAAAC,EAMA/vI,GAAAtB,KAAAsxI,iBAAAhxI,GACA,IAAAixI,EAAAvxI,KAAAwxI,YAAAlwI,GAKAgiG,EAAAtjG,KAAAyxI,cAAAnxI,GAEA,GAAAgjG,EAAA,EAAA,CAEA,IAAAkmC,EAAAxpI,KAAA2pI,cACA+H,EAAA1xI,KAAA4pI,kBAEA,OAAA5pI,KAAA2/G,WAEA,KAzv4CA,KA2v4CA,IAAA,IAAAhlF,EAAA,EAAAntC,EAAAg8I,EAAAriJ,OAAAwzC,IAAAntC,IAAAmtC,EAEA6uG,EAAA7uG,GAAA4kF,SAAAgyB,GACAG,EAAA/2G,GAAA6rG,mBAAAljC,GAIA,MAEA,KAAA5wF,GACA,QAEA,IAAA,IAAAqpC,EAAA,EAAAgrE,EAAAyiB,EAAAriJ,OAAA40D,IAAAgrE,IAAAhrE,EAEAytF,EAAAztF,GAAAwjE,SAAAgyB,GACAG,EAAA31F,GAAAsqF,WAAAC,EAAAhjC,UA3DAtjG,KAAAyxI,cAAAnxI,IAqEAmxI,cAAA,SAAAnxI,GAEA,IAAAgjG,EAAA,EAEA,GAAAtjG,KAAA9B,QAAA,CAEAolG,EAAAtjG,KAAAsjG,OACA,IAAA+b,EAAAr/G,KAAAgqI,mBAEA,GAAA,OAAA3qB,EAAA,CAEA,IAAAsyB,EAAAtyB,EAAAE,SAAAj/G,GAAA,GAEAgjG,GAAAquC,EAEArxI,EAAA++G,EAAAQ,mBAAA,KAEA7/G,KAAAivI,aAEA,IAAA0C,IAGA3xI,KAAA9B,SAAA,KAWA,OADA8B,KAAAoqI,iBAAA9mC,EACAA,GAIAguC,iBAAA,SAAAhxI,GAEA,IAAAgG,EAAA,EAEA,IAAAtG,KAAAsqI,OAAA,CAEAhkI,EAAAtG,KAAAsG,UAEA,IAAA+4G,EAAAr/G,KAAA+pI,sBAEA,GAAA,OAAA1qB,EAIA/4G,GAFA+4G,EAAAE,SAAAj/G,GAAA,GAIAA,EAAA++G,EAAAQ,mBAAA,KAEA7/G,KAAAkvI,cAEA,IAAA5oI,EAGAtG,KAAAsqI,QAAA,EAKAtqI,KAAAsG,UAAAA,GAWA,OADAtG,KAAAmqI,oBAAA7jI,EACAA,GAIAkrI,YAAA,SAAAlwI,GAEA,IAAAnB,EAAAH,KAAAqpI,MAAAlpI,SACAsG,EAAAzG,KAAAyG,KAEAnG,EAAAN,KAAAM,KAAAgB,EACAswI,EAAA5xI,KAAAiqI,WAEA4H,EAp34CA,OAo34CAprI,EAEA,GAAA,IAAAnF,EAEA,OAAA,IAAAswI,EAAAtxI,EAEAuxI,GAAA,IAAA,EAAAD,GAAAzxI,EAAAG,EAAAA,EAIA,GAh44CA,OAg44CAmG,EAAA,EAEA,IAAAmrI,IAIA5xI,KAAAiqI,WAAA,EACAjqI,KAAA8xI,aAAA,GAAA,GAAA,IAIAC,EAAA,CAEA,GAAAzxI,GAAAH,EAEAG,EAAAH,MAEA,CAAA,KAAAG,EAAA,GAIA,CAEAN,KAAAM,KAAAA,EAEA,MAAAyxI,EANAzxI,EAAA,EAUAN,KAAAuqI,kBAAAvqI,KAAAsqI,QAAA,EACAtqI,KAAA9B,SAAA,EAEA8B,KAAAM,KAAAA,EAEAN,KAAAopI,OAAAl1H,cAAA,CACArgB,KAAA,WAAA68I,OAAA1wI,KACA2+B,UAAAr9B,EAAA,GAAA,EAAA,SAKA,CAwBA,IAtBA,IAAAswI,IAIAtwI,GAAA,GAEAswI,EAAA,EAEA5xI,KAAA8xI,aAAA,EAAA,IAAA9xI,KAAAqqI,YAAAwH,IAQA7xI,KAAA8xI,YAAA,IAAA9xI,KAAAqqI,aAAA,EAAAwH,IAMAvxI,GAAAH,GAAAG,EAAA,EAAA,CAIA,IAAA0xI,EAAAvjJ,KAAAC,MAAA4R,EAAAH,GACAG,GAAAH,EAAA6xI,EAEAJ,GAAAnjJ,KAAAkC,IAAAqhJ,GAEA,IAAAC,EAAAjyI,KAAAqqI,YAAAuH,EAEA,GAAAK,GAAA,EAIAjyI,KAAAuqI,kBAAAvqI,KAAAsqI,QAAA,EACAtqI,KAAA9B,SAAA,EAIA8B,KAAAM,KAFAA,EAAAgB,EAAA,EAAAnB,EAAA,EAIAH,KAAAopI,OAAAl1H,cAAA,CACArgB,KAAA,WAAA68I,OAAA1wI,KACA2+B,UAAAr9B,EAAA,EAAA,GAAA,QAGA,CAIA,GAAA,IAAA2wI,EAAA,CAIA,IAAAC,EAAA5wI,EAAA,EACAtB,KAAA8xI,YAAAI,GAAAA,EAAAL,QAIA7xI,KAAA8xI,aAAA,GAAA,EAAAD,GAIA7xI,KAAAiqI,WAAA2H,EAEA5xI,KAAAM,KAAAA,EAEAN,KAAAopI,OAAAl1H,cAAA,CACArgB,KAAA,OAAA68I,OAAA1wI,KAAAgyI,UAAAA,UAOAhyI,KAAAM,KAAAA,EAIA,GAAAuxI,GAAA,IAAA,EAAAD,GAIA,OAAAzxI,EAAAG,EAMA,OAAAA,GAIAwxI,YAAA,SAAAI,EAAAC,EAAAN,GAEA,IAAA56I,EAAA+I,KAAA0pI,qBAEAmI,GAEA56I,EAAA0rH,YA1g5CA,KA2g5CA1rH,EAAA2rH,UA3g5CA,OAmh5CA3rH,EAAA0rH,YAFAuvB,EAEAlyI,KAAAwqI,iBAnh5CA,KAmh5CA/3H,GAlh5CA,KA4h5CAxb,EAAA2rH,UAFAuvB,EAEAnyI,KAAAyqI,eA7h5CA,KA6h5CAh4H,GA5h5CA,OAwi5CAi9H,gBAAA,SAAAvvI,EAAAiyI,EAAAC,GAEA,IAAAnJ,EAAAlpI,KAAAopI,OAAA1/I,EAAAw/I,EAAA5oI,KACA++G,EAAAr/G,KAAAgqI,mBAEA,OAAA3qB,IAEAA,EAAA6pB,EAAA4H,0BACA9wI,KAAAgqI,mBAAA3qB,GAIA,IAAA5B,EAAA4B,EAAAQ,mBACAxmF,EAAAgmF,EAAAS,aAOA,OALArC,EAAA,GAAA/zH,EACA2vC,EAAA,GAAA+4G,EACA30B,EAAA,GAAA/zH,EAAAyW,EACAk5B,EAAA,GAAAg5G,EAEAryI,QA4BA0qI,GAAAjjJ,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAA/O,GAAAlsB,WAAA,CAEA4wB,YAAAqyH,GAEA4H,YAAA,SAAA5B,EAAA6B,GAEA,IAAA5H,EAAA+F,EAAApH,YAAAtpI,KAAA4qI,MACAxsB,EAAAsyB,EAAArH,MAAAjrB,OACAmrB,EAAAnrB,EAAAj3H,OACAokJ,EAAAmF,EAAA9G,kBACAJ,EAAAkH,EAAA/G,cACA6I,EAAA7H,EAAAhqH,KACA8xH,EAAAzyI,KAAA0yI,uBAEAC,EAAAF,EAAAD,QAEA1lJ,IAAA6lJ,IAGAF,EAAAD,GADAG,EAAA,IAKA,IAAA,IAAAnsJ,EAAA,EAAAA,IAAA+iJ,IAAA/iJ,EAAA,CAEA,IAAA63H,EAAAD,EAAA53H,GACA8/H,EAAAjI,EAAAloH,KAEAstI,EAAAkP,EAAArsB,GAEA,QAAAx5H,IAAA22I,EAEA8H,EAAA/kJ,GAAAi9I,MAEA,CAIA,QAAA32I,KAFA22I,EAAA8H,EAAA/kJ,IAEA,CAIA,OAAAi9I,EAAAoG,gBAEApG,EAAAqB,eACA9kI,KAAA4yI,oBAAAnP,EAAA+O,EAAAlsB,IAIA,YAOAmd,EAAA,IAAAD,GACAuE,GAAArlH,OAAAioH,EAAArkB,EAJAisB,GAAAA,EACA3I,kBAAApjJ,GAAAi9I,QAAAqE,YAIAzpB,EAAAa,cAAAb,EAAAE,iBAEAumB,eACA9kI,KAAA4yI,oBAAAnP,EAAA+O,EAAAlsB,GAEAilB,EAAA/kJ,GAAAi9I,EAIA+F,EAAAhjJ,GAAAg5H,aAAAikB,EAAAtuE,SAMA45E,gBAAA,SAAA2B,GAEA,IAAA1wI,KAAAovI,gBAAAsB,GAAA,CAEA,GAAA,OAAAA,EAAA7G,YAAA,CAKA,IAAA2I,GAAA9B,EAAApH,YAAAtpI,KAAA4qI,OAAAjqH,KACAkyH,EAAAnC,EAAArH,MAAA1oH,KACAmyH,EAAA9yI,KAAA+yI,eAAAF,GAEA7yI,KAAAsyI,YAAA5B,EACAoC,GAAAA,EAAAE,aAAA,IAEAhzI,KAAAizI,mBAAAvC,EAAAmC,EAAAL,GAOA,IAHA,IAAAjH,EAAAmF,EAAA9G,kBAGApjJ,EAAA,EAAAH,EAAAklJ,EAAApkJ,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAAi9I,EAAA8H,EAAA/kJ,GAEA,GAAAi9I,EAAAoB,aAEA7kI,KAAAkzI,aAAAzP,GACAA,EAAAiD,qBAMA1mI,KAAAmzI,YAAAzC,KAMA1B,kBAAA,SAAA0B,GAEA,GAAA1wI,KAAAovI,gBAAAsB,GAAA,CAKA,IAHA,IAAAnF,EAAAmF,EAAA9G,kBAGApjJ,EAAA,EAAAH,EAAAklJ,EAAApkJ,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAAi9I,EAAA8H,EAAA/kJ,GAEA,KAAAi9I,EAAAoB,WAEApB,EAAAoD,uBACA7mI,KAAAozI,iBAAA3P,IAMAzjI,KAAAqzI,gBAAA3C,KAQA7F,mBAAA,WAEA7qI,KAAAszI,SAAA,GACAtzI,KAAAuzI,gBAAA,EAEAvzI,KAAA+yI,eAAA,GAQA/yI,KAAAkoI,UAAA,GACAloI,KAAAwzI,iBAAA,EAEAxzI,KAAA0yI,uBAAA,GAGA1yI,KAAAyzI,qBAAA,GACAzzI,KAAA0zI,4BAAA,EAEA,IAAAtvF,EAAApkD,KAEAA,KAAA6oI,MAAA,CAEA8K,QAAA,CACA7K,YAEA,OAAA1kF,EAAAkvF,SAAAnsJ,QAGA4hJ,YAEA,OAAA3kF,EAAAmvF,kBAIAhI,SAAA,CACAzC,YAEA,OAAA1kF,EAAA8jF,UAAA/gJ,QAGA4hJ,YAEA,OAAA3kF,EAAAovF,mBAIAI,oBAAA,CACA9K,YAEA,OAAA1kF,EAAAqvF,qBAAAtsJ,QAGA4hJ,YAEA,OAAA3kF,EAAAsvF,gCAWAtE,gBAAA,SAAAsB,GAEA,IAAArmI,EAAAqmI,EAAA7G,YACA,OAAA,OAAAx/H,GAAAA,EAAArK,KAAAuzI,iBAIAN,mBAAA,SAAAvC,EAAAmC,EAAAL,GAEA,IAAAmB,EAAA3zI,KAAAszI,SACAO,EAAA7zI,KAAA+yI,eAEAD,EAAAe,EAAAhB,GAEA,QAAA/lJ,IAAAgmJ,EAEAA,EAAA,CAEAE,aAAA,CAAAtC,GACAoD,aAAA,IAIApD,EAAA5G,kBAAA,EAEA+J,EAAAhB,GAAAC,MAEA,CAEA,IAAAE,EAAAF,EAAAE,aAEAtC,EAAA5G,kBAAAkJ,EAAA7rJ,OACA6rJ,EAAAroJ,KAAA+lJ,GAIAA,EAAA7G,YAAA8J,EAAAxsJ,OACAwsJ,EAAAhpJ,KAAA+lJ,GAEAoC,EAAAgB,aAAAtB,GAAA9B,GAIAqD,sBAAA,SAAArD,GAEA,IAAAiD,EAAA3zI,KAAAszI,SACAU,EAAAL,EAAAA,EAAAxsJ,OAAA,GACA8sJ,EAAAvD,EAAA7G,YAEAmK,EAAAnK,YAAAoK,EACAN,EAAAM,GAAAD,EACAL,EAAAljJ,MAEAigJ,EAAA7G,YAAA,KAGA,IAAAgJ,EAAAnC,EAAArH,MAAA1oH,KACAkzH,EAAA7zI,KAAA+yI,eACAD,EAAAe,EAAAhB,GACAqB,EAAApB,EAAAE,aAEAmB,EACAD,EAAAA,EAAA/sJ,OAAA,GAEAitJ,EAAA1D,EAAA5G,kBAEAqK,EAAArK,kBAAAsK,EACAF,EAAAE,GAAAD,EACAD,EAAAzjJ,MAEAigJ,EAAA5G,kBAAA,YAGAgJ,EAAAgB,cACApD,EAAApH,YAAAtpI,KAAA4qI,OAAAjqH,MAIA,IAAAuzH,EAAA/sJ,eAEA0sJ,EAAAhB,GAIA7yI,KAAAq0I,iCAAA3D,IAIA2D,iCAAA,SAAA3D,GAIA,IAFA,IAAAnF,EAAAmF,EAAA9G,kBAEApjJ,EAAA,EAAAH,EAAAklJ,EAAApkJ,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAAi9I,EAAA8H,EAAA/kJ,GAEA,KAAAi9I,EAAAqB,gBAEA9kI,KAAAs0I,uBAAA7Q,KAQA0P,YAAA,SAAAzC,GAQA,IAAAiD,EAAA3zI,KAAAszI,SACAiB,EAAA7D,EAAA7G,YAEA2K,EAAAx0I,KAAAuzI,kBAEAkB,EAAAd,EAAAa,GAEA9D,EAAA7G,YAAA2K,EACAb,EAAAa,GAAA9D,EAEA+D,EAAA5K,YAAA0K,EACAZ,EAAAY,GAAAE,GAIApB,gBAAA,SAAA3C,GAQA,IAAAiD,EAAA3zI,KAAAszI,SACAiB,EAAA7D,EAAA7G,YAEA6K,IAAA10I,KAAAuzI,gBAEAoB,EAAAhB,EAAAe,GAEAhE,EAAA7G,YAAA6K,EACAf,EAAAe,GAAAhE,EAEAiE,EAAA9K,YAAA0K,EACAZ,EAAAY,GAAAI,GAMA/B,oBAAA,SAAAnP,EAAA+O,EAAAlsB,GAEA,IAAAmsB,EAAAzyI,KAAA0yI,uBACAnH,EAAAvrI,KAAAkoI,UAEA0M,EAAAnC,EAAAD,QAEA1lJ,IAAA8nJ,IAGAnC,EAAAD,GADAoC,EAAA,IAKAA,EAAAtuB,GAAAmd,EAEAA,EAAAoG,YAAA0B,EAAApkJ,OACAokJ,EAAA5gJ,KAAA84I,IAIA6Q,uBAAA,SAAA7Q,GAEA,IAAA8H,EAAAvrI,KAAAkoI,UACA2M,EAAApR,EAAAA,QACA+O,EAAAqC,EAAAzM,SAAAznH,KACA2lG,EAAAuuB,EAAA/kE,KACA2iE,EAAAzyI,KAAA0yI,uBACAkC,EAAAnC,EAAAD,GAEAsC,EAAAvJ,EAAAA,EAAApkJ,OAAA,GACA8sJ,EAAAxQ,EAAAoG,YAEAiL,EAAAjL,YAAAoK,EACA1I,EAAA0I,GAAAa,EACAvJ,EAAA96I,aAEAmkJ,EAAAtuB,GAEA,IAAA/+H,OAAAkB,KAAAmsJ,GAAAztJ,eAEAsrJ,EAAAD,IAMAU,aAAA,SAAAzP,GAEA,IAAA8H,EAAAvrI,KAAAkoI,UACAqM,EAAA9Q,EAAAoG,YAEA2K,EAAAx0I,KAAAwzI,mBAEAuB,EAAAxJ,EAAAiJ,GAEA/Q,EAAAoG,YAAA2K,EACAjJ,EAAAiJ,GAAA/Q,EAEAsR,EAAAlL,YAAA0K,EACAhJ,EAAAgJ,GAAAQ,GAIA3B,iBAAA,SAAA3P,GAEA,IAAA8H,EAAAvrI,KAAAkoI,UACAqM,EAAA9Q,EAAAoG,YAEA6K,IAAA10I,KAAAwzI,iBAEAwB,EAAAzJ,EAAAmJ,GAEAjR,EAAAoG,YAAA6K,EACAnJ,EAAAmJ,GAAAjR,EAEAuR,EAAAnL,YAAA0K,EACAhJ,EAAAgJ,GAAAS,GAOAlE,wBAAA,WAEA,IAAAtH,EAAAxpI,KAAAyzI,qBACAe,EAAAx0I,KAAA0zI,8BAEAr0B,EAAAmqB,EAAAgL,GAaA,YAXA1nJ,IAAAuyH,KAEAA,EAAA,IAAAiB,GACA,IAAA3nE,aAAA,GAAA,IAAAA,aAAA,GACA,EAAA34C,KAAAi1I,mCAEAC,aAAAV,EACAhL,EAAAgL,GAAAn1B,GAIAA,GAIAgxB,4BAAA,SAAAhxB,GAEA,IAAAmqB,EAAAxpI,KAAAyzI,qBACAc,EAAAl1B,EAAA61B,aAEAR,IAAA10I,KAAA0zI,4BAEAyB,EAAA3L,EAAAkL,GAEAr1B,EAAA61B,aAAAR,EACAlL,EAAAkL,GAAAr1B,EAEA81B,EAAAD,aAAAX,EACA/K,EAAA+K,GAAAY,GAIAF,iCAAA,IAAAt8F,aAAA,GAKAy8F,WAAA,SAAAj3B,EAAAk3B,EAAA11B,GAEA,IAAAgrB,EAAA0K,GAAAr1I,KAAA4qI,MACA4H,EAAA7H,EAAAhqH,KAEA20H,EAAA,iBAAAn3B,EAAAkD,GAAAsE,WAAAglB,EAAAxsB,GAAAA,EAEA00B,EAAA,OAAAyC,EAAAA,EAAA30H,KAAAw9F,EAEA20B,EAAA9yI,KAAA+yI,eAAAF,GACAN,EAAA,KAgBA,QAdAzlJ,IAAA6yH,IAIAA,EAFA,OAAA21B,EAEAA,EAAA31B,UAIAjtG,SAMA5lB,IAAAgmJ,EAAA,CAEA,IAAAyC,EAAAzC,EAAAgB,aAAAtB,GAEA,QAAA1lJ,IAAAyoJ,GAAAA,EAAA51B,YAAAA,EAEA,OAAA41B,EAMAhD,EAAAO,EAAAE,aAAA,GAGA,OAAAsC,IACAA,EAAA/C,EAAAlJ,OAKA,GAAA,OAAAiM,EAAA,OAAA,KAGA,IAAAE,EAAA,IAAAvM,GAAAjpI,KAAAs1I,EAAAD,EAAA11B,GAOA,OALA3/G,KAAAsyI,YAAAkD,EAAAjD,GAGAvyI,KAAAizI,mBAAAuC,EAAA3C,EAAAL,GAEAgD,GAKAD,eAAA,SAAAp3B,EAAAk3B,GAEA,IAAA1K,EAAA0K,GAAAr1I,KAAA4qI,MACA4H,EAAA7H,EAAAhqH,KAEA20H,EAAA,iBAAAn3B,EACAkD,GAAAsE,WAAAglB,EAAAxsB,GAAAA,EAIA20B,EAAA9yI,KAAA+yI,eAFAuC,EAAAA,EAAA30H,KAAAw9F,GAIA,YAAArxH,IAAAgmJ,GAEAA,EAAAgB,aAAAtB,IAIA,MAKAiD,cAAA,WAKA,IAHA,IAAA9B,EAAA3zI,KAAAszI,SAGA9sJ,EAFAwZ,KAAAuzI,gBAEA,EAAA/sJ,GAAA,IAAAA,EAEAmtJ,EAAAntJ,GAAA6a,OAIA,OAAArB,MAKA8E,OAAA,SAAAxD,GAcA,IAVA,IAAAqyI,EAAA3zI,KAAAszI,SACAoC,EAAA11I,KAAAuzI,gBAEAjzI,EAAAN,KAAAM,MALAgB,GAAAtB,KAAAsG,UAMA8qI,EAAA3iJ,KAAAyb,KAAA5I,GAEAglI,EAAAtmI,KAAA8qI,YAAA,EAIAtkJ,EAAA,EAAAA,IAAAkvJ,IAAAlvJ,EAAA,CAEAmtJ,EAAAntJ,GAEA2qJ,QAAA7wI,EAAAgB,EAAA8vI,EAAA9K,GASA,IAHA,IAAAiF,EAAAvrI,KAAAkoI,UACA2F,EAAA7tI,KAAAwzI,iBAEAx6G,EAAA,EAAAA,IAAA60G,IAAA70G,EAEAuyG,EAAAvyG,GAAAyvD,MAAA69C,GAIA,OAAAtmI,MAKA21I,QAAA,SAAAC,GAEA51I,KAAAM,KAAA,EACA,IAAA,IAAA9Z,EAAA,EAAAA,EAAAwZ,KAAAszI,SAAAnsJ,OAAAX,IAEAwZ,KAAAszI,SAAA9sJ,GAAA8Z,KAAA,EAIA,OAAAN,KAAA8E,OAAA8wI,IAKA1E,QAAA,WAEA,OAAAlxI,KAAA4qI,OAKAiL,YAAA,SAAA13B,GAEA,IAAAw1B,EAAA3zI,KAAAszI,SACAT,EAAA10B,EAAAx9F,KACAkzH,EAAA7zI,KAAA+yI,eACAD,EAAAe,EAAAhB,GAEA,QAAA/lJ,IAAAgmJ,EAAA,CAQA,IAFA,IAAAgD,EAAAhD,EAAAE,aAEAxsJ,EAAA,EAAAH,EAAAyvJ,EAAA3uJ,OAAAX,IAAAH,IAAAG,EAAA,CAEA,IAAAkqJ,EAAAoF,EAAAtvJ,GAEAwZ,KAAAgvI,kBAAA0B,GAEA,IAAAuD,EAAAvD,EAAA7G,YACAmK,EAAAL,EAAAA,EAAAxsJ,OAAA,GAEAupJ,EAAA7G,YAAA,KACA6G,EAAA5G,kBAAA,KAEAkK,EAAAnK,YAAAoK,EACAN,EAAAM,GAAAD,EACAL,EAAAljJ,MAEAuP,KAAAq0I,iCAAA3D,UAIAmD,EAAAhB,KAOAkD,YAAA,SAAApL,GAEA,IAAA6H,EAAA7H,EAAAhqH,KACAkzH,EAAA7zI,KAAA+yI,eAEA,IAAA,IAAAF,KAAAgB,EAAA,CAEA,IACAnD,EADAmD,EAAAhB,GAAAiB,aACAtB,QAEA1lJ,IAAA4jJ,IAEA1wI,KAAAgvI,kBAAA0B,GACA1wI,KAAA+zI,sBAAArD,IAMA,IACAkE,EADA50I,KAAA0yI,uBACAF,GAEA,QAAA1lJ,IAAA8nJ,EAEA,IAAA,IAAAtuB,KAAAsuB,EAAA,CAEA,IAAAnR,EAAAmR,EAAAtuB,GACAmd,EAAAoD,uBACA7mI,KAAAs0I,uBAAA7Q,KASAuS,cAAA,SAAA73B,EAAAk3B,GAEA,IAAA3E,EAAA1wI,KAAAu1I,eAAAp3B,EAAAk3B,GAEA,OAAA3E,IAEA1wI,KAAAgvI,kBAAA0B,GACA1wI,KAAA+zI,sBAAArD,OAyBA3F,GAAAtjJ,UAAA2wB,MAAA,WAEA,OAAA,IAAA2yH,QAAAj+I,IAAAkT,KAAA9T,MAAAksB,MAAApY,KAAA9T,MAAA8T,KAAA9T,MAAAksB,UAgBA4yH,GAAAvjJ,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAy9E,GAAA14G,WAAA,CAEA4wB,YAAA2yH,GAEAtnE,8BAAA,EAEAt3E,KAAA,SAAAvD,GAMA,OAJAs3G,GAAA14G,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAiiE,iBAAAp5E,EAAAo5E,iBAEAjiE,MAIAoY,MAAA,SAAAtV,GAEA,IAAAg+F,EAAAX,GAAA14G,UAAA2wB,MAAAlxB,KAAA8Y,KAAA8C,GAIA,OAFAg+F,EAAA7+B,iBAAAjiE,KAAAiiE,iBAEA6+B,GAIAj+E,OAAA,SAAA/f,GAEA,IAAAy+G,EAAAphB,GAAA14G,UAAAo7B,OAAA37B,KAAA8Y,KAAA8C,GAKA,OAHAy+G,EAAA79C,8BAAA,EACA69C,EAAAt/C,iBAAAjiE,KAAAiiE,iBAEAs/C,KAuEAh6H,OAAAM,OAAAojJ,GAAAxjJ,UAAA,CAEA+vB,IAAA,SAAAknB,EAAAC,GAIA3+B,KAAA4+B,IAAApnB,IAAAknB,EAAAC,IAIAs3G,cAAA,SAAAC,EAAA5rH,GAEAA,GAAAA,EAAA2iC,qBAEAjtD,KAAA4+B,IAAAF,OAAAxS,sBAAA5B,EAAAK,aACA3qB,KAAA4+B,IAAAD,UAAAnnB,IAAA0+H,EAAA/pJ,EAAA+pJ,EAAAzoJ,EAAA,IAAAg9B,UAAAH,GAAA1R,IAAA5Y,KAAA4+B,IAAAF,QAAA3kB,YACA/Z,KAAAsqB,OAAAA,GAEAA,GAAAA,EAAA4zE,sBAEAl+F,KAAA4+B,IAAAF,OAAAlnB,IAAA0+H,EAAA/pJ,EAAA+pJ,EAAAzoJ,GAAA68B,EAAAqH,KAAArH,EAAAsH,MAAAtH,EAAAqH,KAAArH,EAAAsH,MAAAnH,UAAAH,GACAtqB,KAAA4+B,IAAAD,UAAAnnB,IAAA,EAAA,GAAA,GAAAoT,mBAAAN,EAAAK,aACA3qB,KAAAsqB,OAAAA,GAIApzB,QAAAkK,MAAA,8CAMAgqI,gBAAA,SAAArgJ,EAAAuuC,EAAA4zF,GAEA,IAAAtqE,EAAAsqE,GAAA,GAMA,OAJAke,GAAArgJ,EAAAiV,KAAA4iD,EAAAtpB,GAEAspB,EAAA52D,KAAAm/I,IAEAvoF,GAIAuzF,iBAAA,SAAA/2E,EAAA9lC,EAAA4zF,GAEA,IAAAtqE,EAAAsqE,GAAA,GAEA,IAAA,IAAAhiI,MAAA6B,QAAAqyE,GAGA,OADAloE,QAAAC,KAAA,8DACAyrD,EAIA,IAAA,IAAAp8D,EAAA,EAAAyJ,EAAAmvE,EAAAj4E,OAAAX,EAAAyJ,EAAAzJ,IAEA4kJ,GAAAhsE,EAAA54E,GAAAwZ,KAAA4iD,EAAAtpB,GAMA,OAFAspB,EAAA52D,KAAAm/I,IAEAvoF,KA0BAr7D,OAAAM,OAAAwjJ,GAAA5jJ,UAAA,CAEA+vB,IAAA,SAAAqU,EAAAC,EAAAvM,GAMA,OAJAvf,KAAA6rB,OAAAA,EACA7rB,KAAA8rB,IAAAA,EACA9rB,KAAAuf,MAAAA,EAEAvf,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAgqJ,GAMA,OAJAp2I,KAAA6rB,OAAAuqH,EAAAvqH,OACA7rB,KAAA8rB,IAAAsqH,EAAAtqH,IACA9rB,KAAAuf,MAAA62H,EAAA72H,MAEAvf,MAKAq2I,SAAA,WAKA,OAFAr2I,KAAA8rB,IAAAr9B,KAAAsD,IADA,KACAtD,KAAAqM,IAAArM,KAAAgmB,GADA,KACAzU,KAAA8rB,MAEA9rB,MAIAuyB,eAAA,SAAAja,GAEA,OAAAtY,KAAAs2I,uBAAAh+H,EAAAnsB,EAAAmsB,EAAA7qB,EAAA6qB,EAAAmJ,IAIA60H,uBAAA,SAAAnqJ,EAAAsB,EAAAg0B,GAgBA,OAdAzhB,KAAA6rB,OAAAp9B,KAAAorB,KAAA1tB,EAAAA,EAAAsB,EAAAA,EAAAg0B,EAAAA,GAEA,IAAAzhB,KAAA6rB,QAEA7rB,KAAAuf,MAAA,EACAvf,KAAA8rB,IAAA,IAIA9rB,KAAAuf,MAAA9wB,KAAAwrB,MAAA9tB,EAAAs1B,GACAzhB,KAAA8rB,IAAAr9B,KAAAo1B,KAAAtP,GAAAW,MAAAznB,EAAAuS,KAAA6rB,QAAA,EAAA,KAIA7rB,QAuBAzY,OAAAM,OAAAyjJ,GAAA7jJ,UAAA,CAEA+vB,IAAA,SAAAqU,EAAAtM,EAAA9xB,GAMA,OAJAuS,KAAA6rB,OAAAA,EACA7rB,KAAAuf,MAAAA,EACAvf,KAAAvS,EAAAA,EAEAuS,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAAgqJ,GAMA,OAJAp2I,KAAA6rB,OAAAuqH,EAAAvqH,OACA7rB,KAAAuf,MAAA62H,EAAA72H,MACAvf,KAAAvS,EAAA2oJ,EAAA3oJ,EAEAuS,MAIAuyB,eAAA,SAAAja,GAEA,OAAAtY,KAAAs2I,uBAAAh+H,EAAAnsB,EAAAmsB,EAAA7qB,EAAA6qB,EAAAmJ,IAIA60H,uBAAA,SAAAnqJ,EAAAsB,EAAAg0B,GAMA,OAJAzhB,KAAA6rB,OAAAp9B,KAAAorB,KAAA1tB,EAAAA,EAAAs1B,EAAAA,GACAzhB,KAAAuf,MAAA9wB,KAAAwrB,MAAA9tB,EAAAs1B,GACAzhB,KAAAvS,EAAAA,EAEAuS,QAUA,IAAAu2I,GAAA,IAAA9+H,GAEA,SAAA++H,GAAA17I,EAAA/I,GAEAiO,KAAAlF,SAAAhO,IAAAgO,EAAAA,EAAA,IAAA2c,GAAA,SAAA,UACAzX,KAAAjO,SAAAjF,IAAAiF,EAAAA,EAAA,IAAA0lB,IAAAnQ,UAAAA,UAIA/f,OAAAM,OAAA2uJ,GAAA/uJ,UAAA,CAEA+vB,IAAA,SAAA1c,EAAA/I,GAKA,OAHAiO,KAAAlF,IAAA1O,KAAA0O,GACAkF,KAAAjO,IAAA3F,KAAA2F,GAEAiO,MAIAw7B,cAAA,SAAAC,GAEAz7B,KAAA07B,YAEA,IAAA,IAAAl1C,EAAA,EAAAm1C,EAAAF,EAAAt0C,OAAAX,EAAAm1C,EAAAn1C,IAEAwZ,KAAA47B,cAAAH,EAAAj1C,IAIA,OAAAwZ,MAIA67B,qBAAA,SAAAxgB,EAAAygB,GAEA,IAAAC,EAAAw6G,GAAAnqJ,KAAA0vC,GAAA9iB,eAAA,IAIA,OAHAhZ,KAAAlF,IAAA1O,KAAAivB,GAAAzC,IAAAmjB,GACA/7B,KAAAjO,IAAA3F,KAAAivB,GAAA9C,IAAAwjB,GAEA/7B,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAA8vC,GAKA,OAHAl8B,KAAAlF,IAAA1O,KAAA8vC,EAAAphC,KACAkF,KAAAjO,IAAA3F,KAAA8vC,EAAAnqC,KAEAiO,MAIA07B,UAAA,WAKA,OAHA17B,KAAAlF,IAAA3O,EAAA6T,KAAAlF,IAAArN,EAAA,SACAuS,KAAAjO,IAAA5F,EAAA6T,KAAAjO,IAAAtE,GAAA6Z,SAEAtH,MAIAm8B,QAAA,WAIA,OAAAn8B,KAAAjO,IAAA5F,EAAA6T,KAAAlF,IAAA3O,GAAA6T,KAAAjO,IAAAtE,EAAAuS,KAAAlF,IAAArN,GAIA2uC,UAAA,SAAAxzC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,mDACAvO,EAAA,IAAA6uB,IAIAzX,KAAAm8B,UAAAvzC,EAAA4uB,IAAA,EAAA,GAAA5uB,EAAA6vB,WAAAzY,KAAAlF,IAAAkF,KAAAjO,KAAAinB,eAAA,KAIAqjB,QAAA,SAAAzzC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,iDACAvO,EAAA,IAAA6uB,IAIAzX,KAAAm8B,UAAAvzC,EAAA4uB,IAAA,EAAA,GAAA5uB,EAAAiwB,WAAA7Y,KAAAjO,IAAAiO,KAAAlF,MAIA8gC,cAAA,SAAAU,GAKA,OAHAt8B,KAAAlF,IAAAA,IAAAwhC,GACAt8B,KAAAjO,IAAAA,IAAAuqC,GAEAt8B,MAIAu8B,eAAA,SAAA7F,GAKA,OAHA12B,KAAAlF,IAAA8d,IAAA8d,GACA12B,KAAAjO,IAAAwmB,IAAAme,GAEA12B,MAIAw8B,eAAA,SAAAzkB,GAKA,OAHA/X,KAAAlF,IAAA4d,WAAAX,GACA/X,KAAAjO,IAAA2mB,UAAAX,GAEA/X,MAIA48B,cAAA,SAAAN,GAEA,QAAAA,EAAAnwC,EAAA6T,KAAAlF,IAAA3O,GAAAmwC,EAAAnwC,EAAA6T,KAAAjO,IAAA5F,GACAmwC,EAAA7uC,EAAAuS,KAAAlF,IAAArN,GAAA6uC,EAAA7uC,EAAAuS,KAAAjO,IAAAtE,IAIAovC,YAAA,SAAAX,GAEA,OAAAl8B,KAAAlF,IAAA3O,GAAA+vC,EAAAphC,IAAA3O,GAAA+vC,EAAAnqC,IAAA5F,GAAA6T,KAAAjO,IAAA5F,GACA6T,KAAAlF,IAAArN,GAAAyuC,EAAAphC,IAAArN,GAAAyuC,EAAAnqC,IAAAtE,GAAAuS,KAAAjO,IAAAtE,GAIAqvC,aAAA,SAAAR,EAAA1zC,GAYA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,sDACAvO,EAAA,IAAA6uB,IAIA7uB,EAAA4uB,KACA8kB,EAAAnwC,EAAA6T,KAAAlF,IAAA3O,IAAA6T,KAAAjO,IAAA5F,EAAA6T,KAAAlF,IAAA3O,IACAmwC,EAAA7uC,EAAAuS,KAAAlF,IAAArN,IAAAuS,KAAAjO,IAAAtE,EAAAuS,KAAAlF,IAAArN,KAKAsvC,cAAA,SAAAb,GAIA,QAAAA,EAAAnqC,IAAA5F,EAAA6T,KAAAlF,IAAA3O,GAAA+vC,EAAAphC,IAAA3O,EAAA6T,KAAAjO,IAAA5F,GACA+vC,EAAAnqC,IAAAtE,EAAAuS,KAAAlF,IAAArN,GAAAyuC,EAAAphC,IAAArN,EAAAuS,KAAAjO,IAAAtE,IAIAyvC,WAAA,SAAAZ,EAAA1zC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,oDACAvO,EAAA,IAAA6uB,IAIA7uB,EAAAwD,KAAAkwC,GAAApnB,MAAAlV,KAAAlF,IAAAkF,KAAAjO,MAIAyrC,gBAAA,SAAAlB,GAGA,OADAi6G,GAAAnqJ,KAAAkwC,GAAApnB,MAAAlV,KAAAlF,IAAAkF,KAAAjO,KACA6mB,IAAA0jB,GAAAn1C,UAIAu2C,UAAA,SAAAxB,GAKA,OAHAl8B,KAAAlF,IAAA/I,IAAAmqC,EAAAphC,KACAkF,KAAAjO,IAAA+I,IAAAohC,EAAAnqC,KAEAiO,MAIA28B,MAAA,SAAAT,GAKA,OAHAl8B,KAAAlF,IAAAA,IAAAohC,EAAAphC,KACAkF,KAAAjO,IAAAA,IAAAmqC,EAAAnqC,KAEAiO,MAIAwf,UAAA,SAAA1E,GAKA,OAHA9a,KAAAlF,IAAAyd,IAAAuC,GACA9a,KAAAjO,IAAAwmB,IAAAuC,GAEA9a,MAIA4a,OAAA,SAAAshB,GAEA,OAAAA,EAAAphC,IAAA8f,OAAA5a,KAAAlF,MAAAohC,EAAAnqC,IAAA6oB,OAAA5a,KAAAjO,QAUA,IAAA0kJ,GAAA,IAAAptH,GACAqtH,GAAA,IAAArtH,GAEA,SAAAstH,GAAAx0G,EAAAlgC,GAEAjC,KAAAmiC,WAAAr1C,IAAAq1C,EAAAA,EAAA,IAAA9Y,GACArpB,KAAAiC,SAAAnV,IAAAmV,EAAAA,EAAA,IAAAonB,GAyIA,SAAAutH,GAAA99G,GAEA9E,GAAA9sC,KAAA8Y,MAEAA,KAAA84B,SAAAA,EACA94B,KAAAH,OAAA,aAEAG,KAAAq7F,cAAA,EACAr7F,KAAAs7F,YAAA,EACAt7F,KAAAw7F,WAAA,EACAx7F,KAAAu7F,QAAA,EAEAv7F,KAAAy7F,cAAA,KACAz7F,KAAA07F,YAAA,KACA17F,KAAA47F,WAAA,KACA57F,KAAA27F,QAAA,KAEA37F,KAAAu4B,MAAA,EAtJAhxC,OAAAM,OAAA8uJ,GAAAlvJ,UAAA,CAEA+vB,IAAA,SAAA2qB,EAAAlgC,GAKA,OAHAjC,KAAAmiC,MAAA/1C,KAAA+1C,GACAniC,KAAAiC,IAAA7V,KAAA6V,GAEAjC,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,OAIA5T,KAAA,SAAA61C,GAKA,OAHAjiC,KAAAmiC,MAAA/1C,KAAA61C,EAAAE,OACAniC,KAAAiC,IAAA7V,KAAA61C,EAAAhgC,KAEAjC,MAIAo8B,UAAA,SAAAxzC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,oDACAvO,EAAA,IAAAygC,IAIAzgC,EAAA6vB,WAAAzY,KAAAmiC,MAAAniC,KAAAiC,KAAA+W,eAAA,KAIAkpB,MAAA,SAAAt5C,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,gDACAvO,EAAA,IAAAygC,IAIAzgC,EAAAiwB,WAAA7Y,KAAAiC,IAAAjC,KAAAmiC,QAIA00G,WAAA,WAEA,OAAA72I,KAAAmiC,MAAAhoB,kBAAAna,KAAAiC,MAIAo0B,SAAA,WAEA,OAAAr2B,KAAAmiC,MAAAjoB,WAAAla,KAAAiC,MAIA48B,GAAA,SAAAv4C,EAAAsC,GASA,YAPAkE,IAAAlE,IAEAsO,QAAAC,KAAA,6CACAvO,EAAA,IAAAygC,IAIArpB,KAAAkiC,MAAAt5C,GAAAowB,eAAA1yB,GAAAiyB,IAAAvY,KAAAmiC,QAIA20G,6BAAA,SAAAx6G,EAAAy6G,GAEAN,GAAA59H,WAAAyjB,EAAAt8B,KAAAmiC,OACAu0G,GAAA79H,WAAA7Y,KAAAiC,IAAAjC,KAAAmiC,OAEA,IAAA60G,EAAAN,GAAAh9H,IAAAg9H,IAGApwJ,EAFAowJ,GAAAh9H,IAAA+8H,IAEAO,EAQA,OANAD,IAEAzwJ,EAAAiuB,GAAAW,MAAA5uB,EAAA,EAAA,IAIAA,GAIAy4C,oBAAA,SAAAzC,EAAAy6G,EAAAnuJ,GAEA,IAAAtC,EAAA0Z,KAAA82I,6BAAAx6G,EAAAy6G,GASA,YAPAjqJ,IAAAlE,IAEAsO,QAAAC,KAAA,8DACAvO,EAAA,IAAAygC,IAIArpB,KAAAkiC,MAAAt5C,GAAAowB,eAAA1yB,GAAAiyB,IAAAvY,KAAAmiC,QAIAxe,aAAA,SAAAzF,GAKA,OAHAle,KAAAmiC,MAAAxe,aAAAzF,GACAle,KAAAiC,IAAA0hB,aAAAzF,GAEAle,MAIA4a,OAAA,SAAAqnB,GAEA,OAAAA,EAAAE,MAAAvnB,OAAA5a,KAAAmiC,QAAAF,EAAAhgC,IAAA2Y,OAAA5a,KAAAiC,SA+BA20I,GAAAnvJ,UAAAF,OAAAm7B,OAAAsR,GAAAvsC,YACA4wB,YAAAu+H,GAEAA,GAAAnvJ,UAAAs1G,yBAAA,EAQA,IAAAk6C,GAAA,IAAA5tH,GAEA,SAAA6tH,GAAAj7D,EAAAltC,GAEA/a,GAAA9sC,KAAA8Y,MAEAA,KAAAi8E,MAAAA,EACAj8E,KAAAi8E,MAAA7kD,oBAEAp3B,KAAAke,OAAA+9D,EAAAtxD,YACA3qB,KAAAihB,kBAAA,EAEAjhB,KAAA+uC,MAAAA,EAYA,IAVA,IAAAnW,EAAA,IAAA4jB,GAEAgB,EAAA,CACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAAA,EAAA,GAGAh3D,EAAA,EAAAm0C,EAAA,EAAAn0C,EAAA,GAAAA,IAAAm0C,IAAA,CAEA,IAAAE,EAAAr0C,EAFA,GAEAiI,KAAAgmB,GAAA,EACAqmB,EAAAH,EAHA,GAGAlsC,KAAAgmB,GAAA,EAEA+oC,EAAA7yD,KACA8D,KAAAqoB,IAAA+jB,GAAApsC,KAAAsoB,IAAA8jB,GAAA,EACApsC,KAAAqoB,IAAAgkB,GAAArsC,KAAAsoB,IAAA+jB,GAAA,GAKAlC,EAAAokB,aAAA,WAAA,IAAAtE,GAAA8E,EAAA,IAEA,IAAA1kB,EAAA,IAAAggD,GAAA,CAAA5jD,KAAA,EAAAye,YAAA,IAEA3zC,KAAAm3I,KAAA,IAAAlxC,GAAArtE,EAAAE,GACA94B,KAAAuY,IAAAvY,KAAAm3I,MAEAn3I,KAAA8E,UAIAoyI,GAAAzvJ,UAAAF,OAAAm7B,OAAAsR,GAAAvsC,YACA4wB,YAAA6+H,GAEAA,GAAAzvJ,UAAAmZ,QAAA,WAEAZ,KAAAm3I,KAAAv+G,SAAAh4B,UACAZ,KAAAm3I,KAAAr+G,SAAAl4B,WAIAs2I,GAAAzvJ,UAAAqd,OAAA,WAEA9E,KAAAi8E,MAAA7kD,oBAEA,IAAAggH,EAAAp3I,KAAAi8E,MAAA5lD,SAAAr2B,KAAAi8E,MAAA5lD,SAAA,IACAghH,EAAAD,EAAA3oJ,KAAAm/C,IAAA5tC,KAAAi8E,MAAAjiE,OAEAha,KAAAm3I,KAAA7yI,MAAAkT,IAAA6/H,EAAAA,EAAAD,GAEAH,GAAA/qH,sBAAAlsB,KAAAi8E,MAAArzF,OAAA+hC,aAEA3qB,KAAAm3I,KAAAnoH,OAAAioH,SAEAnqJ,IAAAkT,KAAA+uC,MAEA/uC,KAAAm3I,KAAAr+G,SAAAiW,MAAAv3B,IAAAxX,KAAA+uC,OAIA/uC,KAAAm3I,KAAAr+G,SAAAiW,MAAA3iD,KAAA4T,KAAAi8E,MAAAltC,QAcA,IAAAuoG,GAAA,IAAAjuH,GACAkuH,GAAA,IAAA/qH,GACAgrH,GAAA,IAAAhrH,GAsBA,SAAAirH,GAAA1sJ,GAYA,IAVA,IAAA2uF,EAtBA,SAAAg+D,EAAA3sJ,GAEA,IAAA4sJ,EAAA,GAEA5sJ,GAAAA,EAAAg5G,QAEA4zC,EAAAhtJ,KAAAI,GAIA,IAAA,IAAAvE,EAAA,EAAAA,EAAAuE,EAAAkpC,SAAA9sC,OAAAX,IAEAmxJ,EAAAhtJ,KAAA89F,MAAAkvD,EAAAD,EAAA3sJ,EAAAkpC,SAAAztC,KAIA,OAAAmxJ,EAMAD,CAAA3sJ,GAEA6tC,EAAA,IAAA4jB,GAEAzD,EAAA,GACAE,EAAA,GAEA/H,EAAA,IAAAzC,GAAA,EAAA,EAAA,GACA0C,EAAA,IAAA1C,GAAA,EAAA,EAAA,GAEAjoD,EAAA,EAAAA,EAAAkzF,EAAAvyF,OAAAX,IAAA,CAEA,IAAAq9G,EAAAnqB,EAAAlzF,GAEAq9G,EAAA1oG,QAAA0oG,EAAA1oG,OAAA4oG,SAEAhrD,EAAApuD,KAAA,EAAA,EAAA,GACAouD,EAAApuD,KAAA,EAAA,EAAA,GACAsuD,EAAAtuD,KAAAumD,EAAA/qD,EAAA+qD,EAAAlzB,EAAAkzB,EAAAxlD,GACAutD,EAAAtuD,KAAAwmD,EAAAhrD,EAAAgrD,EAAAnzB,EAAAmzB,EAAAzlD,IAMAktC,EAAAokB,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACAngB,EAAAokB,aAAA,QAAA,IAAAtE,GAAAO,EAAA,IAEA,IAAAngB,EAAA,IAAAggD,GAAA,CAAA3pC,cAAA,EAAAmD,WAAA,EAAAC,YAAA,EAAAoB,YAAA,EAAA7B,aAAA,IAEAm0D,GAAA/+G,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAnM,KAAA,iBAEAmM,KAAA2qI,KAAA5/I,EACAiV,KAAA05E,MAAAA,EAEA15E,KAAAke,OAAAnzB,EAAA4/B,YACA3qB,KAAAihB,kBAAA,EAiDA,SAAA22H,GAAA37D,EAAA47D,EAAA9oG,GAEA/uC,KAAAi8E,MAAAA,EACAj8E,KAAAi8E,MAAA7kD,oBAEAp3B,KAAA+uC,MAAAA,EAEA,IAAAnW,EAAA,IAAAmgF,GAAA8+B,EAAA,EAAA,GACA/+G,EAAA,IAAA8a,GAAA,CAAAW,WAAA,EAAArf,KAAA,EAAAye,YAAA,IAEAmO,GAAA56D,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAnM,KAAA,mBAEAmM,KAAAke,OAAAle,KAAAi8E,MAAAtxD,YACA3qB,KAAAihB,kBAAA,EAEAjhB,KAAA8E,UA9DA2yI,GAAAhwJ,UAAAF,OAAAm7B,OAAAujF,GAAAx+G,YACA4wB,YAAAo/H,GAEAA,GAAAhwJ,UAAAqwJ,kBAAA,EAEAL,GAAAhwJ,UAAA2vC,kBAAA,SAAAQ,GAEA,IAAA8hD,EAAA15E,KAAA05E,MAEA9gD,EAAA54B,KAAA44B,SACAjI,EAAAiI,EAAAmkB,aAAA,YAEAy6F,GAAAv5H,WAAAje,KAAA2qI,KAAAhgH,aAEA,IAAA,IAAAnkC,EAAA,EAAAm0C,EAAA,EAAAn0C,EAAAkzF,EAAAvyF,OAAAX,IAAA,CAEA,IAAAq9G,EAAAnqB,EAAAlzF,GAEAq9G,EAAA1oG,QAAA0oG,EAAA1oG,OAAA4oG,SAEAwzC,GAAA96H,iBAAA+6H,GAAA3zC,EAAAl5E,aACA2sH,GAAAprH,sBAAAqrH,IACA5mH,EAAAgqB,OAAAhgB,EAAA28G,GAAAnrJ,EAAAmrJ,GAAA7pJ,EAAA6pJ,GAAA71H,GAEA81H,GAAA96H,iBAAA+6H,GAAA3zC,EAAA1oG,OAAAwvB,aACA2sH,GAAAprH,sBAAAqrH,IACA5mH,EAAAgqB,OAAAhgB,EAAA,EAAA28G,GAAAnrJ,EAAAmrJ,GAAA7pJ,EAAA6pJ,GAAA71H,GAEAkZ,GAAA,GAMA/B,EAAAmkB,aAAA,YAAAM,aAAA,EAEArpB,GAAAvsC,UAAA2vC,kBAAAlwC,KAAA8Y,KAAA43B,KAqDAggH,GAAAnwJ,UAAAF,OAAAm7B,OAAAo/B,GAAAr6D,YACA4wB,YAAAu/H,GAEAA,GAAAnwJ,UAAAmZ,QAAA,WAEAZ,KAAA44B,SAAAh4B,UACAZ,KAAA84B,SAAAl4B,WAIAg3I,GAAAnwJ,UAAAqd,OAAA,gBAEAhY,IAAAkT,KAAA+uC,MAEA/uC,KAAA84B,SAAAiW,MAAAv3B,IAAAxX,KAAA+uC,OAIA/uC,KAAA84B,SAAAiW,MAAA3iD,KAAA4T,KAAAi8E,MAAAltC,QA2BA,IAAAgpG,GAAA,IAAA1uH,GACA2uH,GAAA,IAAAvpG,GACAwpG,GAAA,IAAAxpG,GAEA,SAAAypG,GAAAj8D,EAAAngD,EAAAiT,GAEA/a,GAAA9sC,KAAA8Y,MAEAA,KAAAi8E,MAAAA,EACAj8E,KAAAi8E,MAAA7kD,oBAEAp3B,KAAAke,OAAA+9D,EAAAtxD,YACA3qB,KAAAihB,kBAAA,EAEAjhB,KAAA+uC,MAAAA,EAEA,IAAAnW,EAAA,IAAAmxE,GAAAjuE,GACAlD,EAAA1C,QAAA,GAAAznC,KAAAgmB,IAEAzU,KAAA84B,SAAA,IAAA8a,GAAA,CAAAW,WAAA,EAAArf,KAAA,EAAAye,YAAA,SACA7mD,IAAAkT,KAAA+uC,QAAA/uC,KAAA84B,SAAAqW,cAAA,GAEA,IAAAxe,EAAAiI,EAAAmkB,aAAA,YACA9D,EAAA,IAAAN,aAAA,EAAAhoB,EAAA4H,OAEAK,EAAAokB,aAAA,QAAA,IAAAvF,GAAAwB,EAAA,IAEAj5C,KAAAuY,IAAA,IAAAupC,GAAAlpB,EAAA54B,KAAA84B,WAEA94B,KAAA8E,SAiDA,SAAAqzI,GAAAr8G,EAAAuxF,EAAAn8E,EAAAC,GAEArV,EAAAA,GAAA,GACAuxF,EAAAA,GAAA,GACAn8E,EAAA,IAAAzC,QAAA3hD,IAAAokD,EAAAA,EAAA,SACAC,EAAA,IAAA1C,QAAA3hD,IAAAqkD,EAAAA,EAAA,SAQA,IANA,IAAA91B,EAAAgyG,EAAA,EACArlG,EAAA8T,EAAAuxF,EACAtxF,EAAAD,EAAA,EAEAid,EAAA,GAAAE,EAAA,GAEAzyD,EAAA,EAAAm0C,EAAA,EAAAv3B,GAAA24B,EAAAv1C,GAAA6mI,EAAA7mI,IAAA4c,GAAA4kB,EAAA,CAEA+wB,EAAApuD,MAAAoxC,EAAA,EAAA34B,EAAA24B,EAAA,EAAA34B,GACA21C,EAAApuD,KAAAyY,EAAA,GAAA24B,EAAA34B,EAAA,EAAA24B,GAEA,IAAAgT,EAAAvoD,IAAA60B,EAAA61B,EAAAC,EAEApC,EAAAh0B,QAAAk+B,EAAAte,GACAoU,EAAAh0B,QAAAk+B,EADAte,GAAA,GAEAoU,EAAAh0B,QAAAk+B,EADAte,GAAA,GAEAoU,EAAAh0B,QAAAk+B,EADAte,GAAA,GACAA,GAAA,EAIA,IAAA/B,EAAA,IAAA4jB,GACA5jB,EAAAokB,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACAngB,EAAAokB,aAAA,QAAA,IAAAtE,GAAAO,EAAA,IAEA,IAAAngB,EAAA,IAAAggD,GAAA,CAAA3pC,cAAA,EAAAwE,YAAA,IAEAsyD,GAAA/+G,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAnM,KAAA,aAiCA,SAAAukJ,GAAAvsH,EAAAwsH,EAAAC,EAAAjrB,EAAAn8E,EAAAC,GAEAtlB,EAAAA,GAAA,GACAwsH,EAAAA,GAAA,GACAC,EAAAA,GAAA,EACAjrB,EAAAA,GAAA,GACAn8E,EAAA,IAAAzC,QAAA3hD,IAAAokD,EAAAA,EAAA,SACAC,EAAA,IAAA1C,QAAA3hD,IAAAqkD,EAAAA,EAAA,SAOA,IALA,IAAA4H,EAAA,GACAE,EAAA,GAIAzyD,EAAA,EAAAA,GAAA6xJ,EAAA7xJ,IAAA,CAEA,IAAA8xB,EAAA9xB,EAAA6xJ,GAAA,EAAA5pJ,KAAAgmB,IAEAtoB,EAAAsC,KAAAsoB,IAAAuB,GAAAuT,EACApK,EAAAhzB,KAAAqoB,IAAAwB,GAAAuT,EAEAktB,EAAApuD,KAAA,EAAA,EAAA,GACAouD,EAAApuD,KAAAwB,EAAA,EAAAs1B,GAEA,IAAAstB,EAAA,EAAAvoD,EAAA0qD,EAAAC,EAEA8H,EAAAtuD,KAAAokD,EAAA5oD,EAAA4oD,EAAA/wB,EAAA+wB,EAAArjD,GACAutD,EAAAtuD,KAAAokD,EAAA5oD,EAAA4oD,EAAA/wB,EAAA+wB,EAAArjD,GAMA,IAAA,IAAAstC,EAAA,EAAAA,GAAAs/G,EAAAt/G,IAMA,IAJA,IAAAu/G,EAAA,EAAAv/G,EAAAkY,EAAAC,EAEAhrD,EAAA0lC,EAAAA,EAAAysH,EAAAt/G,EAEA2B,EAAA,EAAAA,EAAA0yF,EAAA1yF,IAAA,CAIA,IAAAgqB,EAAAhqB,EAAA0yF,GAAA,EAAA5+H,KAAAgmB,IAEAonG,EAAAptH,KAAAsoB,IAAA4tC,GAAAx+D,EACA0vH,EAAApnH,KAAAqoB,IAAA6tC,GAAAx+D,EAEA4yD,EAAApuD,KAAAkxH,EAAA,EAAAhG,GACA58D,EAAAtuD,KAAA4tJ,EAAApyJ,EAAAoyJ,EAAAv6H,EAAAu6H,EAAA7sJ,GAIAi5D,GAAAhqB,EAAA,GAAA0yF,GAAA,EAAA5+H,KAAAgmB,IAEAonG,EAAAptH,KAAAsoB,IAAA4tC,GAAAx+D,EACA0vH,EAAApnH,KAAAqoB,IAAA6tC,GAAAx+D,EAEA4yD,EAAApuD,KAAAkxH,EAAA,EAAAhG,GACA58D,EAAAtuD,KAAA4tJ,EAAApyJ,EAAAoyJ,EAAAv6H,EAAAu6H,EAAA7sJ,GAMA,IAAAktC,EAAA,IAAA4jB,GACA5jB,EAAAokB,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACAngB,EAAAokB,aAAA,QAAA,IAAAtE,GAAAO,EAAA,IAEA,IAAAngB,EAAA,IAAAggD,GAAA,CAAA3pC,cAAA,EAAAwE,YAAA,IAEAsyD,GAAA/+G,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAnM,KAAA,mBA1LAqkJ,GAAAzwJ,UAAAF,OAAAm7B,OAAAsR,GAAAvsC,YACA4wB,YAAA6/H,GAEAA,GAAAzwJ,UAAAmZ,QAAA,WAEAZ,KAAAi0B,SAAA,GAAA2E,SAAAh4B,UACAZ,KAAAi0B,SAAA,GAAA6E,SAAAl4B,WAIAs3I,GAAAzwJ,UAAAqd,OAAA,WAEA,IAAAgiD,EAAA9mD,KAAAi0B,SAAA,GAEA,QAAAnnC,IAAAkT,KAAA+uC,MAEA/uC,KAAA84B,SAAAiW,MAAAv3B,IAAAxX,KAAA+uC,WAEA,CAEA,IAAAkK,EAAA6N,EAAAluB,SAAAmkB,aAAA,SAEAi7F,GAAA5rJ,KAAA4T,KAAAi8E,MAAAltC,OACAkpG,GAAA7rJ,KAAA4T,KAAAi8E,MAAA9nB,aAEA,IAAA,IAAA3tE,EAAA,EAAAyJ,EAAAgpD,EAAA1gB,MAAA/xC,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAAuoD,EAAAvoD,EAAAyJ,EAAA,EAAA+nJ,GAAAC,GAEAh/F,EAAA0B,OAAAn0D,EAAAuoD,EAAA5oD,EAAA4oD,EAAA/wB,EAAA+wB,EAAArjD,GAIAutD,EAAAoE,aAAA,EAIAyJ,EAAA93B,OAAA+oH,GAAA7rH,sBAAAlsB,KAAAi8E,MAAAtxD,aAAAlR,WA+CA0+H,GAAA1wJ,UAAAF,OAAAM,OAAAN,OAAAm7B,OAAAujF,GAAAx+G,WAAA,CAEA4wB,YAAA8/H,GAEA/rJ,KAAA,SAAAvD,GAOA,OALAo9G,GAAAx+G,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAA44B,SAAAxsC,KAAAvD,EAAA+vC,UACA54B,KAAA84B,SAAA1sC,KAAAvD,EAAAiwC,UAEA94B,MAIAoY,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,UAyFAo4I,GAAA3wJ,UAAAF,OAAAm7B,OAAAujF,GAAAx+G,YACA4wB,YAAA+/H,GAQA,IAAAI,GAAA,IAAAnvH,GACAovH,GAAA,IAAApvH,GACAqvH,GAAA,IAAArvH,GAEA,SAAAsvH,GAAA18D,EAAAngD,EAAAiT,GAEA/a,GAAA9sC,KAAA8Y,MAEAA,KAAAi8E,MAAAA,EACAj8E,KAAAi8E,MAAA7kD,oBAEAp3B,KAAAke,OAAA+9D,EAAAtxD,YACA3qB,KAAAihB,kBAAA,EAEAjhB,KAAA+uC,MAAAA,OAEAjiD,IAAAgvC,IAAAA,EAAA,GAEA,IAAAlD,EAAA,IAAA4jB,GACA5jB,EAAAokB,aAAA,WAAA,IAAAtE,GAAA,EACA5c,EAAAA,EAAA,EACAA,EAAAA,EAAA,EACAA,GAAAA,EAAA,GACAA,GAAAA,EAAA,GACAA,EAAAA,EAAA,GACA,IAEA,IAAAhD,EAAA,IAAAggD,GAAA,CAAA5jD,KAAA,EAAAye,YAAA,IAEA3zC,KAAA44I,WAAA,IAAA3zC,GAAArsE,EAAAE,GACA94B,KAAAuY,IAAAvY,KAAA44I,aAEAhgH,EAAA,IAAA4jB,IACAQ,aAAA,WAAA,IAAAtE,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAEA14C,KAAA64I,WAAA,IAAA5zC,GAAArsE,EAAAE,GACA94B,KAAAuY,IAAAvY,KAAA64I,YAEA74I,KAAA8E,UAIA6zI,GAAAlxJ,UAAAF,OAAAm7B,OAAAsR,GAAAvsC,YACA4wB,YAAAsgI,GAEAA,GAAAlxJ,UAAAmZ,QAAA,WAEAZ,KAAA44I,WAAAhgH,SAAAh4B,UACAZ,KAAA44I,WAAA9/G,SAAAl4B,UACAZ,KAAA64I,WAAAjgH,SAAAh4B,UACAZ,KAAA64I,WAAA//G,SAAAl4B,WAIA+3I,GAAAlxJ,UAAAqd,OAAA,WAEA0zI,GAAAtsH,sBAAAlsB,KAAAi8E,MAAAtxD,aACA8tH,GAAAvsH,sBAAAlsB,KAAAi8E,MAAArzF,OAAA+hC,aACA+tH,GAAA7/H,WAAA4/H,GAAAD,IAEAx4I,KAAA44I,WAAA5pH,OAAAypH,SAEA3rJ,IAAAkT,KAAA+uC,OAEA/uC,KAAA44I,WAAA9/G,SAAAiW,MAAAv3B,IAAAxX,KAAA+uC,OACA/uC,KAAA64I,WAAA//G,SAAAiW,MAAAv3B,IAAAxX,KAAA+uC,SAIA/uC,KAAA44I,WAAA9/G,SAAAiW,MAAA3iD,KAAA4T,KAAAi8E,MAAAltC,OACA/uC,KAAA64I,WAAA//G,SAAAiW,MAAA3iD,KAAA4T,KAAAi8E,MAAAltC,QAIA/uC,KAAA64I,WAAA7pH,OAAAypH,IACAz4I,KAAA64I,WAAAv0I,MAAAmd,EAAAi3H,GAAAvxJ,UAcA,IAAA2xJ,GAAA,IAAAzvH,GACA0vH,GAAA,IAAAxsF,GAEA,SAAAysF,GAAA1uH,GAEA,IAAAsO,EAAA,IAAA4jB,GACA1jB,EAAA,IAAAggD,GAAA,CAAA/pC,MAAA,SAAAI,cAAA,EAAAwE,YAAA,IAEAoF,EAAA,GACAE,EAAA,GAEAggG,EAAA,GAIAC,EAAA,IAAAzqG,GAAA,UACA0qG,EAAA,IAAA1qG,GAAA,UACA2qG,EAAA,IAAA3qG,GAAA,OACA4qG,EAAA,IAAA5qG,GAAA,UACA6qG,EAAA,IAAA7qG,GAAA,SAiDA,SAAA8qG,EAAA1yJ,EAAA6E,EAAAqjD,GAEAyqG,EAAA3yJ,EAAAkoD,GACAyqG,EAAA9tJ,EAAAqjD,GAIA,SAAAyqG,EAAAlwI,EAAAylC,GAEAgK,EAAApuD,KAAA,EAAA,EAAA,GACAsuD,EAAAtuD,KAAAokD,EAAA5oD,EAAA4oD,EAAA/wB,EAAA+wB,EAAArjD,QAEAoB,IAAAmsJ,EAAA3vI,KAEA2vI,EAAA3vI,GAAA,IAIA2vI,EAAA3vI,GAAA3e,KAAAouD,EAAA5xD,OAAA,EAAA,GA/DAoyJ,EAAA,KAAA,KAAAL,GACAK,EAAA,KAAA,KAAAL,GACAK,EAAA,KAAA,KAAAL,GACAK,EAAA,KAAA,KAAAL,GAIAK,EAAA,KAAA,KAAAL,GACAK,EAAA,KAAA,KAAAL,GACAK,EAAA,KAAA,KAAAL,GACAK,EAAA,KAAA,KAAAL,GAIAK,EAAA,KAAA,KAAAL,GACAK,EAAA,KAAA,KAAAL,GACAK,EAAA,KAAA,KAAAL,GACAK,EAAA,KAAA,KAAAL,GAIAK,EAAA,IAAA,KAAAJ,GACAI,EAAA,IAAA,KAAAJ,GACAI,EAAA,IAAA,KAAAJ,GACAI,EAAA,IAAA,KAAAJ,GAIAI,EAAA,KAAA,KAAAH,GACAG,EAAA,KAAA,KAAAH,GACAG,EAAA,KAAA,KAAAH,GAIAG,EAAA,IAAA,IAAAF,GACAE,EAAA,IAAA,IAAAD,GAIAC,EAAA,MAAA,MAAAD,GACAC,EAAA,MAAA,MAAAD,GAEAC,EAAA,MAAA,MAAAD,GACAC,EAAA,MAAA,MAAAD,GAwBA1gH,EAAAokB,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACAngB,EAAAokB,aAAA,QAAA,IAAAtE,GAAAO,EAAA,IAEAgtD,GAAA/+G,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAnM,KAAA,eAEAmM,KAAAsqB,OAAAA,EACAtqB,KAAAsqB,OAAAyiC,wBAAA/sD,KAAAsqB,OAAAyiC,yBAEA/sD,KAAAke,OAAAoM,EAAAK,YACA3qB,KAAAihB,kBAAA,EAEAjhB,KAAAi5I,SAAAA,EAEAj5I,KAAA8E,SA4DA,SAAA20I,GAAAn9G,EAAA28G,EAAArgH,EAAAtO,EAAAn+B,EAAAsB,EAAAg0B,GAEAq3H,GAAAthI,IAAArrB,EAAAsB,EAAAg0B,GAAAgJ,UAAAH,GAEA,IAAAmR,EAAAw9G,EAAA38G,GAEA,QAAAxvC,IAAA2uC,EAIA,IAFA,IAAA9K,EAAAiI,EAAAmkB,aAAA,YAEAv2D,EAAA,EAAAyJ,EAAAwrC,EAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAEAmqC,EAAAgqB,OAAAlf,EAAAj1C,GAAAsyJ,GAAA3sJ,EAAA2sJ,GAAArrJ,EAAAqrJ,GAAAr3H,IApEAu3H,GAAAvxJ,UAAAF,OAAAm7B,OAAAujF,GAAAx+G,YACA4wB,YAAA2gI,GAEAA,GAAAvxJ,UAAAqd,OAAA,WAEA,IAAA8zB,EAAA54B,KAAA44B,SACAqgH,EAAAj5I,KAAAi5I,SAOAF,GAAAruH,wBAAAt+B,KAAA4T,KAAAsqB,OAAAI,yBAIA+uH,GAAA,IAAAR,EAAArgH,EAAAmgH,GAAA,EAAA,GAAA,GACAU,GAAA,IAAAR,EAAArgH,EAAAmgH,GAAA,EAAA,EAAA,GAIAU,GAAA,KAAAR,EAAArgH,EAAAmgH,IAdA,GAAA,GAcA,GACAU,GAAA,KAAAR,EAAArgH,EAAAmgH,GAfA,GAAA,GAeA,GACAU,GAAA,KAAAR,EAAArgH,EAAAmgH,IAhBA,EAAA,GAgBA,GACAU,GAAA,KAAAR,EAAArgH,EAAAmgH,GAjBA,EAAA,GAiBA,GAIAU,GAAA,KAAAR,EAAArgH,EAAAmgH,IArBA,GAAA,EAqBA,GACAU,GAAA,KAAAR,EAAArgH,EAAAmgH,GAtBA,GAAA,EAsBA,GACAU,GAAA,KAAAR,EAAArgH,EAAAmgH,IAvBA,EAAA,EAuBA,GACAU,GAAA,KAAAR,EAAArgH,EAAAmgH,GAxBA,EAAA,EAwBA,GAIAU,GAAA,KAAAR,EAAArgH,EAAAmgH,GAAAvgI,GAAA5oB,KAAA,GACA6pJ,GAAA,KAAAR,EAAArgH,EAAAmgH,IAAA,GAAAnpJ,KAAA,GACA6pJ,GAAA,KAAAR,EAAArgH,EAAAmgH,GAAA,EAAAnpJ,GAAA,GAIA6pJ,GAAA,MAAAR,EAAArgH,EAAAmgH,IAlCA,EAkCA,EAAA,GACAU,GAAA,MAAAR,EAAArgH,EAAAmgH,GAnCA,EAmCA,EAAA,GACAU,GAAA,MAAAR,EAAArgH,EAAAmgH,GAAA,GApCA,EAoCA,GACAU,GAAA,MAAAR,EAAArgH,EAAAmgH,GAAA,EArCA,EAqCA,GAEAU,GAAA,MAAAR,EAAArgH,EAAAmgH,IAvCA,EAuCA,GAAA,GACAU,GAAA,MAAAR,EAAArgH,EAAAmgH,GAxCA,EAwCA,GAAA,GACAU,GAAA,MAAAR,EAAArgH,EAAAmgH,GAAA,GAzCA,GAyCA,GACAU,GAAA,MAAAR,EAAArgH,EAAAmgH,GAAA,EA1CA,GA0CA,GAEAngH,EAAAmkB,aAAA,YAAAM,aAAA,GA6BA,IAAAq8F,GAAA,IAAA9/G,GAEA,SAAA+/G,GAAA5uJ,EAAAgkD,GAEA/uC,KAAAjV,OAAAA,OAEA+B,IAAAiiD,IAAAA,EAAA,UAEA,IAAAgR,EAAA,IAAA1H,YAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACAmF,EAAA,IAAA7E,aAAA,IAEA/f,EAAA,IAAA4jB,GACA5jB,EAAAkkB,SAAA,IAAArF,GAAAsI,EAAA,IACAnnB,EAAAokB,aAAA,WAAA,IAAAvF,GAAA+F,EAAA,IAEAyoD,GAAA/+G,KAAA8Y,KAAA44B,EAAA,IAAAkgD,GAAA,CAAA/pC,MAAAA,EAAA4E,YAAA,KAEA3zC,KAAAnM,KAAA,YAEAmM,KAAAihB,kBAAA,EAEAjhB,KAAA8E,SA0FA,SAAA80I,GAAA19G,EAAA6S,GAEA/uC,KAAAnM,KAAA,aAEAmM,KAAAk8B,IAAAA,EAEA6S,EAAAA,GAAA,SAEA,IAAAgR,EAAA,IAAA1H,YAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAIAzf,EAAA,IAAA4jB,GAEA5jB,EAAAkkB,SAAA,IAAArF,GAAAsI,EAAA,IAEAnnB,EAAAokB,aAAA,WAAA,IAAAtE,GANA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAMA,IAEAutD,GAAA/+G,KAAA8Y,KAAA44B,EAAA,IAAAkgD,GAAA,CAAA/pC,MAAAA,EAAA4E,YAAA,KAEA3zC,KAAAnM,KAAA,aAEAmM,KAAA44B,SAAA2kB,wBA2BA,SAAAs8F,GAAAz8G,EAAAtB,EAAAwT,GAEAtvC,KAAAo9B,MAAAA,EAEAp9B,KAAA87B,UAAAhvC,IAAAgvC,EAAA,EAAAA,EAEA,IAAAiT,OAAAjiD,IAAAwiD,EAAAA,EAAA,SAIA1W,EAAA,IAAA4jB,GACA5jB,EAAAokB,aAAA,WAAA,IAAAtE,GAHA,CAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAGA,IACA9f,EAAA2kB,wBAEA0nD,GAAA/9G,KAAA8Y,KAAA44B,EAAA,IAAAkgD,GAAA,CAAA/pC,MAAAA,EAAA4E,YAAA,KAEA3zC,KAAAnM,KAAA,cAIA,IAEAosD,EAAA,IAAAzD,GACAyD,EAAAjD,aAAA,WAAA,IAAAtE,GAHA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAGA,IACAuH,EAAA1C,wBAEAv9C,KAAAuY,IAAA,IAAAupC,GAAA7B,EAAA,IAAArM,GAAA,CAAA7E,MAAAA,EAAA8C,QAAA,GAAAC,aAAA,EAAAS,YAAA,EAAAoB,YAAA,OAjKAgmG,GAAAlyJ,UAAAF,OAAAm7B,OAAAujF,GAAAx+G,YACA4wB,YAAAshI,GAEAA,GAAAlyJ,UAAAqd,OAAA,SAAA/Z,GAcA,QAZA+B,IAAA/B,GAEAmM,QAAAC,KAAA,4DAIArK,IAAAkT,KAAAjV,QAEA2uJ,GAAA19G,cAAAh8B,KAAAjV,SAIA2uJ,GAAAv9G,UAAA,CAEA,IAAArhC,EAAA4+I,GAAA5+I,IACA/I,EAAA2nJ,GAAA3nJ,IAkBA4+B,EAAA3wB,KAAA44B,SAAA37B,WAAA0zB,SACAvc,EAAAuc,EAAAvc,MAEAA,EAAA,GAAAriB,EAAA5F,EAAAioB,EAAA,GAAAriB,EAAAtE,EAAA2mB,EAAA,GAAAriB,EAAA0vB,EACArN,EAAA,GAAAtZ,EAAA3O,EAAAioB,EAAA,GAAAriB,EAAAtE,EAAA2mB,EAAA,GAAAriB,EAAA0vB,EACArN,EAAA,GAAAtZ,EAAA3O,EAAAioB,EAAA,GAAAtZ,EAAArN,EAAA2mB,EAAA,GAAAriB,EAAA0vB,EACArN,EAAA,GAAAriB,EAAA5F,EAAAioB,EAAA,IAAAtZ,EAAArN,EAAA2mB,EAAA,IAAAriB,EAAA0vB,EACArN,EAAA,IAAAriB,EAAA5F,EAAAioB,EAAA,IAAAriB,EAAAtE,EAAA2mB,EAAA,IAAAtZ,EAAA2mB,EACArN,EAAA,IAAAtZ,EAAA3O,EAAAioB,EAAA,IAAAriB,EAAAtE,EAAA2mB,EAAA,IAAAtZ,EAAA2mB,EACArN,EAAA,IAAAtZ,EAAA3O,EAAAioB,EAAA,IAAAtZ,EAAArN,EAAA2mB,EAAA,IAAAtZ,EAAA2mB,EACArN,EAAA,IAAAriB,EAAA5F,EAAAioB,EAAA,IAAAtZ,EAAArN,EAAA2mB,EAAA,IAAAtZ,EAAA2mB,EAEAkP,EAAA0sB,aAAA,EAEAr9C,KAAA44B,SAAA2kB,0BAKAo8F,GAAAlyJ,UAAAu0C,cAAA,SAAAjxC,GAKA,OAHAiV,KAAAjV,OAAAA,EACAiV,KAAA8E,SAEA9E,MAIA25I,GAAAlyJ,UAAA2E,KAAA,SAAAvD,GAMA,OAJAo9G,GAAAx+G,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAEAmX,KAAAjV,OAAAlC,EAAAkC,OAEAiV,MAIA25I,GAAAlyJ,UAAA2wB,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,QAkCA45I,GAAAnyJ,UAAAF,OAAAm7B,OAAAujF,GAAAx+G,YACA4wB,YAAAuhI,GAEAA,GAAAnyJ,UAAA2vC,kBAAA,SAAAQ,GAEA,IAAAsE,EAAAl8B,KAAAk8B,IAEAA,EAAAC,YAEAD,EAAAE,UAAAp8B,KAAA2wB,UAEAuL,EAAAG,QAAAr8B,KAAAsE,OAEAtE,KAAAsE,MAAA0U,eAAA,IAEAgb,GAAAvsC,UAAA2vC,kBAAAlwC,KAAA8Y,KAAA43B,MAsCAiiH,GAAApyJ,UAAAF,OAAAm7B,OAAAuiF,GAAAx9G,YACA4wB,YAAAwhI,GAEAA,GAAApyJ,UAAA2vC,kBAAA,SAAAQ,GAEA,IAAAtzB,GAAAtE,KAAAo9B,MAAAC,SAEA5uC,KAAAkC,IAAA2T,GAAA,OAAAA,EAAA,MAEAtE,KAAAsE,MAAAkT,IAAA,GAAAxX,KAAA87B,KAAA,GAAA97B,KAAA87B,KAAAx3B,GAEAtE,KAAAi0B,SAAA,GAAA6E,SAAA6Y,KAAArtC,EAAA,EAAAwG,EAAAD,EAEA7K,KAAAgvB,OAAAhvB,KAAAo9B,MAAA3R,QAEAuI,GAAAvsC,UAAA2vC,kBAAAlwC,KAAA8Y,KAAA43B,IAoBA,IACAkiH,GAAAC,GADAC,GAAA,IAAA3wH,GAGA,SAAA4wH,GAAA5zH,EAAAqY,EAAAv3C,EAAA4nD,EAAAmrG,EAAAC,GAIAnmH,GAAA9sC,KAAA8Y,MAEAA,KAAAnM,KAAA,mBAEA/G,IAAAu5B,IAAAA,EAAA,IAAAgD,GAAA,EAAA,EAAA,SACAv8B,IAAA4xC,IAAAA,EAAA,IAAArV,GAAA,EAAA,EAAA,SACAv8B,IAAA3F,IAAAA,EAAA,QACA2F,IAAAiiD,IAAAA,EAAA,eACAjiD,IAAAotJ,IAAAA,EAAA,GAAA/yJ,QACA2F,IAAAqtJ,IAAAA,EAAA,GAAAD,QAEAptJ,IAAAgtJ,MAEAA,GAAA,IAAAt9F,IACAQ,aAAA,WAAA,IAAAtE,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,KAEAqhG,GAAA,IAAAv+B,GAAA,EAAA,GAAA,EAAA,EAAA,IACAh8F,UAAA,GAAA,GAAA,IAIAxf,KAAA2wB,SAAAvkC,KAAAsyC,GAEA1+B,KAAAiiC,KAAA,IAAAgjE,GAAA60C,GAAA,IAAAhhE,GAAA,CAAA/pC,MAAAA,EAAA4E,YAAA,KACA3zC,KAAAiiC,KAAAhhB,kBAAA,EACAjhB,KAAAuY,IAAAvY,KAAAiiC,MAEAjiC,KAAAm3I,KAAA,IAAAr1F,GAAAi4F,GAAA,IAAAnmG,GAAA,CAAA7E,MAAAA,EAAA4E,YAAA,KACA3zC,KAAAm3I,KAAAl2H,kBAAA,EACAjhB,KAAAuY,IAAAvY,KAAAm3I,MAEAn3I,KAAAo6I,aAAA/zH,GACArmB,KAAAua,UAAApzB,EAAA+yJ,EAAAC,GA0EA,SAAAE,GAAAv+G,GAIA,IAAAid,EAAA,CACA,EAAA,EAAA,EAHAjd,EAAAA,GAAA,EAGA,EAAA,EACA,EAAA,EAAA,EAAA,EAAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAAA,GASAlD,EAAA,IAAA4jB,GACA5jB,EAAAokB,aAAA,WAAA,IAAAtE,GAAAK,EAAA,IACAngB,EAAAokB,aAAA,QAAA,IAAAtE,GARA,CACA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,GAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAAA,GAKA,IAEA,IAAA5f,EAAA,IAAAggD,GAAA,CAAA3pC,cAAA,EAAAwE,YAAA,IAEAsyD,GAAA/+G,KAAA8Y,KAAA44B,EAAAE,GAEA94B,KAAAnM,KAAA,cA9FAomJ,GAAAxyJ,UAAAF,OAAAm7B,OAAAsR,GAAAvsC,YACA4wB,YAAA4hI,GAEAA,GAAAxyJ,UAAA2yJ,aAAA,SAAA/zH,GAIA,GAAAA,EAAA54B,EAAA,OAEAuS,KAAA2mB,WAAAnP,IAAA,EAAA,EAAA,EAAA,QAEA,GAAA6O,EAAA54B,GAAA,OAEAuS,KAAA2mB,WAAAnP,IAAA,EAAA,EAAA,EAAA,OAEA,CAEAwiI,GAAAxiI,IAAA6O,EAAA5E,EAAA,GAAA4E,EAAAl6B,GAAA4tB,YAEA,IAAA1D,EAAA5nB,KAAAo1B,KAAAwC,EAAA54B,GAEAuS,KAAA2mB,WAAAQ,iBAAA6yH,GAAA3jI,KAMA4jI,GAAAxyJ,UAAA8yB,UAAA,SAAApzB,EAAA+yJ,EAAAC,QAEArtJ,IAAAotJ,IAAAA,EAAA,GAAA/yJ,QACA2F,IAAAqtJ,IAAAA,EAAA,GAAAD,GAEAl6I,KAAAiiC,KAAA39B,MAAAkT,IAAA,EAAA/oB,KAAAsD,IAAA,KAAA5K,EAAA+yJ,GAAA,GACAl6I,KAAAiiC,KAAArf,eAEA5iB,KAAAm3I,KAAA7yI,MAAAkT,IAAA2iI,EAAAD,EAAAC,GACAn6I,KAAAm3I,KAAAxmH,SAAAljC,EAAAtG,EACA6Y,KAAAm3I,KAAAv0H,gBAIAq3H,GAAAxyJ,UAAA6yJ,SAAA,SAAAvrG,GAEA/uC,KAAAiiC,KAAAnJ,SAAAiW,MAAAv3B,IAAAu3B,GACA/uC,KAAAm3I,KAAAr+G,SAAAiW,MAAAv3B,IAAAu3B,IAIAkrG,GAAAxyJ,UAAA2E,KAAA,SAAAvD,GAOA,OALAmrC,GAAAvsC,UAAA2E,KAAAlF,KAAA8Y,KAAAnX,GAAA,GAEAmX,KAAAiiC,KAAA71C,KAAAvD,EAAAo5C,MACAjiC,KAAAm3I,KAAA/qJ,KAAAvD,EAAAsuJ,MAEAn3I,MAIAi6I,GAAAxyJ,UAAA2wB,MAAA,WAEA,OAAA,IAAApY,KAAAqY,aAAAjsB,KAAA4T,QAqCAq6I,GAAA5yJ,UAAAF,OAAAm7B,OAAAujF,GAAAx+G,YACA4wB,YAAAgiI,GAgBA,IAAAE,GAAA,EACAC,GAAA,EACAC,GAAAhsJ,KAAAub,IAAA,EAAAwwI,IAMAE,GAAA,CAAA,KAAA,KAAA,IAAA,KAAA,KAAA,MAEAC,GAAAH,GAAAD,GAAA,EAAAG,GAAAvzJ,OAIAyzJ,GAAA,GAEAC,GAAA,GACAA,GAAAloI,IAAA,EACAkoI,GAAAjoI,IAAA,EACAioI,GAAA/nI,IAAA,EACA+nI,GAAA7nI,IAAA,EACA6nI,GAAA5nI,IAAA,EACA4nI,GAAA3nI,IAAA,EACA2nI,GAAAhoI,IAAA,EAEA,IAAAioI,GAAA,IAAA9oB,GACA/2H,GA6bA,WAQA,IANA,IAAA8/I,EAAA,GACAC,EAAA,GACAC,EAAA,GAEAC,EAAAV,GAEAh0J,EAAA,EAAAA,EAAAm0J,GAAAn0J,IAAA,CAEA,IAAA20J,EAAA1sJ,KAAAub,IAAA,EAAAkxI,GACAF,EAAArwJ,KAAAwwJ,GACA,IAAAC,EAAA,EAAAD,EAEA30J,EAAAg0J,GAAAD,GAEAa,EAAAV,GAAAl0J,EAAAg0J,GAAAD,GAAA,GAEA,GAAA/zJ,IAEA40J,EAAA,GAIAH,EAAAtwJ,KAAAywJ,GAiBA,IAfA,IAAAC,EAAA,GAAAF,EAAA,GACArgJ,GAAAugJ,EAAA,EACAtpJ,EAAA,EAAAspJ,EAAA,EACAp3G,EAAA,CAAAnpC,EAAAA,EAAA/I,EAAA+I,EAAA/I,EAAAA,EAAA+I,EAAAA,EAAA/I,EAAAA,EAAA+I,EAAA/I,GAQA4+B,EAAA,IAAAgoB,aAAA2iG,KACA/3H,EAAA,IAAAo1B,aAAA4iG,IACAz4F,EAAA,IAAAnK,aAAA6iG,IAEAvgG,EAAA,EAAAA,EAVA,EAUAA,IAAA,CAEA,IAAA9uD,EAAA8uD,EAAA,EAAA,EAAA,EAAA,EACAxtD,EAAAwtD,EAAA,EAAA,GAAA,EACAwgG,EAAA,CACAtvJ,EAAAsB,EAAA,EACAtB,EAAA,EAAA,EAAAsB,EAAA,EACAtB,EAAA,EAAA,EAAAsB,EAAA,EAAA,EACAtB,EAAAsB,EAAA,EACAtB,EAAA,EAAA,EAAAsB,EAAA,EAAA,EACAtB,EAAAsB,EAAA,EAAA,GAEAkjC,EAAAnZ,IAAAikI,EAAAH,GAAArgG,GACA13B,EAAA/L,IAAAysB,EAAAs3G,GAAAtgG,GACA,IAAAygG,EAAA,CAAAzgG,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA6H,EAAAtrC,IAAAkkI,EAAAF,EAAAvgG,GAIA,IAAA2U,EAAA,IAAApT,GACAoT,EAAA5S,aAAA,WAAA,IAAAvF,GAAA9mB,EA5BA,IA6BAi/B,EAAA5S,aAAA,KAAA,IAAAvF,GAAAl0B,EA5BA,IA6BAqsC,EAAA5S,aAAA,YAAA,IAAAvF,GAAAqL,EA5BA,IA6BAi4F,EAAApwJ,KAAAilE,GAEAsrF,EAAAX,IAEAW,IAMA,MAAA,CAAAH,WAAAA,EAAAC,UAAAA,EAAAC,QAAAA,GAvgBAU,GACAZ,GAAA9/I,GAAA8/I,WACAC,GAAA//I,GAAA+/I,UACAC,GAAAhgJ,GAAAggJ,QACAW,GAAA,KAGAC,IAAA,EAAAptJ,KAAAorB,KAAA,IAAA,EACAiiI,GAAA,EAAAD,GAIAE,GAAA,CACA,IAAA1yH,GAAA,EAAA,EAAA,GACA,IAAAA,IAAA,EAAA,EAAA,GACA,IAAAA,GAAA,EAAA,GAAA,GACA,IAAAA,IAAA,EAAA,GAAA,GACA,IAAAA,GAAA,EAAAwyH,GAAAC,IACA,IAAAzyH,GAAA,EAAAwyH,IAAAC,IACA,IAAAzyH,GAAAyyH,GAAA,EAAAD,IACA,IAAAxyH,IAAAyyH,GAAA,EAAAD,IACA,IAAAxyH,GAAAwyH,GAAAC,GAAA,GACA,IAAAzyH,IAAAwyH,GAAAC,GAAA,IAEA,SAAAE,GAAAzzI,GAogBA,IAAA89D,EAEA41E,EACAC,EArgBAl8I,KAAA4I,UAAAL,EACAvI,KAAAm8I,sBAAA,KAEAn8I,KAAAo8I,eA+fA/1E,EA/fAu0E,GAigBAqB,EAAA,IAAAtjG,aAAA0tB,GACA61E,EAAA,IAAA7yH,GAAA,EAAA,EAAA,GACA,IAAAszF,GAAA,CAEAxmH,KAAA,wBAEAu1D,QAAA,CAAArlE,EAAAggF,GAEAjb,SAAA,CACAjX,OAAA,CAAAjoD,MAAA,MACAk2B,QAAA,CAAAl2B,MAAA,GACA+vJ,QAAA,CAAA/vJ,MAAA+vJ,GACAI,YAAA,CAAAnwJ,OAAA,GACAowJ,OAAA,CAAApwJ,MAAA,GACAqwJ,OAAA,CAAArwJ,MAAA,GACAgwJ,SAAA,CAAAhwJ,MAAAgwJ,GACAM,cAAA,CAAAtwJ,MAAA2uJ,GAAAloI,KACA2jE,eAAA,CAAApqF,MAAA2uJ,GAAAloI,MAGAg5C,aAsEA,igCApEAC,eAAA,y5EAEAla,SAAA1mC,EACAsnC,WAAA,EACAC,YAAA,KA1hBAvyC,KAAAy8I,gBAAA,KACAz8I,KAAA08I,eAAA,KAEA18I,KAAA28I,iBAAA38I,KAAAo8I,eAoZA,SAAAQ,GAAA76H,GAEA,YAAAj1B,IAAAi1B,GAAAA,EAAAluB,OAAAya,KAEAyT,EAAA3f,WAAAuQ,IAAAoP,EAAA3f,WAAAwQ,IAAAmP,EAAA3f,WAAAyQ,IAkFA,SAAAgqI,GAAAx3C,GAEA,IAAAy3C,EAAA,IAAAp7H,GAAA,EAAA+4H,GAAA,EAAAA,GAAAp1C,GAIA,OAHAy3C,EAAA/6H,QAAA3B,QAAAzS,EACAmvI,EAAA/6H,QAAA5rB,KAAA,eACA2mJ,EAAAj7H,aAAA,EACAi7H,EAIA,SAAAC,GAAAn0J,EAAAuD,EAAAsB,EAAAoM,EAAAC,GAEAlR,EAAAk5B,SAAAtK,IAAArrB,EAAAsB,EAAAoM,EAAAC,GACAlR,EAAAg5B,QAAApK,IAAArrB,EAAAsB,EAAAoM,EAAAC,GAwCA,SAAAkjJ,KAwBA,OArBA,IAAArgC,GAAA,CAEAxmH,KAAA,0BAEAi1D,SAAA,CACAjX,OAAA,CAAAjoD,MAAA,MACAmvJ,UAAA,CAAAnvJ,MAPA,IAAAurB,GAAA,EAAA,IAQA+kI,cAAA,CAAAtwJ,MAAA2uJ,GAAAloI,KACA2jE,eAAA,CAAApqF,MAAA2uJ,GAAAloI,MAGAg5C,aA0CA,igCAxCAC,eAAA,s+DAEAla,SAAA1mC,EACAsnC,WAAA,EACAC,YAAA,IAQA,SAAA0qG,KAsBA,OApBA,IAAAtgC,GAAA,CAEAxmH,KAAA,kBAEAi1D,SAAA,CACAjX,OAAA,CAAAjoD,MAAA,MACAswJ,cAAA,CAAAtwJ,MAAA2uJ,GAAAloI,KACA2jE,eAAA,CAAApqF,MAAA2uJ,GAAAloI,MAGAg5C,aAgBA,igCAdAC,eAAA,2+CAEAla,SAAA1mC,EACAsnC,WAAA,EACAC,YAAA,IAgQA,SAAA2qG,GAAAzhH,GAEAvkC,QAAAC,KAAA,qFAEA43H,GAAA7nI,KAAA8Y,KAAAy7B,GACAz7B,KAAAnM,KAAA,aACAmM,KAAAuqG,QAAA,EAQA,SAAA4yC,GAAA1hH,GAEAvkC,QAAAC,KAAA,+EAEA43H,GAAA7nI,KAAA8Y,KAAAy7B,GACAz7B,KAAAnM,KAAA,aAQA,SAAAupJ,GAAA3hH,GAEAvkC,QAAAC,KAAA,sEAEA43H,GAAA7nI,KAAA8Y,KAAAy7B,GACAz7B,KAAAnM,KAAA,aAz2BAmoJ,GAAAv0J,UAAA,CAEA4wB,YAAA2jI,GASAqB,UAAA,SAAA3uF,EAAA0sF,EAAAzpH,EAAAC,QACA,IAAAwpH,IAAAA,EAAA,QACA,IAAAzpH,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,KAGAgqH,GAAA57I,KAAA4I,UAAAkmD,kBACA,IAAAguF,EAAA98I,KAAAs9I,mBAYA,OAVAt9I,KAAAu9I,eAAA7uF,EAAA/8B,EAAAC,EAAAkrH,GACA1B,EAAA,GAEAp7I,KAAAw9I,MAAAV,EAAA,EAAA,EAAA1B,GAIAp7I,KAAAy9I,YAAAX,GACA98I,KAAA09I,SAAAZ,GAEAA,GASAa,oBAAA,SAAAC,GAEA,OAAA59I,KAAA69I,aAAAD,IASAE,YAAA,SAAAC,GAEA,OAAA/9I,KAAA69I,aAAAE,IAQAC,qBAAA,WAEA,OAAAh+I,KAAA08I,iBAEA18I,KAAA08I,eAAAO,KACAj9I,KAAA28I,iBAAA38I,KAAA08I,kBAUAuB,6BAAA,WAEA,OAAAj+I,KAAAy8I,kBAEAz8I,KAAAy8I,gBAAAO,KACAh9I,KAAA28I,iBAAA38I,KAAAy8I,mBAWA77I,QAAA,WAEAZ,KAAAo8I,cAAAx7I,UAEA,OAAAZ,KAAA08I,gBAAA18I,KAAA08I,eAAA97I,UACA,OAAAZ,KAAAy8I,iBAAAz8I,KAAAy8I,gBAAA77I,UAEA,IAAA,IAAApa,EAAA,EAAAA,EAAAu0J,GAAA5zJ,OAAAX,IAEAu0J,GAAAv0J,GAAAoa,WAQA88I,SAAA,SAAAQ,GAEAl+I,KAAAm8I,sBAAAv7I,UACAZ,KAAA4I,UAAAmmD,gBAAA6sF,IACAsC,EAAAr8H,aAAA,EACAk7H,GAAAmB,EAAA,EAAA,EAAAA,EAAArkJ,MAAAqkJ,EAAApkJ,SAIA+jJ,aAAA,SAAA97H,GAEA65H,GAAA57I,KAAA4I,UAAAkmD,kBACA,IAAAguF,EAAA98I,KAAAs9I,iBAAAv7H,GAKA,OAJA/hB,KAAAm+I,iBAAAp8H,EAAA+6H,GACA98I,KAAAy9I,YAAAX,GACA98I,KAAA09I,SAAAZ,GAEAA,GAIAQ,iBAAA,SAAAv7H,GAEA,IAAAsjF,EAAA,CACA9kF,UAAAvS,GACAwS,UAAAxS,GACAkT,iBAAA,EACArtB,KAAAya,GACAmS,OAAAlR,GACAnN,SAAAw6I,GAAA76H,GAAAA,EAAA3f,SAAA0Q,GACAkP,aAAA,EACAC,eAAA,GAGA66H,EAAAD,GAAAx3C,GAGA,OAFAy3C,EAAA96H,aAAAD,EACA/hB,KAAAm8I,sBAAAU,GAAAx3C,GACAy3C,GAIAH,iBAAA,SAAA7jH,GAEA,IAAAslH,EAAA,IAAAt8F,GAAAi5F,GAAA,GAAAjiH,GACA94B,KAAA4I,UAAA4zF,QAAA4hD,EAAAtD,KAIAyC,eAAA,SAAA7uF,EAAA/8B,EAAAC,EAAAkrH,GAEA,IAEAuB,EAAA,IAAA7xF,GAFA,GACA,EACA76B,EAAAC,GACA0sH,EAAA,CAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GACAC,EAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GACAh2I,EAAAvI,KAAA4I,UAEA0tE,EAAA/tE,EAAA+tE,eACA5V,EAAAn4D,EAAAm4D,YACAz5D,EAAAsB,EAAAq3D,gBACAL,EAAAh3D,EAAAu3D,gBAEAv3D,EAAAm4D,YAAAzzD,EACA1E,EAAA+tE,eAAA3jE,GAEA,IAAAqiB,EAAA05B,EAAA15B,WACA,GAAAA,GAAAA,EAAAka,QAAA,CAEAla,EAAAub,sBAEA,IAAAiuG,EAAA/vJ,KAAAsD,IAAAijC,EAAA7uC,EAAA6uC,EAAAhX,EAAAgX,EAAAtpC,GACA+yJ,EAAAhwJ,KAAAqM,IAAArM,KAAAsD,IAAAtD,KAAA+nB,KAAA/nB,KAAAiwJ,KAAAF,KAAA,KAAA,KACAxpH,EAAAA,EAAAhc,eAAAvqB,KAAAub,IAAA,GAAAy0I,IAEAl2I,EAAAs3D,cAAA7qC,GADAypH,EAAA,KAAA,KAEA/vF,EAAA15B,WAAA,KAIA,IAAA,IAAAxuC,EAAA,EAAAA,EAAA,EAAAA,IAAA,CAEA,IAAAm4J,EAAAn4J,EAAA,EACA,GAAAm4J,GAEAN,EAAAnvH,GAAA1X,IAAA,EAAA8mI,EAAA93J,GAAA,GACA63J,EAAArvH,OAAAuvH,EAAA/3J,GAAA,EAAA,IAEA,GAAAm4J,GAEAN,EAAAnvH,GAAA1X,IAAA,EAAA,EAAA8mI,EAAA93J,IACA63J,EAAArvH,OAAA,EAAAuvH,EAAA/3J,GAAA,KAIA63J,EAAAnvH,GAAA1X,IAAA,EAAA8mI,EAAA93J,GAAA,GACA63J,EAAArvH,OAAA,EAAA,EAAAuvH,EAAA/3J,KAIAu2J,GAAAD,EACA6B,EAAAlE,GAAAj0J,EAAA,EAAAi0J,GAAA,EAAAA,GAAAA,IACAlyI,EAAAwmD,gBAAA+tF,GACAv0I,EAAA1I,OAAA6uD,EAAA2vF,GAIA91I,EAAAm4D,YAAAA,EACAn4D,EAAA+tE,eAAAA,EACA/tE,EAAAs3D,cAAA54D,EAAAs4D,IAIA4+E,iBAAA,SAAAp8H,EAAA+6H,GAEA,IAAAv0I,EAAAvI,KAAA4I,UAEAmZ,EAAA0+C,cAEA,MAAAzgE,KAAA08I,iBAEA18I,KAAA08I,eAAAO,MAMA,MAAAj9I,KAAAy8I,kBAEAz8I,KAAAy8I,gBAAAO,MAMA,IAAAlkH,EAAA/W,EAAA0+C,cAAAzgE,KAAA08I,eAAA18I,KAAAy8I,gBACA31F,EAAA,IAAAhF,GAAAi5F,GAAA,GAAAjiH,GAEAsyB,EAAAtyB,EAAAsyB,SAEAA,EAAA,OAAAl/D,MAAA61B,EAEAA,EAAA0+C,eAEArV,EAAA,UAAAl/D,MAAAsrB,IAAA,EAAAuK,EAAApC,MAAA9lB,MAAA,EAAAkoB,EAAApC,MAAA7lB,QAIAsxD,EAAA,cAAAl/D,MAAA2uJ,GAAA94H,EAAA3f,UACAgpD,EAAA,eAAAl/D,MAAA2uJ,GAAAiC,EAAA/6H,QAAA3f,UAEA26I,GAAAD,EAAA,EAAA,EAAA,EAAArC,GAAA,EAAAA,IAEAlyI,EAAAwmD,gBAAA+tF,GACAv0I,EAAA1I,OAAAinD,EAAAg0F,KAIA2C,YAAA,SAAAX,GAEA,IAAAv0I,EAAAvI,KAAA4I,UACAy3D,EAAA93D,EAAA83D,UACA93D,EAAA83D,WAAA,EAEA,IAAA,IAAA75E,EAAA,EAAAA,EAAAm0J,GAAAn0J,IAAA,CAEA,IAAA40J,EAAA3sJ,KAAAorB,KAAAohI,GAAAz0J,GAAAy0J,GAAAz0J,GAAAy0J,GAAAz0J,EAAA,GAAAy0J,GAAAz0J,EAAA,IAIAwZ,KAAAw9I,MAAAV,EAAAt2J,EAAA,EAAAA,EAAA40J,EAFAW,IAAAv1J,EAAA,GAAAu1J,GAAA50J,SAMAohB,EAAA83D,UAAAA,GAWAm9E,MAAA,SAAAV,EAAA8B,EAAAC,EAAAzD,EAAAc,GAEA,IAAA4C,EAAA9+I,KAAAm8I,sBAEAn8I,KAAA++I,UACAjC,EACAgC,EACAF,EACAC,EACAzD,EACA,cACAc,GAEAl8I,KAAA++I,UACAD,EACAhC,EACA+B,EACAA,EACAzD,EACA,eACAc,IAIA6C,UAAA,SAAAC,EAAAC,EAAAL,EAAAC,EAAAK,EAAAvgH,EAAAu9G,GAEA,IAAA3zI,EAAAvI,KAAA4I,UACAu2I,EAAAn/I,KAAAo8I,cAEA,gBAAAz9G,GAAA,iBAAAA,GAEAznC,QAAAkK,MACA,8DAKA,IAEAg+I,EAAA,IAAAt9F,GAAAi5F,GAAA8D,GAAAM,GACAE,EAAAF,EAAA/zF,SAEAk0F,EAAAtE,GAAA4D,GAAA,EACAW,EAAAzpJ,SAAAopJ,GAAAzwJ,KAAAgmB,IAAA,EAAA6qI,GAAA,EAAA7wJ,KAAAgmB,IAAA,EAAAmmI,GAAA,GACA4E,EAAAN,EAAAK,EACAn9H,EAAAtsB,SAAAopJ,GAAA,EAAAzwJ,KAAAC,MARA,EAQA8wJ,GAAA5E,GAEAx4H,EAAAw4H,IAEA1jJ,QAAAC,KAAA,iBAAA+nJ,EAAA,iDAAA98H,EAAA,uCAAAw4H,IAOA,IAHA,IAAAqB,EAAA,GACAxuC,EAAA,EAEAjnH,EAAA,EAAAA,EAAAo0J,KAAAp0J,EAAA,CAEA,IAAAq1H,EAAAr1H,EAAAg5J,EACAl8C,EAAA70G,KAAAgxJ,KAAA5jC,EAAAA,EAAA,GACAogC,EAAAtxJ,KAAA24G,GAEA,GAAA98G,EAEAinH,GAAAnK,EAEA98G,EAAA47B,IAEAqrF,GAAA,EAAAnK,GAMA,IAAA,IAAAtqE,EAAA,EAAAA,EAAAijH,EAAA90J,OAAA6xC,IAEAijH,EAAAjjH,GAAAijH,EAAAjjH,GAAAy0E,EAIA4xC,EAAA,OAAAnzJ,MAAA8yJ,EAAAj9H,QACAs9H,EAAA,QAAAnzJ,MAAAk2B,EACAi9H,EAAA,QAAAnzJ,MAAA+vJ,EACAoD,EAAA,YAAAnzJ,MAAA,gBAAAyyC,EAEAu9G,IAEAmD,EAAA,SAAAnzJ,MAAAgwJ,GAIAmD,EAAA,OAAAnzJ,MAAAqzJ,EACAF,EAAA,OAAAnzJ,MAAAsuJ,GAAAoE,EACAS,EAAA,cAAAnzJ,MAAA2uJ,GAAAmE,EAAAj9H,QAAA3f,UACAi9I,EAAA,eAAAnzJ,MAAA2uJ,GAAAmE,EAAAj9H,QAAA3f,UAEA,IAAAs9I,EAAA1E,GAAA6D,GAIA9B,GAAAkC,EAHA,EAAAxwJ,KAAAsD,IAAA,EAAA0oJ,GAAA,EAAAiF,IACA,IAAAb,EAAA,EAAA,EAAApE,IAAA,EAAAiF,GAAAb,EAAArE,GAAAD,GAAAsE,EAAArE,GAAAD,GAAA,GAEA,EAAAmF,EAAA,EAAAA,GACAn3I,EAAAwmD,gBAAAkwF,GACA12I,EAAA1I,OAAAu/I,EAAAtE,MAuXArxB,GAAA/mG,OAAA,SAAAi9H,EAAA1yB,GAQA,OANA/1H,QAAAwK,IAAA,4CAEAi+I,EAAAl4J,UAAAF,OAAAm7B,OAAA+mG,GAAAhiI,WACAk4J,EAAAl4J,UAAA4wB,YAAAsnI,EACAA,EAAAl4J,UAAAwlI,SAAAA,EAEA0yB,GAMAp4J,OAAAM,OAAAgpI,GAAAppI,UAAA,CAEAm4J,qBAAA,SAAAvyB,GAEAn2H,QAAAC,KAAA,wHAIA,IAAA45G,EAAA/wG,KAAAotH,UAAAC,GACA,OAAArtH,KAAA6/I,eAAA9uC,IAIA+uC,2BAAA,SAAAzyB,GAEAn2H,QAAAC,KAAA,8HAIA,IAAA45G,EAAA/wG,KAAA4yG,gBAAAya,GACA,OAAArtH,KAAA6/I,eAAA9uC,IAIA8uC,eAAA,SAAApkH,GAEAvkC,QAAAC,KAAA,kHAIA,IAFA,IAAAyhC,EAAA,IAAAsrB,GAEA19D,EAAA,EAAAyJ,EAAAwrC,EAAAt0C,OAAAX,EAAAyJ,EAAAzJ,IAAA,CAEA,IAAA81C,EAAAb,EAAAj1C,GACAoyC,EAAAmgB,SAAApuD,KAAA,IAAA0+B,GAAAiT,EAAAnwC,EAAAmwC,EAAA7uC,EAAA6uC,EAAA7a,GAAA,IAIA,OAAAmX,KAQArxC,OAAAM,OAAAmpI,GAAAvpI,UAAA,CAEAs4J,WAAA,SAAAtkH,GAGA,OADAvkC,QAAAC,KAAA,mEACA6I,KAAAw7B,cAAAC,MAkBAyhH,GAAAz1J,UAAAF,OAAAm7B,OAAAqsG,GAAAtnI,WAaA01J,GAAA11J,UAAAF,OAAAm7B,OAAAqsG,GAAAtnI,WAaA21J,GAAA31J,UAAAF,OAAAm7B,OAAAqsG,GAAAtnI,WAEAF,OAAAM,OAAAu1J,GAAA31J,UAAA,CAEAu4J,cAAA,WAEA9oJ,QAAAkK,MAAA,qDAGA6+I,sBAAA,WAEA/oJ,QAAAkK,MAAA,6DAGA8+I,yBAAA,WAEAhpJ,QAAAkK,MAAA,kEA6BA+2I,GAAA1wJ,UAAA04J,UAAA,WAEAjpJ,QAAAkK,MAAA,6FAIAq2I,GAAAhwJ,UAAAqd,OAAA,WAEA5N,QAAAkK,MAAA,iEAaA7Z,OAAAM,OAAA2gI,GAAA/gI,UAAA,CAEAsuI,eAAA,SAAA1yG,GAGA,OADAnsB,QAAAC,KAAA,wGACAu+H,GAAAK,eAAA1yG,MAMAmlG,GAAA43B,SAAA,CAEA7nI,IAAA,WAEArhB,QAAAkK,MAAA,4FAIArB,IAAA,WAEA7I,QAAAkK,MAAA,6FAoBA7Z,OAAAM,OAAAkvI,GAAAtvI,UAAA,CAEA44J,eAAA,SAAAn0J,GAGA,OADAgL,QAAAC,KAAA,iFACA6I,KAAA+oH,gBAAA78H,MAQA3E,OAAAM,OAAA2uJ,GAAA/uJ,UAAA,CAEA4zB,OAAA,SAAA6xG,GAGA,OADAh2H,QAAAC,KAAA,2DACA6I,KAAAo8B,UAAA8wF,IAGAozB,MAAA,WAGA,OADAppJ,QAAAC,KAAA,wDACA6I,KAAAm8B,WAGAokH,kBAAA,SAAArkH,GAGA,OADAhlC,QAAAC,KAAA,0EACA6I,KAAA+8B,cAAAb,IAGAJ,KAAA,SAAAoxF,GAGA,OADAh2H,QAAAC,KAAA,uDACA6I,KAAAq8B,QAAA6wF,MAKA3lI,OAAAM,OAAA+xC,GAAAnyC,UAAA,CAEA4zB,OAAA,SAAA6xG,GAGA,OADAh2H,QAAAC,KAAA,2DACA6I,KAAAo8B,UAAA8wF,IAGAozB,MAAA,WAGA,OADAppJ,QAAAC,KAAA,wDACA6I,KAAAm8B,WAGAokH,kBAAA,SAAArkH,GAGA,OADAhlC,QAAAC,KAAA,0EACA6I,KAAA+8B,cAAAb,IAGAskH,qBAAA,SAAAvjH,GAGA,OADA/lC,QAAAC,KAAA,gFACA6I,KAAAg9B,iBAAAC,IAGAnB,KAAA,SAAAoxF,GAGA,OADAh2H,QAAAC,KAAA,uDACA6I,KAAAq8B,QAAA6wF,MAKA3lI,OAAAM,OAAA+1C,GAAAn2C,UAAA,CAEA64J,MAAA,WAGA,OADAppJ,QAAAC,KAAA,0DACA6I,KAAAm8B,aAMAuzB,GAAAjoE,UAAAg5J,cAAA,SAAAjzJ,GAGA,OADA0J,QAAAC,KAAA,mFACA6I,KAAA8vD,wBAAAtiE,IAIAmpJ,GAAAlvJ,UAAA4zB,OAAA,SAAA6xG,GAGA,OADAh2H,QAAAC,KAAA,4DACA6I,KAAAo8B,UAAA8wF,IAIA3lI,OAAAM,OAAA0sB,GAAA,CAEAmsI,SAAA,WAGA,OADAxpJ,QAAAC,KAAA,2EACA1I,KAAAomB,UAIA8rI,kBAAA,SAAAz0J,GAGA,OADAgL,QAAAC,KAAA,4EACAod,GAAAmC,gBAAAxqB,IAIA00J,eAAA,SAAA10J,GAGA,OADAgL,QAAAC,KAAA,wEACAod,GAAAgC,eAAArqB,MAMA3E,OAAAM,OAAA6vB,GAAAjwB,UAAA,CAEAo5J,qBAAA,SAAAzsI,EAAA0G,GAGA,OADA5jB,QAAAC,KAAA,uFACA6I,KAAA+a,QAAA3G,EAAA0G,IAGAgmI,gBAAA,SAAApqH,GAGA,OADAx/B,QAAAC,KAAA,kGACAu/B,EAAAvd,aAAAnZ,OAGA+gJ,qBAAA,WAEA7pJ,QAAAkK,MAAA,6DAGA4/I,uBAAA,SAAA/lI,GAGA,OADA/jB,QAAAC,KAAA,4GACA8jB,EAAA9B,aAAAnZ,OAGAihJ,oBAAA,WAEA/pJ,QAAAkK,MAAA,8DAMA7Z,OAAAM,OAAA2kC,GAAA/kC,UAAA,CAEAy5J,gBAAA,SAAA1zJ,GAGA,OADA0J,QAAAC,KAAA,0EACA6I,KAAAmtB,aAAA3/B,IAGAqzJ,qBAAA,SAAAzsI,EAAA0G,GAGA,OADA5jB,QAAAC,KAAA,uFACA6I,KAAA+a,QAAA3G,EAAA0G,IAGAqmI,YAAA,WAGA,OADAjqJ,QAAAC,KAAA,yGACA,IAAAkyB,IAAA+C,oBAAApsB,KAAA,IAGA81B,0BAAA,SAAAlf,GAGA,OADA1f,QAAAC,KAAA,kGACA6I,KAAA8uB,2BAAAlY,IAGAwqI,gBAAA,WAEAlqJ,QAAAC,KAAA,wDAGA2pJ,gBAAA,SAAApqH,GAGA,OADAx/B,QAAAC,KAAA,kGACAu/B,EAAA/S,aAAA3jB,OAGAqhJ,gBAAA,SAAA3qH,GAGA,OADAx/B,QAAAC,KAAA,kGACAu/B,EAAA/S,aAAA3jB,OAGA+gJ,qBAAA,WAEA7pJ,QAAAkK,MAAA,6DAGAkgJ,WAAA,SAAAhpI,GAEAphB,QAAAC,KAAA,oGACAmhB,EAAAsS,mBAAA5qB,OAGAuhJ,YAAA,SAAA7qH,GAGA,OADAx/B,QAAAC,KAAA,8FACAu/B,EAAA/S,aAAA3jB,OAGAwf,UAAA,WAEAtoB,QAAAkK,MAAA,kDAGA60B,QAAA,WAEA/+B,QAAAkK,MAAA,gDAGA80B,QAAA,WAEAh/B,QAAAkK,MAAA,gDAGA+0B,QAAA,WAEAj/B,QAAAkK,MAAA,gDAGAogJ,aAAA,WAEAtqJ,QAAAkK,MAAA,qDAGA4/I,uBAAA,SAAA/lI,GAGA,OADA/jB,QAAAC,KAAA,4GACA8jB,EAAA0I,aAAA3jB,OAGAihJ,oBAAA,WAEA/pJ,QAAAkK,MAAA,4DAGAqgJ,YAAA,SAAAlwH,EAAAC,EAAAE,EAAAD,EAAAE,EAAAC,GAGA,OADA16B,QAAAC,KAAA,wHACA6I,KAAAsxB,gBAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,MAMA4P,GAAA/5C,UAAAi6J,mBAAA,SAAAz/G,GAGA,OADA/qC,QAAAC,KAAA,6EACA6I,KAAAoiC,eAAAH,IAIA5f,GAAA56B,UAAAq5J,gBAAA,SAAApqH,GAGA,OADAx/B,QAAAC,KAAA,mHACAu/B,EAAAhN,gBAAA1pB,OAIAzY,OAAAM,OAAA42C,GAAAh3C,UAAA,CAEA84J,kBAAA,SAAArkH,GAGA,OADAhlC,QAAAC,KAAA,yEACA6I,KAAA+8B,cAAAb,IAGAylH,oBAAA,SAAAvkH,GAGA,OADAlmC,QAAAC,KAAA,6EACA6I,KAAAm9B,gBAAAC,IAGAojH,qBAAA,SAAAvjH,GAGA,OADA/lC,QAAAC,KAAA,+EACA6I,KAAAg9B,iBAAAC,MAMA11C,OAAAM,OAAAu7C,GAAA37C,UAAA,CAEAqmH,KAAA,WAGA,OADA52G,QAAAC,KAAA,2DACA6I,KAAAykC,WAGAm9G,mBAAA,SAAAtlH,EAAA1zC,GAGA,OADAsO,QAAAC,KAAA,8EACA6I,KAAAujC,aAAAjH,EAAA1zC,IAGAi5J,SAAA,SAAAj5J,GAGA,OADAsO,QAAAC,KAAA,mEACA6I,KAAA0kC,YAAA97C,IAGA6iC,OAAA,SAAA7iC,GAGA,OADAsO,QAAAC,KAAA,+DACA6I,KAAAqjC,UAAAz6C,IAGAw0C,MAAA,SAAAx0C,GAGA,OADAsO,QAAAC,KAAA,6DACA6I,KAAA2kC,SAAA/7C,MAMArB,OAAAM,OAAAu7C,GAAA,CAEAw+G,mBAAA,SAAAtlH,EAAAz1C,EAAA6E,EAAAhF,EAAAkC,GAGA,OADAsO,QAAAC,KAAA,8EACAisC,GAAAG,aAAAjH,EAAAz1C,EAAA6E,EAAAhF,EAAAkC,IAGA6iC,OAAA,SAAA5kC,EAAA6E,EAAAhF,EAAAkC,GAGA,OADAsO,QAAAC,KAAA,+DACAisC,GAAAC,UAAAx8C,EAAA6E,EAAAhF,EAAAkC,MAMArB,OAAAM,OAAAqpI,GAAAzpI,UAAA,CAEAq6J,iBAAA,SAAAz0B,GAGA,OADAn2H,QAAAC,KAAA,oFACA6I,KAAA8yG,cAAAua,IAGA00B,QAAA,SAAApgI,GAGA,OADAzqB,QAAAC,KAAA,4EACA,IAAAk6G,GAAArxG,KAAA2hB,IAGAqgI,aAAA,SAAArgI,GAGA,OADAzqB,QAAAC,KAAA,+EACA,IAAAmjH,GAAAt6G,KAAA2hB,MAMAp6B,OAAAM,OAAA4vB,GAAAhwB,UAAA,CAEAw6J,cAAA,SAAAhnI,EAAA5Q,EAAAyQ,GAGA,OADA5jB,QAAAC,KAAA,+EACA6I,KAAAgb,oBAAAC,EAAA5Q,EAAAyQ,IAGAonI,oBAAA,SAAA5pI,GAGA,OADAphB,QAAAC,KAAA,qFACA6I,KAAAsa,oBAAAhC,IAGA6pI,gBAAA,WAGA,OADAjrJ,QAAAC,KAAA,6EACA6I,KAAA8Z,qBAMAvyB,OAAAM,OAAAwhC,GAAA5hC,UAAA,CAEA26J,2BAAA,WAEAlrJ,QAAAkK,MAAA,8GAGAihJ,uBAAA,WAEAnrJ,QAAAkK,MAAA,sGAGAkhJ,sBAAA,SAAA90J,GAGA,OADA0J,QAAAC,KAAA,yFACA6I,KAAAksB,sBAAA1+B,IAGA+0J,mBAAA,SAAA/0J,GAGA,OADA0J,QAAAC,KAAA,mFACA6I,KAAAmsB,mBAAA3+B,IAGAg1J,oBAAA,SAAAn4I,EAAA6T,GAGA,OADAhnB,QAAAC,KAAA,qFACA6I,KAAAosB,oBAAAlO,EAAA7T,IAGAo4I,gBAAA,SAAAj1J,GAGA,OADA0J,QAAAC,KAAA,uFACA6I,KAAA2jB,aAAAn2B,IAGAy0J,cAAA,SAAAhnI,EAAA5Q,EAAAyQ,GAGA,OADA5jB,QAAAC,KAAA,+EACA6I,KAAAgb,oBAAAC,EAAA5Q,EAAAyQ,IAGAonI,oBAAA,SAAA5pI,GAGA,OADAphB,QAAAC,KAAA,qFACA6I,KAAAsa,oBAAAhC,IAGA6pI,gBAAA,WAGA,OADAjrJ,QAAAC,KAAA,6EACA6I,KAAA8Z,qBAMAvyB,OAAAM,OAAA25B,GAAA/5B,UAAA,CAEAw6J,cAAA,SAAAhnI,EAAA5Q,EAAAyQ,GAGA,OADA5jB,QAAAC,KAAA,+EACA6I,KAAAgb,oBAAAC,EAAA5Q,EAAAyQ,IAGAqnI,gBAAA,WAGA,OADAjrJ,QAAAC,KAAA,6EACA6I,KAAA8Z,qBAQAvyB,OAAAM,OAAAq8D,GAAAz8D,UAAA,CAEAi7J,gBAAA,WAEAxrJ,QAAAkK,MAAA,yDAGA8jG,qBAAA,WAEAhuG,QAAAkK,MAAA,6GAGAuhJ,YAAA,SAAAzkI,GAGA,OADAhnB,QAAAC,KAAA,uEACA6I,KAAA2jB,aAAAzF,MAMA32B,OAAAM,OAAAmsC,GAAAvsC,UAAA,CAEAm7J,eAAA,SAAAzsJ,GAGA,OADAe,QAAAC,KAAA,6EACA6I,KAAAk3B,gBAAA/gC,IAGA0sJ,YAAA,WAEA3rJ,QAAAC,KAAA,8EAGAqoB,UAAA,SAAA6W,EAAAjP,GAGA,OADAlwB,QAAAC,KAAA,kGACA6I,KAAAo2B,gBAAAhP,EAAAiP,IAGAysH,iBAAA,WAEA5rJ,QAAAkK,MAAA,mHAGAuhJ,YAAA,SAAAzkI,GAGA,OADAhnB,QAAAC,KAAA,uEACA6I,KAAA2jB,aAAAzF,MAMA32B,OAAAqwB,iBAAAoc,GAAAvsC,UAAA,CAEAs7J,WAAA,CACAhjJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,uDACA6I,KAAAmf,SAAAtI,OAGAW,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,uDACA6I,KAAAmf,SAAAtI,MAAA3qB,IAIA82J,cAAA,CACAjjJ,IAAA,WAEA7I,QAAAC,KAAA,kGAGAqgB,IAAA,WAEAtgB,QAAAC,KAAA,qGAOA5P,OAAAM,OAAAi6D,GAAAr6D,UAAA,CAEAw7J,YAAA,WAEA/rJ,QAAAkK,MAAA,gMAMA7Z,OAAAqwB,iBAAAkqC,GAAAr6D,UAAA,CAEAy7J,SAAA,CACAnjJ,IAAA,WAGA,OADA7I,QAAAkK,MAAA,oGAtzhDA,GA0zhDAoW,IAAA,WAEAtgB,QAAAkK,MAAA,4LAOA7Z,OAAAqwB,iBAAA6qF,GAAAh7G,UAAA,CAEA23E,QAAA,CACAr/D,IAAA,WAGA,OADA7I,QAAAC,KAAA,oDACA6I,KAAA2iG,WAOAp7G,OAAA6iB,eAAAu5F,GAAAl8G,UAAA,mBAAA,CAEAsY,IAAA,WAEA7I,QAAAC,KAAA,uDAGAqgB,IAAA,WAEAtgB,QAAAC,KAAA,yDAMAyrG,GAAAn7G,UAAA07J,UAAA,WAEAjsJ,QAAAkK,MAAA,qDAIA7Z,OAAA6iB,eAAAq/G,GAAAhiI,UAAA,uBAAA,CAEAsY,IAAA,WAGA,OADA7I,QAAAC,KAAA,kEACA6I,KAAA0pH,oBAGAlyG,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,kEACA6I,KAAA0pH,mBAAAx9H,KAQAsgE,GAAA/kE,UAAA27J,QAAA,SAAAj2F,EAAAN,GAEA31D,QAAAC,KAAA,oHAGArK,IAAA+/D,IAAA7sD,KAAA6sD,UAAAA,GACA7sD,KAAAktD,eAAAC,IAMA5lE,OAAAqwB,iBAAAu5G,GAAA1pI,UAAA,CACA47J,WAAA,CACA7rI,IAAA,WAEAtgB,QAAAC,KAAA,gDAIAmsJ,gBAAA,CACA9rI,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,4DACA6I,KAAAi/D,OAAA30C,OAAAmiC,IAAAvgE,IAIAq3J,iBAAA,CACA/rI,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,8DACA6I,KAAAi/D,OAAA30C,OAAAiH,KAAArlC,IAIAs3J,kBAAA,CACAhsI,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,gEACA6I,KAAAi/D,OAAA30C,OAAAkH,MAAAtlC,IAIAu3J,gBAAA,CACAjsI,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,4DACA6I,KAAAi/D,OAAA30C,OAAAmH,IAAAvlC,IAIAw3J,mBAAA,CACAlsI,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,kEACA6I,KAAAi/D,OAAA30C,OAAAoH,OAAAxlC,IAIA2nE,iBAAA,CACAr8C,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,8DACA6I,KAAAi/D,OAAA30C,OAAAqH,KAAAzlC,IAIA4nE,gBAAA,CACAt8C,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,4DACA6I,KAAAi/D,OAAA30C,OAAAsH,IAAA1lC,IAIAy3J,oBAAA,CACAnsI,IAAA,WAEAtgB,QAAAC,KAAA,oHAIA27D,WAAA,CACAt7C,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,iDACA6I,KAAAi/D,OAAA+e,KAAA9xF,IAIA03J,eAAA,CACApsI,IAAA,WAEAtgB,QAAAC,KAAA,oDAIA0sJ,eAAA,CACArsI,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,8DACA6I,KAAAi/D,OAAAif,QAAArkF,MAAA3N,IAIA43J,gBAAA,CACAtsI,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,gEACA6I,KAAAi/D,OAAAif,QAAApkF,OAAA5N,MAQA3E,OAAAqwB,iBAAA6/B,GAAAhwD,UAAA,CAEAN,OAAA,CACA4Y,IAAA,WAGA,OADA7I,QAAAC,KAAA,2EACA6I,KAAAoU,MAAAjtB,SAIA48J,QAAA,CACAhkJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,4EACA6I,KAAA23C,QAAAjkC,IAGA8D,IAAA,WAEAtgB,QAAAC,KAAA,4EACA6I,KAAAg6C,SAAAtmC,QAOAnsB,OAAAM,OAAA4vD,GAAAhwD,UAAA,CACAu8J,WAAA,SAAA93J,GAIA,OAFAgL,QAAAC,KAAA,sFACA6I,KAAAg6C,UAAA,IAAA9tD,EAAAwnB,GAAAD,IACAzT,MAGAikJ,iBAAA,WAEA/sJ,QAAAkK,MAAA,iEAGA8iJ,SAAA,WAEAhtJ,QAAAkK,MAAA,8HAKA7Z,OAAAM,OAAA20D,GAAA/0D,UAAA,CAEA08J,SAAA,SAAA95I,GAEAnT,QAAAC,KAAA,sEACA6I,KAAA88C,SAAAzyC,IAGA+5I,aAAA,SAAAjuJ,EAAA8kB,GAIA,OAFA/jB,QAAAC,KAAA,8EAEA8jB,GAAAA,EAAA6+B,mBAAA7+B,GAAAA,EAAAg6C,6BAQA,UAAA9+D,GAEAe,QAAAC,KAAA,2EACA6I,KAAA88C,SAAA7hC,GAEAjb,MAIAA,KAAAg9C,aAAA7mD,EAAA8kB,IAfA/jB,QAAAC,KAAA,0EAEA6I,KAAAg9C,aAAA7mD,EAAA,IAAAshD,GAAApuD,UAAA,GAAAA,UAAA,OAgBAg7J,YAAA,SAAAliH,EAAA5J,EAAAiiF,QAEA1tH,IAAA0tH,GAEAtjH,QAAAC,KAAA,wEAIAD,QAAAC,KAAA,4DACA6I,KAAAk9C,SAAA/a,EAAA5J,IAGA+rH,eAAA,WAEAptJ,QAAAC,KAAA,kEACA6I,KAAAm9C,eAGAulG,gBAAA,WAEAxrJ,QAAAC,KAAA,+DAGAotJ,eAAA,WAEArtJ,QAAAC,KAAA,8DAGA3B,gBAAA,SAAAW,GAIA,OAFAe,QAAAC,KAAA,oFAEA6I,KAAAi9C,gBAAA9mD,IAGAwsJ,YAAA,SAAAzkI,GAGA,OADAhnB,QAAAC,KAAA,6EACA6I,KAAA2jB,aAAAzF,MAMA32B,OAAAqwB,iBAAA4kC,GAAA/0D,UAAA,CAEAovI,UAAA,CACA92H,IAAA,WAGA,OADA7I,QAAAkK,MAAA,iEACApB,KAAAo5C,SAIA09E,QAAA,CACA/2H,IAAA,WAGA,OADA7I,QAAAC,KAAA,+DACA6I,KAAAo5C,WAOA7xD,OAAAqwB,iBAAAq+G,GAAAxuI,UAAA,CAEA+8J,kBAAA,CACAzkJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,yFACA6I,KAAAspE,eAGA9xD,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,yFACA6I,KAAAspE,cAAAp9E,MAOA3E,OAAAqwB,iBAAAqzH,GAAAxjJ,UAAA,CAEAg9J,cAAA,CACA1kJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,4FACA6I,KAAAqlG,OAAAJ,KAAAG,WAGA5tF,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,4FACA6I,KAAAqlG,OAAAJ,KAAAG,UAAAl5G,MAOA3E,OAAAqwB,iBAAAuoF,GAAA14G,UAAA,CAEAs8J,QAAA,CACAhkJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,6EACA6I,KAAA23C,QAAAjkC,IAGA8D,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,6EACA6I,KAAAg6C,SAAA9tD,OAOA3E,OAAAM,OAAAs4G,GAAA14G,UAAA,CACAu8J,WAAA,SAAA93J,GAIA,OAFAgL,QAAAC,KAAA,wFACA6I,KAAAg6C,UAAA,IAAA9tD,EAAAwnB,GAAAD,IACAzT,MAGAkkJ,SAAA,WAEAhtJ,QAAAkK,MAAA,gIAOA7Z,OAAAM,OAAAypH,GAAA7pH,UAAA,CAEAi9J,UAAA,WAEAxtJ,QAAAkK,MAAA,gEAIAujJ,aAAA,WAEAztJ,QAAAkK,MAAA,mEAIAowG,SAAA,WAEAt6G,QAAAkK,MAAA,iEAQA7Z,OAAAqwB,iBAAAmzH,GAAAtjJ,UAAA,CAEAs8J,QAAA,CACAvsI,IAAA,WAEAtgB,QAAAC,KAAA,oFAIAoqB,SAAA,CACAr1B,MAAA,WAGA,OADAgL,QAAAC,KAAA,qFACA6I,SASAzY,OAAAqwB,iBAAA65B,GAAAhqD,UAAA,CAEAm9J,WAAA,CACA7kJ,IAAA,WAEA7I,QAAAC,KAAA,kDAGAqgB,IAAA,WAEAtgB,QAAAC,KAAA,mDAKA0tJ,SAAA,CACA9kJ,IAAA,WAEA7I,QAAAC,KAAA,gDAGAqgB,IAAA,WAEAtgB,QAAAC,KAAA,iDAKA2tJ,QAAA,CACA/kJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,8CACA,IAAAs3C,KAKA+mF,QAAA,CACAz1H,IAAA,WAEA7I,QAAAkK,MAAA,SAAApB,KAAAnM,KAAA,uEAGA2jB,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,SAAA6I,KAAAnM,KAAA,sEACAmM,KAAA4xC,YAh7iDA,IAg7iDA1lD,IAKAg5F,YAAA,CACAnlF,IAAA,WAGA,OADA7I,QAAAC,KAAA,SAAA6I,KAAAnM,KAAA,kEACAmM,KAAA2yC,iBAGAn7B,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,SAAA6I,KAAAnM,KAAA,kEACAmM,KAAA2yC,gBAAAzmD,MAOA3E,OAAAqwB,iBAAA6gE,GAAAhxF,UAAA,CAEAs9J,MAAA,CACAhlJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,8FACA,GAGAqgB,IAAA,WAEAtgB,QAAAC,KAAA,gGAOA5P,OAAAqwB,iBAAA6zC,GAAAhkE,UAAA,CAEAukE,YAAA,CACAjsD,IAAA,WAGA,OADA7I,QAAAC,KAAA,iFACA6I,KAAA+rD,WAAAC,aAGAx0C,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,kFACA6I,KAAA+rD,WAAAC,YAAA9/D,MASA3E,OAAAM,OAAAquG,GAAAzuG,UAAA,CAEAu9J,YAAA,SAAA92F,EAAAnf,EAAA0a,EAAAuF,GAEA93D,QAAAC,KAAA,yGACA6I,KAAA+uD,gBAAAb,GACAluD,KAAAgH,MAAA+nC,EAAA0a,EAAAuF,IAGAtvD,QAAA,SAAAypB,GAEAjyB,QAAAC,KAAA,+DACA6I,KAAA00D,iBAAAvrC,IAGA87H,uBAAA,WAGA,OADA/tJ,QAAAC,KAAA,6EACA6I,KAAA8uD,mBAGAoX,iBAAA,WAGA,OADAhvE,QAAAC,KAAA,qFACA6I,KAAA60D,aAAAqR,oBAGAg/E,aAAA,WAGA,OADAhuJ,QAAAC,KAAA,wEACA6I,KAAA60D,aAAAh8D,WAGAssJ,aAAA,WAGA,OADAjuJ,QAAAC,KAAA,+DACA6I,KAAAm/D,MAAAqD,SAGA4iF,sBAAA,WAGA,OADAluJ,QAAAC,KAAA,gGACA6I,KAAA+rD,WAAAhsD,IAAA,sBAGAslJ,0BAAA,WAGA,OADAnuJ,QAAAC,KAAA,yGACA6I,KAAA+rD,WAAAhsD,IAAA,2BAGAulJ,4BAAA,WAGA,OADApuJ,QAAAC,KAAA,6GACA6I,KAAA+rD,WAAAhsD,IAAA,6BAGAwlJ,8BAAA,WAGA,OADAruJ,QAAAC,KAAA,oHACA6I,KAAA+rD,WAAAhsD,IAAA,kCAGAylJ,+BAAA,WAGA,OADAtuJ,QAAAC,KAAA,sHACA6I,KAAA+rD,WAAAhsD,IAAA,mCAGA0lJ,oBAAA,WAGA,OADAvuJ,QAAAC,KAAA,6FACA6I,KAAA+rD,WAAAhsD,IAAA,qBAGAs1E,uBAAA,WAGA,OADAn+E,QAAAC,KAAA,uFACA6I,KAAA60D,aAAAmR,gBAGA0/E,wBAAA,WAGA,OADAxuJ,QAAAC,KAAA,uGACA6I,KAAA+rD,WAAAhsD,IAAA,2BAGA4lJ,kBAAA,SAAA5qD,GAEA7jG,QAAAC,KAAA,uEACA6I,KAAA+iF,eAAAgY,IAGA4B,aAAA,WAEAzlG,QAAAC,KAAA,2DAGAyuJ,aAAA,WAEA1uJ,QAAAC,KAAA,2DAGA0uJ,cAAA,WAEA3uJ,QAAAC,KAAA,4DAGA2uJ,gBAAA,WAEA5uJ,QAAAC,KAAA,8DAGA4uJ,eAAA,WAEA7uJ,QAAAC,KAAA,6DAGA6uJ,iBAAA,WAEA9uJ,QAAAC,KAAA,+DAGA8uJ,WAAA,WAEA/uJ,QAAAC,KAAA,yDAGAg0F,aAAA,WAEAj0F,QAAAC,KAAA,2DAGAs0F,eAAA,WAEAv0F,QAAAC,KAAA,6DAGA+uJ,qBAAA,WAGA,OADAhvJ,QAAAC,KAAA,gFACA6I,KAAA2iF,0BAMAp7F,OAAAqwB,iBAAAs+E,GAAAzuG,UAAA,CAEAsuF,iBAAA,CACAh2E,IAAA,WAEA,OAAAC,KAAAu6E,UAAAr8E,SAGAsZ,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,qEACA6I,KAAAu6E,UAAAr8E,QAAAhS,IAIAsnF,cAAA,CACAzzE,IAAA,WAEA,OAAAC,KAAAu6E,UAAA1mF,MAGA2jB,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,+DACA6I,KAAAu6E,UAAA1mF,KAAA3H,IAIAi6J,kBAAA,CACApmJ,IAAA,WAEA7I,QAAAC,KAAA,+FAIAqgB,IAAA,WAEAtgB,QAAAC,KAAA,gGAIA0F,QAAA,CACAkD,IAAA,WAGA,OADA7I,QAAAC,KAAA,8EACA6I,KAAArD,eAIAypJ,GAAA,CACArmJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,oDACA6I,KAAA4uD,KAIAy3F,WAAA,CACAtmJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,mHACA,GAGAqgB,IAAA,WAEAtgB,QAAAC,KAAA,oHAIAmvJ,YAAA,CACAvmJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,kGACA,GAGAqgB,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,iGACA6I,KAAAs2E,gBAAA,IAAApqF,EAAA0mB,GAAAD,KAIA4zI,sBAAA,CACAxmJ,IAAA,WAGA,OADA7I,QAAAC,KAAA,iEACA,GAGAqgB,IAAA,WAEAtgB,QAAAC,KAAA,qEAOA5P,OAAAqwB,iBAAAmoE,GAAAt4F,UAAA,CAEAkgG,SAAA,CACA5nF,IAAA,WAEA7I,QAAAC,KAAA,gGAIAqgB,IAAA,WAEAtgB,QAAAC,KAAA,iGAIAqvJ,mBAAA,CACAzmJ,IAAA,WAEA7I,QAAAC,KAAA,0GAIAqgB,IAAA,WAEAtgB,QAAAC,KAAA,2GAIAsvJ,kBAAA,CACA1mJ,IAAA,WAEA7I,QAAAC,KAAA,yGAIAqgB,IAAA,WAEAtgB,QAAAC,KAAA,4GAgBA5P,OAAAqwB,iBAAA8J,GAAAj6B,UAAA,CAEA44B,MAAA,CACAtgB,IAAA,WAGA,OADA7I,QAAAC,KAAA,0DACA6I,KAAA+hB,QAAA1B,OAGA7I,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,0DACA6I,KAAA+hB,QAAA1B,MAAAn0B,IAIAo0B,MAAA,CACAvgB,IAAA,WAGA,OADA7I,QAAAC,KAAA,0DACA6I,KAAA+hB,QAAAzB,OAGA9I,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,0DACA6I,KAAA+hB,QAAAzB,MAAAp0B,IAIAq0B,UAAA,CACAxgB,IAAA,WAGA,OADA7I,QAAAC,KAAA,kEACA6I,KAAA+hB,QAAAxB,WAGA/I,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,kEACA6I,KAAA+hB,QAAAxB,UAAAr0B,IAIAs0B,UAAA,CACAzgB,IAAA,WAGA,OADA7I,QAAAC,KAAA,kEACA6I,KAAA+hB,QAAAvB,WAGAhJ,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,kEACA6I,KAAA+hB,QAAAvB,UAAAt0B,IAIAw0B,WAAA,CACA3gB,IAAA,WAGA,OADA7I,QAAAC,KAAA,oEACA6I,KAAA+hB,QAAArB,YAGAlJ,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,oEACA6I,KAAA+hB,QAAArB,WAAAx0B,IAIA4uB,OAAA,CACA/a,IAAA,WAGA,OADA7I,QAAAC,KAAA,4DACA6I,KAAA+hB,QAAAjH,QAGAtD,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,4DACA6I,KAAA+hB,QAAAjH,OAAA5uB,IAIA80B,OAAA,CACAjhB,IAAA,WAGA,OADA7I,QAAAC,KAAA,4DACA6I,KAAA+hB,QAAAf,QAGAxJ,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,4DACA6I,KAAA+hB,QAAAf,OAAA90B,IAIAu0B,OAAA,CACA1gB,IAAA,WAGA,OADA7I,QAAAC,KAAA,4DACA6I,KAAA+hB,QAAAtB,QAGAjJ,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,4DACA6I,KAAA+hB,QAAAtB,OAAAv0B,IAIA2H,KAAA,CACAkM,IAAA,WAGA,OADA7I,QAAAC,KAAA,wDACA6I,KAAA+hB,QAAAluB,MAGA2jB,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,wDACA6I,KAAA+hB,QAAAluB,KAAA3H,IAIAg1B,gBAAA,CACAnhB,IAAA,WAGA,OADA7I,QAAAC,KAAA,8EACA6I,KAAA+hB,QAAAb,iBAGA1J,IAAA,SAAAtrB,GAEAgL,QAAAC,KAAA,8EACA6I,KAAA+hB,QAAAb,gBAAAh1B,MASA3E,OAAAqwB,iBAAAunH,GAAA13I,UAAA,CAEAsgB,KAAA,CACA7b,MAAA,SAAAyJ,GAEAuB,QAAAC,KAAA,0EACA,IAAAitD,EAAApkD,KAOA,OANA,IAAA68H,IACA90H,KAAApS,EAAA,SAAAw/D,GAEA/Q,EAAAq9E,UAAAtsE,KAGAn1D,OAIAuH,UAAA,CACAiQ,IAAA,WAEAtgB,QAAAC,KAAA,sDAOA+rI,GAAAz7I,UAAAi/J,QAAA,WAGA,OADAxvJ,QAAAC,KAAA,+DACA6I,KAAAkmI,oBAMAj4E,GAAAxmE,UAAAk/J,cAAA,SAAAp+I,EAAAmmD,GAGA,OADAx3D,QAAAC,KAAA,wDACA6I,KAAA8E,OAAAyD,EAAAmmD,IAMA,IAAAk4F,GAAA,CAEApnG,MAAA,SAAAqnG,EAAA5mG,EAAA2F,GAGA,IAAA1nC,EADAhnB,QAAAC,KAAA,mIAGA8oD,EAAAxnB,SAEAwnB,EAAAh/B,kBAAAg/B,EAAAr9B,eAEA1E,EAAA+hC,EAAA/hC,OACA+hC,EAAAA,EAAArnB,UAIAiuH,EAAArnG,MAAAS,EAAA/hC,EAAA0nC,IAIAvqC,OAAA,SAAAud,GAGA,OADA1hC,QAAAC,KAAA,6FACAyhC,EAAAvd,WAMAoE,GAAAgpG,iBAAA37H,EAEA2yB,GAAA8sG,YAAA,SAAAlpG,EAAAjD,EAAAinG,EAAAE,GAEArwH,QAAAC,KAAA,wFAEA,IAAA2R,EAAA,IAAA0gH,GACA1gH,EAAA+/G,eAAA7oH,KAAAyoH,aAEA,IAAA1mG,EAAAjZ,EAAAf,KAAAsb,EAAAgkG,OAAAv6H,EAAAy6H,GAIA,OAFAnnG,IAAA2B,EAAA3B,QAAAA,GAEA2B,GAIAtC,GAAAqnI,gBAAA,SAAAh6B,EAAA1sG,EAAAinG,EAAAE,GAEArwH,QAAAC,KAAA,gGAEA,IAAA2R,EAAA,IAAAygH,GACAzgH,EAAA+/G,eAAA7oH,KAAAyoH,aAEA,IAAA1mG,EAAAjZ,EAAAf,KAAA+kH,EAAAzF,OAAAv6H,EAAAy6H,GAIA,OAFAnnG,IAAA2B,EAAA3B,QAAAA,GAEA2B,GAIAtC,GAAAsnI,sBAAA,WAEA7vJ,QAAAkK,MAAA,0FAIAqe,GAAAunI,0BAAA,WAEA9vJ,QAAAkK,MAAA,8FAsBA,IAAA6lJ,GAAA,CAEAC,0BAAA,WAEAhwJ,QAAAkK,MAAA,yEAIA0F,OAAA,WAEA5P,QAAAkK,MAAA,yEAIA2H,OAAA,WAEA7R,QAAAkK,MAAA,0EAcA,oBAAAi0B,oBAGAA,mBAAAnhB,cAAA,IAAAohB,YAAA,WAAA,CAAAC,OAAA,CACA4xH,SAtmkDA,UA4mkDAlgK,EAAAomB,sBAAAA,EACApmB,EAAAqkB,YAAAA,EACArkB,EAAA+lB,aAAAA,EACA/lB,EAAAmgK,2BAp9jDA,KAq9jDAngK,EAAAikB,iBAAAA,EACAjkB,EAAAioB,YAAAA,GACAjoB,EAAAslB,YAAAA,EACAtlB,EAAAusB,kBAAAA,GACAvsB,EAAAkrI,aAAAA,GACAlrI,EAAAg2I,kBAAAA,GACAh2I,EAAAo6H,cAAAA,GACAp6H,EAAAkiI,gBAAAA,GACAliI,EAAAyjJ,eAAAA,GACAzjJ,EAAAshJ,qBAAAA,GACAthJ,EAAAg2H,eAAAA,GACAh2H,EAAAmjI,SAAAA,GACAnjI,EAAAyoG,YAAAA,GACAzoG,EAAAgzJ,YAAAA,GACAhzJ,EAAAk4I,MAAAA,GACAl4I,EAAAi8I,cAAAA,GACAj8I,EAAA01I,aAAAA,GACA11I,EAAA23I,cAAAA,GACA33I,EAAA41I,YAAAA,GACA51I,EAAAozJ,WAAAA,GACApzJ,EAAAogK,WAn0DA,SAAAvrH,GAGA,OADA5kC,QAAAC,KAAA,0DACA,IAAAkjJ,GAAAv+G,IAi0DA70C,EAAA6jB,SAAAA,EACA7jB,EAAAksB,kBAAAA,GACAlsB,EAAAqgK,eA9nkDA,EA+nkDArgK,EAAAsgK,oBA3vDA,SAAA39I,GAGA,OADA1S,QAAAC,KAAA,0EACA,IAAAkyH,GAAAz/G,IAyvDA3iB,EAAA28G,KAAAA,GACA38G,EAAA65H,qBAAAA,GACA75H,EAAAugK,kBAn0DA,SAAAz8J,EAAAgkD,GAGA,OADA73C,QAAAC,KAAA,oFACA,IAAAwiJ,GAAA5uJ,EAAAgkD,IAi0DA9nD,EAAAuvJ,KAAAA,GACAvvJ,EAAA2yC,KAAAA,GACA3yC,EAAA2yJ,WAAAA,GACA3yJ,EAAA4iE,kBAAAA,GACA5iE,EAAAuiE,YAAAA,GACAviE,EAAA0yJ,UAAAA,GACA1yJ,EAAAwwD,gBAAAA,GACAxwD,EAAAu1D,eAAAA,GACAv1D,EAAAkvI,qBAAAA,GACAlvI,EAAAsnB,SAAAA,GACAtnB,EAAAigI,MAAAA,GACAjgI,EAAAslE,OAAAA,GACAtlE,EAAA+xJ,aAAAA,GACA/xJ,EAAAwgK,eArGA,WAEAvwJ,QAAAkK,MAAA,0CAoGAna,EAAA8/G,cAAAA,GACA9/G,EAAA8nI,iBAAAA,GACA9nI,EAAAmmB,kBAAAA,EACAnmB,EAAAu1H,qBAAAA,GACAv1H,EAAAs1H,eAAAA,GACAt1H,EAAA6mB,oBAAAA,GACA7mB,EAAA22I,MAAAA,GACA32I,EAAAi2J,mBAAAA,GACAj2J,EAAAwnD,MAAAA,GACAxnD,EAAA85H,mBAAAA,GACA95H,EAAA6/G,kBAAAA,GACA7/G,EAAAmiI,wBAAAA,GACAniI,EAAAq1H,mBAAAA,GACAr1H,EAAAo1H,aAAAA,GACAp1H,EAAAgnE,WAAAA,GACAhnE,EAAAygK,aAAAl+F,GACAviE,EAAAsmB,sBAAAA,EACAtmB,EAAAumB,sBAAAA,EACAvmB,EAAAqjF,YAAAA,GACArjF,EAAAsiI,kBAAAA,GACAtiI,EAAA0mB,wBAAAA,EACA1mB,EAAA2mB,wBAAAA,GACA3mB,EAAA0oI,iBAAAA,GACA1oI,EAAA4oI,kBAAAA,GACA5oI,EAAAg5H,iBAAAA,GACAh5H,EAAAujB,aAAAA,EACAvjB,EAAAwjB,cAAAA,EACAxjB,EAAA0gK,kBA/qkDA,EAgrkDA1gK,EAAAsjB,aAAAA,EACAtjB,EAAAwiI,MAAAA,GACAxiI,EAAA4pI,UAAAA,GACA5pI,EAAAokB,eAAAA,EACApkB,EAAAqmB,kBAAAA,EACArmB,EAAAu0H,uBAAAA,GACAv0H,EAAAm0H,iBAAAA,GACAn0H,EAAAqkJ,YAAAA,GACArkJ,EAAAkoE,YAAAA,GACAloE,EAAAsjF,mBAAAA,GACAtjF,EAAAwjF,cAAAA,GACAxjF,EAAAoiI,kBAAAA,GACApiI,EAAA2gK,mBAlhkDA,KAmhkDA3gK,EAAA4gK,uBAjhkDA,MAkhkDA5gK,EAAAshI,sBAAAA,GACAthI,EAAAuoB,YAAAA,GACAvoB,EAAAwoB,mBAAAA,GACAxoB,EAAA+/G,aAAAA,GACA//G,EAAAirI,iBAAAA,GACAjrI,EAAA0xJ,uBAAAA,GACA1xJ,EAAAgrI,uBAAAA,GACAhrI,EAAAs5H,oBAAAA,GACAt5H,EAAAkjH,2BAAAA,GACAljH,EAAAijH,qBAAAA,GACAjjH,EAAA8jB,WAAAA,EACA9jB,EAAAglB,eAAAA,EACAhlB,EAAAklB,eAAAA,EACAllB,EAAA6gK,uBA5lEA,SAAA1zI,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,8HACA,IAAAsgD,GAAArjC,EAAAsjC,GAAAsC,SAAAtmC,KA0lEAzsB,EAAA8gK,iBA7gkDA,MA8gkDA9gK,EAAAysB,iBAAAA,GACAzsB,EAAA+gK,iBAlhkDA,MAmhkDA/gK,EAAA6zH,cAAAA,GACA7zH,EAAAghK,YAv4DA,SAAAl9J,EAAAukD,GAGA,OADAp4C,QAAAC,KAAA,wEACA,IAAA8uG,GAAA,IAAA6U,GAAA/vH,EAAA6tC,UAAA,IAAAkgD,GAAA,CAAA/pC,WAAAjiD,IAAAwiD,EAAAA,EAAA,aAq4DAroD,EAAA0iI,aAAAA,GACA1iI,EAAAylB,WAAAA,EACAzlB,EAAAihK,iBAlikDA,IAmikDAjhK,EAAAwmB,iCAAAA,EACAxmB,EAAAymB,iCAAAA,EACAzmB,EAAA+qC,MAAAA,GACA/qC,EAAA0sB,gBAAAA,GACA1sB,EAAAqqH,sBAAAA,GACArqH,EAAAoqH,gBAAAA,GACApqH,EAAA6nD,MAAAA,GACA7nD,EAAAkhK,MApsEA,SAAAthK,EAAA6E,EAAAhF,EAAA4G,EAAAm+B,EAAAsjB,EAAAC,GAGA,OADA93C,QAAAC,KAAA,wEACA,IAAA23C,GAAAjoD,EAAA6E,EAAAhF,EAAA+kC,EAAAsjB,EAAAC,IAksEA/nD,EAAAmhK,WA3rEA,EA4rEAnhK,EAAAiiI,WAAAA,GACAjiI,EAAAohK,YAptkDA,EAqtkDAphK,EAAAqhK,iBAxjEA,SAAAl0I,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,4FACA,IAAAuhD,GAAAtkC,EAAAsjC,IAsjEAzwD,EAAAyxD,uBAAAA,GACAzxD,EAAAshK,iBAnjEA,SAAAn0I,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,4FACA,IAAAyhD,GAAAxkC,EAAAsjC,IAijEAzwD,EAAA2xD,uBAAAA,GACA3xD,EAAA2nB,UAAAA,GACA3nB,EAAAi5G,IAAAA,GACAj5G,EAAAg5G,QAAAA,GACAh5G,EAAA0xI,KAAAA,GACA1xI,EAAAyyI,WAAAA,GACAzyI,EAAAuhK,sBAtukDA,EAuukDAvhK,EAAAwhK,qBAxukDA,EAyukDAxhK,EAAA4jB,UAAAA,EACA5jB,EAAAyoE,QAAAA,GACAzoE,EAAA4rB,cAAAA,GACA5rB,EAAAi9D,SAAAA,GACAj9D,EAAA2/J,cAAAA,GACA3/J,EAAA2lB,aAAAA,EACA3lB,EAAA0lB,kBAAAA,EACA1lB,EAAAyhK,wBA5jkDA,IA6jkDAzhK,EAAA0hK,mBA/jkDA,IAgkkDA1hK,EAAAkxJ,WAAAA,GACAlxJ,EAAA0oG,MAAAA,GACA1oG,EAAA4nB,cAAAA,GACA5nB,EAAAmqI,gBAAAA,GACAnqI,EAAAixJ,sBAAAA,GACAjxJ,EAAA61I,qBAAAA,GACA71I,EAAAgjH,0BAAAA,GACAhjH,EAAA+iH,oBAAAA,GACA/iH,EAAAoxI,kBAAAA,GACApxI,EAAAqiI,YAAAA,GACAriI,EAAAw4B,WAAAA,GACAx4B,EAAA2vJ,sBAAAA,GACA3vJ,EAAA2hK,mBAtlkDA,KAulkDA3hK,EAAA4hK,uBArlkDA,MAslkDA5hK,EAAAivI,yBAAAA,GACAjvI,EAAAgvI,wBAAAA,GACAhvI,EAAA+jJ,2BAAAA,GACA/jJ,EAAAo9G,cAAAA,GACAp9G,EAAA6hK,eA1nEA,SAAA10I,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,wFACA,IAAA+gD,GAAA9jC,EAAAsjC,IAwnEAzwD,EAAAixD,qBAAAA,GACAjxD,EAAA8hK,eA9mEA,SAAA30I,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,wFACA,IAAAmhD,GAAAlkC,EAAAsjC,IA4mEAzwD,EAAAqxD,qBAAAA,GACArxD,EAAA+hK,cAnpEA,SAAA50I,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,sFACA,IAAA0gD,GAAAzjC,EAAAsjC,IAipEAzwD,EAAA4wD,oBAAAA,GACA5wD,EAAAynB,QAAAA,GACAznB,EAAAk5G,kBAAAA,GACAl5G,EAAAg6G,2BAAAA,GACAh6G,EAAA24H,YAAAA,GACA34H,EAAAgiK,oBAjokDA,KAkokDAhiK,EAAAiiK,kBAjokDA,KAkokDAjiK,EAAAkiK,kBAjokDA,KAkokDAliK,EAAAmiK,gBArmkDA,KAsmkDAniK,EAAAoiK,WA7NA,WAEAnyJ,QAAAkK,MAAA,uCA4NAna,EAAAssB,cAAAA,GACAtsB,EAAAu5H,cAAAA,GACAv5H,EAAAw7G,IAAAA,GACAx7G,EAAA+yH,oBAAAA,GACA/yH,EAAA6yH,cAAAA,GACA7yH,EAAAkrC,OAAAA,GACAlrC,EAAAqiK,UApMA,WAEApyJ,QAAAkK,MAAA,yEAmMAna,EAAAulB,UAAAA,EACAvlB,EAAAwlB,eAAAA,EACAxlB,EAAAsiK,qBA3mkDA,IA4mkDAtiK,EAAAuiK,gBA9mkDA,IA+mkDAviK,EAAAkqI,MAAAA,GACAlqI,EAAAqrI,WAAAA,GACArrI,EAAAoqI,YAAAA,GACApqI,EAAAg+G,KAAAA,GACAh+G,EAAA0vJ,MAAAA,GACA1vJ,EAAA6xF,kBAAAA,GACA7xF,EAAA6oI,UAAAA,GACA7oI,EAAA8oI,WAAAA,GACA9oI,EAAA8xF,mBAAAA,GACA9xF,EAAAi/G,SAAAA,GACAj/G,EAAAwiK,WA1wEA,EA2wEAxiK,EAAAg/G,aAAAA,GACAh/G,EAAAyiK,UA7wEA,EA8wEAziK,EAAA0rB,eAAAA,GACA1rB,EAAAknB,aAAAA,GACAlnB,EAAAq5H,kBAAAA,GACAr5H,EAAA0iK,yBAxukDA,KAyukDA1iK,EAAA2iK,0BA3ukDA,KA4ukDA3iK,EAAAonB,yBAAAA,GACApnB,EAAAmnB,0BAAAA,GACAnnB,EAAAimB,kBAAAA,EACAjmB,EAAAuhI,OAAAA,GACAvhI,EAAAyuI,YAAAA,GACAzuI,EAAAmgI,eAAAA,GACAngI,EAAA8rB,eAAAA,GACA9rB,EAAA4iK,SA7qkDA,KA8qkDA5iK,EAAA6iK,aA5qkDA,KA6qkDA7iK,EAAAurB,WAAAA,GACAvrB,EAAAqoB,qBAAAA,GACAroB,EAAAooB,gBAAAA,GACApoB,EAAA8iK,MAl0kDA,CAAAC,KAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,OAAA,EAAAC,MAAA,EAAAC,IAAA,GAm0kDApjK,EAAAwqD,SAAAA,GACAxqD,EAAAsrI,eAAAA,GACAtrI,EAAAwH,KAAA8lB,GACAttB,EAAAstB,UAAAA,GACAttB,EAAAywB,QAAAA,GACAzwB,EAAAulC,QAAAA,GACAvlC,EAAAykB,YAAAA,EACAzkB,EAAA66D,KAAAA,GACA76D,EAAA2sD,kBAAAA,GACA3sD,EAAAoxF,kBAAAA,GACApxF,EAAAqxF,qBAAAA,GACArxF,EAAAqjK,iBAryEA,SAAAtyH,GAGA,OADA9gC,QAAAC,KAAA,kEACA6gC,GAmyEA/wC,EAAAuxF,oBAAAA,GACAvxF,EAAA4xF,mBAAAA,GACA5xF,EAAAsxF,mBAAAA,GACAtxF,EAAAwxF,kBAAAA,GACAxxF,EAAA2xF,qBAAAA,GACA3xF,EAAA0xF,qBAAAA,GACA1xF,EAAAyxF,iBAAAA,GACAzxF,EAAAwkB,YAAAA,EACAxkB,EAAA8mB,uBAAAA,GACA9mB,EAAA8lB,aAAAA,EACA9lB,EAAAsjK,cAzyEA,SAAAvyH,GAaA,YAXAlrC,IAAAkrC,IAAAA,EAAA,IAEA9gC,QAAAC,KAAA,+DACA6gC,EAAAurB,iBAAA,EACAvrB,EAAAA,UAAAA,EACAA,EAAA5f,MAAA,WAEA,OAAA4f,EAAA7sC,SAIA6sC,GA6xEA/wC,EAAAmkB,iBAAAA,EACAnkB,EAAA6lB,kBAAAA,EACA7lB,EAAA+mB,cAAAA,GACA/mB,EAAAujK,0BAtxkDA,KAuxkDAvjK,EAAAwjK,2BAzxkDA,KA0xkDAxjK,EAAAinB,0BAAAA,GACAjnB,EAAAgnB,2BAAAA,GACAhnB,EAAAqlB,WAAAA,EACArlB,EAAAyjK,iBA9qkDA,IA+qkDAzjK,EAAA+jB,WAAAA,EACA/jB,EAAA0jK,SA/zEA,EAg0EA1jK,EAAAgmB,cAAAA,EACAhmB,EAAAyrB,yBAAAA,GACAzrB,EAAAgkB,eAAAA,EACAhkB,EAAA4lB,cAAAA,EACA5lB,EAAA2jK,oBAhrkDA,IAirkDA3jK,EAAA+5H,oBAAAA,GACA/5H,EAAA+sC,SAAAA,GACA/sC,EAAA8vI,aAAAA,GACA9vI,EAAAqsB,qBAAAA,GACArsB,EAAA8iH,yBAAAA,GACA9iH,EAAA6iH,mBAAAA,GACA7iH,EAAA2kB,UAAAA,EACA3kB,EAAAilB,uBAAAA,EACAjlB,EAAAmlB,uBAAAA,EACAnlB,EAAA+kB,uBAAAA,EACA/kB,EAAA6kB,uBAAAA,EACA7kB,EAAA+qI,mBAAAA,GACA/qI,EAAAyjB,aAAAA,EACAzjB,EAAA0jB,iBAAAA,EACA1jB,EAAA+0J,eAAAA,GACA/0J,EAAAghH,yBAAAA,GACAhhH,EAAA6gH,mBAAAA,GACA7gH,EAAA4jK,SAnzEA,SAAA/xH,GAGA,OADA5hC,QAAAC,KAAA,oDACA,IAAA6qG,GAAAlpE,IAizEA7xC,EAAA6jK,sBA/xEA,SAAAjyH,GAGA,OADA3hC,QAAAC,KAAA,yEACA,IAAA6hF,GAAAngD,IA6xEA5xC,EAAA8jK,eA9yEA,SAAAnyH,EAAAE,GAGA,OADA5hC,QAAAC,KAAA,0DACA,IAAAovG,GAAA3tE,EAAAE,IA4yEA7xC,EAAA+jK,uBA1xEA,SAAAnyH,GAGA,OADA3hC,QAAAC,KAAA,0EACA,IAAA6hF,GAAAngD,IAwxEA5xC,EAAA+pI,KAAAA,GACA/pI,EAAAulE,kBAAAA,GACAvlE,EAAAu6C,MAAAA,GACAv6C,EAAA6uE,oBAAAA,GACA7uE,EAAA4uE,cAAAA,GACA5uE,EAAA4yJ,YAAAA,GACA5yJ,EAAAikJ,WAp0EA,SAAAtyG,EAAAE,GAGA,OADA5hC,QAAAC,KAAA,sDACA,IAAAovG,GAAA3tE,EAAAE,IAk0EA7xC,EAAAgkK,mBAhzEA,SAAApyH,GAGA,OADA3hC,QAAAC,KAAA,sEACA,IAAA6hF,GAAAngD,IA8yEA5xC,EAAA8qI,WAAAA,GACA9qI,EAAA2wJ,iBAAAA,GACA3wJ,EAAAs/G,OAAAA,GACAt/G,EAAA+xF,eAAAA,GACA/xF,EAAAmxJ,gBAAAA,GACAnxJ,EAAAqhH,yBAAAA,GACArhH,EAAAohH,mBAAAA,GACAphH,EAAA67I,gBAAAA,GACA77I,EAAA8gJ,gBAAAA,GACA9gJ,EAAAu8I,cAAAA,GACAv8I,EAAA+oI,qBAAAA,GACA/oI,EAAAgpI,sBAAAA,GACAhpI,EAAAo7B,WAAAA,GACAp7B,EAAAi6H,wBAAAA,GACAj6H,EAAAg6H,4BAAAA,GACAh6H,EAAAikK,SAv5kDA,MAw5kDAjkK,EAAAmsB,iBAAAA,GACAnsB,EAAAmoB,WAAAA,GACAnoB,EAAA8oB,kBAAAA,GACA9oB,EAAAqqB,uBAAAA,GACArqB,EAAAkqB,sBAAAA,GACAlqB,EAAAmqB,sBAAAA,GACAnqB,EAAAoqB,sBAAAA,GACApqB,EAAAsqB,uBAAAA,GACAtqB,EAAAuqB,uBAAAA,GACAvqB,EAAA0pB,qBAAAA,GACA1pB,EAAA2pB,qBAAAA,GACA3pB,EAAA4pB,qBAAAA,GACA5pB,EAAA6pB,qBAAAA,GACA7pB,EAAA8pB,qBAAAA,GACA9pB,EAAA+pB,qBAAAA,GACA/pB,EAAAgqB,qBAAAA,GACAhqB,EAAAiqB,qBAAAA,GACAjqB,EAAAwqB,iBAAAA,GACAxqB,EAAAypB,qBAAAA,GACAzpB,EAAAspB,yBAAAA,GACAtpB,EAAAqpB,yBAAAA,GACArpB,EAAAgpB,sBAAAA,GACAhpB,EAAAipB,sBAAAA,GACAjpB,EAAAkpB,sBAAAA,GACAlpB,EAAAisB,aAAAA,GACAjsB,EAAA6rB,aAAAA,GACA7rB,EAAAsoB,WAAAA,GACAtoB,EAAAkoB,UAAAA,GACAloB,EAAA6oB,iBAAAA,GACA7oB,EAAAgsB,eAAAA,GACAhsB,EAAA+rB,cAAAA,GACA/rB,EAAAupB,gBAAAA,GACAvpB,EAAAwpB,gBAAAA,GACAxpB,EAAAopB,wBAAAA,GACAppB,EAAAmpB,wBAAAA,GACAnpB,EAAA+oB,qBAAAA,GACA/oB,EAAA2oB,SAAAA,GACA3oB,EAAA4oB,gBAAAA,GACA5oB,EAAA01H,kBAAAA,GACA11H,EAAAw3C,IAAAA,GACAx3C,EAAAgkJ,UAAAA,GACAhkJ,EAAAmrI,cAAAA,GACAnrI,EAAAyoB,UAAAA,GACAzoB,EAAA0oB,iBAAAA,GACA1oB,EAAAkmB,oBAAAA,EACAlmB,EAAA4mB,eAAAA,GACA5mB,EAAAkkK,iBAxxkDA,KAyxkDAlkK,EAAAukB,wBAAAA,EACAvkB,EAAAwyH,mBAAAA,GACAxyH,EAAAmyH,aAAAA,GACAnyH,EAAAorB,+BAAAA,GACAprB,EAAAirB,8BAAAA,GACAjrB,EAAAkrB,8BAAAA,GACAlrB,EAAAmrB,8BAAAA,GACAnrB,EAAAqrB,+BAAAA,GACArrB,EAAAsrB,+BAAAA,GACAtrB,EAAAyqB,6BAAAA,GACAzqB,EAAA0qB,6BAAAA,GACA1qB,EAAA2qB,6BAAAA,GACA3qB,EAAA4qB,6BAAAA,GACA5qB,EAAA6qB,6BAAAA,GACA7qB,EAAA8qB,6BAAAA,GACA9qB,EAAA+qB,6BAAAA,GACA/qB,EAAAgrB,6BAAAA,GACAhrB,EAAA8tC,MAAAA,GACA9tC,EAAAggK,WAAAA,GACAhgK,EAAAkvE,YAAAA,GACAlvE,EAAAi3E,UAAAA,GACAj3E,EAAAwkE,eAAAA,GACAxkE,EAAAgyF,eAAAA,GACAhyF,EAAAiqI,MAAAA,GACAjqI,EAAAszH,oBAAAA,GACAtzH,EAAAqzH,cAAAA,GACArzH,EAAAuxI,UAAAA,GACAvxI,EAAA2pH,WAAAA,GACA3pH,EAAAunB,UAAAA,GACAvnB,EAAA08G,SAAAA,GACA18G,EAAAwwJ,eAAAA,GACAxwJ,EAAA27G,YAAAA,GACA37G,EAAAmkK,cAt9kDA,EAu9kDAnkK,EAAA22C,OAAAA,GACA32C,EAAA8xH,qBAAAA,GACA9xH,EAAAyxH,eAAAA,GACAzxH,EAAAokJ,UAAAA,GACApkJ,EAAAorI,oBAAAA,GACAprI,EAAAm2J,OAAAA,GACAn2J,EAAAipI,YAAAA,GACAjpI,EAAAk2J,aAAAA,GACAl2J,EAAAyqI,UAAAA,GACAzqI,EAAAiwJ,gBAAAA,GACAjwJ,EAAAwqI,gBAAAA,GACAxqI,EAAA+6G,OAAAA,GACA/6G,EAAAiyF,eAAAA,GACAjyF,EAAA8kB,eAAAA,EACA9kB,EAAAolB,uBAAAA,EACAplB,EAAA4kB,eAAAA,EACA5kB,EAAAokK,gBApzkDA,MAqzkDApkK,EAAAwsB,gBAAAA,GACAxsB,EAAAqkK,gBAzzkDA,MA0zkDArkK,EAAAw2I,aAAAA,GACAx2I,EAAAskK,gBAtzkDA,MAuzkDAtkK,EAAAukK,gBA7zkDA,MA8zkDAvkK,EAAAwkK,gBA3zkDA,MA4zkDAxkK,EAAAk6H,oBAAAA,GACAl6H,EAAAskB,iBAAAA,EACAtkB,EAAAkkB,oBAAAA,EACAlkB,EAAAykK,MAhglDA,CAAAvB,OAAA,EAAAE,IAAA,EAAAsB,UAAA,EAAAC,aAAA,GAiglDA3kK,EAAAosB,sBAAAA,GACApsB,EAAA4iH,0BAAAA,GACA5iH,EAAA2iH,oBAAAA,GACA3iH,EAAAqxH,mBAAAA,GACArxH,EAAAmxH,aAAAA,GACAnxH,EAAAk5B,QAAAA,GACAl5B,EAAAuiI,cAAAA,GACAviI,EAAAilH,oBAAAA,GACAjlH,EAAA+kH,cAAAA,GACA/kH,EAAAukH,wBAAAA,GACAvkH,EAAAokH,kBAAAA,GACApkH,EAAAm8C,SAAAA,GACAn8C,EAAA4kK,oBAj3kDA,EAk3kDA5kK,EAAA6kK,sBAn3kDA,EAo3kDA7kK,EAAA8kK,kBAr3kDA,EAs3kDA9kK,EAAAyjH,mBAAAA,GACAzjH,EAAAmjH,aAAAA,GACAnjH,EAAAmxI,UA19kDA,IA29kDAnxI,EAAA+kK,gBA73EA,SAAA53I,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,0FACA,IAAAihD,GAAAhkC,EAAAsjC,IA23EAzwD,EAAAmxD,sBAAAA,GACAnxD,EAAAglK,gBAj3EA,SAAA73I,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,0FACA,IAAAqhD,GAAApkC,EAAAsjC,IA+2EAzwD,EAAAuxD,sBAAAA,GACAvxD,EAAAilK,eAt5EA,SAAA93I,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,wFACA,IAAA4gD,GAAA3jC,EAAAsjC,IAo5EAzwD,EAAA8wD,qBAAAA,GACA9wD,EAAAklK,sBAj5EA,SAAA/3I,EAAAsjC,GAGA,OADAxgD,QAAAC,KAAA,sGACA,IAAA6gD,GAAA5jC,EAAAsjC,IA+4EAzwD,EAAA+wD,4BAAAA,GACA/wD,EAAA8jJ,QAAAA,GACA9jJ,EAAAkqE,YAAAA,GACAlqE,EAAAqkE,cAAAA,GACArkE,EAAAqnB,iBAAAA,GACArnB,EAAAgoB,mBAAAA,GACAhoB,EAAA0nB,gBAAAA,GACA1nB,EAAA6nB,sBAAAA,GACA7nB,EAAA8nB,sBAAAA,GACA9nB,EAAA+nB,qBAAAA,GACA/nB,EAAAwnB,kBAAAA,GACAxnB,EAAA2jB,aAAAA,EACA3jB,EAAAwwB,QAAAA,GACAxwB,EAAAoiC,QAAAA,GACApiC,EAAAu6B,QAAAA,GACAv6B,EAAAm6H,oBAAAA,GACAn6H,EAAAmlK,OAh8EA,SAAAjgK,EAAAsB,EAAAg0B,GAGA,OADAvqB,QAAAC,KAAA,6DACA,IAAAkyB,GAAAl9B,EAAAsB,EAAAg0B,IA87EAx6B,EAAAolK,aArgFA,EAsgFAplK,EAAA2/G,aAAAA,GACA3/G,EAAA+4G,eAAAA,GACA/4G,EAAAgoE,sBAAAA,GACAhoE,EAAAk7B,6BAAAA,GACAl7B,EAAAy6B,kBAAAA,GACAz6B,EAAAqlK,sBAnxBA,SAAAzyJ,EAAAC,EAAA6nB,GAGA,OADAzqB,QAAAC,KAAA,wGACA,IAAA83D,GAAAp1D,EAAA8nB,IAixBA16B,EAAAivG,cAAAA,GACAjvG,EAAA2nG,WAAAA,GACA3nG,EAAAggH,kBAAAA,GACAhgH,EAAAslK,gBArtEA,SAAAxhK,EAAAukD,GAGA,OADAp4C,QAAAC,KAAA,gFACA,IAAA8uG,GAAA,IAAAgB,GAAAl8G,EAAA6tC,UAAA,IAAAkgD,GAAA,CAAA/pC,WAAAjiD,IAAAwiD,EAAAA,EAAA,aAmtEAroD,EAAAulK,iBA/5kDA,KAg6kDAvlK,EAAAwlK,UAnrEA,SAAA7iJ,GAGA,OADA1S,QAAAC,KAAA,yDACA,IAAA+xH,GAAAt/G,IAirEA3iB,EAAAwrB,oBAAAA,GACAxrB,EAAA0kB,WAAAA,EACA1kB,EAAAylK,gBAp6kDA,KAq6kDAzlK,EAAA0lK,cAj5kDA,EAk5kDA1lK,EAAA2rB,aAAAA,GAEArrB,OAAA6iB,eAAAnjB,EAAA,aAAA,CAAAiF,OAAA,KAlqlDA,iBAAAjF,QAAA,IAAAI,EAAAyiB,EAAA7iB,GACA,mBAAA2lK,QAAAA,OAAAC,IAAAD,OAAA,CAAA,WAAA9iJ,GACAA,GAAAzd,EAAAA,GAAAygK,MAAAC,MAAA,4BCHA71J,QAAAC,KAAA,gUAiBA41J,MAAAC,cAAA,SAAAjiK,EAAAksG,GAkHA,IAEAn8E,EAGAmyI,EACAC,EAEAC,EACAC,EAEAC,OA3HAvgK,IAAAmqG,GAAA//F,QAAAC,KAAA,4EACA8/F,IAAAzsG,UAAA0M,QAAAkK,MAAA,4HAEApB,KAAAjV,OAAAA,EACAiV,KAAAi3F,WAAAA,EAGAj3F,KAAA9B,SAAA,EAGA8B,KAAApX,OAAA,IAAAmkK,MAAA1jI,QAGArpB,KAAAstJ,YAAA,EACAttJ,KAAAylI,YAAAn+H,SAGAtH,KAAAutJ,QAAA,EACAvtJ,KAAAwtJ,QAAAlmJ,SAIAtH,KAAAytJ,cAAA,EACAztJ,KAAA0tJ,cAAAj/J,KAAAgmB,GAIAzU,KAAA2tJ,iBAAArmJ,SACAtH,KAAA4tJ,gBAAAtmJ,SAIAtH,KAAA6tJ,eAAA,EACA7tJ,KAAA8tJ,cAAA,IAIA9tJ,KAAA+tJ,YAAA,EACA/tJ,KAAAguJ,UAAA,EAGAhuJ,KAAAiuJ,cAAA,EACAjuJ,KAAAkuJ,YAAA,EAGAluJ,KAAAmuJ,WAAA,EACAnuJ,KAAAouJ,SAAA,EACApuJ,KAAAquJ,oBAAA,EACAruJ,KAAAsuJ,YAAA,EAIAtuJ,KAAAuuJ,YAAA,EACAvuJ,KAAAwuJ,gBAAA,EAGAxuJ,KAAAyuJ,YAAA,EAGAzuJ,KAAAvX,KAAA,CAAAuhK,KAAA,GAAA0E,GAAA,GAAAxE,MAAA,GAAAyE,OAAA,IAGA3uJ,KAAA4uJ,aAAA,CAAA5E,KAAA+C,MAAAhD,MAAAI,OAAAF,OAAA8C,MAAAhD,MAAAK,MAAAF,MAAA6C,MAAAhD,MAAAM,KAGArqJ,KAAA6uJ,QAAA,CAAAC,IAAA/B,MAAArB,MAAAvB,OAAA4E,IAAAhC,MAAArB,MAAAC,WAGA3rJ,KAAAgvJ,QAAAhvJ,KAAApX,OAAAwvB,QACApY,KAAAivJ,UAAAjvJ,KAAAjV,OAAA4lC,SAAAvY,QACApY,KAAAkvJ,MAAAlvJ,KAAAjV,OAAA2hE,KAMA1sD,KAAAmvJ,cAAA,WAEA,OAAAC,EAAAtjI,KAIA9rB,KAAAqvJ,kBAAA,WAEA,OAAAD,EAAA7vI,OAIAvf,KAAAsvJ,UAAA,WAEAlrG,EAAA4qG,QAAA5iK,KAAAg4D,EAAAx7D,QACAw7D,EAAA6qG,UAAA7iK,KAAAg4D,EAAAr5D,OAAA4lC,UACAyzB,EAAA8qG,MAAA9qG,EAAAr5D,OAAA2hE,MAIA1sD,KAAAwiE,MAAA,WAEApe,EAAAx7D,OAAAwD,KAAAg4D,EAAA4qG,SACA5qG,EAAAr5D,OAAA4lC,SAAAvkC,KAAAg4D,EAAA6qG,WACA7qG,EAAAr5D,OAAA2hE,KAAAtI,EAAA8qG,MAEA9qG,EAAAr5D,OAAAgiE,yBACA3I,EAAAlwC,cAAAq7I,GAEAnrG,EAAAt/C,SAEAq6D,EAAAqwF,EAAAC,MAKAzvJ,KAAA8E,QAEAgW,EAAA,IAAAiyI,MAAA1jI,QAGA4jI,GAAA,IAAAF,MAAA1qI,YAAAsF,mBAAA58B,EAAAmkC,GAAA,IAAA69H,MAAA1jI,QAAA,EAAA,EAAA,IACA6jI,EAAAD,EAAA70I,QAAA6P,UAEAklI,EAAA,IAAAJ,MAAA1jI,QACA+jI,EAAA,IAAAL,MAAA1qI,WAEAgrI,EAAA,EAAA5+J,KAAAgmB,GAEA,WAEA,IAAAkc,EAAAyzB,EAAAr5D,OAAA4lC,SAEA7V,EAAA1uB,KAAAukC,GAAA/X,IAAAwrC,EAAAx7D,QAGAkyB,EAAA4O,gBAAAujI,GAGAmC,EAAA78H,eAAAzX,GAEAspC,EAAAmqG,YAAApvF,IAAAqwF,EAAAC,MAEAC,EAoLA,EAAAjhK,KAAAgmB,GAAA,GAAA,GAAA2vC,EAAAoqG,iBAhLApqG,EAAAypG,eAEAuB,EAAA7vI,OAAAowI,EAAApwI,MAAA6kC,EAAA0pG,cACAsB,EAAAtjI,KAAA6jI,EAAA7jI,IAAAs4B,EAAA0pG,gBAIAsB,EAAA7vI,OAAAowI,EAAApwI,MACA6vI,EAAAtjI,KAAA6jI,EAAA7jI,KAMA,IAAAhxB,EAAAspD,EAAAupG,gBACA57J,EAAAqyD,EAAAwpG,gBA2EA,OAzEA93J,SAAAgF,IAAAhF,SAAA/D,KAEA+I,GAAArM,KAAAgmB,GAAA3Z,GAAAuyJ,EAAAvyJ,EAAArM,KAAAgmB,KAAA3Z,GAAAuyJ,GAEAt7J,GAAAtD,KAAAgmB,GAAA1iB,GAAAs7J,EAAAt7J,EAAAtD,KAAAgmB,KAAA1iB,GAAAs7J,GAIA+B,EAAA7vI,MAFAzkB,EAAA/I,EAEAtD,KAAAsD,IAAA+I,EAAArM,KAAAqM,IAAA/I,EAAAq9J,EAAA7vI,QAIA6vI,EAAA7vI,OAAAzkB,EAAA/I,GAAA,EACAtD,KAAAsD,IAAA+I,EAAAs0J,EAAA7vI,OACA9wB,KAAAqM,IAAA/I,EAAAq9J,EAAA7vI,QAOA6vI,EAAAtjI,IAAAr9B,KAAAsD,IAAAqyD,EAAAqpG,cAAAh/J,KAAAqM,IAAAspD,EAAAspG,cAAA0B,EAAAtjI,MAEAsjI,EAAA/Y,WAGA+Y,EAAAvjI,QAAAvnB,EAGA8qJ,EAAAvjI,OAAAp9B,KAAAsD,IAAAqyD,EAAAkpG,YAAA7+J,KAAAqM,IAAAspD,EAAAqhF,YAAA2pB,EAAAvjI,UAIA,IAAAu4B,EAAAypG,cAEAzpG,EAAAx7D,OAAA+vB,gBAAAi3I,EAAAxrG,EAAA0pG,eAIA1pG,EAAAx7D,OAAA2vB,IAAAq3I,GAIA90I,EAAA6Q,iBAAAyjI,GAGAt0I,EAAA4O,gBAAAwjI,GAEAv8H,EAAAvkC,KAAAg4D,EAAAx7D,QAAA2vB,IAAAuC,GAEAspC,EAAAr5D,OAAAikC,OAAAo1B,EAAAx7D,SAEA,IAAAw7D,EAAAypG,eAEA8B,EAAApwI,OAAA,EAAA6kC,EAAA0pG,cACA6B,EAAA7jI,KAAA,EAAAs4B,EAAA0pG,cAEA8B,EAAA52I,eAAA,EAAAorC,EAAA0pG,iBAIA6B,EAAAn4I,IAAA,EAAA,EAAA,GAEAo4I,EAAAp4I,IAAA,EAAA,EAAA,IAIAlT,EAAA,KAMAurJ,GACA1C,EAAAhzI,kBAAAiqC,EAAAr5D,OAAA4lC,UAAAm/H,GACA,GAAA,EAAA1C,EAAA1zI,IAAA0qC,EAAAr5D,OAAA47B,aAAAmpI,KAEA1rG,EAAAlwC,cAAAq7I,GAEApC,EAAA/gK,KAAAg4D,EAAAr5D,OAAA4lC,UACAy8H,EAAAhhK,KAAAg4D,EAAAr5D,OAAA47B,YACAkpI,GAAA,GAEA,KAUA7vJ,KAAAY,QAAA,WAEAwjD,EAAA6yC,WAAAr4F,oBAAA,cAAAmxJ,IAAA,GACA3rG,EAAA6yC,WAAAr4F,oBAAA,YAAAoxJ,GAAA,GACA5rG,EAAA6yC,WAAAr4F,oBAAA,QAAAqxJ,GAAA,GAEA7rG,EAAA6yC,WAAAr4F,oBAAA,aAAAsxJ,GAAA,GACA9rG,EAAA6yC,WAAAr4F,oBAAA,WAAAuxJ,GAAA,GACA/rG,EAAA6yC,WAAAr4F,oBAAA,YAAAwxJ,GAAA,GAEAhsG,EAAA6yC,WAAAo5D,cAAAzxJ,oBAAA,YAAA0xJ,GAAA,GACAlsG,EAAA6yC,WAAAo5D,cAAAzxJ,oBAAA,UAAA2xJ,GAAA,GAEAnsG,EAAA6yC,WAAAr4F,oBAAA,UAAA4xJ,GAAA,IAUA,IAAApsG,EAAApkD,KAEAuvJ,EAAA,CAAA17J,KAAA,UACA48J,EAAA,CAAA58J,KAAA,SACA68J,EAAA,CAAA78J,KAAA,OAEA27J,EAAA,CACAC,MAAA,EACAtF,OAAA,EACAC,MAAA,EACAC,IAAA,EACAsG,aAAA,EACAC,UAAA,EACAC,gBAAA,EACAC,mBAAA,GAGA3xF,EAAAqwF,EAAAC,KAEAK,EAAA,KAGAV,EAAA,IAAArC,MAAA1hB,UACAskB,EAAA,IAAA5C,MAAA1hB,UAEA/mI,EAAA,EACAsrJ,EAAA,IAAA7C,MAAA1jI,QACAwmI,GAAA,EAEAkB,EAAA,IAAAhE,MAAAt1I,QACAu5I,EAAA,IAAAjE,MAAAt1I,QACAw5I,EAAA,IAAAlE,MAAAt1I,QAEAy5I,EAAA,IAAAnE,MAAAt1I,QACA05I,EAAA,IAAApE,MAAAt1I,QACA25I,EAAA,IAAArE,MAAAt1I,QAEA45I,EAAA,IAAAtE,MAAAt1I,QACA65I,EAAA,IAAAvE,MAAAt1I,QACA85I,EAAA,IAAAxE,MAAAt1I,QAQA,SAAA+5I,IAEA,OAAA/iK,KAAAub,IAAA,IAAAo6C,EAAA4pG,WAIA,SAAA0B,EAAA11I,GAEA21I,EAAApwI,OAAAvF,EAIA,SAAAy3I,EAAAz3I,GAEA21I,EAAA7jI,KAAA9R,EAIA,IAEA1B,EAFAo5I,GAEAp5I,EAAA,IAAAy0I,MAAA1jI,QAEA,SAAAgN,EAAAs7H,GAEAr5I,EAAA8T,oBAAAulI,EAAA,GACAr5I,EAAAU,gBAAAqd,GAEAu5H,EAAAr3I,IAAAD,KAMAs5I,EAAA,WAEA,IAAAt5I,EAAA,IAAAy0I,MAAA1jI,QAEA,OAAA,SAAAgN,EAAAs7H,IAEA,IAAAvtG,EAAAiqG,mBAEA/1I,EAAA8T,oBAAAulI,EAAA,IAIAr5I,EAAA8T,oBAAAulI,EAAA,GACAr5I,EAAAuS,aAAAu5B,EAAAr5D,OAAAmkC,GAAA5W,IAIAA,EAAAU,eAAAqd,GAEAu5H,EAAAr3I,IAAAD,IAnBA,GA0BAu5I,EAAA,WAEA,IAAA/2I,EAAA,IAAAiyI,MAAA1jI,QAEA,OAAA,SAAAyoI,EAAAC,GAEA,IAAA72J,EAAAkpD,EAAA6yC,WAEA,GAAA7yC,EAAAr5D,OAAAkiE,oBAAA,CAIAnyC,EAAA1uB,KADAg4D,EAAAr5D,OAAA4lC,UACA/X,IAAAwrC,EAAAx7D,QACA,IAAAopK,EAAAl3I,EAAA3zB,SAGA6qK,GAAAvjK,KAAAm/C,IAAAwW,EAAAr5D,OAAA0hE,IAAA,EAAAh+D,KAAAgmB,GAAA,KAGAi9I,EAAA,EAAAI,EAAAE,EAAA92J,EAAA+2J,aAAA7tG,EAAAr5D,OAAAmzB,QACA0zI,EAAA,EAAAG,EAAAC,EAAA92J,EAAA+2J,aAAA7tG,EAAAr5D,OAAAmzB,aAEAkmC,EAAAr5D,OAAAmzG,sBAGAwzD,EAAAI,GAAA1tG,EAAAr5D,OAAAymC,MAAA4yB,EAAAr5D,OAAAwmC,MAAA6yB,EAAAr5D,OAAA2hE,KAAAxxD,EAAAg3J,YAAA9tG,EAAAr5D,OAAAmzB,QACA0zI,EAAAG,GAAA3tG,EAAAr5D,OAAA0mC,IAAA2yB,EAAAr5D,OAAA2mC,QAAA0yB,EAAAr5D,OAAA2hE,KAAAxxD,EAAA+2J,aAAA7tG,EAAAr5D,OAAAmzB,UAKAhnB,QAAAC,KAAA,gFACAitD,EAAA+pG,WAAA,IAhCA,GAwCA,SAAAgE,EAAAC,GAEAhuG,EAAAr5D,OAAAkiE,oBAEA3oD,GAAA8tJ,EAEAhuG,EAAAr5D,OAAAmzG,sBAEA95C,EAAAr5D,OAAA2hE,KAAAj+D,KAAAsD,IAAAqyD,EAAAmpG,QAAA9+J,KAAAqM,IAAAspD,EAAAopG,QAAAppG,EAAAr5D,OAAA2hE,KAAA0lG,IACAhuG,EAAAr5D,OAAAgiE,yBACA8iG,GAAA,IAIA34J,QAAAC,KAAA,uFACAitD,EAAA2pG,YAAA,GAMA,SAAAsE,EAAAD,GAEAhuG,EAAAr5D,OAAAkiE,oBAEA3oD,GAAA8tJ,EAEAhuG,EAAAr5D,OAAAmzG,sBAEA95C,EAAAr5D,OAAA2hE,KAAAj+D,KAAAsD,IAAAqyD,EAAAmpG,QAAA9+J,KAAAqM,IAAAspD,EAAAopG,QAAAppG,EAAAr5D,OAAA2hE,KAAA0lG,IACAhuG,EAAAr5D,OAAAgiE,yBACA8iG,GAAA,IAIA34J,QAAAC,KAAA,uFACAitD,EAAA2pG,YAAA,GAUA,SAAAuE,EAAAn+I,GAEA48I,EAAAv5I,IAAArD,EAAAo+I,QAAAp+I,EAAAq+I,SAUA,SAAAC,EAAAt+I,GAEA+8I,EAAA15I,IAAArD,EAAAo+I,QAAAp+I,EAAAq+I,SAwHA,SAAAE,EAAAv+I,GAEA,GAAAA,EAAA06I,QAAA1nK,OAEA4pK,EAAAv5I,IAAArD,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA+D,OAOA7B,EAAAv5I,IAHA,IAAArD,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA8D,OACA,IAAAx+I,EAAA06I,QAAA,GAAA+D,MAAAz+I,EAAA06I,QAAA,GAAA+D,QAQA,SAAAC,EAAA1+I,GAEA,GAAAA,EAAA06I,QAAA1nK,OAEA+pK,EAAA15I,IAAArD,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA+D,OAOA1B,EAAA15I,IAHA,IAAArD,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA8D,OACA,IAAAx+I,EAAA06I,QAAA,GAAA+D,MAAAz+I,EAAA06I,QAAA,GAAA+D,QAQA,SAAAE,EAAA3+I,GAEA,IAAAiG,EAAAjG,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA8D,MACAt4I,EAAAlG,EAAA06I,QAAA,GAAA+D,MAAAz+I,EAAA06I,QAAA,GAAA+D,MAEAv8H,EAAA5nC,KAAAorB,KAAAO,EAAAA,EAAAC,EAAAA,GAEAg3I,EAAA75I,IAAA,EAAA6e,GAoBA,SAAA08H,EAAA5+I,GAEA,GAAAA,EAAA06I,QAAA1nK,OAEA6pK,EAAAx5I,IAAArD,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA+D,OAOA5B,EAAAx5I,IAHA,IAAArD,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA8D,OACA,IAAAx+I,EAAA06I,QAAA,GAAA+D,MAAAz+I,EAAA06I,QAAA,GAAA+D,QAMA3B,EAAAp4I,WAAAm4I,EAAAD,GAAA/3I,eAAAorC,EAAA8pG,aAEA,IAAAhzJ,EAAAkpD,EAAA6yC,WAEAy4D,EAAA,EAAAjhK,KAAAgmB,GAAAw8I,EAAA9kK,EAAA+O,EAAA+2J,cAEAR,EAAA,EAAAhjK,KAAAgmB,GAAAw8I,EAAAxjK,EAAAyN,EAAA+2J,cAEAlB,EAAA3kK,KAAA4kK,GAIA,SAAAgC,EAAA7+I,GAEA,GAAAA,EAAA06I,QAAA1nK,OAEAgqK,EAAA35I,IAAArD,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA+D,OAOAzB,EAAA35I,IAHA,IAAArD,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA8D,OACA,IAAAx+I,EAAA06I,QAAA,GAAA+D,MAAAz+I,EAAA06I,QAAA,GAAA+D,QAMAxB,EAAAv4I,WAAAs4I,EAAAD,GAAAl4I,eAAAorC,EAAAgqG,UAEAyD,EAAAT,EAAAjlK,EAAAilK,EAAA3jK,GAEAyjK,EAAA9kK,KAAA+kK,GAIA,SAAA8B,EAAA9+I,GAEA,IAAAiG,EAAAjG,EAAA06I,QAAA,GAAA8D,MAAAx+I,EAAA06I,QAAA,GAAA8D,MACAt4I,EAAAlG,EAAA06I,QAAA,GAAA+D,MAAAz+I,EAAA06I,QAAA,GAAA+D,MAEAv8H,EAAA5nC,KAAAorB,KAAAO,EAAAA,EAAAC,EAAAA,GAEAi3I,EAAA95I,IAAA,EAAA6e,GAEAk7H,EAAA/5I,IAAA,EAAA/oB,KAAAub,IAAAsnJ,EAAA7jK,EAAA4jK,EAAA5jK,EAAA22D,EAAA4pG,YAEAmE,EAAAZ,EAAA9jK,GAEA4jK,EAAAjlK,KAAAklK,GA8BA,SAAAtB,EAAA77I,GAEA,IAAA,IAAAiwC,EAAAlmD,QAAA,CAUA,IAAAg1J,EAEA,OATA/+I,EAAA3V,iBAKA4lD,EAAA6yC,WAAAtqC,MAAAvI,EAAA6yC,WAAAtqC,QAAA3iE,OAAA2iE,QAIAx4C,EAAAg/I,QAEA,KAAA,EAEAD,EAAA9uG,EAAAwqG,aAAA5E,KACA,MAEA,KAAA,EAEAkJ,EAAA9uG,EAAAwqG,aAAA3E,OACA,MAEA,KAAA,EAEAiJ,EAAA9uG,EAAAwqG,aAAA1E,MACA,MAEA,QAEAgJ,GAAA,EAIA,OAAAA,GAEA,KAAAnG,MAAAhD,MAAAK,MAEA,IAAA,IAAAhmG,EAAA2pG,WAAA,QAnUA,SAAA55I,GAEAk9I,EAAA75I,IAAArD,EAAAo+I,QAAAp+I,EAAAq+I,SAmUAY,CAAAj/I,GAEAgrD,EAAAqwF,EAAApF,MAEA,MAEA,KAAA2C,MAAAhD,MAAAI,OAEA,GAAAh2I,EAAA7V,SAAA6V,EAAA9V,SAAA8V,EAAAnV,SAAA,CAEA,IAAA,IAAAolD,EAAA+pG,UAAA,OAEAsE,EAAAt+I,GAEAgrD,EAAAqwF,EAAAnF,QAEA,CAEA,IAAA,IAAAjmG,EAAA6pG,aAAA,OAEAqE,EAAAn+I,GAEAgrD,EAAAqwF,EAAArF,OAIA,MAEA,KAAA4C,MAAAhD,MAAAM,IAEA,GAAAl2I,EAAA7V,SAAA6V,EAAA9V,SAAA8V,EAAAnV,SAAA,CAEA,IAAA,IAAAolD,EAAA6pG,aAAA,OAEAqE,EAAAn+I,GAEAgrD,EAAAqwF,EAAArF,WAEA,CAEA,IAAA,IAAA/lG,EAAA+pG,UAAA,OAEAsE,EAAAt+I,GAEAgrD,EAAAqwF,EAAAnF,IAIA,MAEA,QAEAlrF,EAAAqwF,EAAAC,KAIAtwF,IAAAqwF,EAAAC,OAEArrG,EAAA6yC,WAAAo5D,cAAA1xJ,iBAAA,YAAA2xJ,GAAA,GACAlsG,EAAA6yC,WAAAo5D,cAAA1xJ,iBAAA,UAAA4xJ,GAAA,GAEAnsG,EAAAlwC,cAAAu8I,KAMA,SAAAH,EAAAn8I,GAEA,IAAA,IAAAiwC,EAAAlmD,QAIA,OAFAiW,EAAA3V,iBAEA2gE,GAEA,KAAAqwF,EAAArF,OAEA,IAAA,IAAA/lG,EAAA6pG,aAAA,QAtYA,SAAA95I,GAEA68I,EAAAx5I,IAAArD,EAAAo+I,QAAAp+I,EAAAq+I,SAEAvB,EAAAp4I,WAAAm4I,EAAAD,GAAA/3I,eAAAorC,EAAA8pG,aAEA,IAAAhzJ,EAAAkpD,EAAA6yC,WAEAy4D,EAAA,EAAAjhK,KAAAgmB,GAAAw8I,EAAA9kK,EAAA+O,EAAA+2J,cAEAR,EAAA,EAAAhjK,KAAAgmB,GAAAw8I,EAAAxjK,EAAAyN,EAAA+2J,cAEAlB,EAAA3kK,KAAA4kK,GAEA5sG,EAAAt/C,SA0XAuuJ,CAAAl/I,GAEA,MAEA,KAAAq7I,EAAApF,MAEA,IAAA,IAAAhmG,EAAA2pG,WAAA,QA5XA,SAAA55I,GAEAm9I,EAAA95I,IAAArD,EAAAo+I,QAAAp+I,EAAAq+I,SAEAjB,EAAA14I,WAAAy4I,EAAAD,GAEAE,EAAA9jK,EAAA,EAEA0kK,EAAAX,KAEAD,EAAA9jK,EAAA,GAEA4kK,EAAAb,KAIAH,EAAAjlK,KAAAklK,GAEAltG,EAAAt/C,SA4WAwuJ,CAAAn/I,GAEA,MAEA,KAAAq7I,EAAAnF,IAEA,IAAA,IAAAjmG,EAAA+pG,UAAA,QA9WA,SAAAh6I,GAEAg9I,EAAA35I,IAAArD,EAAAo+I,QAAAp+I,EAAAq+I,SAEApB,EAAAv4I,WAAAs4I,EAAAD,GAAAl4I,eAAAorC,EAAAgqG,UAEAyD,EAAAT,EAAAjlK,EAAAilK,EAAA3jK,GAEAyjK,EAAA9kK,KAAA+kK,GAEA/sG,EAAAt/C,SAsWAyuJ,CAAAp/I,IAQA,SAAAo8I,EAAAp8I,IAEA,IAAAiwC,EAAAlmD,UAIAkmD,EAAA6yC,WAAAo5D,cAAAzxJ,oBAAA,YAAA0xJ,GAAA,GACAlsG,EAAA6yC,WAAAo5D,cAAAzxJ,oBAAA,UAAA2xJ,GAAA,GAEAnsG,EAAAlwC,cAAAw8I,GAEAvxF,EAAAqwF,EAAAC,MAIA,SAAAQ,EAAA97I,IAEA,IAAAiwC,EAAAlmD,UAAA,IAAAkmD,EAAA2pG,YAAA5uF,IAAAqwF,EAAAC,MAAAtwF,IAAAqwF,EAAArF,SAEAh2I,EAAA3V,iBACA2V,EAAAq/I,kBAEApvG,EAAAlwC,cAAAu8I,GA1XA,SAAAt8I,GAEAA,EAAA49I,OAAA,EAEAM,EAAAb,KAEAr9I,EAAA49I,OAAA,GAEAI,EAAAX,KAIAptG,EAAAt/C,SAgXA2uJ,CAAAt/I,GAEAiwC,EAAAlwC,cAAAw8I,IAIA,SAAAF,EAAAr8I,IAEA,IAAAiwC,EAAAlmD,UAAA,IAAAkmD,EAAAqqG,aAAA,IAAArqG,EAAA+pG,WApXA,SAAAh6I,GAEA,IAAAkpC,GAAA,EAEA,OAAAlpC,EAAAhW,SAEA,KAAAimD,EAAA37D,KAAAimK,GACAmD,EAAA,EAAAztG,EAAAkqG,aACAjxG,GAAA,EACA,MAEA,KAAA+G,EAAA37D,KAAAkmK,OACAkD,EAAA,GAAAztG,EAAAkqG,aACAjxG,GAAA,EACA,MAEA,KAAA+G,EAAA37D,KAAAuhK,KACA6H,EAAAztG,EAAAkqG,YAAA,GACAjxG,GAAA,EACA,MAEA,KAAA+G,EAAA37D,KAAAyhK,MACA2H,GAAAztG,EAAAkqG,YAAA,GACAjxG,GAAA,EAKAA,IAGAlpC,EAAA3V,iBAEA4lD,EAAAt/C,UAqVA4uJ,CAAAv/I,GAIA,SAAA+7I,EAAA/7I,GAEA,IAAA,IAAAiwC,EAAAlmD,QAAA,CAIA,OAFAiW,EAAA3V,iBAEA2V,EAAA06I,QAAA1nK,QAEA,KAAA,EAEA,OAAAi9D,EAAAyqG,QAAAC,KAEA,KAAA/B,MAAArB,MAAAvB,OAEA,IAAA,IAAA/lG,EAAA6pG,aAAA,OAEAyE,EAAAv+I,GAEAgrD,EAAAqwF,EAAAmB,aAEA,MAEA,KAAA5D,MAAArB,MAAArB,IAEA,IAAA,IAAAjmG,EAAA+pG,UAAA,OAEA0E,EAAA1+I,GAEAgrD,EAAAqwF,EAAAoB,UAEA,MAEA,QAEAzxF,EAAAqwF,EAAAC,KAIA,MAEA,KAAA,EAEA,OAAArrG,EAAAyqG,QAAAE,KAEA,KAAAhC,MAAArB,MAAAC,UAEA,IAAA,IAAAvnG,EAAA2pG,aAAA,IAAA3pG,EAAA+pG,UAAA,QAnVA,SAAAh6I,GAEAiwC,EAAA2pG,YAAA+E,EAAA3+I,GAEAiwC,EAAA+pG,WAAA0E,EAAA1+I,GAiVAw/I,CAAAx/I,GAEAgrD,EAAAqwF,EAAAqB,gBAEA,MAEA,KAAA9D,MAAArB,MAAAE,aAEA,IAAA,IAAAxnG,EAAA2pG,aAAA,IAAA3pG,EAAA6pG,aAAA,QArVA,SAAA95I,GAEAiwC,EAAA2pG,YAAA+E,EAAA3+I,GAEAiwC,EAAA6pG,cAAAyE,EAAAv+I,GAmVAy/I,CAAAz/I,GAEAgrD,EAAAqwF,EAAAsB,mBAEA,MAEA,QAEA3xF,EAAAqwF,EAAAC,KAIA,MAEA,QAEAtwF,EAAAqwF,EAAAC,KAIAtwF,IAAAqwF,EAAAC,MAEArrG,EAAAlwC,cAAAu8I,IAMA,SAAAL,EAAAj8I,GAEA,IAAA,IAAAiwC,EAAAlmD,QAKA,OAHAiW,EAAA3V,iBACA2V,EAAAq/I,kBAEAr0F,GAEA,KAAAqwF,EAAAmB,aAEA,IAAA,IAAAvsG,EAAA6pG,aAAA,OAEA8E,EAAA5+I,GAEAiwC,EAAAt/C,SAEA,MAEA,KAAA0qJ,EAAAoB,UAEA,IAAA,IAAAxsG,EAAA+pG,UAAA,OAEA6E,EAAA7+I,GAEAiwC,EAAAt/C,SAEA,MAEA,KAAA0qJ,EAAAqB,gBAEA,IAAA,IAAAzsG,EAAA2pG,aAAA,IAAA3pG,EAAA+pG,UAAA,QAvUA,SAAAh6I,GAEAiwC,EAAA2pG,YAAAkF,EAAA9+I,GAEAiwC,EAAA+pG,WAAA6E,EAAA7+I,GAqUA0/I,CAAA1/I,GAEAiwC,EAAAt/C,SAEA,MAEA,KAAA0qJ,EAAAsB,mBAEA,IAAA,IAAA1sG,EAAA2pG,aAAA,IAAA3pG,EAAA6pG,aAAA,QAzUA,SAAA95I,GAEAiwC,EAAA2pG,YAAAkF,EAAA9+I,GAEAiwC,EAAA6pG,cAAA8E,EAAA5+I,GAuUA2/I,CAAA3/I,GAEAiwC,EAAAt/C,SAEA,MAEA,QAEAq6D,EAAAqwF,EAAAC,MAMA,SAAAU,EAAAh8I,IAEA,IAAAiwC,EAAAlmD,UAIAkmD,EAAAlwC,cAAAw8I,GAEAvxF,EAAAqwF,EAAAC,MAIA,SAAAM,GAAA57I,IAEA,IAAAiwC,EAAAlmD,SAEAiW,EAAA3V,iBAMA4lD,EAAA6yC,WAAAt4F,iBAAA,cAAAoxJ,IAAA,GAEA3rG,EAAA6yC,WAAAt4F,iBAAA,YAAAqxJ,GAAA,GACA5rG,EAAA6yC,WAAAt4F,iBAAA,QAAAsxJ,GAAA,GAEA7rG,EAAA6yC,WAAAt4F,iBAAA,aAAAuxJ,GAAA,GACA9rG,EAAA6yC,WAAAt4F,iBAAA,WAAAwxJ,GAAA,GACA/rG,EAAA6yC,WAAAt4F,iBAAA,YAAAyxJ,GAAA,GAEAhsG,EAAA6yC,WAAAt4F,iBAAA,UAAA6xJ,GAAA,IAIA,IAAApsG,EAAA6yC,WAAA88D,WAEA3vG,EAAA6yC,WAAA88D,SAAA,GAMA/zJ,KAAA8E,UAIAioJ,MAAAC,cAAAvlK,UAAAF,OAAAm7B,OAAAqqI,MAAAp5I,gBAAAlsB,WACAslK,MAAAC,cAAAvlK,UAAA4wB,YAAA00I,MAAAC,cAWAD,MAAAiH,YAAA,SAAAjpK,EAAAksG,GAEA81D,MAAAC,cAAA9lK,KAAA8Y,KAAAjV,EAAAksG,GAEAj3F,KAAAquJ,oBAAA,EAEAruJ,KAAA4uJ,aAAA5E,KAAA+C,MAAAhD,MAAAM,IACArqJ,KAAA4uJ,aAAA1E,MAAA6C,MAAAhD,MAAAI,OAEAnqJ,KAAA6uJ,QAAAC,IAAA/B,MAAArB,MAAArB,IACArqJ,KAAA6uJ,QAAAE,IAAAhC,MAAArB,MAAAE,cAIAmB,MAAAiH,YAAAvsK,UAAAF,OAAAm7B,OAAAqqI,MAAAp5I,gBAAAlsB,WACAslK,MAAAiH,YAAAvsK,UAAA4wB,YAAA00I,MAAAiH,6GCxpCO,SAAkB3pJ,EAAO4pJ,EAAQC,EAAKnlH,GAC3C,IACI/0B,EAAiB,EAAR3P,EAAY5b,KAAKgmB,GAAMw/I,EAEhCp6J,EAAQ,EAAapL,KAAKsoB,IAAItoB,KAAKgmB,GAAKw/I,GAAUC,EAAIzlK,KAAKgmB,GAAGw/I,EAE9DntG,EAAO,IAAIimG,MAAMjrG,KACnB,IAAIirG,MAAMljG,kBAAkBhwD,EAAO,EAAG,GACtC,IAAIkzJ,MAAMv0E,oBAAoB,CAAEzpC,MAAOA,EAAO,SAAW,WAM3D,OAJA+X,EAAKn2B,SAASnZ,IACZ,KAAkB/oB,KAAKsoB,IAAIiD,GAAQ,EACnC,KAAkBvrB,KAAKqoB,IAAIkD,IAC7B8sC,EAAK3nC,SAAS1xB,EAAIusB,EACX8sC,qDCXT,IAAAqtG,EAAAxtK,EAAA,cAFA0F,EAAO0gK,MAAQpmK,EAAQ,SAKvBA,EAAQ,4CAER,MAAMkhB,EAAelhB,EAAQ,iBAYvBytK,EAAc9tK,GAAKA,EAAEA,EAAEA,EAAEA,EAkH/BuhB,EAhHe,EAAGhL,QAAAA,MAEhB,MAAM0L,EAAW,IAAIwkJ,MAAM72D,cAAc,CACvCr5F,QAAAA,IAIF0L,EAASs3D,cAAc,OAAQ,GAG/B,MAAMv1C,EAAS,IAAIyiI,MAAMvgG,kBAAkB,GAAI,EAAG,IAAM,KACxDliC,EAAOqG,SAASnZ,IAAI,EAAG,EAAG,IAC1B8S,EAAO0E,OAAO,IAAI+9H,MAAM1jI,SAGxB,MAAMgrI,EAAW,IAAItH,MAAMC,cAAc1iI,EAAQztB,EAAQN,QAGnDmyD,EAAQ,IAAIq+F,MAAMh4H,MACxB25B,EAAM/9B,SAASljC,EAAI,EAGnB,IAAIstD,EAAQ,IAAIgyG,MAAMp9D,MACtBjhC,EAAMn2C,IAAIwiC,GAEV,IAEIr7C,EAAU,GACVmV,EAAS3pB,MAAM,GAChBwwJ,OACAvzJ,IAAKtB,GAAMqE,MALD,KAOb,IAAK,IAAI1E,EAAI,EAAGA,EAPH,GAOeA,IAC1B,IAAK,IAAIm0C,EAAI,EAAGA,EAAI,EAAGA,IACrB9lB,EAAO8lB,GAAGn0C,GAAKiI,KAAKomB,SAAW,GAAM,EAAI,EAI7C,IAAK,IAAI8lB,EAAI,EAAGA,EAZL,GAYeA,IACxB,IAAK,IAAIn0C,EAAI,EAAGA,EAdL,GAciBA,IAAK,CAC/B,MAAMsgE,GAAO,EAAAqtG,EAAAG,UAAS9tK,EAfb,GAewBm0C,EAAI,EAAG9lB,EAAO8lB,EAAI,GAAGn0C,IAChD+tK,GAAY,EAAAJ,EAAAG,UAAS9tK,EAhBlB,GAgB6Bm0C,EAAI,EAAG9lB,EAAO8lB,EAAI,GAAGn0C,IAE3DsgE,EAAKn2B,SAAS1Y,MAAM0iB,GACpB45H,EAAU5jI,SAAS1Y,MAAM0iB,GAEzBogB,EAAMxiC,IAAIuuC,GACV/L,EAAMxiC,IAAIg8I,GAEVA,EAAU9/H,SAAU,EAEpB/0B,EAAQ/U,KAAK,CACX8C,GAAIktC,EACJ65H,IAAK75H,EACLmsB,KAAMA,EACNytG,UAAWA,EACXz5I,OAAQ6f,EAAE,EAAIlsC,KAAKomB,SAAS,IAKlC65C,EAAMn2C,IAAI,IAAIw0I,MAAM56B,aAAa,YAEjC,MAAMl2C,EAAQ,IAAI8wE,MAAM76B,iBAAiB,UAAW,IAAK,MAKzD,OAJAj2C,EAAMtrD,SAASnZ,IAAI,EAAG,EAAG,GACzBk3C,EAAMn2C,IAAI0jE,GAGH,CAELw4E,QAAOj6J,WAAEA,EAAFkG,cAAcA,EAAdC,eAA6BA,IAClC4H,EAAS+xF,cAAc9/F,GACvB+N,EAASyc,QAAQtkB,EAAeC,GAAgB,GAChD2pB,EAAOruB,OAASyE,EAAgBC,EAChC2pB,EAAOyiC,0BAGT0nG,QAAOp0J,SAAQA,IAEb06C,EAAMpqB,SAASljC,EAAgB,GAAX4S,EAEpBX,EAAQnX,QAASiF,IAIf,GAAIA,EAAEgnK,IAAM,EAAG,CACb,IAAIxtK,EAAIqZ,EAAW7S,EAAEstB,OACrBttB,EAAEs5D,KAAKn2B,SAAS1Y,KAAKzqB,EAAEC,EAAQ,GAAJzG,GACvBA,EAAI,GACNA,EAAIotK,EAAYptK,EAAE,GAClBwG,EAAEs5D,KAAKn2B,SAAS1Y,KAAKzqB,EAAEC,EAAY,IAAP,EAAEzG,GAAqB,EAAXqZ,GACxC7S,EAAE+mK,UAAU9/H,SAAU,IAEtBztC,EAAIotK,EAAYptK,GAChBwG,EAAEs5D,KAAKn2B,SAAS1Y,KAAKzqB,EAAEC,EAAY,IAAP,EAAEzG,IAC9BwG,EAAE+mK,UAAU9/H,SAAU,QAGxBjnC,EAAE+mK,UAAU9/H,SAAU,IAG1B4/H,EAASvvJ,SACTyD,EAAS1I,OAAO6uD,EAAOpkC,IAGzBmqI,SACEJ,EAASzzJ,UACT2H,EAAS3H,aAvHE,CACfT,SAAU,EAEVT,SAAS,EAET7C,QAAS,QACTI,WAAY,CAAEu1F,WAAW,iPCf3BnmG,EAAAqoK,kCAAA1qK,OAAA2qK,SAAA7/J","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","module.exports = isNode\n\nfunction isNode (val) {\n  return (!val || typeof val !== 'object')\n    ? false\n    : (typeof window === 'object' && typeof window.Node === 'object')\n      ? (val instanceof window.Node)\n      : (typeof val.nodeType === 'number') &&\n        (typeof val.nodeName === 'string')\n}\n","// TODO: We can remove a huge chunk of bundle size by using a smaller\n// utility module for converting units.\nimport isDOM from 'is-dom';\n\nexport function getClientAPI () {\n  return typeof window !== 'undefined' && window['canvas-sketch-cli'];\n}\n\nexport function defined () {\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i] != null) {\n      return arguments[i];\n    }\n  }\n  return undefined;\n}\n\nexport function isBrowser () {\n  return typeof document !== 'undefined';\n}\n\nexport function isWebGLContext (ctx) {\n  return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';\n}\n\nexport function isCanvas (element) {\n  return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';\n}\n","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\n(function(global) {\n  'use strict';\n\n  var dateFormat = (function() {\n      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n      var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n      var timezoneClip = /[^-+\\dA-Z]/g;\n  \n      // Regexes and supporting functions are cached through closure\n      return function (date, mask, utc, gmt) {\n  \n        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n        if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n          mask = date;\n          date = undefined;\n        }\n  \n        date = date || new Date;\n  \n        if(!(date instanceof Date)) {\n          date = new Date(date);\n        }\n  \n        if (isNaN(date)) {\n          throw TypeError('Invalid date');\n        }\n  \n        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);\n  \n        // Allow setting the utc/gmt argument via the mask\n        var maskSlice = mask.slice(0, 4);\n        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n          mask = mask.slice(4);\n          utc = true;\n          if (maskSlice === 'GMT:') {\n            gmt = true;\n          }\n        }\n  \n        var _ = utc ? 'getUTC' : 'get';\n        var d = date[_ + 'Date']();\n        var D = date[_ + 'Day']();\n        var m = date[_ + 'Month']();\n        var y = date[_ + 'FullYear']();\n        var H = date[_ + 'Hours']();\n        var M = date[_ + 'Minutes']();\n        var s = date[_ + 'Seconds']();\n        var L = date[_ + 'Milliseconds']();\n        var o = utc ? 0 : date.getTimezoneOffset();\n        var W = getWeek(date);\n        var N = getDayOfWeek(date);\n        var flags = {\n          d:    d,\n          dd:   pad(d),\n          ddd:  dateFormat.i18n.dayNames[D],\n          dddd: dateFormat.i18n.dayNames[D + 7],\n          m:    m + 1,\n          mm:   pad(m + 1),\n          mmm:  dateFormat.i18n.monthNames[m],\n          mmmm: dateFormat.i18n.monthNames[m + 12],\n          yy:   String(y).slice(2),\n          yyyy: y,\n          h:    H % 12 || 12,\n          hh:   pad(H % 12 || 12),\n          H:    H,\n          HH:   pad(H),\n          M:    M,\n          MM:   pad(M),\n          s:    s,\n          ss:   pad(s),\n          l:    pad(L, 3),\n          L:    pad(Math.round(L / 10)),\n          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n          W:    W,\n          N:    N\n        };\n  \n        return mask.replace(token, function (match) {\n          if (match in flags) {\n            return flags[match];\n          }\n          return match.slice(1, match.length - 1);\n        });\n      };\n    })();\n\n  dateFormat.masks = {\n    'default':               'ddd mmm dd yyyy HH:MM:ss',\n    'shortDate':             'm/d/yy',\n    'mediumDate':            'mmm d, yyyy',\n    'longDate':              'mmmm d, yyyy',\n    'fullDate':              'dddd, mmmm d, yyyy',\n    'shortTime':             'h:MM TT',\n    'mediumTime':            'h:MM:ss TT',\n    'longTime':              'h:MM:ss TT Z',\n    'isoDate':               'yyyy-mm-dd',\n    'isoTime':               'HH:MM:ss',\n    'isoDateTime':           'yyyy-mm-dd\\'T\\'HH:MM:sso',\n    'isoUtcDateTime':        'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'\n  };\n\n  // Internationalization strings\n  dateFormat.i18n = {\n    dayNames: [\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ],\n    monthNames: [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n    ],\n    timeNames: [\n      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'\n    ]\n  };\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n/**\n * Get the ISO 8601 week number\n * Based on comments from\n * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n *\n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getWeek(date) {\n  // Remove time components of date\n  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  // Change date to Thursday same week\n  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);\n\n  // Take January 4th as it is always in week 1 (see ISO 8601)\n  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n\n  // Change date to Thursday same week\n  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);\n\n  // Check if daylight-saving-time-switch occurred and correct for it\n  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n  targetThursday.setHours(targetThursday.getHours() - ds);\n\n  // Number of weeks between target Thursday and first Thursday\n  var weekDiff = (targetThursday - firstThursday) / (86400000*7);\n  return 1 + Math.floor(weekDiff);\n}\n\n/**\n * Get ISO-8601 numeric representation of the day of the week\n * 1 (for Monday) through 7 (for Sunday)\n * \n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getDayOfWeek(date) {\n  var dow = date.getDay();\n  if(dow === 0) {\n    dow = 7;\n  }\n  return dow;\n}\n\n/**\n * kind-of shortcut\n * @param  {*} val\n * @return {String}\n */\nfunction kindOf(val) {\n  if (val === null) {\n    return 'null';\n  }\n\n  if (val === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof val !== 'object') {\n    return typeof val;\n  }\n\n  if (Array.isArray(val)) {\n    return 'array';\n  }\n\n  return {}.toString.call(val)\n    .slice(8, -1).toLowerCase();\n};\n\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dateFormat;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = dateFormat;\n  } else {\n    global.dateFormat = dateFormat;\n  }\n})(this);\n","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  str = str.toString();\n\n  if (typeof num === 'undefined') {\n    return str;\n  }\n\n  if (ch === 0) {\n    ch = '0';\n  } else if (ch) {\n    ch = ch.toString();\n  } else {\n    ch = ' ';\n  }\n\n  return repeat(ch, num - str.length) + str;\n};\n","import dateformat from 'dateformat';\nimport assign from 'object-assign';\nimport padLeft from 'pad-left';\nimport { getClientAPI } from './util';\n\nconst noop = () => {};\nlet link;\nlet defaultExts = { extension: '', prefix: '', suffix: '' };\n\n// Alternative solution for saving files,\n// a bit slower and does not work in Safari\n// function fetchBlobFromDataURL (dataURL) {\n//   return window.fetch(dataURL).then(res => res.blob());\n// }\n\nconst supportedEncodings = [\n  'image/png',\n  'image/jpeg',\n  'image/webp'\n];\n\nfunction stream (isStart, opts = {}) {\n  return new Promise((resolve, reject) => {\n    opts = assign({}, defaultExts, opts);\n    const filename = resolveFilename(Object.assign({}, opts, {\n      extension: '',\n      frame: undefined\n    }));\n    const func = isStart ? 'streamStart' : 'streamEnd';\n    const client = getClientAPI();\n    if (client && client.output && typeof client[func] === 'function') {\n      return client[func](assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      return resolve({ filename, client: false });\n    }\n  });\n}\n\nexport function streamStart (opts = {}) {\n  return stream(true, opts);\n}\n\nexport function streamEnd (opts = {}) {\n  return stream(false, opts);\n}\n\nexport function exportCanvas (canvas, opt = {}) {\n  const encoding = opt.encoding || 'image/png';\n  if (!supportedEncodings.includes(encoding)) throw new Error(`Invalid canvas encoding ${encoding}`);\n  let extension = (encoding.split('/')[1] || '').replace(/jpeg/i, 'jpg');\n  if (extension) extension = `.${extension}`.toLowerCase();\n  return {\n    extension,\n    type: encoding,\n    dataURL: canvas.toDataURL(encoding, opt.encodingQuality)\n  };\n}\n\nfunction createBlobFromDataURL (dataURL) {\n  return new Promise((resolve) => {\n    const splitIndex = dataURL.indexOf(',');\n    if (splitIndex === -1) {\n      resolve(new window.Blob());\n      return;\n    }\n    const base64 = dataURL.slice(splitIndex + 1);\n    const byteString = window.atob(base64);\n    const type = dataURL.slice(0, splitIndex);\n    const mimeMatch = /data:([^;]+)/.exec(type);\n    const mime = (mimeMatch ? mimeMatch[1] : '') || undefined;\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    resolve(new window.Blob([ ab ], { type: mime }));\n  });\n}\n\nexport function saveDataURL (dataURL, opts = {}) {\n  return createBlobFromDataURL(dataURL)\n    .then(blob => saveBlob(blob, opts));\n}\n\nexport function saveBlob (blob, opts = {}) {\n  return new Promise(resolve => {\n    opts = assign({}, defaultExts, opts);\n    const filename = opts.filename;\n\n    const client = getClientAPI();\n    if (client && typeof client.saveBlob === 'function' && client.output) {\n      // native saving using a CLI tool\n      return client.saveBlob(blob, assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      // force download\n      if (!link) {\n        link = document.createElement('a');\n        link.style.visibility = 'hidden';\n        link.target = '_blank';\n      }\n      link.download = filename;\n      link.href = window.URL.createObjectURL(blob);\n      document.body.appendChild(link);\n      link.onclick = () => {\n        link.onclick = noop;\n        setTimeout(() => {\n          window.URL.revokeObjectURL(blob);\n          if (link.parentElement) link.parentElement.removeChild(link);\n          link.removeAttribute('href');\n          resolve({ filename, client: false });\n        });\n      };\n      link.click();\n    }\n  });\n}\n\nexport function saveFile (data, opts = {}) {\n  const parts = Array.isArray(data) ? data : [ data ];\n  const blob = new window.Blob(parts, { type: opts.type || '' });\n  return saveBlob(blob, opts);\n}\n\nexport function getTimeStamp () {\n  const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  return dateformat(new Date(), dateFormatStr);\n}\n\nexport function getDefaultFile (prefix = '', suffix = '', ext) {\n  // const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  const dateFormatStr = `yyyy-mm-dd 'at' h.MM.ss TT`;\n  return `${prefix}${dateformat(new Date(), dateFormatStr)}${suffix}${ext}`;\n}\n\nexport function resolveFilename (opt = {}) {\n  opt = assign({}, opt);\n\n  // Custom filename function\n  if (typeof opt.file === 'function') {\n    return opt.file(opt);\n  } else if (opt.file) {\n    return opt.file;\n  }\n\n  let frame = null;\n  let extension = '';\n  if (typeof opt.extension === 'string') extension = opt.extension;\n\n  if (typeof opt.frame === 'number') {\n    let totalFrames;\n    if (typeof opt.totalFrames === 'number') {\n      totalFrames = opt.totalFrames;\n    } else {\n      totalFrames = Math.max(1000, opt.frame);\n    }\n    frame = padLeft(String(opt.frame), String(totalFrames).length, '0');\n  }\n\n  const layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? `${opt.layer}` : '';\n  if (frame != null) {\n    return [ layerStr, frame ].filter(Boolean).join('-') + extension;\n  } else {\n    const defaultFileName = opt.timeStamp;\n    return [ opt.prefix, opt.name || defaultFileName, layerStr, opt.hash, opt.suffix ].filter(Boolean).join('-') + extension;\n  }\n}\n","// Handle some common typos\nconst commonTypos = {\n  dimension: 'dimensions',\n  animated: 'animate',\n  animating: 'animate',\n  unit: 'units',\n  P5: 'p5',\n  pixellated: 'pixelated',\n  looping: 'loop',\n  pixelPerInch: 'pixels'\n};\n\n// Handle all other typos\nconst allKeys = [\n  'dimensions', 'units', 'pixelsPerInch', 'orientation',\n  'scaleToFit', 'scaleToView', 'bleed', 'pixelRatio',\n  'exportPixelRatio', 'maxPixelRatio', 'scaleContext',\n  'resizeCanvas', 'styleCanvas', 'canvas', 'context', 'attributes',\n  'parent', 'file', 'name', 'prefix', 'suffix', 'animate', 'playing',\n  'loop', 'duration', 'totalFrames', 'fps', 'playbackRate', 'timeScale',\n  'frame', 'time', 'flush', 'pixelated', 'hotkeys', 'p5', 'id',\n  'scaleToFitPadding', 'data', 'params', 'encoding', 'encodingQuality'\n];\n\n// This is fairly opinionated and forces users to use the 'data' parameter\n// if they want to pass along non-setting objects...\nexport const checkSettings = (settings) => {\n  const keys = Object.keys(settings);\n  keys.forEach(key => {\n    if (key in commonTypos) {\n      const actual = commonTypos[key];\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\", did you mean \"${actual}\"?`);\n    } else if (!allKeys.includes(key)) {\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\"`);\n    }\n  });\n};\n","const defaultUnits = 'mm';\n\nconst data = [\n  // Common Paper Sizes\n  // (Mostly North-American based)\n  [ 'postcard', 101.6, 152.4 ],\n  [ 'poster-small', 280, 430 ],\n  [ 'poster', 460, 610 ],\n  [ 'poster-large', 610, 910 ],\n  [ 'business-card', 50.8, 88.9 ],\n\n  // Photographic Print Paper Sizes\n  [ '2r', 64, 89 ],\n  [ '3r', 89, 127 ],\n  [ '4r', 102, 152 ],\n  [ '5r', 127, 178 ], // 5″x7″\n  [ '6r', 152, 203 ], // 6″x8″\n  [ '8r', 203, 254 ], // 8″x10″\n  [ '10r', 254, 305 ], // 10″x12″\n  [ '11r', 279, 356 ], // 11″x14″\n  [ '12r', 305, 381 ],\n\n  // Standard Paper Sizes\n  [ 'a0', 841, 1189 ],\n  [ 'a1', 594, 841 ],\n  [ 'a2', 420, 594 ],\n  [ 'a3', 297, 420 ],\n  [ 'a4', 210, 297 ],\n  [ 'a5', 148, 210 ],\n  [ 'a6', 105, 148 ],\n  [ 'a7', 74, 105 ],\n  [ 'a8', 52, 74 ],\n  [ 'a9', 37, 52 ],\n  [ 'a10', 26, 37 ],\n  [ '2a0', 1189, 1682 ],\n  [ '4a0', 1682, 2378 ],\n  [ 'b0', 1000, 1414 ],\n  [ 'b1', 707, 1000 ],\n  [ 'b1+', 720, 1020 ],\n  [ 'b2', 500, 707 ],\n  [ 'b2+', 520, 720 ],\n  [ 'b3', 353, 500 ],\n  [ 'b4', 250, 353 ],\n  [ 'b5', 176, 250 ],\n  [ 'b6', 125, 176 ],\n  [ 'b7', 88, 125 ],\n  [ 'b8', 62, 88 ],\n  [ 'b9', 44, 62 ],\n  [ 'b10', 31, 44 ],\n  [ 'b11', 22, 32 ],\n  [ 'b12', 16, 22 ],\n  [ 'c0', 917, 1297 ],\n  [ 'c1', 648, 917 ],\n  [ 'c2', 458, 648 ],\n  [ 'c3', 324, 458 ],\n  [ 'c4', 229, 324 ],\n  [ 'c5', 162, 229 ],\n  [ 'c6', 114, 162 ],\n  [ 'c7', 81, 114 ],\n  [ 'c8', 57, 81 ],\n  [ 'c9', 40, 57 ],\n  [ 'c10', 28, 40 ],\n  [ 'c11', 22, 32 ],\n  [ 'c12', 16, 22 ],\n\n  // Use inches for North American sizes,\n  // as it produces less float precision errors\n  [ 'half-letter', 5.5, 8.5, 'in' ],\n  [ 'letter', 8.5, 11, 'in' ],\n  [ 'legal', 8.5, 14, 'in' ],\n  [ 'junior-legal', 5, 8, 'in' ],\n  [ 'ledger', 11, 17, 'in' ],\n  [ 'tabloid', 11, 17, 'in' ],\n  [ 'ansi-a', 8.5, 11.0, 'in' ],\n  [ 'ansi-b', 11.0, 17.0, 'in' ],\n  [ 'ansi-c', 17.0, 22.0, 'in' ],\n  [ 'ansi-d', 22.0, 34.0, 'in' ],\n  [ 'ansi-e', 34.0, 44.0, 'in' ],\n  [ 'arch-a', 9, 12, 'in' ],\n  [ 'arch-b', 12, 18, 'in' ],\n  [ 'arch-c', 18, 24, 'in' ],\n  [ 'arch-d', 24, 36, 'in' ],\n  [ 'arch-e', 36, 48, 'in' ],\n  [ 'arch-e1', 30, 42, 'in' ],\n  [ 'arch-e2', 26, 38, 'in' ],\n  [ 'arch-e3', 27, 39, 'in' ]\n];\n\nexport default data.reduce((dict, preset) => {\n  const item = {\n    units: preset[3] || defaultUnits,\n    dimensions: [ preset[1], preset[2] ]\n  };\n  dict[preset[0]] = item;\n  dict[preset[0].replace(/-/g, ' ')] = item;\n  return dict;\n}, {});\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var defined = require('defined');\nvar units = [ 'mm', 'cm', 'm', 'pc', 'pt', 'in', 'ft', 'px' ];\n\nvar conversions = {\n  // metric\n  m: {\n    system: 'metric',\n    factor: 1\n  },\n  cm: {\n    system: 'metric',\n    factor: 1 / 100\n  },\n  mm: {\n    system: 'metric',\n    factor: 1 / 1000\n  },\n  // imperial\n  pt: {\n    system: 'imperial',\n    factor: 1 / 72\n  },\n  pc: {\n    system: 'imperial',\n    factor: 1 / 6\n  },\n  in: {\n    system: 'imperial',\n    factor: 1\n  },\n  ft: {\n    system: 'imperial',\n    factor: 12\n  }\n};\n\nconst anchors = {\n  metric: {\n    unit: 'm',\n    ratio: 1 / 0.0254\n  },\n  imperial: {\n    unit: 'in',\n    ratio: 0.0254\n  }\n};\n\nfunction round (value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nfunction convertDistance (value, fromUnit, toUnit, opts) {\n  if (typeof value !== 'number' || !isFinite(value)) throw new Error('Value must be a finite number');\n  if (!fromUnit || !toUnit) throw new Error('Must specify from and to units');\n\n  opts = opts || {};\n  var pixelsPerInch = defined(opts.pixelsPerInch, 96);\n  var precision = opts.precision;\n  var roundPixel = opts.roundPixel !== false;\n\n  fromUnit = fromUnit.toLowerCase();\n  toUnit = toUnit.toLowerCase();\n\n  if (units.indexOf(fromUnit) === -1) throw new Error('Invalid from unit \"' + fromUnit + '\", must be one of: ' + units.join(', '));\n  if (units.indexOf(toUnit) === -1) throw new Error('Invalid from unit \"' + toUnit + '\", must be one of: ' + units.join(', '));\n\n  if (fromUnit === toUnit) {\n    // We don't need to convert from A to B since they are the same already\n    return value;\n  }\n\n  var toFactor = 1;\n  var fromFactor = 1;\n  var isToPixel = false;\n\n  if (fromUnit === 'px') {\n    fromFactor = 1 / pixelsPerInch;\n    fromUnit = 'in';\n  }\n  if (toUnit === 'px') {\n    isToPixel = true;\n    toFactor = pixelsPerInch;\n    toUnit = 'in';\n  }\n\n  var fromUnitData = conversions[fromUnit];\n  var toUnitData = conversions[toUnit];\n\n  // source to anchor inside source's system\n  var anchor = value * fromUnitData.factor * fromFactor;\n\n  // if systems differ, convert one to another\n  if (fromUnitData.system !== toUnitData.system) {\n    // regular 'm' to 'in' and so forth\n    anchor *= anchors[fromUnitData.system].ratio;\n  }\n\n  var result = anchor / toUnitData.factor * toFactor;\n  if (isToPixel && roundPixel) {\n    result = Math.round(result);\n  } else if (typeof precision === 'number' && isFinite(precision)) {\n    result = round(result, precision);\n  }\n  return result;\n}\n\nmodule.exports = convertDistance;\nmodule.exports.units = units;\n","import paperSizes from './paper-sizes';\nimport convertLength from 'convert-length';\n\nexport function getDimensionsFromPreset (dimensions, unitsTo = 'px', pixelsPerInch = 72) {\n  if (typeof dimensions === 'string') {\n    const key = dimensions.toLowerCase();\n    if (!(key in paperSizes)) {\n      throw new Error(`The dimension preset \"${dimensions}\" is not supported or could not be found; try using a4, a3, postcard, letter, etc.`)\n    }\n    const preset = paperSizes[key];\n    return preset.dimensions.map(d => {\n      return convertDistance(d, preset.units, unitsTo, pixelsPerInch);\n    });\n  } else {\n    return dimensions;\n  }\n}\n\nexport function convertDistance (dimension, unitsFrom = 'px', unitsTo = 'px', pixelsPerInch = 72) {\n  return convertLength(dimension, unitsFrom, unitsTo, {\n    pixelsPerInch,\n    precision: 4,\n    roundPixel: true\n  });\n}\n","import { getDimensionsFromPreset, convertDistance } from '../distances';\nimport { isBrowser, defined } from '../util';\n\nfunction checkIfHasDimensions (settings) {\n  if (!settings.dimensions) return false;\n  if (typeof settings.dimensions === 'string') return true;\n  if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) return true;\n  return false;\n}\n\nfunction getParentSize (props, settings) {\n  // When no { dimension } is passed in node, we default to HTML canvas size\n  if (!isBrowser()) {\n    return [ 300, 150 ];\n  }\n\n  let element = settings.parent || window;\n\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return [ window.innerWidth, window.innerHeight ];\n  } else {\n    const { width, height } = element.getBoundingClientRect();\n    return [ width, height ];\n  }\n}\n\nexport default function resizeCanvas (props, settings) {\n  let width, height;\n  let styleWidth, styleHeight;\n  let canvasWidth, canvasHeight;\n\n  const browser = isBrowser();\n  const dimensions = settings.dimensions;\n  const hasDimensions = checkIfHasDimensions(settings);\n  const exporting = props.exporting;\n  let scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;\n  let scaleToView = (!exporting && hasDimensions) ? settings.scaleToView : true;\n  // in node, cancel both of these options\n  if (!browser) scaleToFit = scaleToView = false;\n  const units = settings.units;\n  const pixelsPerInch = (typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch)) ? settings.pixelsPerInch : 72;\n  const bleed = defined(settings.bleed, 0);\n\n  const devicePixelRatio = browser ? window.devicePixelRatio : 1;\n  const basePixelRatio = scaleToView ? devicePixelRatio : 1;\n\n  let pixelRatio, exportPixelRatio;\n\n  // If a pixel ratio is specified, we will use it.\n  // Otherwise:\n  //  -> If dimension is specified, use base ratio (i.e. size for export)\n  //  -> If no dimension is specified, use device ratio (i.e. size for screen)\n  if (typeof settings.pixelRatio === 'number' && isFinite(settings.pixelRatio)) {\n    // When { pixelRatio } is specified, it's also used as default exportPixelRatio.\n    pixelRatio = settings.pixelRatio;\n    exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n  } else {\n    if (hasDimensions) {\n      // When a dimension is specified, use the base ratio rather than screen ratio\n      pixelRatio = basePixelRatio;\n      // Default to a pixel ratio of 1 so that you end up with the same dimension\n      // you specified, i.e. [ 500, 500 ] is exported as 500x500 px\n      exportPixelRatio = defined(settings.exportPixelRatio, 1);\n    } else {\n      // No dimension is specified, assume full-screen retina sizing\n      pixelRatio = devicePixelRatio;\n      // Default to screen pixel ratio, so that it's like taking a device screenshot\n      exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n    }\n  }\n\n  // Clamp pixel ratio\n  if (typeof settings.maxPixelRatio === 'number' && isFinite(settings.maxPixelRatio)) {\n    pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);\n  }\n\n  // Handle export pixel ratio\n  if (exporting) {\n    pixelRatio = exportPixelRatio;\n  }\n\n  // parentWidth = typeof parentWidth === 'undefined' ? defaultNodeSize[0] : parentWidth;\n  // parentHeight = typeof parentHeight === 'undefined' ? defaultNodeSize[1] : parentHeight;\n\n  let [ parentWidth, parentHeight ] = getParentSize(props, settings);\n  let trimWidth, trimHeight;\n\n  // You can specify a dimensions in pixels or cm/m/in/etc\n  if (hasDimensions) {\n    const result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);\n    const highest = Math.max(result[0], result[1]);\n    const lowest = Math.min(result[0], result[1]);\n    if (settings.orientation) {\n      const landscape = settings.orientation === 'landscape';\n      width = landscape ? highest : lowest;\n      height = landscape ? lowest : highest;\n    } else {\n      width = result[0];\n      height = result[1];\n    }\n\n    trimWidth = width;\n    trimHeight = height;\n\n    // Apply bleed which is assumed to be in the same units\n    width += bleed * 2;\n    height += bleed * 2;\n  } else {\n    width = parentWidth;\n    height = parentHeight;\n    trimWidth = width;\n    trimHeight = height;\n  }\n\n  // Real size in pixels after PPI is taken into account\n  let realWidth = width;\n  let realHeight = height;\n  if (hasDimensions && units) {\n    // Convert to digital/pixel units if necessary\n    realWidth = convertDistance(width, units, 'px', pixelsPerInch);\n    realHeight = convertDistance(height, units, 'px', pixelsPerInch);\n  }\n\n  // How big to set the 'view' of the canvas in the browser (i.e. style)\n  styleWidth = Math.round(realWidth);\n  styleHeight = Math.round(realHeight);\n\n  // If we wish to scale the view to the browser window\n  if (scaleToFit && !exporting && hasDimensions) {\n    const aspect = width / height;\n    const windowAspect = parentWidth / parentHeight;\n    const scaleToFitPadding = defined(settings.scaleToFitPadding, 40);\n    const maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);\n    const maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);\n    if (styleWidth > maxWidth || styleHeight > maxHeight) {\n      if (windowAspect > aspect) {\n        styleHeight = maxHeight;\n        styleWidth = Math.round(styleHeight * aspect);\n      } else {\n        styleWidth = maxWidth;\n        styleHeight = Math.round(styleWidth / aspect);\n      }\n    }\n  }\n\n  canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(pixelRatio * realWidth);\n  canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(pixelRatio * realHeight);\n\n  const viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);\n  const viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);\n\n  const scaleX = canvasWidth / width;\n  const scaleY = canvasHeight / height;\n\n  // Assign to current props\n  return {\n    bleed,\n    pixelRatio,\n    width,\n    height,\n    dimensions: [ width, height ],\n    units: units || 'px',\n    scaleX,\n    scaleY,\n    pixelsPerInch,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    trimWidth,\n    trimHeight,\n    styleWidth,\n    styleHeight\n  };\n}\n","module.exports = getCanvasContext\nfunction getCanvasContext (type, opts) {\n  if (typeof type !== 'string') {\n    throw new TypeError('must specify type string')\n  }\n\n  opts = opts || {}\n\n  if (typeof document === 'undefined' && !opts.canvas) {\n    return null // check for Node\n  }\n\n  var canvas = opts.canvas || document.createElement('canvas')\n  if (typeof opts.width === 'number') {\n    canvas.width = opts.width\n  }\n  if (typeof opts.height === 'number') {\n    canvas.height = opts.height\n  }\n\n  var attribs = opts\n  var gl\n  try {\n    var names = [ type ]\n    // prefix GL contexts\n    if (type.indexOf('webgl') === 0) {\n      names.push('experimental-' + type)\n    }\n\n    for (var i = 0; i < names.length; i++) {\n      gl = canvas.getContext(names[i], attribs)\n      if (gl) return gl\n    }\n  } catch (e) {\n    gl = null\n  }\n  return (gl || null) // ensure null on fail\n}\n","import assign from 'object-assign';\nimport getCanvasContext from 'get-canvas-context';\nimport { isBrowser } from '../util';\n\nfunction createCanvasElement () {\n  if (!isBrowser()) {\n    throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');\n  }\n  return document.createElement('canvas');\n}\n\nexport default function createCanvas (settings = {}) {\n  let context, canvas;\n  let ownsCanvas = false;\n  if (settings.canvas !== false) {\n    // Determine the canvas and context to create\n    context = settings.context;\n    if (!context || typeof context === 'string') {\n      let newCanvas = settings.canvas;\n      if (!newCanvas) {\n        newCanvas = createCanvasElement();\n        ownsCanvas = true;\n      }\n      const type = context || '2d';\n      if (typeof newCanvas.getContext !== 'function') {\n        throw new Error(`The specified { canvas } element does not have a getContext() function, maybe it is not a <canvas> tag?`);\n      }\n      context = getCanvasContext(type, assign({}, settings.attributes, { canvas: newCanvas }));\n      if (!context) {\n        throw new Error(`Failed at canvas.getContext('${type}') - the browser may not support this context, or a different context may already be in use with this canvas.`);\n      }\n    }\n\n    canvas = context.canvas;\n    // Ensure context matches user's canvas expectations\n    if (settings.canvas && canvas !== settings.canvas) {\n      throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');\n    }\n\n    // Apply pixelation to canvas if necessary, this is mostly a convenience utility\n    if (settings.pixelated) {\n      context.imageSmoothingEnabled = false;\n      context.mozImageSmoothingEnabled = false;\n      context.oImageSmoothingEnabled = false;\n      context.webkitImageSmoothingEnabled = false;\n      context.msImageSmoothingEnabled = false;\n      canvas.style['image-rendering'] = 'pixelated';\n    }\n  }\n  return { canvas, context, ownsCanvas };\n}\n","import assign from 'object-assign';\nimport rightNow from 'right-now';\nimport isPromise from 'is-promise';\nimport { isBrowser, defined, isWebGLContext, isCanvas, getClientAPI } from '../util';\nimport deepEqual from 'deep-equal';\nimport {\n  resolveFilename,\n  saveFile,\n  saveDataURL,\n  getTimeStamp,\n  exportCanvas,\n  streamStart,\n  streamEnd\n} from '../save';\nimport { checkSettings } from '../accessibility';\n\nimport keyboardShortcuts from './keyboardShortcuts';\nimport resizeCanvas from './resizeCanvas';\nimport createCanvas from './createCanvas';\n\nclass SketchManager {\n  constructor () {\n    this._settings = {};\n    this._props = {};\n    this._sketch = undefined;\n    this._raf = null;\n    this._recordTimeout = null;\n\n    // Some hacky things required to get around p5.js structure\n    this._lastRedrawResult = undefined;\n    this._isP5Resizing = false;\n\n    this._keyboardShortcuts = keyboardShortcuts({\n      enabled: () => this.settings.hotkeys !== false,\n      save: (ev) => {\n        if (ev.shiftKey) {\n          if (this.props.recording) {\n            this.endRecord();\n            this.run();\n          } else this.record();\n        } else if (!this.props.recording) {\n          this.exportFrame();\n        }\n      },\n      togglePlay: () => {\n        if (this.props.playing) this.pause();\n        else this.play();\n      },\n      commit: (ev) => {\n        this.exportFrame({ commit: true });\n      }\n    });\n\n    this._animateHandler = () => this.animate();\n\n    this._resizeHandler = () => {\n      const changed = this.resize();\n      // Only re-render when size actually changes\n      if (changed) {\n        this.render();\n      }\n    };\n  }\n\n  get sketch () {\n    return this._sketch;\n  }\n\n  get settings () {\n    return this._settings;\n  }\n\n  get props () {\n    return this._props;\n  }\n\n  _computePlayhead (currentTime, duration) {\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    return hasDuration ? currentTime / duration : 0;\n  }\n\n  _computeFrame (playhead, time, totalFrames, fps) {\n    return (isFinite(totalFrames) && totalFrames > 1)\n      ? Math.floor(playhead * (totalFrames - 1))\n      : Math.floor(fps * time);\n  }\n\n  _computeCurrentFrame () {\n    return this._computeFrame(\n      this.props.playhead, this.props.time,\n      this.props.totalFrames, this.props.fps\n    );\n  }\n\n  _getSizeProps () {\n    const props = this.props;\n    return {\n      width: props.width,\n      height: props.height,\n      pixelRatio: props.pixelRatio,\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      viewportWidth: props.viewportWidth,\n      viewportHeight: props.viewportHeight\n    };\n  }\n\n  run () {\n    if (!this.sketch) throw new Error('should wait until sketch is loaded before trying to play()');\n\n    // Start an animation frame loop if necessary\n    if (this.settings.playing !== false) {\n      this.play();\n    }\n\n    // Let's let this warning hang around for a few versions...\n    if (typeof this.sketch.dispose === 'function') {\n      console.warn('In canvas-sketch@0.0.23 the dispose() event has been renamed to unload()');\n    }\n\n    // In case we aren't playing or animated, make sure we still trigger begin message...\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Render an initial frame\n    this.tick();\n    this.render();\n    return this;\n  }\n\n  _cancelTimeouts () {\n    if (this._raf != null && typeof window !== 'undefined' && typeof window.cancelAnimationFrame === 'function') {\n      window.cancelAnimationFrame(this._raf);\n      this._raf = null;\n    }\n    if (this._recordTimeout != null) {\n      clearTimeout(this._recordTimeout);\n      this._recordTimeout = null;\n    }\n  }\n\n  play () {\n    let animate = this.settings.animate;\n    if ('animation' in this.settings) {\n      animate = true;\n      console.warn('[canvas-sketch] { animation } has been renamed to { animate }');\n    }\n    if (!animate) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');\n      return;\n    }\n    if (this.props.playing) return;\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // console.log('play', this.props.time)\n\n    // Start a render loop\n    this.props.playing = true;\n    this._cancelTimeouts();\n    this._lastTime = rightNow();\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n  }\n\n  pause () {\n    if (this.props.recording) this.endRecord();\n    this.props.playing = false;\n\n    this._cancelTimeouts();\n  }\n\n  togglePlay () {\n    if (this.props.playing) this.pause();\n    else this.play();\n  }\n\n  // Stop and reset to frame zero\n  stop () {\n    this.pause();\n    this.props.frame = 0;\n    this.props.playhead = 0;\n    this.props.time = 0;\n    this.props.deltaTime = 0;\n    this.props.started = false;\n    this.render();\n  }\n\n  record () {\n    if (this.props.recording) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');\n      return;\n    }\n\n    this.stop();\n    this.props.playing = true;\n    this.props.recording = true;\n\n    const exportOpts = this._createExportOptions({ sequence: true });\n\n    const frameInterval = 1 / this.props.fps;\n    // Render each frame in the sequence\n    this._cancelTimeouts();\n    const tick = () => {\n      if (!this.props.recording) return Promise.resolve();\n      this.props.deltaTime = frameInterval;\n      this.tick();\n      return this.exportFrame(exportOpts)\n        .then(() => {\n          if (!this.props.recording) return; // was cancelled before\n          this.props.deltaTime = 0;\n          this.props.frame++;\n          if (this.props.frame < this.props.totalFrames) {\n            this.props.time += frameInterval;\n            this.props.playhead = this._computePlayhead(this.props.time, this.props.duration);\n            this._recordTimeout = setTimeout(tick, 0);\n          } else {\n            console.log('Finished recording');\n            this._signalEnd();\n            this.endRecord();\n            this.stop();\n            this.run();\n          }\n        });\n    };\n\n    // Trigger a start event before we begin recording\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Trigger 'begin record' event\n    if (this.sketch && typeof this.sketch.beginRecord === 'function') {\n      this._wrapContextScale(props => this.sketch.beginRecord(props));\n    }\n\n    // Initiate a streaming start if necessary\n    streamStart(exportOpts)\n      .catch(err => {\n        console.error(err);\n      })\n      .then(response => {\n        this._raf = window.requestAnimationFrame(tick);\n      });\n  }\n\n  _signalBegin () {\n    if (this.sketch && typeof this.sketch.begin === 'function') {\n      this._wrapContextScale(props => this.sketch.begin(props));\n    }\n  }\n\n  _signalEnd () {\n    if (this.sketch && typeof this.sketch.end === 'function') {\n      this._wrapContextScale(props => this.sketch.end(props));\n    }\n  }\n\n  endRecord () {\n    const wasRecording = this.props.recording;\n\n    this._cancelTimeouts();\n    this.props.recording = false;\n    this.props.deltaTime = 0;\n    this.props.playing = false;\n\n    // tell CLI that stream has finished\n    return streamEnd()\n      .catch(err => {\n        console.error(err);\n      })\n      .then(() => {\n        // Trigger 'end record' event\n        if (wasRecording && this.sketch && typeof this.sketch.endRecord === 'function') {\n          this._wrapContextScale(props => this.sketch.endRecord(props));\n        }\n      });\n  }\n\n  _createExportOptions (opt = {}) {\n    return {\n      sequence: opt.sequence,\n      save: opt.save,\n      fps: this.props.fps,\n      frame: opt.sequence ? this.props.frame : undefined,\n      file: this.settings.file,\n      name: this.settings.name,\n      prefix: this.settings.prefix,\n      suffix: this.settings.suffix,\n      encoding: this.settings.encoding,\n      encodingQuality: this.settings.encodingQuality,\n      timeStamp: opt.timeStamp || getTimeStamp(),\n      totalFrames: isFinite(this.props.totalFrames) ? Math.max(0, this.props.totalFrames) : 1000\n    };\n  }\n\n  exportFrame (opt = {}) {\n    if (!this.sketch) return Promise.all([]);\n    if (typeof this.sketch.preExport === 'function') {\n      this.sketch.preExport();\n    }\n\n    // Options for export function\n    let exportOpts = this._createExportOptions(opt);\n\n    const client = getClientAPI();\n    let p = Promise.resolve();\n    if (client && opt.commit && typeof client.commit === 'function') {\n      const commitOpts = assign({}, exportOpts);\n      const hash = client.commit(commitOpts);\n      if (isPromise(hash)) p = hash;\n      else p = Promise.resolve(hash);\n    }\n\n    return p.then(hash => {\n      return this._doExportFrame(assign({}, exportOpts, { hash: hash || '' }));\n    }).then(result => {\n      // Most common usecase is to export a single layer,\n      // so let's optimize the user experience for that.\n      if (result.length === 1) return result[0];\n      else return result;\n    });\n  }\n\n  _doExportFrame (exportOpts = {}) {\n    this._props.exporting = true;\n\n    // Resize to output resolution\n    this.resize();\n\n    // Draw at this output resolution\n    let drawResult = this.render();\n\n    // The self owned canvas (may be undefined...!)\n    const canvas = this.props.canvas;\n\n    // Get list of results from render\n    if (typeof drawResult === 'undefined') {\n      drawResult = [ canvas ];\n    }\n    drawResult = [].concat(drawResult).filter(Boolean);\n\n    // Transform the canvas/file descriptors into a consistent format,\n    // and pull out any data URLs from canvas elements\n    drawResult = drawResult.map(result => {\n      const hasDataObject = typeof result === 'object' && result && ('data' in result || 'dataURL' in result);\n      const data = hasDataObject ? result.data : result;\n      const opts = hasDataObject ? assign({}, result, { data }) : { data };\n      if (isCanvas(data)) {\n        const encoding = opts.encoding || exportOpts.encoding;\n        const encodingQuality = defined(opts.encodingQuality, exportOpts.encodingQuality, 0.95);\n        const { dataURL, extension, type } = exportCanvas(data, { encoding, encodingQuality });\n        return Object.assign(opts, { dataURL, extension, type });\n      } else {\n        return opts;\n      }\n    });\n\n    // Now return to regular rendering mode\n    this._props.exporting = false;\n    this.resize();\n    this.render();\n\n    // And now we can save each result\n    return Promise.all(drawResult.map((result, i, layerList) => {\n      // By default, if rendering multiple layers we will give them indices\n      const curOpt = assign({\n        extension: '',\n        prefix: '',\n        suffix: ''\n      }, exportOpts, result, {\n        layer: i,\n        totalLayers: layerList.length\n      });\n\n      // If export is explicitly not saving, make sure nothing saves\n      // Otherwise default to the layer save option, or fallback to true\n      const saveParam = exportOpts.save === false ? false : result.save;\n      curOpt.save = saveParam !== false;\n\n      // Resolve a full filename from all the options\n      curOpt.filename = resolveFilename(curOpt);\n\n      // Clean up some parameters that may be ambiguous to the user\n      delete curOpt.encoding;\n      delete curOpt.encodingQuality;\n\n      // Clean it up further by just removing undefined values\n      for (let k in curOpt) {\n        if (typeof curOpt[k] === 'undefined') delete curOpt[k];\n      }\n\n      let savePromise = Promise.resolve({});\n      if (curOpt.save) {\n        // Whether to actually save (download) this fragment\n        const data = curOpt.data;\n        if (curOpt.dataURL) {\n          const dataURL = curOpt.dataURL;\n          savePromise = saveDataURL(dataURL, curOpt);\n        } else {\n          savePromise = saveFile(data, curOpt);\n        }\n      }\n      return savePromise.then(saveResult => {\n        return Object.assign({}, curOpt, saveResult);\n      });\n    })).then(ev => {\n      const savedEvents = ev.filter(e => e.save);\n      if (savedEvents.length > 0) {\n        // Log the saved exports\n        const eventWithOutput = savedEvents.find(e => e.outputName);\n        const isClient = savedEvents.some(e => e.client);\n        const isStreaming = savedEvents.some(e => e.stream);\n        let item;\n        // many files, just log how many were exported\n        if (savedEvents.length > 1) item = savedEvents.length;\n        // in CLI, we know exact path dirname\n        else if (eventWithOutput) item = `${eventWithOutput.outputName}/${savedEvents[0].filename}`;\n        // in browser, we can only know it went to \"browser download folder\"\n        else item = `${savedEvents[0].filename}`;\n        let ofSeq = '';\n        if (exportOpts.sequence) {\n          const hasTotalFrames = isFinite(this.props.totalFrames);\n          ofSeq = hasTotalFrames ? ` (frame ${exportOpts.frame + 1} / ${this.props.totalFrames})` : ` (frame ${exportOpts.frame})`;\n        } else if (savedEvents.length > 1) {\n          ofSeq = ` files`;\n        }\n        const client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';\n        const action = isStreaming ? 'Streaming into' : 'Exported';\n        console.log(`%c[${client}]%c ${action} %c${item}%c${ofSeq}`, 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');\n      }\n      if (typeof this.sketch.postExport === 'function') {\n        this.sketch.postExport();\n      }\n      return ev;\n    });\n  }\n\n  _wrapContextScale (cb) {\n    this._preRender();\n    cb(this.props);\n    this._postRender();\n  }\n\n  _preRender () {\n    const props = this.props;\n\n    // Scale context for unit sizing\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.save();\n      if (this.settings.scaleContext !== false) {\n        props.context.scale(props.scaleX, props.scaleY);\n      }\n    } else if (props.p5) {\n      props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);\n    }\n  }\n\n  _postRender () {\n    const props = this.props;\n\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.restore();\n    }\n\n    // Flush by default, this may be revisited at a later point.\n    // We do this to ensure toDataURL can be called immediately after.\n    // Most likely browsers already handle this, so we may revisit this and\n    // remove it if it improves performance without any usability issues.\n    if (props.gl && this.settings.flush !== false && !props.p5) {\n      props.gl.flush();\n    }\n  }\n\n  tick () {\n    if (this.sketch && typeof this.sketch.tick === 'function') {\n      this._preRender();\n      this.sketch.tick(this.props);\n      this._postRender();\n    }\n  }\n\n  render () {\n    if (this.props.p5) {\n      this._lastRedrawResult = undefined;\n      this.props.p5.redraw();\n      return this._lastRedrawResult;\n    } else {\n      return this.submitDrawCall();\n    }\n  }\n\n  submitDrawCall () {\n    if (!this.sketch) return;\n\n    const props = this.props;\n    this._preRender();\n\n    let drawResult;\n\n    if (typeof this.sketch === 'function') {\n      drawResult = this.sketch(props);\n    } else if (typeof this.sketch.render === 'function') {\n      drawResult = this.sketch.render(props);\n    }\n\n    this._postRender();\n\n    return drawResult;\n  }\n\n  update (opt = {}) {\n    // Currently update() is only focused on resizing,\n    // but later we will support other options like switching\n    // frames and such.\n    const notYetSupported = [\n      'animate'\n    ];\n\n    Object.keys(opt).forEach(key => {\n      if (notYetSupported.indexOf(key) >= 0) {\n        throw new Error(`Sorry, the { ${key} } option is not yet supported with update().`);\n      }\n    });\n\n    const oldCanvas = this._settings.canvas;\n    const oldContext = this._settings.context;\n\n    // Merge new options into settings\n    for (let key in opt) {\n      const value = opt[key];\n      if (typeof value !== 'undefined') { // ignore undefined\n        this._settings[key] = value;\n      }\n    }\n\n    // Merge in time props\n    const timeOpts = Object.assign({}, this._settings, opt);\n    if ('time' in opt && 'frame' in opt) throw new Error('You should specify { time } or { frame } but not both');\n    else if ('time' in opt) delete timeOpts.frame;\n    else if ('frame' in opt) delete timeOpts.time;\n    if ('duration' in opt && 'totalFrames' in opt) throw new Error('You should specify { duration } or { totalFrames } but not both');\n    else if ('duration' in opt) delete timeOpts.totalFrames;\n    else if ('totalFrames' in opt) delete timeOpts.duration;\n\n    // Merge in user data without copying\n    if ('data' in opt) this._props.data = opt.data;\n\n    const timeProps = this.getTimeProps(timeOpts);\n    Object.assign(this._props, timeProps);\n\n    // If either canvas or context is changed, we should re-update\n    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {\n      const { canvas, context } = createCanvas(this._settings);\n\n      this.props.canvas = canvas;\n      this.props.context = context;\n\n      // Delete or add a 'gl' prop for convenience\n      this._setupGLKey();\n\n      // Re-mount the new canvas if it has no parent\n      this._appendCanvasIfNeeded();\n    }\n\n    // Special case to support P5.js\n    if (opt.p5 && typeof opt.p5 !== 'function') {\n      this.props.p5 = opt.p5;\n      this.props.p5.draw = () => {\n        if (this._isP5Resizing) return;\n        this._lastRedrawResult = this.submitDrawCall();\n      };\n    }\n\n    // Update playing state if necessary\n    if ('playing' in opt) {\n      if (opt.playing) this.play();\n      else this.pause();\n    }\n\n    checkSettings(this._settings);\n\n    // Draw new frame\n    this.resize();\n    this.render();\n    return this.props;\n  }\n\n  resize () {\n    const oldSizes = this._getSizeProps();\n\n    const settings = this.settings;\n    const props = this.props;\n\n    // Recompute new properties based on current setup\n    const newProps = resizeCanvas(props, settings);\n\n    // Assign to current props\n    Object.assign(this._props, newProps);\n\n    // Now we actually update the canvas width/height and style props\n    const {\n      pixelRatio,\n      canvasWidth,\n      canvasHeight,\n      styleWidth,\n      styleHeight\n    } = this.props;\n\n    // Update canvas settings\n    const canvas = this.props.canvas;\n    if (canvas && settings.resizeCanvas !== false) {\n      if (props.p5) {\n        // P5.js specific edge case\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n          this._isP5Resizing = true;\n          // This causes a re-draw :\\ so we ignore draws in the mean time... sorta hacky\n          props.p5.pixelDensity(pixelRatio);\n          props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);\n          this._isP5Resizing = false;\n        }\n      } else {\n        // Force canvas size\n        if (canvas.width !== canvasWidth) canvas.width = canvasWidth;\n        if (canvas.height !== canvasHeight) canvas.height = canvasHeight;\n      }\n      // Update canvas style\n      if (isBrowser() && settings.styleCanvas !== false) {\n        canvas.style.width = `${styleWidth}px`;\n        canvas.style.height = `${styleHeight}px`;\n      }\n    }\n\n    const newSizes = this._getSizeProps();\n    let changed = !deepEqual(oldSizes, newSizes);\n    if (changed) {\n      this._sizeChanged();\n    }\n    return changed;\n  }\n\n  _sizeChanged () {\n    // Send resize event to sketch\n    if (this.sketch && typeof this.sketch.resize === 'function') {\n      this.sketch.resize(this.props);\n    }\n  }\n\n  animate () {\n    if (!this.props.playing) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');\n      return;\n    }\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n\n    let now = rightNow();\n\n    const fps = this.props.fps;\n    const frameIntervalMS = 1000 / fps;\n    let deltaTimeMS = now - this._lastTime;\n\n    const duration = this.props.duration;\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n\n    let isNewFrame = true;\n    const playbackRate = this.settings.playbackRate;\n    if (playbackRate === 'fixed') {\n      deltaTimeMS = frameIntervalMS;\n    } else if (playbackRate === 'throttle') {\n      if (deltaTimeMS > frameIntervalMS) {\n        now = now - (deltaTimeMS % frameIntervalMS);\n        this._lastTime = now;\n      } else {\n        isNewFrame = false;\n      }\n    } else {\n      this._lastTime = now;\n    }\n\n    const deltaTime = deltaTimeMS / 1000;\n    let newTime = this.props.time + deltaTime * this.props.timeScale;\n\n    // Handle reverse time scale\n    if (newTime < 0 && hasDuration) {\n      newTime = duration + newTime;\n    }\n\n    // Re-start animation\n    let isFinished = false;\n    let isLoopStart = false;\n\n    const looping = this.settings.loop !== false;\n\n    if (hasDuration && newTime >= duration) {\n      // Re-start animation\n      if (looping) {\n        isNewFrame = true;\n        newTime = newTime % duration;\n        isLoopStart = true;\n      } else {\n        isNewFrame = false;\n        newTime = duration;\n        isFinished = true;\n      }\n\n      this._signalEnd();\n    }\n\n    if (isNewFrame) {\n      this.props.deltaTime = deltaTime;\n      this.props.time = newTime;\n      this.props.playhead = this._computePlayhead(newTime, duration);\n      const lastFrame = this.props.frame;\n      this.props.frame = this._computeCurrentFrame();\n      if (isLoopStart) this._signalBegin();\n      if (lastFrame !== this.props.frame) this.tick();\n      this.render();\n      this.props.deltaTime = 0;\n    }\n\n    if (isFinished) {\n      this.pause();\n    }\n  }\n\n  dispatch (cb) {\n    if (typeof cb !== 'function') throw new Error('must pass function into dispatch()');\n    cb(this.props);\n    this.render();\n  }\n\n  mount () {\n    this._appendCanvasIfNeeded();\n  }\n\n  unmount () {\n    if (isBrowser()) {\n      window.removeEventListener('resize', this._resizeHandler);\n      this._keyboardShortcuts.detach();\n    }\n    if (this.props.canvas.parentElement) {\n      this.props.canvas.parentElement.removeChild(this.props.canvas);\n    }\n  }\n\n  _appendCanvasIfNeeded () {\n    if (!isBrowser()) return;\n    if (this.settings.parent !== false && (this.props.canvas && !this.props.canvas.parentElement)) {\n      const defaultParent = this.settings.parent || document.body;\n      defaultParent.appendChild(this.props.canvas);\n    }\n  }\n\n  _setupGLKey () {\n    if (this.props.context) {\n      if (isWebGLContext(this.props.context)) {\n        this._props.gl = this.props.context;\n      } else {\n        delete this._props.gl;\n      }\n    }\n  }\n\n  getTimeProps (settings = {}) {\n    // Get timing data\n    let duration = settings.duration;\n    let totalFrames = settings.totalFrames;\n    const timeScale = defined(settings.timeScale, 1);\n    const fps = defined(settings.fps, 24);\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    const hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);\n\n    const totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;\n    const durationFromTotalFrames = hasTotalFrames ? (totalFrames / fps) : undefined;\n    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {\n      throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');\n    }\n\n    if (typeof settings.dimensions === 'undefined' && typeof settings.units !== 'undefined') {\n      console.warn(`You've specified a { units } setting but no { dimension }, so the units will be ignored.`);\n    }\n\n    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);\n    duration = defined(duration, durationFromTotalFrames, Infinity);\n\n    const startTime = settings.time;\n    const startFrame = settings.frame;\n    const hasStartTime = typeof startTime === 'number' && isFinite(startTime);\n    const hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);\n\n    // start at zero unless user specifies frame or time (but not both mismatched)\n    let time = 0;\n    let frame = 0;\n    let playhead = 0;\n    if (hasStartTime && hasStartFrame) {\n      throw new Error('You should specify either start frame or time, but not both.');\n    } else if (hasStartTime) {\n      // User specifies time, we infer frames from FPS\n      time = startTime;\n      playhead = this._computePlayhead(time, duration);\n      frame = this._computeFrame(\n        playhead, time,\n        totalFrames, fps\n      );\n    } else if (hasStartFrame) {\n      // User specifies frame number, we infer time from FPS\n      frame = startFrame;\n      time = frame / fps;\n      playhead = this._computePlayhead(time, duration);\n    }\n\n    return {\n      playhead,\n      time,\n      frame,\n      duration,\n      totalFrames,\n      fps,\n      timeScale\n    };\n  }\n\n  setup (settings = {}) {\n    if (this.sketch) throw new Error('Multiple setup() calls not yet supported.');\n\n    this._settings = Object.assign({}, settings, this._settings);\n\n    checkSettings(this._settings);\n\n    // Get initial canvas & context\n    const { context, canvas } = createCanvas(this._settings);\n\n    const timeProps = this.getTimeProps(this._settings);\n\n    // Initial render state features\n    this._props = {\n      ...timeProps,\n      canvas,\n      context,\n      deltaTime: 0,\n      started: false,\n      exporting: false,\n      playing: false,\n      recording: false,\n      settings: this.settings,\n      data: this.settings.data,\n\n      // Export some specific actions to the sketch\n      render: () => this.render(),\n      togglePlay: () => this.togglePlay(),\n      dispatch: (cb) => this.dispatch(cb),\n      tick: () => this.tick(),\n      resize: () => this.resize(),\n      update: (opt) => this.update(opt),\n      exportFrame: opt => this.exportFrame(opt),\n      record: () => this.record(),\n      play: () => this.play(),\n      pause: () => this.pause(),\n      stop: () => this.stop()\n    };\n\n    // For WebGL sketches, a gl variable reads a bit better\n    this._setupGLKey();\n\n    // Trigger initial resize now so that canvas is already sized\n    // by the time we load the sketch\n    this.resize();\n  }\n\n  loadAndRun (canvasSketch, newSettings) {\n    return this.load(canvasSketch, newSettings).then(() => {\n      this.run();\n      return this;\n    });\n  }\n\n  unload () {\n    this.pause();\n    if (!this.sketch) return;\n    if (typeof this.sketch.unload === 'function') {\n      this._wrapContextScale(props => this.sketch.unload(props));\n    }\n    this._sketch = null;\n  }\n\n  destroy () {\n    this.unload();\n    this.unmount();\n  }\n\n  load (createSketch, newSettings) {\n    // User didn't specify a function\n    if (typeof createSketch !== 'function') {\n      throw new Error('The function must take in a function as the first parameter. Example:\\n  canvasSketcher(() => { ... }, settings)');\n    }\n\n    if (this.sketch) {\n      this.unload();\n    }\n\n    if (typeof newSettings !== 'undefined') {\n      this.update(newSettings);\n    }\n\n    // This is a bit of a tricky case; we set up the auto-scaling here\n    // in case the user decides to render anything to the context *before* the\n    // render() function... However, users should instead use begin() function for that.\n    this._preRender();\n\n    let preload = Promise.resolve();\n\n    // Because of P5.js's unusual structure, we have to do a bit of\n    // library-specific changes to support it properly.\n    if (this.settings.p5) {\n      if (!isBrowser()) {\n        throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');\n      }\n      preload = new Promise(resolve => {\n        let P5Constructor = this.settings.p5;\n        let preload;\n        if (P5Constructor.p5) {\n          preload = P5Constructor.preload;\n          P5Constructor = P5Constructor.p5;\n        }\n\n        // The sketch setup; disable loop, set sizing, etc.\n        const p5Sketch = p5 => {\n          // Hook in preload if necessary\n          if (preload) p5.preload = () => preload(p5);\n          p5.setup = () => {\n            const props = this.props;\n            const isGL = this.settings.context === 'webgl';\n            const renderer = isGL ? p5.WEBGL : p5.P2D;\n            p5.noLoop();\n            p5.pixelDensity(props.pixelRatio);\n            p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);\n            if (isGL && this.settings.attributes) {\n              p5.setAttributes(this.settings.attributes);\n            }\n\n            this.update({ p5, canvas: p5.canvas, context: p5._renderer.drawingContext });\n            resolve();\n          };\n        };\n\n        // Support global and instance P5.js modes\n        if (typeof P5Constructor === 'function') {\n          new P5Constructor(p5Sketch);\n        } else {\n          if (typeof window.createCanvas !== 'function') {\n            throw new Error(\"{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\\nnew p5(); // <-- attaches to global scope\");\n          }\n          p5Sketch(window);\n        }\n      });\n    }\n\n    return preload.then(() => {\n      // Load the user's sketch\n      let loader = createSketch(this.props);\n      if (!isPromise(loader)) {\n        loader = Promise.resolve(loader);\n      }\n      return loader;\n    }).then(sketch => {\n      if (!sketch) sketch = {};\n      this._sketch = sketch;\n\n      // Once the sketch is loaded we can add the events\n      if (isBrowser()) {\n        this._keyboardShortcuts.attach();\n        window.addEventListener('resize', this._resizeHandler);\n      }\n\n      this._postRender();\n\n      // The initial resize() in the constructor will not have\n      // triggered a resize() event on the sketch, since it was before\n      // the sketch was loaded. So we send the signal here, allowing\n      // users to react to the initial size before first render.\n      this._sizeChanged();\n      return this;\n    }).catch(err => {\n      console.warn('Could not start sketch, the async loading function rejected with an error:\\n    Error: ' + err.message);\n      throw err;\n    });\n  }\n}\n\nexport default SketchManager;\n","import { getClientAPI } from '../util';\n\nexport default function (opt = {}) {\n  const handler = ev => {\n    if (!opt.enabled()) return;\n\n    const client = getClientAPI();\n    if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + S\n      ev.preventDefault();\n      opt.save(ev);\n    } else if (ev.keyCode === 32) {\n      // Space\n      // TODO: what to do with this? keep it, or remove it?\n      opt.togglePlay(ev);\n    } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + K, only when canvas-sketch-cli is used\n      ev.preventDefault();\n      opt.commit(ev);\n    }\n  };\n\n  const attach = () => {\n    window.addEventListener('keydown', handler);\n  };\n\n  const detach = () => {\n    window.removeEventListener('keydown', handler);\n  };\n\n  return {\n    attach,\n    detach\n  };\n}\n","import SketchManager from './core/SketchManager';\nimport PaperSizes from './paper-sizes';\nimport { getClientAPI, defined } from './util';\n\nconst CACHE = 'hot-id-cache';\nconst runtimeCollisions = [];\n\nfunction isHotReload () {\n  const client = getClientAPI();\n  return client && client.hot;\n}\n\nfunction cacheGet (id) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  return client[CACHE][id];\n}\n\nfunction cachePut (id, data) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  client[CACHE][id] = data;\n}\n\nfunction getTimeProp (oldManager, newSettings) {\n  // Static sketches ignore the time persistency\n  return newSettings.animate ? { time: oldManager.props.time } : undefined;\n}\n\nfunction canvasSketch (sketch, settings = {}) {\n  if (settings.p5) {\n    if (settings.canvas || (settings.context && typeof settings.context !== 'string')) {\n      throw new Error(`In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string`);\n    }\n\n    // Do not create a canvas on startup, since P5.js does that for us\n    const context = typeof settings.context === 'string' ? settings.context : false;\n    settings = Object.assign({}, settings, { canvas: false, context });\n  }\n\n  const isHot = isHotReload();\n  let hotID;\n  if (isHot) {\n    // Use a magic name by default, force user to define each sketch if they\n    // require more than one in an application. Open to other ideas on how to tackle\n    // this as well...\n    hotID = defined(settings.id, '$__DEFAULT_CANVAS_SKETCH_ID__$');\n  }\n  let isInjecting = isHot && typeof hotID === 'string';\n\n  if (isInjecting && runtimeCollisions.includes(hotID)) {\n    console.warn(`Warning: You have multiple calls to canvasSketch() in --hot mode. You must pass unique { id } strings in settings to enable hot reload across multiple sketches. `, hotID);\n    isInjecting = false;\n  }\n\n  let preload = Promise.resolve();\n\n  if (isInjecting) {\n    // Mark this as already spotted in this runtime instance\n    runtimeCollisions.push(hotID);\n\n    const previousData = cacheGet(hotID);\n    if (previousData) {\n      const next = () => {\n        // Grab new props from old sketch instance\n        const newProps = getTimeProp(previousData.manager, settings);\n        // Destroy the old instance\n        previousData.manager.destroy();\n        // Pass along new props\n        return newProps;\n      };\n\n      // Move along the next data...\n      preload = previousData.load.then(next).catch(next);\n    }\n  }\n\n  return preload.then(newProps => {\n    const manager = new SketchManager();\n    let result;\n    if (sketch) {\n      // Merge with incoming data\n      settings = Object.assign({}, settings, newProps);\n\n      // Apply settings and create a canvas\n      manager.setup(settings);\n\n      // Mount to DOM\n      manager.mount();\n\n      // load the sketch first\n      result = manager.loadAndRun(sketch);\n    } else {\n      result = Promise.resolve(manager);\n    }\n    if (isInjecting) {\n      cachePut(hotID, { load: result, manager });\n    }\n    return result;\n  });\n}\n\n// TODO: Figure out a nice way to export things.\ncanvasSketch.canvasSketch = canvasSketch;\ncanvasSketch.PaperSizes = PaperSizes;\n\nexport default canvasSketch;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '118';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar CineonToneMapping = 3;\n\tvar ACESFilmicToneMapping = 4;\n\tvar CustomToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar NormalAnimationBlendMode = 2500;\n\tvar AdditiveAnimationBlendMode = 2501;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author thezwap\n\t */\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar MathUtils = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tsetQuaternionFromProperEuler: function ( q, a, b, c, order ) {\n\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c2 = cos( b / 2 );\n\t\t\tvar s2 = sin( b / 2 );\n\n\t\t\tvar c13 = cos( ( a + c ) / 2 );\n\t\t\tvar s13 = sin( ( a + c ) / 2 );\n\n\t\t\tvar c1_3 = cos( ( a - c ) / 2 );\n\t\t\tvar s1_3 = sin( ( a - c ) / 2 );\n\n\t\t\tvar c3_1 = cos( ( c - a ) / 2 );\n\t\t\tvar s3_1 = sin( ( c - a ) / 2 );\n\n\t\t\tswitch ( order ) {\n\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trandom: function () {\n\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp;\n\t\t\tvar m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t}\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t}\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\t\tif ( w === void 0 ) w = 1;\n\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tObject.defineProperties( Vector4.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.z = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.w = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z; // variables for result\n\t\t\tvar epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trandom: function () {\n\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\t\tif ( w === void 0 ) w = 1;\n\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\t\tvar x1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t},\n\n\t\tmultiplyQuaternionsFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\t\tvar x0 = src0[ srcOffset0 ];\n\t\t\tvar y0 = src0[ srcOffset0 + 1 ];\n\t\t\tvar z0 = src0[ srcOffset0 + 2 ];\n\t\t\tvar w0 = src0[ srcOffset0 + 3 ];\n\n\t\t\tvar x1 = src1[ srcOffset1 ];\n\t\t\tvar y1 = src1[ srcOffset1 + 1 ];\n\t\t\tvar z1 = src1[ srcOffset1 + 2 ];\n\t\t\tvar w1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\t\treturn dst;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tisQuaternion: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tswitch ( order ) {\n\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\tvar s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\tvar s$1 = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s$1;\n\t\t\t\tthis._x = 0.25 * s$1;\n\t\t\t\tthis._y = ( m12 + m21 ) / s$1;\n\t\t\t\tthis._z = ( m13 + m31 ) / s$1;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\tvar s$2 = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s$2;\n\t\t\t\tthis._x = ( m12 + m21 ) / s$2;\n\t\t\t\tthis._y = 0.25 * s$2;\n\t\t\t\tthis._z = ( m23 + m32 ) / s$2;\n\n\t\t\t} else {\n\n\t\t\t\tvar s$3 = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s$3;\n\t\t\t\tthis._x = ( m13 + m31 ) / s$3;\n\t\t\t\tthis._y = ( m23 + m32 ) / s$3;\n\t\t\t\tthis._z = 0.25 * s$3;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) { return this; }\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) { return this; }\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\tthis.normalize();\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index ) {\n\n\t\t\tthis._x = attribute.getX( index );\n\t\t\tthis._y = attribute.getY( index );\n\t\t\tthis._z = attribute.getZ( index );\n\t\t\tthis._w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tfunction Vector3( x, y, z ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t\t},\n\n\t\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\treturn this.applyMatrix3( m ).normalize();\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( v ) {\n\n\t\t\tvar denominator = v.lengthSq();\n\n\t\t\tif ( denominator === 0 ) { return this.set( 0, 0, 0 ); }\n\n\t\t\tvar scalar = v.dot( this ) / denominator;\n\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( _vector );\n\n\t\t},\n\n\t\treflect: function ( normal ) {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t},\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\t\tif ( denominator === 0 ) { return Math.PI / 2; }\n\n\t\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tsetFromMatrix3Column: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trandom: function () {\n\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _v1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function ( m ) {\n\n\t\t\t// this method does not support reflection matrices\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce$1 = c * e, cf$1 = c * f, de$1 = d * e, df$1 = d * f;\n\n\t\t\t\tte[ 0 ] = ce$1 - df$1 * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de$1 + cf$1 * b;\n\n\t\t\t\tte[ 1 ] = cf$1 + de$1 * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df$1 - ce$1 * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae$1 = a * e, af$1 = a * f, be$1 = b * e, bf$1 = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be$1 * d - af$1;\n\t\t\t\tte[ 8 ] = ae$1 * d + bf$1;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf$1 * d + ae$1;\n\t\t\t\tte[ 9 ] = af$1 * d - be$1;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac$1 = a * c, ad$1 = a * d, bc$1 = b * c, bd$1 = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac$1 * f + bd$1;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad$1 * f - bc$1;\n\n\t\t\t\tte[ 2 ] = bc$1 * f - ad$1;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd$1 * f + ac$1;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\treturn this.compose( _zero, q, _one );\n\n\t\t},\n\n\t\tlookAt: function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors( eye, target );\n\n\t\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t_z.z = 1;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t_z.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_z.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\t\t\t\t_x.crossVectors( up, _z );\n\n\t\t\t}\n\n\t\t\t_x.normalize();\n\t\t\t_y.crossVectors( _z, _x );\n\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( x, y, z ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tte[ 12 ] = x.x;\n\t\t\t\tte[ 13 ] = x.y;\n\t\t\t\tte[ 14 ] = x.z;\n\n\t\t\t} else {\n\n\t\t\t\tte[ 12 ] = x;\n\t\t\t\tte[ 13 ] = y;\n\t\t\t\tte[ 14 ] = z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = position.x;\n\t\t\tte[ 13 ] = position.y;\n\t\t\tte[ 14 ] = position.z;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\t_m1.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t_m1.elements[ 0 ] *= invSX;\n\t\t\t_m1.elements[ 1 ] *= invSX;\n\t\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t\t_m1.elements[ 4 ] *= invSY;\n\t\t\t_m1.elements[ 5 ] *= invSY;\n\t\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tfunction Euler( x, y, z, order ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\t\tif ( order === void 0 ) order = Euler.DefaultOrder;\n\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = MathUtils.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tswitch ( order ) {\n\n\t\t\t\tcase 'XYZ':\n\n\t\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\n\t\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\n\t\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\n\t\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\n\t\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\n\t\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t\t},\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function ( newOrder ) {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\t_quaternion$1.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t\t},\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\tenableAll: function () {\n\n\t\t\tthis.mask = 0xffffffff | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\tdisableAll: function () {\n\n\t\t\tthis.mask = 0;\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\tvar _object3DId = 0;\n\n\tvar _v1$1 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix4( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i$1 = 0, l$1 = this.material.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i$1 ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i$2 = 0; i$2 < this.children.length; i$2 ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i$2 ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes$1 = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes$1.length > 0 ) { output.shapes = shapes$1; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tisScene: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.environment !== null ) { this.environment = source.environment.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$1 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1$2 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function ( object ) {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, _vector$1 );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: function ( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( _center );\n\t\t\t_extents.subVectors( this.max, _center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\t_v0.subVectors( triangle.a, _center );\n\t\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );\n\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tgetBoundingSphere: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$1 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\tthis.setFromPoints( _points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tfor ( var i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _box$1 = new Box3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : - 1;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\treturn ( this.radius < 0 );\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.center.set( 0, 0, 0 );\n\t\t\tthis.radius = - 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\tvar _vector$2 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, _vector$2 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function ( point ) {\n\n\t\t\tvar directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\t_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn _vector$2.distanceToSquared( point );\n\n\t\t},\n\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( _segDir );\n\t\t\tvar b0 = _diff.dot( this.direction );\n\t\t\tvar b1 = - _diff.dot( _segDir );\n\t\t\tvar c = _diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t},\n\n\t\tintersectSphere: function ( sphere, target ) {\n\n\t\t\t_vector$2.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = _vector$2.dot( this.direction );\n\t\t\tvar d2 = _vector$2.dot( _vector$2 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) { return null; }\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) { return null; }\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn this.intersectBox( box, _vector$2 ) !== null;\n\n\t\t},\n\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t_edge1.subVectors( b, a );\n\t\t\t_edge2.subVectors( c, a );\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( _normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t_diff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tisPlane: true,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function ( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( _vector1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t},\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function ( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\t_v0$1.subVectors( a, b );\n\t\t\ttarget.cross( _v0$1 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t},\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t\t_v0$1.subVectors( c, a );\n\t\t\t_v1$3.subVectors( b, a );\n\t\t\t_v2$1.subVectors( point, a );\n\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t\t},\n\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\t\ttarget.set( 0, 0 );\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t\t_v0$1.subVectors( c, b );\n\t\t\t_v1$3.subVectors( a, b );\n\n\t\t\t// strictly front facing\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\t_v0$1.subVectors( this.c, this.b );\n\t\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t\t},\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Plane();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tisFrontFacing: function ( direction ) {\n\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( p, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\tvar v, w;\n\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors( b, a );\n\t\t\t_vac.subVectors( c, a );\n\t\t\t_vap.subVectors( p, a );\n\t\t\tvar d1 = _vab.dot( _vap );\n\t\t\tvar d2 = _vac.dot( _vap );\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy( a );\n\n\t\t\t}\n\n\t\t\t_vbp.subVectors( p, b );\n\t\t\tvar d3 = _vab.dot( _vbp );\n\t\t\tvar d4 = _vac.dot( _vbp );\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy( b );\n\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t\t}\n\n\t\t\t_vcp.subVectors( p, c );\n\t\t\tvar d5 = _vab.dot( _vcp );\n\t\t\tvar d6 = _vac.dot( _vcp );\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy( c );\n\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t_vbc.subVectors( c, b );\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t\t}\n\n\t\t\t// face region\n\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t// u = va * denom\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t\t},\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo( h, 1 );\n\t\t\ts = MathUtils.clamp( s, 0, 1 );\n\t\t\tl = MathUtils.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) { return; }\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\treturn this.setColorName( style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorName: function ( style ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function ( color ) {\n\n\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToSRGB: function ( color ) {\n\n\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tthis.getHSL( _hslA );\n\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function ( color, alpha ) {\n\n\t\t\tthis.getHSL( _hslA );\n\t\t\tcolor.getHSL( _hslB );\n\n\t\t\tvar h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );\n\t\t\tvar s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );\n\t\t\tvar l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\t\tthis.setHSL( h, s, l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index ) {\n\n\t\t\tthis.r = attribute.getX( index );\n\t\t\tthis.g = attribute.getY( index );\n\t\t\tthis.b = attribute.getZ( index );\n\n\t\t\tif ( attribute.normalized === true ) {\n\n\t\t\t\t// assuming Uint8Array\n\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\tColor.NAMES = _colorKeywords;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i$1 = 0, il$1 = source.vertexColors.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tthis.vertexColors[ i$1 ] = source.vertexColors[ i$1 ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function ( /* shaderobject, renderer */ ) {},\n\n\t\tcustomProgramCacheKey: function () {\n\n\t\t\treturn this.onBeforeCompile.toString();\n\n\t\t},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors ) { data.vertexColors = true; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes;\n\t\t\tvar dstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _vector$3 = new Vector3();\n\tvar _vector2$1 = new Vector2();\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tif ( this.itemSize === 2 ) {\n\n\t\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = this.count; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\t_vector$3.fromBufferAttribute( this, i$1 );\n\t\t\t\t\t_vector$3.applyMatrix3( m );\n\n\t\t\t\t\tthis.setXYZ( i$1, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyNormalMatrix( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.transformDirection( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar groups = [];\n\n\t\t\tvar group, i;\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < morphNormalsLength; i$1 ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i$1 ] = {\n\t\t\t\t\t\tname: morphNormals[ i$1 ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i$2 = 0; i$2 < faces.length; i$2 ++ ) {\n\n\t\t\t\tvar face = faces[ i$2 ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i$2 ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i$2 );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs$1 = faceVertexUvs[ 1 ][ i$2 ];\n\n\t\t\t\t\tif ( vertexUvs$1 !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs$1[ 0 ], vertexUvs$1[ 1 ], vertexUvs$1[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i$2 );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j$1 = 0; j$1 < morphNormalsLength; j$1 ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j$1 ].vertexNormals[ i$2 ];\n\n\t\t\t\t\tmorphTargetsNormal[ j$1 ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\ttangent.transformDirection( matrix );\n\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tvar attribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tvar attribute$1 = this.attributes.normal;\n\n\t\t\t\tif ( attribute$1 !== undefined ) {\n\n\t\t\t\t\tattribute$1.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute$1.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tvar attribute$2 = this.attributes.color;\n\n\t\t\t\tif ( attribute$2 !== undefined ) {\n\n\t\t\t\t\tattribute$2.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute$2.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tvar attribute$3 = this.attributes.uv;\n\n\t\t\t\tif ( attribute$3 !== undefined ) {\n\n\t\t\t\t\tattribute$3.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute$3.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tvar attribute$4 = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute$4 !== undefined ) {\n\n\t\t\t\t\tattribute$4.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute$4.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i$1 = 0, il$1 = position.count; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i$1 );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = morphAttributesPosition.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute$1 = morphAttributesPosition[ i$2 ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute$1.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute$1, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar positionAttribute = this.getAttribute( 'position' );\n\n\t\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\t\tvar normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tfor ( var i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tfor ( var i$1 = 0, il$1 = index.count; i$1 < il$1; i$1 += 3 ) {\n\n\t\t\t\t\t\tvar vA = index.getX( i$1 + 0 );\n\t\t\t\t\t\tvar vB = index.getX( i$1 + 1 );\n\t\t\t\t\t\tvar vC = index.getX( i$1 + 2 );\n\n\t\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\t\tnA.add( cb );\n\t\t\t\t\t\tnB.add( cb );\n\t\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = positionAttribute.count; i$2 < il$2; i$2 += 3 ) {\n\n\t\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i$2 + 0 );\n\t\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i$2 + 1 );\n\t\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i$2 + 2 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormalAttribute.setXYZ( i$2 + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( i$2 + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( i$2 + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.fromBufferAttribute( normals, i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\tvar normalized = attribute.normalized;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( var name$1 in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name$1 ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute$1 = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute$1 = convertBufferAttribute( attribute$1, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute$1 );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name$1 ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i$1 = 0, l = groups.length; i$1 < l; i$1 ++ ) {\n\n\t\t\t\tvar group = groups[ i$1 ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key$1 in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key$1 ];\n\n\t\t\t\tvar attributeData = attribute.toJSON( data.data );\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key$1 ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key$2 in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key$2 ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute$1 = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData$1 = attribute$1.toJSON( data.data );\n\n\t\t\t\t\tif ( attribute$1.name !== '' ) { attributeData$1.name = attribute$1.name; }\n\n\t\t\t\t\tarray.push( attributeData$1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key$2 ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t const parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t const values = [];\n\n\t\t\t for ( const key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// used for storing cloned, shared data\n\n\t\t\tvar data = {};\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( var name$1 in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name$1 ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name$1 ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( var i$1 = 0, l$1 = groups.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\tvar group = groups[ i$1 ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tvar name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tvar start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tvar end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( var j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\tvar a = index.getX( j );\n\t\t\t\t\t\t\t\tvar b = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tvar c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar start$1 = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tvar end$1 = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( var i$1 = start$1, il$1 = end$1; i$1 < il$1; i$1 += 3 ) {\n\n\t\t\t\t\t\t\tvar a$1 = index.getX( i$1 );\n\t\t\t\t\t\t\tvar b$1 = index.getX( i$1 + 1 );\n\t\t\t\t\t\t\tvar c$1 = index.getX( i$1 + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$1, b$1, c$1 );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i$1 / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( var i$2 = 0, il$2 = groups.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\t\tvar group$1 = groups[ i$2 ];\n\t\t\t\t\t\t\tvar groupMaterial$1 = material[ group$1.materialIndex ];\n\n\t\t\t\t\t\t\tvar start$2 = Math.max( group$1.start, drawRange.start );\n\t\t\t\t\t\t\tvar end$2 = Math.min( ( group$1.start + group$1.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( var j$1 = start$2, jl$1 = end$2; j$1 < jl$1; j$1 += 3 ) {\n\n\t\t\t\t\t\t\t\tvar a$2 = j$1;\n\t\t\t\t\t\t\t\tvar b$2 = j$1 + 1;\n\t\t\t\t\t\t\t\tvar c$2 = j$1 + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial$1, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$2, b$2, c$2 );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j$1 / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group$1.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar start$3 = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tvar end$3 = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( var i$3 = start$3, il$3 = end$3; i$3 < il$3; i$3 += 3 ) {\n\n\t\t\t\t\t\t\tvar a$3 = i$3;\n\t\t\t\t\t\t\tvar b$3 = i$3 + 1;\n\t\t\t\t\t\t\tvar c$3 = i$3 + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$3, b$3, c$3 );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i$3 / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tvar fvA = vertices[ face.a ];\n\t\t\t\t\tvar fvB = vertices[ face.b ];\n\t\t\t\t\tvar fvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.boneTransform( a, _vA );\n\t\t\tobject.boneTransform( b, _vB );\n\t\t\tobject.boneTransform( c, _vC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.faces.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tvar face = this.faces[ i$1 ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar index = geometry.index !== null ? geometry.index : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar position = attributes.position;\n\t\t\tvar normal = attributes.normal;\n\t\t\tvar color = attributes.color;\n\t\t\tvar uv = attributes.uv;\n\t\t\tvar uv2 = attributes.uv2;\n\n\t\t\tif ( uv2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromBufferAttribute( position, i ) );\n\n\t\t\t\tif ( color !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromBufferAttribute( color, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( color === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone()\n\t\t\t\t];\n\n\t\t\t\tvar vertexNormals = ( normal === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromBufferAttribute( normal, a ),\n\t\t\t\t\tnew Vector3().fromBufferAttribute( normal, b ),\n\t\t\t\t\tnew Vector3().fromBufferAttribute( normal, c )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uv !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, a ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, b ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, c )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, a ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, b ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, c )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < groups.length; i$1 ++ ) {\n\n\t\t\t\t\tvar group = groups[ i$1 ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( index.getX( j ), index.getX( j + 1 ), index.getX( j + 2 ), group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tfor ( var i$2 = 0; i$2 < index.count; i$2 += 3 ) {\n\n\t\t\t\t\t\taddFace( index.getX( i$2 ), index.getX( i$2 + 1 ), index.getX( i$2 + 2 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i$3 = 0; i$3 < position.count; i$3 += 3 ) {\n\n\t\t\t\t\t\taddFace( i$3, i$3 + 1, i$3 + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar vertices = new Array( this.vertices.length );\n\n\t\t\tfor ( var v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( var f$1 = 0, fl$1 = this.faces.length; f$1 < fl$1; f$1 ++ ) {\n\n\t\t\t\t\tvar face$1 = this.faces[ f$1 ];\n\n\t\t\t\t\tvertices[ face$1.a ].add( face$1.normal );\n\t\t\t\t\tvertices[ face$1.b ].add( face$1.normal );\n\t\t\t\t\tvertices[ face$1.c ].add( face$1.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var v$1 = 0, vl$1 = this.vertices.length; v$1 < vl$1; v$1 ++ ) {\n\n\t\t\t\tvertices[ v$1 ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var f$2 = 0, fl$2 = this.faces.length; f$2 < fl$2; f$2 ++ ) {\n\n\t\t\t\tvar face$2 = this.faces[ f$2 ];\n\n\t\t\t\tvar vertexNormals = face$2.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face$2.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face$2.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face$2.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face$2.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face$2.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face$2.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( var i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.morphTargets.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i$1 ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i$1 ] = {};\n\t\t\t\t\tthis.morphNormals[ i$1 ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i$1 ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i$1 ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i$1 ].vertexNormals;\n\n\t\t\t\t\tfor ( var f$1 = 0, fl$1 = this.faces.length; f$1 < fl$1; f$1 ++ ) {\n\n\t\t\t\t\t\tvar faceNormal = new Vector3();\n\t\t\t\t\t\tvar vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i$1 ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i$1 ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tfor ( var f$2 = 0, fl$2 = this.faces.length; f$2 < fl$2; f$2 ++ ) {\n\n\t\t\t\t\tvar face$1 = this.faces[ f$2 ];\n\n\t\t\t\t\tvar faceNormal$1 = morphNormals.faceNormals[ f$2 ];\n\t\t\t\t\tvar vertexNormals$1 = morphNormals.vertexNormals[ f$2 ];\n\n\t\t\t\t\tfaceNormal$1.copy( face$1.normal );\n\n\t\t\t\t\tvertexNormals$1.a.copy( face$1.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals$1.b.copy( face$1.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals$1.c.copy( face$1.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( var f$3 = 0, fl$3 = this.faces.length; f$3 < fl$3; f$3 ++ ) {\n\n\t\t\t\tvar face$2 = this.faces[ f$3 ];\n\n\t\t\t\tface$2.normal = face$2.__originalFaceNormal;\n\t\t\t\tface$2.vertexNormals = face$2.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i$1 = 0, il$1 = colors2.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i$1 ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( var i$2 = 0, il$2 = faces2.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\tvar face = faces2[ i$2 ], faceCopy = (void 0), normal = (void 0), color = (void 0),\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j$1 = 0, jl$1 = faceVertexColors.length; j$1 < jl$1; j$1 ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j$1 ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i$3 = 0, il$3 = geometry.faceVertexUvs.length; i$3 < il$3; i$3 ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i$3 ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i$3 ] === undefined ) { this.faceVertexUvs[ i$3 ] = []; }\n\n\t\t\t\tfor ( var j$2 = 0, jl$2 = faceVertexUvs2.length; j$2 < jl$2; j$2 ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j$2 ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i$3 ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar v = this.vertices[ i ];\n\t\t\t\tvar key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.faces.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tvar face = this.faces[ i$1 ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tvar indices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i$1 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i$2 = faceIndicesToRemove.length - 1; i$2 >= 0; i$2 -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i$2 ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( var j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i$1 = 0; i$1 < length; i$1 ++ ) {\n\n\t\t\t\tvar id = faces[ i$1 ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i$1 = 0; i$1 < this.faces.length; i$1 ++ ) {\n\n\t\t\t\tvar face = this.faces[ i$1 ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i$1 ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i$1 ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t const parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t const values = [];\n\n\t\t\t for ( const key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( var i$1 = 0, il$1 = colors.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i$1 ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( var i$2 = 0, il$2 = faces.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i$2 ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( var i$3 = 0, il$3 = source.faceVertexUvs.length; i$3 < il$3; i$3 ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i$3 ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i$3 ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i$3 ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i$3 ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( var i$4 = 0, il$4 = morphTargets.length; i$4 < il$4; i$4 ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i$4 ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i$4 ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( var j$1 = 0, jl$1 = morphTargets[ i$4 ].vertices.length; j$1 < jl$1; j$1 ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i$4 ].vertices[ j$1 ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i$4 ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( var j$2 = 0, jl$2 = morphTargets[ i$4 ].normals.length; j$2 < jl$2; j$2 ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i$4 ].normals[ j$2 ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( var i$5 = 0, il$5 = morphNormals.length; i$5 < il$5; i$5 ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i$5 ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( var j$3 = 0, jl$3 = morphNormals[ i$5 ].vertexNormals.length; j$3 < jl$3; j$3 ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i$5 ].vertexNormals[ j$3 ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i$5 ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( var j$4 = 0, jl$4 = morphNormals[ i$5 ].faceNormals.length; j$4 < jl$4; j$4 ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i$5 ].faceNormals[ j$4 ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( var i$6 = 0, il$6 = skinWeights.length; i$6 < il$6; i$6 ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i$6 ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( var i$7 = 0, il$7 = skinIndices.length; i$7 < il$7; i$7 ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i$7 ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( var i$8 = 0, il$8 = lineDistances.length; i$8 < il$8; i$8 ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i$8 ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t\treturn BoxGeometry;\n\t}(Geometry));\n\n\t// BoxBufferGeometry\n\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tdepth = depth || 1;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( var iy$1 = 0; iy$1 < gridY; iy$1 ++ ) {\n\n\t\t\t\t\tfor ( var ix$1 = 0; ix$1 < gridX; ix$1 ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix$1 + gridX1 * iy$1;\n\t\t\t\t\t\tvar b = numberOfVertices + ix$1 + gridX1 * ( iy$1 + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix$1 + 1 ) + gridX1 * ( iy$1 + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix$1 + 1 ) + gridX1 * iy$1;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry));\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   const w = 1920;\n\t\t *   const h = 1080;\n\t\t *   const fullWidth = w * 3;\n\t\t *   const fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, renderTarget ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget !== true ) {\n\n\t\t\tconsole.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\trenderer.xr.enabled = false;\n\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction WebGLCubeRenderTarget( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tWebGLRenderTarget.call( this, size, size, options );\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = texture.format;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tvar scene = new Scene();\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"#include <common>\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\t\"\tvec2 sampleUV = equirectUv( direction );\",\n\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\t\t};\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\t\tscene.add( mesh );\n\n\t\tvar camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, scene );\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromProjectionMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSprite: function ( sprite ) {\n\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t// corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tuv2Transform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {}\n\t\t\t} },\n\n\t\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowNormalBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {}\n\t\t\t} },\n\n\t\t\tspotLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowNormalBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {}\n\t\t\t} },\n\n\t\t\tpointLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowNormalBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\t\tvar requestId = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var iy$1 = 0; iy$1 < gridY; iy$1 ++ ) {\n\n\t\t\tfor ( var ix$1 = 0; ix$1 < gridX; ix$1 ++ ) {\n\n\t\t\t\tvar a = ix$1 + gridX1 * iy$1;\n\t\t\t\tvar b = ix$1 + gridX1 * ( iy$1 + 1 );\n\t\t\t\tvar c = ( ix$1 + 1 ) + gridX1 * ( iy$1 + 1 );\n\t\t\t\tvar d = ( ix$1 + 1 ) + gridX1 * iy$1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_maxMipLevel 8.0\\n#define cubeUV_minMipLevel 4.0\\n#define cubeUV_maxTileSize 256.0\\n#define cubeUV_minTileSize 16.0\\nfloat getFace(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    float face = -1.0;\\n    if (absDirection.x > absDirection.z) {\\n      if (absDirection.x > absDirection.y)\\n        face = direction.x > 0.0 ? 0.0 : 3.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    } else {\\n      if (absDirection.z > absDirection.y)\\n        face = direction.z > 0.0 ? 2.0 : 5.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    }\\n    return face;\\n}\\nvec2 getUV(vec3 direction, float face) {\\n    vec2 uv;\\n    if (face == 0.0) {\\n      uv = vec2(direction.z, direction.y) / abs(direction.x);    } else if (face == 1.0) {\\n      uv = vec2(-direction.x, -direction.z) / abs(direction.y);    } else if (face == 2.0) {\\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);    } else if (face == 3.0) {\\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);    } else if (face == 4.0) {\\n      uv = vec2(-direction.x, direction.z) / abs(direction.y);    } else {\\n      uv = vec2(direction.x, direction.y) / abs(direction.z);    }\\n    return 0.5 * (uv + 1.0);\\n}\\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\\n  float face = getFace(direction);\\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\\n  mipInt = max(mipInt, cubeUV_minMipLevel);\\n  float faceSize = exp2(mipInt);\\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\\n  vec2 f = fract(uv);\\n  uv += 0.5 - f;\\n  if (face > 2.0) {\\n    uv.y += faceSize;\\n    face -= 3.0;\\n  }\\n  uv.x += face * faceSize;\\n  if(mipInt < cubeUV_maxMipLevel){\\n    uv.y += 2.0 * cubeUV_maxTileSize;\\n  }\\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\\n  uv *= texelSize;\\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x += texelSize;\\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.y += texelSize;\\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x -= texelSize;\\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  vec3 tm = mix(tl, tr, f.x);\\n  vec3 bm = mix(bl, br, f.x);\\n  return mix(tm, bm, f.y);\\n}\\n#define r0 1.0\\n#define v0 0.339\\n#define m0 -2.0\\n#define r1 0.8\\n#define v1 0.276\\n#define m1 -1.0\\n#define r4 0.4\\n#define v4 0.046\\n#define m4 2.0\\n#define r5 0.305\\n#define v5 0.016\\n#define m5 3.0\\n#define r6 0.21\\n#define v6 0.0038\\n#define m6 4.0\\nfloat roughnessToMip(float roughness) {\\n  float mip = 0.0;\\n  if (roughness >= r1) {\\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\\n  } else if (roughness >= r4) {\\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\\n  } else if (roughness >= r5) {\\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\\n  } else if (roughness >= r6) {\\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\\n  } else {\\n    mip = -2.0 * log2(1.16 * roughness);  }\\n  return mip;\\n}\\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\\n  float mipF = fract(mip);\\n  float mipInt = floor(mip);\\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\\n  if (mipF == 0.0) {\\n    return vec4(color0, 1.0);\\n  } else {\\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\\n    return vec4(mix(color0, color1, mipF), 1.0);\\n  }\\n}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec2 sampleUV = equirectUv( reflectVec );\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV = equirectUv( reflectVec );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3\\tdiffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 1.0 },\n\t\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\ttoon: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatMap: { value: null },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\ttransparency: { value: 0 },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.isScene === true ? scene.background : null;\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = background.isWebGLCubeRenderTarget ? background.texture : background;\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = texture;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== texture.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Takahiro / https://github.com/takahirox\n\t */\n\n\tfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\n\t\tvar extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\t\tvar vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\t\tvar bindingStates = {};\n\n\t\tvar defaultState = createBindingState( null );\n\t\tvar currentState = defaultState;\n\n\t\tfunction setup( object, material, program, geometry, index ) {\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( vaoAvailable ) {\n\n\t\t\t\tvar state = getBindingState( geometry, program, material );\n\n\t\t\t\tif ( currentState !== state ) {\n\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate( geometry );\n\n\t\t\t\tif ( updateBuffers ) { saveCache( geometry ); }\n\n\t\t\t} else {\n\n\t\t\t\tvar wireframe = ( material.wireframe === true );\n\n\t\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\t\tupdateBuffers = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh === true ) {\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tgl.bindBuffer( 34963, attributes.get( index ).buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\n\t\t\tif ( capabilities.isWebGL2 ) { return gl.createVertexArray(); }\n\n\t\t\treturn extension.createVertexArrayOES();\n\n\t\t}\n\n\t\tfunction bindVertexArrayObject( vao ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) { return gl.bindVertexArray( vao ); }\n\n\t\t\treturn extension.bindVertexArrayOES( vao );\n\n\t\t}\n\n\t\tfunction deleteVertexArrayObject( vao ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) { return gl.deleteVertexArray( vao ); }\n\n\t\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t\t}\n\n\t\tfunction getBindingState( geometry, program, material ) {\n\n\t\t\tvar wireframe = ( material.wireframe === true );\n\n\t\t\tvar programMap = bindingStates[ geometry.id ];\n\n\t\t\tif ( programMap === undefined ) {\n\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t\t}\n\n\t\t\tvar stateMap = programMap[ program.id ];\n\n\t\t\tif ( stateMap === undefined ) {\n\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t\t}\n\n\t\t\tvar state = stateMap[ wireframe ];\n\n\t\t\tif ( state === undefined ) {\n\n\t\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\t\tstateMap[ wireframe ] = state;\n\n\t\t\t}\n\n\t\t\treturn state;\n\n\t\t}\n\n\t\tfunction createBindingState( vao ) {\n\n\t\t\tvar newAttributes = [];\n\t\t\tvar enabledAttributes = [];\n\t\t\tvar attributeDivisors = [];\n\n\t\t\tfor ( var i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\t\t\t\tenabledAttributes[ i ] = 0;\n\t\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t\t}\n\n\t\t\treturn {\n\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction needsUpdate( geometry ) {\n\n\t\t\tvar cachedAttributes = currentState.attributes;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( Object.keys( cachedAttributes ).length !== Object.keys( geometryAttributes ).length ) { return true; }\n\n\t\t\tfor ( var key in geometryAttributes ) {\n\n\t\t\t\tvar cachedAttribute = cachedAttributes[ key ];\n\t\t\t\tvar geometryAttribute = geometryAttributes[ key ];\n\n\t\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) { return true; }\n\n\t\t\t\tif ( cachedAttribute.data !== geometryAttribute.data ) { return true; }\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfunction saveCache( geometry ) {\n\n\t\t\tvar cache = {};\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif ( attribute.data ) {\n\n\t\t\t\t\tdata.data = attribute.data;\n\n\t\t\t\t}\n\n\t\t\t\tcache[ key ] = data;\n\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\n\t\t}\n\n\t\tfunction initAttributes() {\n\n\t\t\tvar newAttributes = currentState.newAttributes;\n\n\t\t\tfor ( var i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\t\t\tvar attributeDivisors = currentState.attributeDivisors;\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor ( var i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n\n\t\t\tif ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n\n\t\t\t\tgl.vertexAttribIPointer( index, size, type, normalized, stride, offset );\n\n\t\t\t} else {\n\n\t\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tinitAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\tvertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\tvertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute$1 = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute$1 === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer$1 = attribute$1.buffer;\n\t\t\t\t\t\tvar type$1 = attribute$1.type;\n\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer$1 );\n\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 0, 4, type$1, false, 64, 0 );\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 1, 4, type$1, false, 64, 16 );\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 2, 4, type$1, false, 64, 32 );\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 3, 4, type$1, false, 64, 48 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\treset();\n\n\t\t\tfor ( var geometryId in bindingStates ) {\n\n\t\t\t\tvar programMap = bindingStates[ geometryId ];\n\n\t\t\t\tfor ( var programId in programMap ) {\n\n\t\t\t\t\tvar stateMap = programMap[ programId ];\n\n\t\t\t\t\tfor ( var wireframe in stateMap ) {\n\n\t\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\t\tif ( bindingStates[ geometry.id ] === undefined ) { return; }\n\n\t\t\tvar programMap = bindingStates[ geometry.id ];\n\n\t\t\tfor ( var programId in programMap ) {\n\n\t\t\t\tvar stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( var wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometry.id ];\n\n\t\t}\n\n\t\tfunction releaseStatesOfProgram( program ) {\n\n\t\t\tfor ( var geometryId in bindingStates ) {\n\n\t\t\t\tvar programMap = bindingStates[ geometryId ];\n\n\t\t\t\tif ( programMap[ program.id ] === undefined ) { continue; }\n\n\t\t\t\tvar stateMap = programMap[ program.id ];\n\n\t\t\t\tfor ( var wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ program.id ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\tresetDefaultState();\n\n\t\t\tif ( currentState === defaultState ) { return; }\n\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t}\n\n\t\t// for backward-compatilibity\n\n\t\tfunction resetDefaultState() {\n\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this;\n\n\t\tvar globalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false;\n\n\t\tvar plane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\t\tvar dstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name$1 in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name$1 ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array$1 = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = ( array$1.length / 3 ) - 1; i$1 < l$1; i$1 += 3 ) {\n\n\t\t\t\t\tvar a$1 = i$1 + 0;\n\t\t\t\t\tvar b$1 = i$1 + 1;\n\t\t\t\t\tvar c$1 = i$1 + 2;\n\n\t\t\t\t\tindices.push( a$1, b$1, b$1, c$1, c$1, a$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction numericalSort( a, b ) {\n\n\t\treturn a[ 0 ] - b[ 0 ];\n\n\t}\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tvar workInfluences = [];\n\n\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t\t}\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i$1 = 0; i$1 < length; i$1 ++ ) {\n\n\t\t\t\tvar influence = influences[ i$1 ];\n\n\t\t\t\tinfluence[ 0 ] = i$1;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i$1 ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( var i$2 = 0; i$2 < 8; i$2 ++ ) {\n\n\t\t\t\tif ( i$2 < length && influences[ i$2 ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i$2 ][ 0 ] = influences[ i$2 ][ 0 ];\n\t\t\t\t\tworkInfluences[ i$2 ][ 1 ] = influences[ i$2 ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i$2 ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i$2 ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i$3 = 0; i$3 < 8; i$3 ++ ) {\n\n\t\t\t\tvar influence$1 = workInfluences[ i$3 ];\n\t\t\t\tvar index = influence$1[ 0 ];\n\t\t\t\tvar value = influence$1[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i$3 ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i$3, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i$3 ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i$3, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i$3 ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i$3 ) !== undefined ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i$3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i$3 ) !== undefined ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i$3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i$3 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateMap = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\t/**\n\t * @author Artur Trzesiok\n\t */\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// uint\n\n\tfunction setValueV1ui( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1ui( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t\tcase 0x1405: return setValueV1ui; // UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\t\tvar id = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map;\n\t\t\t\tvar next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\t\ttoneMappingName = 'Linear';\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( parameters ) {\n\n\t\tvar chunks = [\n\t\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}[\\s]+?#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string\n\t\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n\t}\n\n\tfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\t\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\t\treturn loopReplacer( match, start, end, snippet );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = parameters.defines;\n\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( parameters.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( parameters.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Clean up\n\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities, bindingStates ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar precision = capabilities.precision;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\"\n\t\t];\n\n\t\tfunction getShaderObject( material, shaderID ) {\n\n\t\t\tvar shaderobject;\n\n\t\t\tif ( shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ shaderID ];\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.name || material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.name || material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn shaderobject;\n\n\t\t}\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tfunction getParameters( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar shaderobject = getShaderObject( material, shaderID );\n\t\t\tmaterial.onBeforeCompile( shaderobject, renderer );\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: shaderobject.name,\n\n\t\t\t\tuniforms: shaderobject.uniforms,\n\t\t\t\tvertexShader: shaderobject.vertexShader,\n\t\t\t\tfragmentShader: shaderobject.fragmentShader,\n\t\t\t\tdefines: material.defines,\n\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial,\n\t\t\t\tisShaderMaterial: material.isShaderMaterial,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\t\tenvMap: !! envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !! material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !! material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,\n\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t}\n\n\t\tfunction getProgramCacheKey( parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( parameters.fragmentShader );\n\t\t\t\tarray.push( parameters.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in parameters.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parameters.isRawShaderMaterial === undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t\tarray.push( renderer.outputEncoding );\n\t\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\t}\n\n\t\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\t\treturn array.join();\n\n\t\t}\n\n\t\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction releaseProgram( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }\n\n\t\t}\n\n\t\tfunction finish() {\n\n\t\t\t// Clear references from inactive renderItems in the list\n\n\t\t\tfor ( var i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\t\tvar renderItem = renderItems[ i ];\n\n\t\t\t\tif ( renderItem.id === null ) { break; }\n\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\tlists.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction ShadowUniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar shadowCache = ShadowUniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i$1 = 0, l = lights.length; i$1 < l; i$1 ++ ) {\n\n\t\t\t\tvar light = lights[ i$1 ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms$1 = cache.get( light );\n\n\t\t\t\t\tuniforms$1.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$1.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms$1.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms$1.distance = distance;\n\n\t\t\t\t\tuniforms$1.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms$1.direction.sub( vector3 );\n\t\t\t\t\tuniforms$1.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms$1.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms$1.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms$1.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow$1 = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms$1 = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms$1.shadowBias = shadow$1.bias;\n\t\t\t\t\t\tshadowUniforms$1.shadowNormalBias = shadow$1.normalBias;\n\t\t\t\t\t\tshadowUniforms$1.shadowRadius = shadow$1.radius;\n\t\t\t\t\t\tshadowUniforms$1.shadowMapSize = shadow$1.mapSize;\n\n\t\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms$1;\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms$1;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms$2 = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms$2.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms$2.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$2.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms$2.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms$2.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms$2.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms$2.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms$2;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms$3 = cache.get( light );\n\n\t\t\t\t\tuniforms$3.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$3.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms$3.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms$3.distance = light.distance;\n\t\t\t\t\tuniforms$3.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow$2 = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms$2 = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms$2.shadowBias = shadow$2.bias;\n\t\t\t\t\t\tshadowUniforms$2.shadowNormalBias = shadow$2.normalBias;\n\t\t\t\t\t\tshadowUniforms$2.shadowRadius = shadow$2.radius;\n\t\t\t\t\t\tshadowUniforms$2.shadowMapSize = shadow$2.mapSize;\n\t\t\t\t\t\tshadowUniforms$2.shadowCameraNear = shadow$2.camera.near;\n\t\t\t\t\t\tshadowUniforms$2.shadowCameraFar = shadow$2.camera.far;\n\n\t\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms$2;\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms$3;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms$4 = cache.get( light );\n\n\t\t\t\t\tuniforms$4.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$4.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms$4.direction.normalize();\n\n\t\t\t\t\tuniforms$4.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms$4.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms$4;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\trenderStates.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum();\n\n\t\tvar _shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) { continue; }\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars$1 = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars$1 );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial$1 = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial$1, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\t} catch ( err ) {\n\n\t\t\t// Ignore any errors\n\n\t\t}\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tif ( internalFormatName !== null ) {\n\n\t\t\t\tif ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) { _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer ); }\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i$1 = 0; i$1 < 6; i$1 ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i$1 ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i$1, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$1, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i$2 = 0; i$2 < 6; i$2 ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, 0, glInternalFormat, cubeImage[ i$2 ].width, cubeImage[ i$2 ].height, 0, glFormat, glType, cubeImage[ i$2 ].data );\n\n\t\t\t\t\t\t\tfor ( var j$1 = 0; j$1 < mipmaps.length; j$1 ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap$1 = mipmaps[ j$1 ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap$1.image[ i$2 ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, j$1 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, 0, glInternalFormat, glFormat, glType, cubeImage[ i$2 ] );\n\n\t\t\t\t\t\t\tfor ( var j$2 = 0; j$2 < mipmaps.length; j$2 ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap$2 = mipmaps[ j$2 ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, j$2 + 1, glInternalFormat, glFormat, glType, mipmap$2.image[ i$2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format );\n\n\t\t\tvar glType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap;\n\t\t\tvar mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i$1 = 0, il$1 = mipmaps.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i$1 ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i$1, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i$1, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = mipmaps.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i$2 ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i$2, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples$1 = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples$1, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat$1 = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples$2 = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples$2, glInternalFormat$1, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat$1, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {\n\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t\t}\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < 6; i$1 ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i$1 ], renderTarget, 36064, 34069 + i$1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLCubeRenderTarget\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\t// WebGL2 formats.\n\n\t\t\tif ( p === RedIntegerFormat ) { return 36244; }\n\t\t\tif ( p === RGFormat ) { return 33319; }\n\t\t\tif ( p === RGIntegerFormat ) { return 33320; }\n\t\t\tif ( p === RGBIntegerFormat ) { return 36248; }\n\t\t\tif ( p === RGBAIntegerFormat ) { return 36249; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_ETC2_Format ) { return extension.COMPRESSED_RGB8_ETC2; }\n\t\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) { return extension.COMPRESSED_RGBA8_ETC2_EAC; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebXRController() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\n\t}\n\n\tObject.assign( WebXRController.prototype, {\n\n\t\tconstructor: WebXRController,\n\n\t\tgetTargetRaySpace: function () {\n\n\t\t\tif ( this._targetRay === null ) {\n\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\n\t\t},\n\n\t\tgetGripSpace: function () {\n\n\t\t\tif ( this._grip === null ) {\n\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn this._grip;\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._targetRay !== null ) {\n\n\t\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t\t}\n\n\t\t\tif ( this._grip !== null ) {\n\n\t\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function ( inputSource ) {\n\n\t\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\tif ( this._targetRay !== null ) {\n\n\t\t\t\tthis._targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\tif ( this._grip !== null ) {\n\n\t\t\t\tthis._grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdate: function ( inputSource, frame, referenceSpace ) {\n\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\n\t\t\tvar targetRay = this._targetRay;\n\t\t\tvar grip = this._grip;\n\n\t\t\tif ( inputSource ) {\n\n\t\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t\t}\n\n\t\t\tif ( grip !== null ) {\n\n\t\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\tvar framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameras = [ cameraL, cameraR ];\n\n\t\tvar cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tvar controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tvar controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: event.type } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tcontroller.disconnect( inputSource );\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t//\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.isPresenting = true;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tgl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t};\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources( event ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( var i$1 = 0; i$1 < event.removed.length; i$1 ++ ) {\n\n\t\t\t\tvar inputSource = event.removed[ i$1 ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( var i$2 = 0; i$2 < event.added.length; i$2 ++ ) {\n\n\t\t\t\tvar inputSource$1 = event.added[ i$2 ];\n\t\t\t\tvar controller$1 = inputSourcesMap.get( inputSource$1 );\n\n\t\t\t\tif ( controller$1 ) {\n\n\t\t\t\t\tcontroller$1.dispatchEvent( { type: 'connected', data: inputSource$1 } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * @author jsantell / https://www.jsantell.com/\n\t\t *\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + ( ipd - xOffset );\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i$1 = 0, l = children.length; i$1 < l; i$1 ++ ) {\n\n\t\t\t\tchildren[ i$1 ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tvar cameraVRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\n\t\t\t\t\tvar camera = cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i$1 = 0; i$1 < controllers.length; i$1 ++ ) {\n\n\t\t\t\tvar controller = controllers[ i$1 ];\n\t\t\t\tvar inputSource = inputSources[ i$1 ];\n\n\t\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLMaterials( properties ) {\n\n\t\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshMaterialUniforms( uniforms, material, environment, pixelRatio, height ) {\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsLambert( uniforms, material );\n\n\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material, environment );\n\n\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( uniforms, material, environment );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsDepth( uniforms, material );\n\n\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsNormal( uniforms, material );\n\n\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\tuniforms.color.value.copy( material.color );\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsCommon( uniforms, material, environment ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tif ( envMap ) {\n\n\t\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t\t} else if ( material.lightMap ) {\n\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material, environment ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap || environment ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material, environment ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transparency.value = material.transparency;\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\n\t}\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.outputEncoding = LinearEncoding;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this;\n\n\t\tvar _isContextLost = false;\n\n\t\t// internal state cache\n\n\t\tvar _framebuffer = null;\n\n\t\tvar _currentActiveCubeFace = 0;\n\t\tvar _currentActiveMipmapLevel = 0;\n\t\tvar _currentRenderTarget = null;\n\t\tvar _currentFramebuffer = null;\n\t\tvar _currentMaterialId = - 1;\n\n\t\tvar _currentCamera = null;\n\t\tvar _currentArrayCamera = null;\n\n\t\tvar _currentViewport = new Vector4();\n\t\tvar _currentScissor = new Vector4();\n\t\tvar _currentScissorTest = null;\n\n\t\t//\n\n\t\tvar _width = _canvas.width;\n\t\tvar _height = _canvas.height;\n\n\t\tvar _pixelRatio = 1;\n\t\tvar _opaqueSort = null;\n\t\tvar _transparentSort = null;\n\n\t\tvar _viewport = new Vector4( 0, 0, _width, _height );\n\t\tvar _scissor = new Vector4( 0, 0, _width, _height );\n\t\tvar _scissorTest = false;\n\n\t\t// frustum\n\n\t\tvar _frustum = new Frustum();\n\n\t\t// clipping\n\n\t\tvar _clipping = new WebGLClipping();\n\t\tvar _clippingEnabled = false;\n\t\tvar _localClippingEnabled = false;\n\n\t\t// camera matrices cache\n\n\t\tvar _projScreenMatrix = new Matrix4();\n\n\t\tvar _vector3 = new Vector3();\n\n\t\tvar _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl = _context;\n\n\t\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\t\tfor ( var i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\t\tvar contextName = contextNames[ i ];\n\t\t\t\tvar context = _canvas.getContext( contextName, contextAttributes );\n\t\t\t\tif ( context !== null ) { return context; }\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tvar contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\t\tcontextNames.shift();\n\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\t\tif ( _gl === null ) {\n\n\t\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, materials, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'OES_vertex_array_object' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities, bindingStates );\n\t\t\tmaterials = new WebGLMaterials( properties );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tvar xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tbindingStates.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) { scene = _emptyScene; } // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t} else if ( index.count === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t}\n\n\t\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tvar instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tvar compiled = new WeakMap();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material ) {\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\t\tvar material2 = material[ i ];\n\n\t\t\t\t\t\t\tif ( compiled.has( material2 ) === false ) {\n\n\t\t\t\t\t\t\t\tinitMaterial( material2, scene, object );\n\t\t\t\t\t\t\t\tcompiled.set( material2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( compiled.has( material ) === false ) {\n\n\t\t\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\t\t\tcompiled.set( material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( xr.isPresenting ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost === true ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\t\tcamera = xr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\t\t\tif ( scene.isScene === true ) { scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget ); }\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled === true ) { _clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled === true ) { _clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset === true ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( opaqueObjects.length > 0 ) { renderObjects( opaqueObjects, scene, camera ); }\n\t\t\tif ( transparentObjects.length > 0 ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t//\n\n\t\t\tif ( scene.isScene === true ) { scene.onAfterRender( _this, scene, camera ); }\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry$1 = objects.update( object );\n\t\t\t\t\t\tvar material$1 = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material$1 ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry$1.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material$1[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry$1, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material$1.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry$1, material$1, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i$1 = 0, l$1 = children.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\tprojectObject( children[ i$1 ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\t\tvar overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tbindingStates.reset();\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, scene, object ) {\n\n\t\t\tif ( scene.isScene !== true ) { scene = _emptyScene; } // scene could be a Mesh, Line, Points, ...\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < _this.maxMorphNormals; i$1 ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i$1 ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, material, object ) {\n\n\t\t\tif ( scene.isScene !== true ) { scene = _emptyScene; } // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled === true ) {\n\n\t\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, environment, _pixelRatio, _height );\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar _webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tframebuffer = _webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = _webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\t// As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\t\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t\t_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Generate mipmaps only when copying level 0\n\t\t\tif ( level === 0 && dstTexture.generateMipmaps ) { _gl.generateMipmap( 3553 ); }\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGL1Renderer( parameters ) {\n\n\t\tWebGLRenderer.call( this, parameters );\n\n\t}\n\n\tWebGL1Renderer.prototype = Object.assign( Object.create( WebGLRenderer.prototype ), {\n\n\t\tconstructor: WebGL1Renderer,\n\n\t\tisWebGL1Renderer: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tObject.assign( FogExp2.prototype, {\n\n\t\tisFogExp2: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new FogExp2( this.color, this.density );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tObject.assign( Fog.prototype, {\n\n\t\tisFog: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new Fog( this.color, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function ( data ) {\n\n\t\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\t\tdata.arrayBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\n\t\t\t}\n\n\t\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t\t}\n\n\t\t\tvar array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\t\tvar ib = new InterleavedBuffer( array, this.stride );\n\t\t\tib.setUsage( this.usage );\n\n\t\t\treturn ib;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( data ) {\n\n\t\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\t\tdata.arrayBuffers = {};\n\n\t\t\t}\n\n\t\t\t// generate UUID for array buffer if necessary\n\n\t\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\n\t\t\t}\n\n\t\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$6.x = this.getX( i );\n\t\t\t\t_vector$6.y = this.getY( i );\n\t\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function ( data ) {\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0; i < this.count; i ++ ) {\n\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor ( var j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( data ) {\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0; i < this.count; i ++ ) {\n\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor ( var j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// deinterleave data and save it as an ordinary buffer attribute for now\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\t// save as true interlaved attribtue\n\n\t\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\tthis.material = source.material;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tvar l;\n\n\t\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCurrentLevel: function () {\n\n\t\t\treturn this._currentLevel;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 ) / camera.zoom;\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tMesh.prototype.copy.call( this, source );\n\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\t\tthis.skeleton = source.skeleton;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tboneTransform: ( function () {\n\n\t\t\tvar basePosition = new Vector3();\n\n\t\t\tvar skinIndex = new Vector4();\n\t\t\tvar skinWeight = new Vector4();\n\n\t\t\tvar vector = new Vector3();\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function ( index, target ) {\n\n\t\t\t\tvar skeleton = this.skeleton;\n\t\t\t\tvar geometry = this.geometry;\n\n\t\t\t\tskinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t\t\tskinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t\t\tbasePosition.fromBufferAttribute( geometry.attributes.position, index ).applyMatrix4( this.bindMatrix );\n\n\t\t\t\ttarget.set( 0, 0, 0 );\n\n\t\t\t\tfor ( var i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\tvar weight = skinWeight.getComponent( i );\n\n\t\t\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\t\t\tvar boneIndex = skinIndex.getComponent( i );\n\n\t\t\t\t\t\tmatrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\t\t\ttarget.addScaledVector( vector.copy( basePosition ).applyMatrix4( matrix ), weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t\t\t};\n\n\t\t}() )\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.bones.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tvar bone$1 = this.bones[ i$1 ];\n\n\t\t\t\tif ( bone$1 ) {\n\n\t\t\t\t\tif ( bone$1.parent && bone$1.parent.isBone ) {\n\n\t\t\t\t\t\tbone$1.matrix.getInverse( bone$1.parent.matrixWorld );\n\t\t\t\t\t\tbone$1.matrix.multiply( bone$1.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone$1.matrix.copy( bone$1.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone$1.matrix.decompose( bone$1.position, bone$1.quaternion, bone$1.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tdispose: function ( ) {\n\n\t\t\tif ( this.boneTexture ) {\n\n\t\t\t\tthis.boneTexture.dispose();\n\n\t\t\t\tthis.boneTexture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tMesh.prototype.copy.call( this, source );\n\n\t\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\t\t\tthis.count = source.count;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tfor ( var i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar intersect = _instanceIntersects[ i ];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances$1 = geometry.lineDistances;\n\n\t\t\t\tlineDistances$1[ 0 ] = 0;\n\n\t\t\t\tfor ( var i$1 = 1, l$1 = vertices.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\tlineDistances$1[ i$1 ] = lineDistances$1[ i$1 - 1 ];\n\t\t\t\t\tlineDistances$1[ i$1 ] += vertices[ i$1 - 1 ].distanceTo( vertices[ i$1 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i$1 = 0, l$1 = positions.length / 3 - 1; i$1 < l$1; i$1 += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i$1 );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i$1 + 3 );\n\n\t\t\t\t\t\tvar distSq$1 = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq$1 > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance$1 = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance$1 < raycaster.near || distance$1 > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance$1,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i$1,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i$2 = 0; i$2 < nbVertices - 1; i$2 += step ) {\n\n\t\t\t\t\tvar distSq$2 = _ray$1.distanceSqToSegment( vertices[ i$2 ], vertices[ i$2 + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq$2 > localThresholdSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance$2 = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance$2 < raycaster.near || distance$2 > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance$2,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i$2,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tvar name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances$1 = geometry.lineDistances;\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = vertices.length; i$1 < l$1; i$1 += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i$1 ] );\n\t\t\t\t\t_end$1.copy( vertices[ i$1 + 1 ] );\n\n\t\t\t\t\tlineDistances$1[ i$1 ] = ( i$1 === 0 ) ? 0 : lineDistances$1[ i$1 - 1 ];\n\t\t\t\t\tlineDistances$1[ i$1 + 1 ] = lineDistances$1[ i$1 ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i$1 = 0, l = positions.length / 3; i$1 < l; i$1 ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i$1 * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i$1, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i$2 = 0, l$1 = vertices.length; i$2 < l$1; i$2 ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i$2 ], i$2, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tvar name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar edge = [ 0, 0 ], edges = {};\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tvar edge1 = face[ keys[ j ] ];\n\t\t\t\t\tvar edge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tvar key = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( var key$1 in edges ) {\n\n\t\t\t\tvar e = edges[ key$1 ];\n\n\t\t\t\tvar vertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar vertex$1 = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar indices = geometry.index;\n\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i$1 = start, l$1 = ( start + count ); i$1 < l$1; i$1 += 3 ) {\n\n\t\t\t\t\t\tfor ( var j$1 = 0; j$1 < 3; j$1 ++ ) {\n\n\t\t\t\t\t\t\tvar edge1$1 = indices.getX( i$1 + j$1 );\n\t\t\t\t\t\t\tvar edge2$1 = indices.getX( i$1 + ( j$1 + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1$1, edge2$1 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1$1, edge2$1 );\n\n\t\t\t\t\t\t\tvar key$2 = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key$2 ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key$2 ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( var key$3 in edges ) {\n\n\t\t\t\t\tvar e$1 = edges[ key$3 ];\n\n\t\t\t\t\tvertex$1.fromBufferAttribute( position, e$1.index1 );\n\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\tvertex$1.fromBufferAttribute( position, e$1.index2 );\n\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tvar position$1 = geometry.attributes.position;\n\n\t\t\t\tfor ( var i$2 = 0, l$2 = ( position$1.count / 3 ); i$2 < l$2; i$2 ++ ) {\n\n\t\t\t\t\tfor ( var j$2 = 0; j$2 < 3; j$2 ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tvar index1 = 3 * i$2 + j$2;\n\t\t\t\t\t\tvertex$1.fromBufferAttribute( position$1, index1 );\n\t\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\t\tvar index2 = 3 * i$2 + ( ( j$2 + 1 ) % 3 );\n\t\t\t\t\t\tvertex$1.fromBufferAttribute( position$1, index2 );\n\t\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( var i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( var j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( var i$1 = 0; i$1 < stacks; i$1 ++ ) {\n\n\t\t\tfor ( var j$1 = 0; j$1 < slices; j$1 ++ ) {\n\n\t\t\t\tvar a = i$1 * sliceCount + j$1;\n\t\t\t\tvar b = i$1 * sliceCount + j$1 + 1;\n\t\t\t\tvar c = ( i$1 + 1 ) * sliceCount + j$1 + 1;\n\t\t\t\tvar d = ( i$1 + 1 ) * sliceCount + j$1;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( var i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( var i$1 = 0; i$1 < cols; i$1 ++ ) {\n\n\t\t\t\tfor ( var j$1 = 0; j$1 < 2 * ( cols - i$1 ) - 1; j$1 ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j$1 / 2 );\n\n\t\t\t\t\tif ( j$1 % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i$1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i$1 + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i$1 ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i$1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i$1 + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i$1 + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( var i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( var j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( var i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\tTubeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( var j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( var j$1 = 1; j$1 <= tubularSegments; j$1 ++ ) {\n\n\t\t\tfor ( var i$1 = 1; i$1 <= radialSegments; i$1 ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j$1 - 1 ) + ( i$1 - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j$1 + ( i$1 - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j$1 + i$1;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j$1 - 1 ) + i$1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( var j$1 = 1; j$1 <= radialSegments; j$1 ++ ) {\n\n\t\t\tfor ( var i$1 = 1; i$1 <= tubularSegments; i$1 ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j$1 + i$1 - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j$1 - 1 ) + i$1 - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j$1 - 1 ) + i$1;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j$1 + i$1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn filterPoints( p );\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [],\n\t\t\ti, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\n\t\t\t// filter collinear points around the cuts\n\t\t\tfilterPoints( outerNode, outerNode.next );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m; } // hole touches outer segment; pick leftmost endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m;\n\n\t\tdo {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== stop );\n\n\t\treturn m;\n\n\t}\n\n\t// whether sector in vertex m contains sector in vertex p in the same coordinates\n\tfunction sectorContainsSector( m, p ) {\n\n\t\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t\t( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t\t( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\n\t\t\t( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n\t\t\t( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n\t\t\tequals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tvar o1 = sign( area( p1, q1, p2 ) );\n\t\tvar o2 = sign( area( p1, q1, q2 ) );\n\t\tvar o3 = sign( area( p2, q2, p1 ) );\n\t\tvar o4 = sign( area( p2, q2, q1 ) );\n\n\t\tif ( o1 !== o2 && o3 !== o4 ) { return true; } // general case\n\n\t\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) { return true; } // p1, q1 and p2 are collinear and p2 lies on p1q1\n\t\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) { return true; } // p1, q1 and q2 are collinear and q2 lies on p1q1\n\t\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) { return true; } // p2, q2 and p1 are collinear and p1 lies on p2q2\n\t\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) { return true; } // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\n\t}\n\n\t// for collinear points p, q, r, check if point q lies on segment pr\n\tfunction onSegment( p, q, r ) {\n\n\t\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n\t}\n\n\tfunction sign( num ) {\n\n\t\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i$1 = 0; i$1 < triangles.length; i$1 += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i$1, i$1 + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tvar ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( var h$1 = 0, hl$1 = holes.length; h$1 < hl$1; h$1 ++ ) {\n\n\t\t\t\tvar ahole$1 = holes[ h$1 ];\n\n\t\t\t\tvertices = vertices.concat( ahole$1 );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [];\n\t\t\tvar oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( var h$2 = 0, hl$2 = holes.length; h$2 < hl$2; h$2 ++ ) {\n\n\t\t\t\tvar ahole$2 = holes[ h$2 ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( var i$1 = 0, il$1 = ahole$2.length, j$1 = il$1 - 1, k$1 = i$1 + 1; i$1 < il$1; i$1 ++, j$1 ++, k$1 ++ ) {\n\n\t\t\t\t\tif ( j$1 === il$1 ) { j$1 = 0; }\n\t\t\t\t\tif ( k$1 === il$1 ) { k$1 = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i$1 ] = getBevelVec( ahole$2[ i$1 ], ahole$2[ j$1 ], ahole$2[ k$1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( var b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tvar t = b / bevelSegments;\n\t\t\t\tvar z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tvar bs$1 = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( var i$2 = 0, il$2 = contour.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\tvar vert = scalePt2( contour[ i$2 ], contourMovements[ i$2 ], bs$1 );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( var h$3 = 0, hl$3 = holes.length; h$3 < hl$3; h$3 ++ ) {\n\n\t\t\t\t\tvar ahole$3 = holes[ h$3 ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h$3 ];\n\n\t\t\t\t\tfor ( var i$3 = 0, il$3 = ahole$3.length; i$3 < il$3; i$3 ++ ) {\n\n\t\t\t\t\t\tvar vert$1 = scalePt2( ahole$3[ i$3 ], oneHoleMovements[ i$3 ], bs$1 );\n\n\t\t\t\t\t\tv( vert$1.x, vert$1.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( var i$4 = 0; i$4 < vlen; i$4 ++ ) {\n\n\t\t\t\tvar vert$2 = bevelEnabled ? scalePt2( vertices[ i$4 ], verticesMovements[ i$4 ], bs ) : vertices[ i$4 ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert$2.x, vert$2.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert$2.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert$2.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( var s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( var i$5 = 0; i$5 < vlen; i$5 ++ ) {\n\n\t\t\t\t\tvar vert$3 = bevelEnabled ? scalePt2( vertices[ i$5 ], verticesMovements[ i$5 ], bs ) : vertices[ i$5 ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert$3.x, vert$3.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert$3.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert$3.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( var b$1 = bevelSegments - 1; b$1 >= 0; b$1 -- ) {\n\n\t\t\t\tvar t$1 = b$1 / bevelSegments;\n\t\t\t\tvar z$1 = bevelThickness * Math.cos( t$1 * Math.PI / 2 );\n\t\t\t\tvar bs$2 = bevelSize * Math.sin( t$1 * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( var i$6 = 0, il$4 = contour.length; i$6 < il$4; i$6 ++ ) {\n\n\t\t\t\t\tvar vert$4 = scalePt2( contour[ i$6 ], contourMovements[ i$6 ], bs$2 );\n\t\t\t\t\tv( vert$4.x, vert$4.y, depth + z$1 );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( var h$4 = 0, hl$4 = holes.length; h$4 < hl$4; h$4 ++ ) {\n\n\t\t\t\t\tvar ahole$4 = holes[ h$4 ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h$4 ];\n\n\t\t\t\t\tfor ( var i$7 = 0, il$5 = ahole$4.length; i$7 < il$5; i$7 ++ ) {\n\n\t\t\t\t\t\tvar vert$5 = scalePt2( ahole$4[ i$7 ], oneHoleMovements[ i$7 ], bs$2 );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert$5.x, vert$5.y, depth + z$1 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert$5.x, vert$5.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z$1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( var i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( var i$1 = 0; i$1 < flen; i$1 ++ ) {\n\n\t\t\t\t\t\tvar face$1 = faces[ i$1 ];\n\t\t\t\t\t\tf3( face$1[ 0 ] + offset, face$1[ 1 ] + offset, face$1[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( var i$2 = 0; i$2 < flen; i$2 ++ ) {\n\n\t\t\t\t\t\tvar face$2 = faces[ i$2 ];\n\t\t\t\t\t\tf3( face$2[ 2 ], face$2[ 1 ], face$2[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( var i$3 = 0; i$3 < flen; i$3 ++ ) {\n\n\t\t\t\t\t\tvar face$3 = faces[ i$3 ];\n\t\t\t\t\t\tf3( face$3[ 0 ] + vlen * steps, face$3[ 1 ] + vlen * steps, face$3[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tvar ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tvar j = i;\n\t\t\t\t\tvar k = i - 1;\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( var s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tvar uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( var ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var iy$1 = 0; iy$1 < heightSegments; iy$1 ++ ) {\n\n\t\t\tfor ( var ix$1 = 0; ix$1 < widthSegments; ix$1 ++ ) {\n\n\t\t\t\tvar a = grid[ iy$1 ][ ix$1 + 1 ];\n\t\t\t\tvar b = grid[ iy$1 ][ ix$1 ];\n\t\t\t\tvar c = grid[ iy$1 + 1 ][ ix$1 ];\n\t\t\t\tvar d = grid[ iy$1 + 1 ][ ix$1 + 1 ];\n\n\t\t\t\tif ( iy$1 !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\tif ( iy$1 !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( var i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tvar segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var j$1 = 0; j$1 < phiSegments; j$1 ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j$1 * ( thetaSegments + 1 );\n\n\t\t\tfor ( var i$1 = 0; i$1 < thetaSegments; i$1 ++ ) {\n\n\t\t\t\tvar segment$1 = i$1 + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment$1;\n\t\t\t\tvar b = segment$1 + thetaSegments + 1;\n\t\t\t\tvar c = segment$1 + thetaSegments + 2;\n\t\t\t\tvar d = segment$1 + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( var i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( var j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var i$1 = 0; i$1 < segments; i$1 ++ ) {\n\n\t\t\tfor ( var j$1 = 0; j$1 < ( points.length - 1 ); j$1 ++ ) {\n\n\t\t\t\tvar base = j$1 + i$1 * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tvar base$1 = segments * points.length * 3;\n\n\t\t\tfor ( var i$2 = 0, j$2 = 0; i$2 < points.length; i$2 ++, j$2 += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j$2 + 0 ];\n\t\t\t\tn1.y = normals[ j$2 + 1 ];\n\t\t\t\tn1.z = normals[ j$2 + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base$1 + j$2 + 0 ];\n\t\t\t\tn2.y = normals[ base$1 + j$2 + 1 ];\n\t\t\t\tn2.z = normals[ base$1 + j$2 + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j$2 + 0 ] = normals[ base$1 + j$2 + 0 ] = n.x;\n\t\t\t\tnormals[ j$2 + 1 ] = normals[ base$1 + j$2 + 1 ] = n.y;\n\t\t\t\tnormals[ j$2 + 2 ] = normals[ base$1 + j$2 + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tvar shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( var i$1 = 0, l$1 = shapeHoles.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\tvar shapeHole$1 = shapeHoles[ i$1 ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole$1 );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( var i$2 = 0, l$2 = shapeVertices.length; i$2 < l$2; i$2 ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i$2 ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( var i$3 = 0, l$3 = faces.length; i$3 < l$3; i$3 ++ ) {\n\n\t\t\t\tvar face = faces[ i$3 ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {};\n\t\tvar edge1, edge2, key;\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( var x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( var x$1 = 0; x$1 < radialSegments; x$1 ++ ) {\n\n\t\t\t\tfor ( var y$1 = 0; y$1 < heightSegments; y$1 ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y$1 ][ x$1 ];\n\t\t\t\t\tvar b = indexArray[ y$1 + 1 ][ x$1 ];\n\t\t\t\t\tvar c = indexArray[ y$1 + 1 ][ x$1 + 1 ];\n\t\t\t\t\tvar d = indexArray[ y$1 ][ x$1 + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( var x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( var x$1 = 0; x$1 <= radialSegments; x$1 ++ ) {\n\n\t\t\t\tvar u = x$1 / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( var x$2 = 0; x$2 < radialSegments; x$2 ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x$2;\n\t\t\t\tvar i = centerIndexEnd + x$2;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( var s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var i$1 = 1; i$1 <= segments; i$1 ++ ) {\n\n\t\t\tindices.push( i$1, i$1 + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.vertexTangents = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.vertexTangents = source.vertexTangents;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  clearcoat: <float>,\n\t *  clearcoatMap: new THREE.Texture( <Image> ),\n\t *  clearcoatRoughness: <float>,\n\t *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *  reflectivity: <float>,\n\t *\n\t *  sheen: <Color>,\n\t *\n\t *  transparency: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transparency = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif ( source.sheen ) {\n\n\t\t\tthis.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\n\t\t} else {\n\n\t\t\tthis.sheen = null;\n\n\t\t}\n\n\t\tthis.transparency = source.transparency;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *  gradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( Material.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i$1 = 0; i$1 < clip.tracks.length; ++ i$1 ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i$1 ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i$1 ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i$2 = 0; i$2 < clip.tracks.length; ++ i$2 ) {\n\n\t\t\t\tclip.tracks[ i$2 ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t},\n\n\t\tmakeClipAdditive: function ( targetClip, referenceFrame, referenceClip, fps ) {\n\n\t\t\tif ( referenceFrame === undefined ) { referenceFrame = 0; }\n\t\t\tif ( referenceClip === undefined ) { referenceClip = targetClip; }\n\t\t\tif ( fps === undefined || fps <= 0 ) { fps = 30; }\n\n\t\t\tvar numTracks = targetClip.tracks.length;\n\t\t\tvar referenceTime = referenceFrame / fps;\n\n\t\t\t// Make each track's values relative to the values at the reference frame\n\t\t\tvar loop = function ( i ) {\n\n\t\t\t\tvar referenceTrack = referenceClip.tracks[ i ];\n\t\t\t\tvar referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t\t\t// Skip this track if it's non-numeric\n\t\t\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) { return; }\n\n\t\t\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\t\t\tvar targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t\t\t} );\n\n\t\t\t\tif ( targetTrack === undefined ) { return; }\n\n\t\t\t\tvar valueSize = referenceTrack.getValueSize();\n\t\t\t\tvar lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tvar referenceValue = (void 0);\n\n\t\t\t\t// Find the value to subtract out of the track\n\t\t\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, 0, referenceTrack.valueSize );\n\n\t\t\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tvar startIndex = lastIndex * valueSize;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tvar interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\t\t\treferenceValue = interpolant.resultBuffer;\n\n\t\t\t\t}\n\n\t\t\t\t// Conjugate the quaternion\n\t\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t\tvar referenceQuat = new Quaternion(\n\t\t\t\t\t\treferenceValue[ 0 ],\n\t\t\t\t\t\treferenceValue[ 1 ],\n\t\t\t\t\t\treferenceValue[ 2 ],\n\t\t\t\t\t\treferenceValue[ 3 ]\n\t\t\t\t\t).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t\t\t}\n\n\t\t\t\t// Subtract the reference value from all of the track values\n\n\t\t\t\tvar numTimes = targetTrack.times.length;\n\t\t\t\tfor ( var j = 0; j < numTimes; ++ j ) {\n\n\t\t\t\t\tvar valueStart = j * valueSize;\n\n\t\t\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\t\tvalueStart,\n\t\t\t\t\t\t\treferenceValue,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\t\tvalueStart\n\t\t\t\t\t\t);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < numTracks; ++ i ) loop( i );\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\t\t\treturn targetClip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt$1 = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt$1 ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length;\n\n\t\t\tvar from = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) {\n\n\t\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\t\tfrom = to - 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i$1 = 0, n = values.length; i$1 !== n; ++ i$1 ) {\n\n\t\t\t\t\t\tvar value = values[ i$1 ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i$1, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice( this.times ),\n\t\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tvar writeIndex = 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j$1 = 0; j$1 !== stride; ++ j$1 ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j$1 ] = values[ readOffset + j$1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset$1 = lastIndex * stride, writeOffset$1 = writeIndex * stride, j$2 = 0; j$2 !== stride; ++ j$2 ) {\n\n\t\t\t\t\tvalues[ writeOffset$1 + j$2 ] = values[ readOffset$1 + j$2 ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t} else {\n\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tvar offset = i1 * stride;\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks, blendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\t\tthis.blendMode = ( blendMode !== undefined ) ? blendMode : NormalAnimationBlendMode;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks, json.blendMode );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name$1 in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name$1, animationToMorphTargets[ name$1 ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\tvar fps = animation.fps || 30;\n\t\t\tvar blendMode = animation.blendMode;\n\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tvar k = (void 0);\n\n\t\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m$1 = 0; m$1 !== animationKeys[ k ].morphTargets.length; ++ m$1 ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks, blendMode );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks;\n\t\t\tvar duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks, this.blendMode );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tloadAsync: function ( url, onProgress ) {\n\n\t\t\tvar scope = this;\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t\t} );\n\n\t\t},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( requestHeader ) {\n\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\t\t\tvar request;\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\trequest = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i$1 = 0, il$1 = callbacks.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t\t\t\tvar callback$1 = callbacks[ i$1 ];\n\t\t\t\t\t\t\tif ( callback$1.onError ) { callback$1.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io/\n\t */\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( var p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t, optionalTarget ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\t\treturn tangent;\n\n\t\t},\n\n\t\tgetTangentAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t, optionalTarget );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( var i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tvar u = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( var i$1 = 1; i$1 <= segments; i$1 ++ ) {\n\n\t\t\t\tnormals[ i$1 ] = normals[ i$1 - 1 ].clone();\n\n\t\t\t\tbinormals[ i$1 ] = binormals[ i$1 - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i$1 - 1 ], tangents[ i$1 ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\tvar theta = Math.acos( MathUtils.clamp( tangents[ i$1 - 1 ].dot( tangents[ i$1 ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i$1 ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i$1 ].crossVectors( tangents[ i$1 ], normals[ i$1 ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\tvar theta$1 = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta$1 /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta$1 = - theta$1;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i$2 = 1; i$2 <= segments; i$2 ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i$2 ].applyMatrix4( mat.makeRotationAxis( tangents[ i$2 ], theta$1 * i$2 ) );\n\t\t\t\t\tbinormals[ i$2 ].crossVectors( tangents[ i$2 ], normals[ i$2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( t, optionalTarget ) {\n\n\t\tvar tangent = optionalTarget || new Vector2();\n\n\t\ttangent.copy( this.v2 ).sub( this.v1 ).normalize();\n\n\t\treturn tangent;\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [];\n\t\t\tvar sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [];\n\t\t\tvar last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.normalBias !== 0 ) { object.normalBias = this.normalBias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tfunction SphericalHarmonics3() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tObject.assign( SphericalHarmonics3.prototype, {\n\n\t\tisSphericalHarmonics3: true,\n\n\t\tset: function ( coefficients ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tzero: function () {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\tgetAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tadd: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledSH: function ( sh, s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( sh, alpha ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcopy: function ( sh ) {\n\n\t\t\treturn this.set( sh.coefficients );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( SphericalHarmonics3, {\n\n\t\t// evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\t// band 0\n\t\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t\t// band 1\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t\t// band 2\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * A LightProbe is a source of indirect-diffuse light\n\t */\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.type = 'LightProbe';\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\t\tthis.sh.fromArray( json.sh );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.sh = this.sh.toArray();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.vertexTangents !== undefined ) { material.vertexTangents = json.vertexTangents; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) { material.alphaMap = getTexture( json.alphaMap ); }\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatMap !== undefined ) { material.clearcoatMap = getTexture( json.clearcoatMap ); }\n\t\t\tif ( json.clearcoatRoughnessMap !== undefined ) { material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap ); }\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.instanceCount = source.instanceCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.instanceCount = this.instanceCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar interleavedBufferMap = {};\n\t\t\tvar arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) { return interleavedBufferMap[ uuid ]; }\n\n\t\t\t\tvar interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tvar interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\t\tvar buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\t\tvar array = new TYPED_ARRAYS[ interleavedBuffer.type ]( buffer );\n\t\t\t\tvar ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\t\treturn ib;\n\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) { return arrayBufferMap[ uuid ]; }\n\n\t\t\t\tvar arrayBuffers = json.arrayBuffers;\n\t\t\t\tvar arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\t\tvar ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\t\treturn ab;\n\n\t\t\t}\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar bufferAttribute = (void 0);\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tvar interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar typedArray$1 = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray$1, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key$1 in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key$1 ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute$1 = attributeArray[ i ];\n\t\t\t\t\t\tvar bufferAttribute$1 = (void 0);\n\n\t\t\t\t\t\tif ( attribute$1.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar interleavedBuffer$1 = getInterleavedBuffer( json.data, attribute$1.data );\n\t\t\t\t\t\t\tbufferAttribute$1 = new InterleavedBufferAttribute( interleavedBuffer$1, attribute$1.itemSize, attribute$1.offset, attribute$1.normalized );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar typedArray$2 = new TYPED_ARRAYS[ attribute$1.type ]( attribute$1.array );\n\t\t\t\t\t\t\tbufferAttribute$1 = new BufferAttribute( typedArray$2, attribute$1.itemSize, attribute$1.normalized );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attribute$1.name !== undefined ) { bufferAttribute$1.name = attribute$1.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key$1 ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i$1 = 0, n = groups.length; i$1 !== n; ++ i$1 ) {\n\n\t\t\t\t\tvar group = groups[ i$1 ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\t\t\tvar geometryShapes;\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry = (void 0);\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j$1 = 0, jl$1 = data.shapes.length; j$1 < jl$1; j$1 ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape$1 = shapes[ data.shapes[ j$1 ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape$1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tvar loader;\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tloader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path$1 = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = (void 0);\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tvar geometry, material;\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\n\t\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.normalBias !== undefined ) { object.shadow.normalBias = data.shadow.normalBias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tisImageBitmapLoader: true,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx$1 = 0, sLen$1 = newShapes.length; sIdx$1 < sLen$1; sIdx$1 ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx$1 ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx$1 !== s2Idx )\t{ toChange.push( { froms: sIdx$1, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx$1 ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i$1 = 0, il = newShapes.length; i$1 < il; i$1 ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i$1 ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i$1 ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\t// update current progress\n\n\t\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDetune: function ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDetune: function () {\n\n\t\t\treturn this.detune;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopStart: function ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopEnd: function ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0;\n\t\t\tvar data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride;\n\n\t\t\tvar currentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// accumulate data in the 'incoming' region into 'add'\n\t\taccumulateAdditive: function ( weight ) {\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t\t// add = identity\n\n\t\t\t\tthis._setIdentity();\n\n\t\t\t}\n\n\t\t\t// add := add + incoming * weight\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t\t// accuN := accuN + additive accuN\n\n\t\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\t// Add to identity for additive\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\t\t_setAdditiveIdentityNumeric: function () {\n\n\t\t\tvar startIndex = this._addIndex * this.valueSize;\n\t\t\tvar endIndex = startIndex + this.valueSize;\n\n\t\t\tfor ( var i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\t\tthis.buffer[ i ] = 0;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_setAdditiveIdentityQuaternion: function () {\n\n\t\t\tthis._setAdditiveIdentityNumeric();\n\t\t\tthis.buffer[ this._addIndex * 4 + 3 ] = 1;\n\n\t\t},\n\n\t\t_setAdditiveIdentityOther: function () {\n\n\t\t\tvar startIndex = this._origIndex * this.valueSize;\n\t\t\tvar targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor ( var i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t\t}\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_slerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar workOffset = this._workIndex * stride;\n\n\t\t\t// Store result in intermediate buffer offset\n\t\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t\t// Slerp to the intermediate result\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tvar knownObject = undefined,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tvar index = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j$1 = 0, m$1 = nBindings; j$1 !== m$1; ++ j$1 ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j$1 ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\t\tvar binding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j$1 ], parsedPaths[ j$1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tvar nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tvar nCachedObjects = this.nCachedObjects_,\n\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex$1 = -- nObjects,\n\t\t\t\t\t\t\tlastObject$1 = objects[ lastIndex$1 ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject$1.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject$1;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j$1 = 0, m$1 = nBindings; j$1 !== m$1; ++ j$1 ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath$1 = bindings[ j$1 ];\n\n\t\t\t\t\t\t\tbindingsForPath$1[ index ] = bindingsForPath$1[ lastIndex$1 ];\n\t\t\t\t\t\t\tbindingsForPath$1.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot, blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\t\tthis.blendMode = blendMode || clip.blendMode;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0; // restart clip\n\t\t\tthis._loopCount = - 1;// forget previous loops\n\t\t\tthis._startTime = null;// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer,\n\t\t\t\tnow = mixer.time,\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tfor ( var j$1 = 0, m$1 = interpolants.length; j$1 !== m$1; ++ j$1 ) {\n\n\t\t\t\t\t\t\tinterpolants[ j$1 ].evaluate( clipTime );\n\t\t\t\t\t\t\tpropertyMixers[ j$1 ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\t\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\t\tvar bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name;\n\n\t\t\t\tvar binding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tvar actionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tvar bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\t\tvar interpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot, blendMode ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid;\n\n\t\t\tvar clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\t\tvar clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\t\tvar actionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( blendMode === undefined ) {\n\n\t\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor ( var i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\t\tactions[ i ].stop();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i$1 = 0; i$1 !== nBindings; ++ i$1 ) {\n\n\t\t\t\tbindings[ i$1 ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function ( data ) {\n\n\t\t\tvar ib = InterleavedBuffer.prototype.clone.call( this, data );\n\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\treturn ib;\n\n\t\t},\n\n\t\ttoJSON: function ( data ) {\n\n\t\t\tvar json = InterleavedBuffer.prototype.toJSON.call( this, data );\n\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\t\tobject.raycast( raycaster, intersects );\n\n\t\t}\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector$7 = new Vector2();\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t\t_startP.subVectors( point, this.start );\n\t\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = MathUtils.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\n\t\tthis.count = 0;\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector$8 = new Vector3();\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$8 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$9 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.isSkeletonHelper = true;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tconst d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$a = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) { this.material.vertexColors = true; }\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\t\tconstructor: GridHelper,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.geometry.copy( source.geometry );\n\t\t\tthis.material.copy( source.material );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\t// create the radials\n\n\t\tfor ( var i = 0; i <= radials; i ++ ) {\n\n\t\t\tvar v = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tvar x = Math.sin( v ) * radius;\n\t\t\tvar z = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tvar color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( var i$1 = 0; i$1 <= circles; i$1 ++ ) {\n\n\t\t\tvar color$1 = ( i$1 & 1 ) ? color1 : color2;\n\n\t\t\tvar r = radius - ( radius / circles * i$1 );\n\n\t\t\tfor ( var j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tvar v$1 = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tvar x$1 = Math.sin( v$1 ) * r;\n\t\t\t\tvar z$1 = Math.cos( v$1 ) * r;\n\n\t\t\t\tvertices.push( x$1, 0, z$1 );\n\t\t\t\tcolors.push( color$1.r, color$1.g, color$1.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv$1 = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx$1 = Math.sin( v$1 ) * r;\n\t\t\t\tz$1 = Math.cos( v$1 ) * r;\n\n\t\t\t\tvertices.push( x$1, 0, z$1 );\n\t\t\t\tcolors.push( color$1.r, color$1.g, color$1.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) { size = 1; }\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\t_v1$5.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3$1.subVectors( _v2$3, _v1$5 );\n\n\t\tthis.lightPlane.lookAt( _v2$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2$3 );\n\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tvar _vector$b = new Vector3();\n\tvar _camera = new Camera();\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar pointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$b.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tvar _box$3 = new Box3();\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = function ( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box$3.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\tvar min = _box$3.min;\n\t\tvar max = _box$3.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t};\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.copy = function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, color ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tcolor = color || 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) { return; }\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\tif ( length === undefined ) { length = 1; }\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t};\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t};\n\n\tArrowHelper.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t};\n\n\tArrowHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author Emmett Lalish / elalish\n\t *\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow( 2, LOD_MAX );\n\n\t// The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\tvar EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\t// The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\tvar MAX_SAMPLES = 20;\n\n\tvar ENCODINGS = {};\n\tENCODINGS[ LinearEncoding ] = 0;\n\tENCODINGS[ sRGBEncoding ] = 1;\n\tENCODINGS[ RGBEEncoding ] = 2;\n\tENCODINGS[ RGBM7Encoding ] = 3;\n\tENCODINGS[ RGBM16Encoding ] = 4;\n\tENCODINGS[ RGBDEncoding ] = 5;\n\tENCODINGS[ GammaEncoding ] = 6;\n\n\tvar _flatCamera = new OrthographicCamera();\n\tvar ref = _createPlanes();\n\tvar _lodPlanes = ref._lodPlanes;\n\tvar _sizeLods = ref._sizeLods;\n\tvar _sigmas = ref._sigmas;\n\tvar _oldTarget = null;\n\n\t// Golden Ratio\n\tvar PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar INV_PHI = 1 / PHI;\n\n\t// Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\tvar _axisDirections = [\n\t\tnew Vector3( 1, 1, 1 ),\n\t\tnew Vector3( - 1, 1, 1 ),\n\t\tnew Vector3( 1, 1, - 1 ),\n\t\tnew Vector3( - 1, 1, - 1 ),\n\t\tnew Vector3( 0, PHI, INV_PHI ),\n\t\tnew Vector3( 0, PHI, - INV_PHI ),\n\t\tnew Vector3( INV_PHI, 0, PHI ),\n\t\tnew Vector3( - INV_PHI, 0, PHI ),\n\t\tnew Vector3( PHI, INV_PHI, 0 ),\n\t\tnew Vector3( - PHI, INV_PHI, 0 ) ];\n\n\tfunction PMREMGenerator( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._blurMaterial = _getBlurShader( MAX_SAMPLES );\n\t\tthis._equirectShader = null;\n\t\tthis._cubemapShader = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\tPMREMGenerator.prototype = {\n\n\t\tconstructor: PMREMGenerator,\n\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\t\tfromScene: function ( scene, sigma, near, far ) {\n\t\t\tif ( sigma === void 0 ) sigma = 0;\n\t\t\tif ( near === void 0 ) near = 0.1;\n\t\t\tif ( far === void 0 ) far = 100;\n\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\t\tif ( sigma > 0 ) {\n\n\t\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t\t}\n\n\t\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromEquirectangular: function ( equirectangular ) {\n\n\t\t\treturn this._fromTexture( equirectangular );\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromCubemap: function ( cubemap ) {\n\n\t\t\treturn this._fromTexture( cubemap );\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileCubemapShader: function () {\n\n\t\t\tif ( this._cubemapShader === null ) {\n\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\tthis._compileMaterial( this._cubemapShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileEquirectangularShader: function () {\n\n\t\t\tif ( this._equirectShader === null ) {\n\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\tthis._compileMaterial( this._equirectShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\tdispose: function () {\n\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif ( this._cubemapShader !== null ) { this._cubemapShader.dispose(); }\n\t\t\tif ( this._equirectShader !== null ) { this._equirectShader.dispose(); }\n\n\t\t\tfor ( var i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t\t}\n\n\t\t},\n\n\t\t// private interface\n\n\t\t_cleanup: function ( outputTarget ) {\n\n\t\t\tthis._pingPongRenderTarget.dispose();\n\t\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\t\toutputTarget.scissorTest = false;\n\t\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t\t},\n\n\t\t_fromTexture: function ( texture ) {\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets( texture );\n\t\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t_allocateTargets: function ( texture ) { // warning: null texture is valid\n\n\t\t\tvar params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR( texture ) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false,\n\t\t\t\tstencilBuffer: false\n\t\t\t};\n\n\t\t\tvar cubeUVRenderTarget = _createRenderTarget( params );\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( params );\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t_compileMaterial: function ( material ) {\n\n\t\t\tvar tmpMesh = new Mesh( _lodPlanes[ 0 ], material );\n\t\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t\t},\n\n\t\t_sceneToCubeUV: function ( scene, near, far, cubeUVRenderTarget ) {\n\n\t\t\tvar fov = 90;\n\t\t\tvar aspect = 1;\n\t\t\tvar cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\t\tvar upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\t\tvar forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tvar outputEncoding = renderer.outputEncoding;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\tvar clearColor = renderer.getClearColor();\n\t\t\tvar clearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\n\t\t\tvar background = scene.background;\n\t\t\tif ( background && background.isColor ) {\n\n\t\t\t\tbackground.convertSRGBToLinear();\n\t\t\t\t// Convert linear to RGBE\n\t\t\t\tvar maxComponent = Math.max( background.r, background.g, background.b );\n\t\t\t\tvar fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );\n\t\t\t\tbackground = background.multiplyScalar( Math.pow( 2.0, - fExp ) );\n\t\t\t\tvar alpha = ( fExp + 128.0 ) / 255.0;\n\t\t\t\trenderer.setClearColor( background, alpha );\n\t\t\t\tscene.background = null;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar col = i % 3;\n\t\t\t\tif ( col == 0 ) {\n\n\t\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.setClearColor( clearColor, clearAlpha );\n\n\t\t},\n\n\t\t_textureToCubeUV: function ( texture, cubeUVRenderTarget ) {\n\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tif ( texture.isCubeTexture ) {\n\n\t\t\t\tif ( this._cubemapShader == null ) {\n\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( this._equirectShader == null ) {\n\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tvar mesh = new Mesh( _lodPlanes[ 0 ], material );\n\n\t\t\tvar uniforms = material.uniforms;\n\n\t\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\t\tif ( ! texture.isCubeTexture ) {\n\n\t\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t\t}\n\n\t\t\tuniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\t\t\tuniforms[ 'outputEncoding' ].value = ENCODINGS[ cubeUVRenderTarget.texture.encoding ];\n\n\t\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\trenderer.render( mesh, _flatCamera );\n\n\t\t},\n\n\t\t_applyPMREM: function ( cubeUVRenderTarget ) {\n\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor ( var i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\t\tvar sigma = Math.sqrt( _sigmas[ i ] * _sigmas[ i ] - _sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\n\t\t\t\tvar poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\n\t\t},\n\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\t\t_blur: function ( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\t\tvar pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(\n\t\t\t\tcubeUVRenderTarget,\n\t\t\t\tpingPongRenderTarget,\n\t\t\t\tlodIn,\n\t\t\t\tlodOut,\n\t\t\t\tsigma,\n\t\t\t\t'latitudinal',\n\t\t\t\tpoleAxis );\n\n\t\t\tthis._halfBlur(\n\t\t\t\tpingPongRenderTarget,\n\t\t\t\tcubeUVRenderTarget,\n\t\t\t\tlodOut,\n\t\t\t\tlodOut,\n\t\t\t\tsigma,\n\t\t\t\t'longitudinal',\n\t\t\t\tpoleAxis );\n\n\t\t},\n\n\t\t_halfBlur: function ( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar blurMaterial = this._blurMaterial;\n\n\t\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\t\tconsole.error(\n\t\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t\t}\n\n\t\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\t\tvar STANDARD_DEVIATIONS = 3;\n\n\t\t\tvar blurMesh = new Mesh( _lodPlanes[ lodOut ], blurMaterial );\n\t\t\tvar blurUniforms = blurMaterial.uniforms;\n\n\t\t\tvar pixels = _sizeLods[ lodIn ] - 1;\n\t\t\tvar radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tvar samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\t\tconsole.warn( (\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES) );\n\n\t\t\t}\n\n\t\t\tvar weights = [];\n\t\t\tvar sum = 0;\n\n\t\t\tfor ( var i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\t\tvar x$1 = i / sigmaPixels;\n\t\t\t\tvar weight = Math.exp( - x$1 * x$1 / 2 );\n\t\t\t\tweights.push( weight );\n\n\t\t\t\tif ( i == 0 ) {\n\n\t\t\t\t\tsum += weight;\n\n\t\t\t\t} else if ( i < samples ) {\n\n\t\t\t\t\tsum += 2 * weight;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i$1 = 0; i$1 < weights.length; i$1 ++ ) {\n\n\t\t\t\tweights[ i$1 ] = weights[ i$1 ] / sum;\n\n\t\t\t}\n\n\t\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\t\tblurUniforms[ 'samples' ].value = samples;\n\t\t\tblurUniforms[ 'weights' ].value = weights;\n\t\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\t\tif ( poleAxis ) {\n\n\t\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t\t}\n\n\t\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\t\t\tblurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\n\t\t\tvar outputSize = _sizeLods[ lodOut ];\n\t\t\tvar x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\t\tvar y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) + 2 * outputSize * ( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\t\trenderer.setRenderTarget( targetOut );\n\t\t\trenderer.render( blurMesh, _flatCamera );\n\n\t\t}\n\n\t};\n\n\tfunction _isLDR( texture ) {\n\n\t\tif ( texture === undefined || texture.type !== UnsignedByteType ) { return false; }\n\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\n\t}\n\n\tfunction _createPlanes() {\n\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\n\t\tvar lod = LOD_MAX;\n\n\t\tfor ( var i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sizeLod = Math.pow( 2, lod );\n\t\t\t_sizeLods.push( sizeLod );\n\t\t\tvar sigma = 1.0 / sizeLod;\n\n\t\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t\t} else if ( i == 0 ) {\n\n\t\t\t\tsigma = 0;\n\n\t\t\t}\n\n\t\t\t_sigmas.push( sigma );\n\n\t\t\tvar texelSize = 1.0 / ( sizeLod - 1 );\n\t\t\tvar min = - texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\n\t\t\tvar position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\t\tvar uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\t\tvar faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\t\tfor ( var face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\t\tvar x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : - 1;\n\t\t\t\tvar coordinates = [\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y + 1, 0\n\t\t\t\t];\n\t\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\t\tvar fill = [ face, face, face, face, face, face ];\n\t\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t\t}\n\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t\t_lodPlanes.push( planes );\n\n\t\t\tif ( lod > LOD_MIN ) {\n\n\t\t\t\tlod --;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };\n\n\t}\n\n\tfunction _createRenderTarget( params ) {\n\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _setViewport( target, x, y, width, height ) {\n\n\t\ttarget.viewport.set( x, y, width, height );\n\t\ttarget.scissor.set( x, y, width, height );\n\n\t}\n\n\tfunction _getBlurShader( maxSamples ) {\n\n\t\tvar weights = new Float32Array( maxSamples );\n\t\tvar poleAxis = new Vector3( 0, 1, 0 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tname: 'SphericalGaussianBlur',\n\n\t\t\tdefines: { 'n': maxSamples },\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'samples': { value: 1 },\n\t\t\t\t'weights': { value: weights },\n\t\t\t\t'latitudinal': { value: false },\n\t\t\t\t'dTheta': { value: 0 },\n\t\t\t\t'mipInt': { value: 0 },\n\t\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform int samples;\\nuniform float weights[n];\\nuniform bool latitudinal;\\nuniform float dTheta;\\nuniform float mipInt;\\nuniform vec3 poleAxis;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define ENVMAP_TYPE_CUBE_UV\\n#include <cube_uv_reflection_fragment>\\n\\nvec3 getSample(float theta, vec3 axis) {\\n\\tfloat cosTheta = cos(theta);\\n\\t// Rodrigues' axis-angle rotation\\n\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t+ cross(axis, vOutputDirection) * sin(theta)\\n\\t\\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\\n\\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\\n}\\n\\nvoid main() {\\n\\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\\n\\tif (all(equal(axis, vec3(0.0))))\\n\\t\\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\\n\\taxis = normalize(axis);\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\\n\\tfor (int i = 1; i < n; i++) {\\n\\t\\tif (i >= samples)\\n\\t\\t\\tbreak;\\n\\t\\tfloat theta = dTheta * float(i);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\\n\\t}\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getEquirectShader() {\n\n\t\tvar texelSize = new Vector2( 1, 1 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tname: 'EquirectangularToCubeUV',\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'texelSize': { value: texelSize },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform vec2 texelSize;\\n\\n\" + (_getEncodings()) + \"\\n\\n#include <common>\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tvec3 outputDirection = normalize(vOutputDirection);\\n\\tvec2 uv = equirectUv( outputDirection );\\n\\tvec2 f = fract(uv / texelSize - 0.5);\\n\\tuv -= f * texelSize;\\n\\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x += texelSize.x;\\n\\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.y += texelSize.y;\\n\\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x -= texelSize.x;\\n\\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tvec3 tm = mix(tl, tr, f.x);\\n\\tvec3 bm = mix(bl, br, f.x);\\n\\tgl_FragColor.rgb = mix(tm, bm, f.y);\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCubemapShader() {\n\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tname: 'CubemapToCubeUV',\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform samplerCube envMap;\\n\\n\" + (_getEncodings()) + \"\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCommonVertexShader() {\n\n\t\treturn \"\\nprecision mediump float;\\nprecision mediump int;\\nattribute vec3 position;\\nattribute vec2 uv;\\nattribute float faceIndex;\\nvarying vec3 vOutputDirection;\\n\\n// RH coordinate system; PMREM face-indexing convention\\nvec3 getDirection(vec2 uv, float face) {\\n\\tuv = 2.0 * uv - 1.0;\\n\\tvec3 direction = vec3(uv, 1.0);\\n\\tif (face == 0.0) {\\n\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\t} else if (face == 1.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\t} else if (face == 2.0) {\\n\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\t} else if (face == 3.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\t} else if (face == 4.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\t} else if (face == 5.0) {\\n\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\t}\\n\\treturn direction;\\n}\\n\\nvoid main() {\\n\\tvOutputDirection = getDirection(uv, faceIndex);\\n\\tgl_Position = vec4( position, 1.0 );\\n}\\n\\t\";\n\n\t}\n\n\tfunction _getEncodings() {\n\n\t\treturn \"\\nuniform int inputEncoding;\\nuniform int outputEncoding;\\n\\n#include <encodings_pars_fragment>\\n\\nvec4 inputTexelToLinear(vec4 value){\\n\\tif(inputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(inputEncoding == 1){\\n\\t\\treturn sRGBToLinear(value);\\n\\t}else if(inputEncoding == 2){\\n\\t\\treturn RGBEToLinear(value);\\n\\t}else if(inputEncoding == 3){\\n\\t\\treturn RGBMToLinear(value, 7.0);\\n\\t}else if(inputEncoding == 4){\\n\\t\\treturn RGBMToLinear(value, 16.0);\\n\\t}else if(inputEncoding == 5){\\n\\t\\treturn RGBDToLinear(value, 256.0);\\n\\t}else{\\n\\t\\treturn GammaToLinear(value, 2.2);\\n\\t}\\n}\\n\\nvec4 linearToOutputTexel(vec4 value){\\n\\tif(outputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(outputEncoding == 1){\\n\\t\\treturn LinearTosRGB(value);\\n\\t}else if(outputEncoding == 2){\\n\\t\\treturn LinearToRGBE(value);\\n\\t}else if(outputEncoding == 3){\\n\\t\\treturn LinearToRGBM(value, 7.0);\\n\\t}else if(outputEncoding == 4){\\n\\t\\treturn LinearToRGBM(value, 16.0);\\n\\t}else if(outputEncoding == 5){\\n\\t\\treturn LinearToRGBD(value, 256.0);\\n\\t}else{\\n\\t\\treturn LinearToGamma(value, 2.2);\\n\\t}\\n}\\n\\nvec4 envMapTexelToLinear(vec4 color) {\\n\\treturn inputTexelToLinear(color);\\n}\\n\\t\";\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\n\t} );\n\n\tFrustum.prototype.setFromMatrix = function ( m ) {\n\n\t\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\t\treturn this.setFromProjectionMatrix( m );\n\n\t};\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( MathUtils, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn MathUtils.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn MathUtils.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix3( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix4( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( Mesh.prototype, {\n\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( Mesh.prototype, {\n\n\t\tdrawMode: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\t\treturn TrianglesDrawMode;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InstancedBufferGeometry.prototype, {\n\n\t\tmaxInstancedCount: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );\n\t\t\t\treturn this.instanceCount;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );\n\t\t\t\tthis.instanceCount = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Raycaster.prototype, {\n\n\t\tlinePrecision: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\treturn this.params.Line.threshold;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\tthis.params.Line.threshold = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\t\treturn this.xr;\n\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\t\t\t\treturn 1.0;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\t\treturn new WebGLCubeRenderTarget( width, options );\n\n\t}\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","console.warn( \"THREE.OrbitControls: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/index.html#manual/en/introduction/Import-via-modules.\" );\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author ScieCode / http://github.com/sciecode\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\tvar twoPI = 2 * Math.PI;\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\n\t\t\tvar min = scope.minAzimuthAngle;\n\t\t\tvar max = scope.maxAzimuthAngle;\n\n\t\t\tif ( isFinite ( min ) && isFinite( max ) ) {\n\n\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\tif ( min < max ) {\n\n\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase THREE.MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// make sure element can receive keys.\n\n\tif ( scope.domElement.tabIndex === - 1 ) {\n\n\t\tscope.domElement.tabIndex = 0;\n\n\t}\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nTHREE.MapControls = function ( object, domElement ) {\n\n\tTHREE.OrbitControls.call( this, object, domElement );\n\n\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n\tthis.touches.ONE = THREE.TOUCH.PAN;\n\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n};\n\nTHREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n","export function getBrick(index, number, odd, color) {\r\n  let radius = 3;\r\n  let angle = (index * 2 * Math.PI) / number;\r\n\r\n  let width = 2 * radius * Math.sin(Math.PI / number) + odd*Math.PI/number;\r\n\r\n  let mesh = new THREE.Mesh(\r\n    new THREE.BoxBufferGeometry(width, 1, 1),\r\n    new THREE.MeshLambertMaterial({ color: color? 0xcccccc : 0x333333 }),\r\n  );\r\n  mesh.position.set(\r\n    (radius + 0.45) * Math.sin(angle), 0, \r\n    (radius + 0.45) * Math.cos(angle));\r\n  mesh.rotation.y = angle;\r\n  return mesh;\r\n}","// Ensure ThreeJS is in global scope for the 'examples/'\nglobal.THREE = require('three');\n\nimport { getBrick } from './getBrick';\n\n// Include any additional ThreeJS examples below\nrequire('three/examples/js/controls/OrbitControls');\n\nconst canvasSketch = require('canvas-sketch');\n\nconst settings = {\n  duration: 3,\n  // Make the loop animated\n  animate: true,\n  // Get a WebGL canvas rather than 2D\n  context: 'webgl',\n  attributes: { antialias: true },\n};\n\n\nconst easeInQuart = t => t*t*t*t;\n\nconst sketch = ({ context }) => {\n  // Create a renderer\n  const renderer = new THREE.WebGLRenderer({\n    context,\n  });\n\n  // WebGL background color\n  renderer.setClearColor('#000', 1);\n\n  // Setup a camera\n  const camera = new THREE.PerspectiveCamera(50, 1, 0.01, 100);\n  camera.position.set(0, 6, 15);\n  camera.lookAt(new THREE.Vector3());\n\n  // Setup camera controller\n  const controls = new THREE.OrbitControls(camera, context.canvas);\n\n  // Setup your scene\n  const scene = new THREE.Scene();\n  scene.position.y = 1;\n\n  // Setup a mesh with geometry + material\n  let group = new THREE.Group();\n  scene.add(group);\n\n  let number = 12;\n  let rows = 10;\n  let animate = [];\n  let random = Array(4)\n    .fill()\n    .map((a) => Array(number));\n\n  for (let i = 0; i < number; i++) {\n    for (let j = 0; j < 4; j++) {\n      random[j][i] = Math.random() < 0.5 ? 0 : 1;\n    }\n  }\n\n  for (let j = 0; j < rows; j++) {\n    for (let i = 0; i < number; i++) {\n      const mesh = getBrick(i, number, j % 2, random[j % 4][i]);\n      const duplicate = getBrick(i, number, j % 2, random[j % 4][i]);\n\n      mesh.position.setY(-j);\n      duplicate.position.setY(-j);\n\n      group.add(mesh);\n      group.add(duplicate);\n\n      duplicate.visible = false;\n\n      animate.push({\n        y: -j,\n        row: j,\n        mesh: mesh,\n        duplicate: duplicate,\n        offset: j/4 + Math.random()/4\n      });\n    }\n  }\n\n  scene.add(new THREE.AmbientLight('#ffffff'));\n\n  const light = new THREE.DirectionalLight('#ffffff', 1.5, 15.5);\n  light.position.set(4, 2, 4);\n  scene.add(light);\n\n  // draw each frame\n  return {\n    // Handle resize events here\n    resize({ pixelRatio, viewportWidth, viewportHeight }) {\n      renderer.setPixelRatio(pixelRatio);\n      renderer.setSize(viewportWidth, viewportHeight, false);\n      camera.aspect = viewportWidth / viewportHeight;\n      camera.updateProjectionMatrix();\n    },\n    // Update & render your scene here\n    render({ time, playhead }) {\n      // playhead = 1 - playhead;\n      group.position.y = -playhead * 4;\n\n      animate.forEach((m) => {\n        let p = playhead + m.offset;\n        // m.mesh.position.setY(m.y + playhead * 2);\n\n        if (m.row < 4) {\n          let p = playhead + m.offset;\n          m.mesh.position.setY(m.y + p * 10);\n          if (p > 1) {\n            p = easeInQuart(p-1);\n            m.mesh.position.setY(m.y + (1-p) * 10 + playhead * 4);\n            m.duplicate.visible = true;\n          } else {\n            p = easeInQuart(p);\n            m.mesh.position.setY(m.y + (1-p) * 10);\n            m.duplicate.visible = false;\n          }\n        } else {\n          m.duplicate.visible = false;\n        }\n      });\n      controls.update();\n      renderer.render(scene, camera);\n    },\n    // Dispose of events & renderer for cleaner hot-reloading\n    unload() {\n      controls.dispose();\n      renderer.dispose();\n    },\n  };\n};\n\ncanvasSketch(sketch, settings);\n","\nglobal.CANVAS_SKETCH_DEFAULT_STORAGE_KEY = window.location.href;\n"]}